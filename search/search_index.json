{"config":{"lang":["en","zh"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u4e3b\u9875","text":"\u6211\u200b\u662f\u200b\u90d1\u5929\u4f50\u200b\uff0c\u200b\u76ee\u524d\u200b\u4e13\u6ce8\u200b\u4e8e\u200b\u8fdc\u7a0b\u684c\u9762\u200b\u7684\u200b\u5f00\u53d1\u200b\uff0c\u200b\u4e3b\u8981\u200b\u4f7f\u7528\u200bC++\uff0c\u200b\u559c\u6b22\u200b\u7814\u7a76\u200b\u9ad8\u6027\u80fd\u200b\u4e0e\u200b\u4ee3\u7801\u200b\u67b6\u6784\u200b\u3002      \u200b\u613f\u666f\u200b: \u200b\u6280\u672f\u200b\u5206\u4eab\u200b\uff0c\u200b\u5171\u521b\u200b\u8f89\u714c\u200b \u200b\u4f7f\u547d\u200b: \u200b\u521b\u9020\u200b\u4ef7\u503c\u200b\uff0c\u200b\u6210\u5c31\u200b\u5ba2\u6237\u200b\uff0c\u200b\u670d\u52a1\u884c\u4e1a\u200b \u200b\u4ef7\u503c\u89c2\u200b: \u200b\u6316\u6398\u200b\u529f\u80fd\u200b\uff0c\u200b\u96c6\u5927\u6210\u8005\u200b\uff0c\u200b\u7cbe\u51c6\u200b\u670d\u52a1\u200b \u200b\u4e2a\u4eba\u200b\u4ea7\u54c1\u200b\uff1a Logo \u200b\u4ea7\u54c1\u200b Github Gitee \u200b\u7b80\u8ff0\u200b \u200b\u6280\u672f\u200b \u200b\u5929\u4f50\u200b.\u200b\u76d8\u53e4\u200b\u65a7\u200b \u200b\u5373\u65f6\u901a\u8baf\u200b\u5e73\u53f0\u200b \u200b\u5929\u4f50\u200b.\u200b\u6606\u4ed1\u955c\u200b \u200b\u672c\u5730\u200b\u6784\u5efa\u200b\u5de5\u5177\u200b \u200b\u5929\u4f50\u200b.\u200b\u4f0f\u7fb2\u200b\u7434\u200b \u200b\u5f00\u53d1\u200b\u4e2d\u200b \u200b\u4e2a\u4eba\u200b\u6a21\u5757\u200b\uff1a Logo \u200b\u6a21\u5757\u200b Github Gitee \u200b\u7b80\u8ff0\u200b \u200b\u6280\u672f\u200b \u200b\u5929\u4f50\u200b.\u200b\u5d06\u5cd2\u200b\u5370\u200b \u200b\u5d29\u6e83\u200b\u68c0\u6d4b\u200b\u5206\u6790\u200b \u200b\u5929\u4f50\u200b.\u200b\u4e7e\u5764\u888b\u200b NoSql\u200b\u6570\u636e\u5e93\u200b \u200b\u5929\u4f50\u200b.\u200b\u8ffd\u65e5\u200b\u9774\u200b UDP\u200b\u53ef\u9760\u200b\u6570\u636e\u4f20\u8f93\u200b \u200b\u5929\u4f50\u200b.\u200b\u6df7\u6c8c\u200b\u949f\u200b \u200b\u8f6f\u4ef6\u200b\u8bb8\u53ef\u200b\u6388\u6743\u200b \u200b\u5929\u4f50\u200b.\u200b\u70bc\u200b\u5996\u200b\u58f6\u200b \u200b\u5185\u5b58\u200b\u6c60\u200b \u200b\u5929\u4f50\u200b.\u200b\u795e\u519c\u200b\u9f0e\u200b \u200b\u5f00\u53d1\u200b\u4e2d\u200b \u200b\u5929\u4f50\u200b.\u200b\u73b2\u73d1\u5854\u200b \u200b\u5f00\u53d1\u200b\u4e2d\u200b \u200b\u5929\u4f50\u200b.\u200b\u5c01\u5929\u200b\u5370\u200b \u200b\u5f00\u53d1\u200b\u4e2d\u200b        \u200b\u52a0\u200bQQ\u200b\u597d\u53cb\u200b             \u200b\u52a0\u5fae\u4fe1\u200b\u597d\u53cb\u200b             \u200b\u5173\u6ce8\u200b\u5fae\u4fe1\u200b\u516c\u4f17\u200b\u53f7\u200b             \u200b\u652f\u4ed8\u5b9d\u200b\u8d5e\u52a9\u200b             \u200b\u5fae\u4fe1\u200b\u8d5e\u52a9"},{"location":"component/tianzuo.Hundun/","title":"\u5929\u4f50\u200b.\u200b\u6df7\u6c8c\u200b\u949f","text":""},{"location":"component/tianzuo.Hundun/#_2","title":"\u5929\u4f50\u200b.\u200b\u6df7\u6c8c\u200b\u949f","text":"\u64cd\u4f5c\u7cfb\u7edf\u200b \u200b\u7f16\u8bd1\u5668\u200b \u200b\u7f16\u7a0b\u8bed\u8a00"},{"location":"component/tianzuo.Hundun/#_3","title":"\u7b80\u4ecb","text":"<p>\u200b\u5929\u4f50\u200b.\u200b\u6df7\u6c8c\u200b\u949f\u200b \u200b\u4fdd\u62a4\u200b\u4f60\u200b\u5f00\u53d1\u200b\u7684\u200b\u8f6f\u4ef6\u200b\u4e0d\u200b\u53d7\u200b\u672a\u7ecf\u200b\u6388\u6743\u200b\u7684\u200b\u62f7\u8d1d\u200b\uff0c\u200b\u53ca\u65f6\u200b\u9650\u5236\u200b\u4f7f\u7528\u200b\uff0c\u200b\u53ea\u200b\u5728\u200b\u7279\u5b9a\u200b\u7684\u200b\u673a\u5668\u200b\u4e0a\u200b\u4f7f\u7528\u200b\u3002</p> <p>\u200b\u4f20\u8bf4\u200b: \u200b\u4e43\u662f\u200b\u4e0a\u53e4\u200b\u5341\u5927\u200b\u795e\u5668\u200b\u4e4b\u200b\u9996\u200b\uff0c\u200b\u88ab\u8a89\u4e3a\u200b\u529b\u91cf\u200b\u6700\u200b\u5f3a\u5927\u200b\u7684\u200b\u795e\u5668\u200b\u3002 \u200b\u4e1c\u7687\u949f\u200b\u4e4b\u200b\u6240\u200b\u88ab\u200b\u79f0\u4e4b\u4e3a\u200b\u4e1c\u7687\u949f\u200b\uff0c\u200b\u5176\u200b\u62e5\u6709\u8005\u200b\u4fbf\u662f\u200b\u4e1c\u7687\u592a\u200b\u4e00\u200b\uff0c\u200b\u4e1c\u7687\u592a\u200b\u4e00\u662f\u200b\u4e0a\u53e4\u200b\u795e\u8bdd\u200b\u4e2d\u200b\uff0c\u200b\u540d\u5217\u200b\u524d\u4e94\u200b\u7684\u200b\u5927\u795e\u200b\uff0c\u200b\u4f5c\u4e3a\u200b\u5176\u200b\u6cd5\u5b9d\u200b\u7684\u200b\u4e1c\u7687\u949f\u200b\uff0c\u200b\u5b9e\u529b\u200b\u4e5f\u200b\u4e0d\u8d56\u200b\u3002\u200b\u76f8\u4f20\u200b\u4e1c\u7687\u949f\u200b\u662f\u200b\u5929\u754c\u200b\u4e4b\u200b\u95e8\u200b\uff0c\u200b\u53ef\u63a7\u200b\u65e5\u6708\u200b\uff0c\u200b\u80fd\u200b\u53d8\u200b\u9634\u9633\u200b\uff0c\u200b\u4e1c\u7687\u949f\u200b\u662f\u200b\u4e00\u79cd\u200b\u9632\u5fa1\u6027\u200b\u5f88\u5f3a\u200b\uff0c\u200b\u653b\u51fb\u529b\u200b\u8f83\u5f31\u200b\uff0c\u200b\u4f46\u662f\u200b\u7206\u53d1\u529b\u200b\u60ca\u4eba\u200b\u7684\u200b\u6cd5\u5668\u200b\uff0c\u200b\u4e00\u65e6\u200b\u7206\u53d1\u200b\u771f\u6b63\u200b\u5b9e\u529b\u200b\uff0c\u200b\u57fa\u672c\u4e0a\u200b\u80fd\u591f\u200b\u6bc1\u5929\u706d\u200b\u5730\u200b\uff0c\u200b\u541e\u566c\u200b\u8bf8\u5929\u200b\u3002</p>"},{"location":"component/tianzuo.Hundun/#_4","title":"\u76ee\u6807","text":"<p>\u200b\u4fdd\u62a4\u200b\u4f60\u200b\u5f00\u53d1\u200b\u7684\u200b\u8f6f\u4ef6\u200b\u4e0d\u200b\u53d7\u200b\u672a\u7ecf\u200b\u6388\u6743\u200b\u7684\u200b\u62f7\u8d1d\u200b\uff0c\u200b\u53ca\u65f6\u200b\u9650\u5236\u200b\u4f7f\u7528\u200b\uff0c\u200b\u53ea\u200b\u5728\u200b\u7279\u5b9a\u200b\u7684\u200b\u673a\u5668\u200b\u4e0a\u200b\u4f7f\u7528\u200b\u3002</p> <p></p>"},{"location":"component/tianzuo.Hundun/#_5","title":"\u529f\u80fd","text":"<ul> <li>\ud83e\udde9 \u200b\u96c6\u6210\u200b\u7b80\u5355\u200b</li> <li>\ud83e\udea2 \u200b\u6570\u636e\u200b\u7ecf\u8fc7\u200b\u7b97\u6cd5\u200b\u52a0\u5bc6\u200b</li> <li>\ud83d\udd12 \u200b\u53ef\u200b\u6309\u200b\u65f6\u95f4\u200b\u9650\u5236\u200b, \u200b\u53ef\u200b\u6309\u200b\u8bbe\u5907\u200bID\u200b\u9650\u5236\u200b, \u200b\u4e5f\u200b\u53ef\u200b\u540c\u65f6\u200b\u9650\u5236\u200b</li> </ul>"},{"location":"component/tianzuo.Hundun/#_6","title":"\u6d41\u7a0b","text":"<p>\u200b\u5ba2\u6237\u7aef\u200b\u8f6f\u4ef6\u200b\u4e2d\u200b\u8c03\u7528\u200bget_machineid\u200b\u63a5\u53e3\u200b\u53ef\u4ee5\u200b\u83b7\u53d6\u200b\u5230\u200b\u673a\u5668\u7801\u200b(\u200b\u6ce8\u518c\u7801\u200b), \u200b\u7136\u540e\u200b\u901a\u8fc7\u200bmaker\u200b\u7a0b\u5e8f\u200b\u8f93\u5165\u200b\u6ce8\u518c\u7801\u200b/\u200b\u622a\u6b62\u200b\u65f6\u95f4\u200b\u6765\u200b\u521b\u5efa\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b, maker\u200b\u751f\u6210\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u65f6\u200b\u9700\u8981\u200b\u8bfb\u53d6\u200b\u79c1\u94a5\u200b\u6587\u4ef6\u200b, \u200b\u5bf9\u5e94\u200b\u7684\u200b\u516c\u94a5\u200b\u4fe1\u606f\u200b\u5728\u200b\u5ba2\u6237\u7aef\u200b\u8f6f\u4ef6\u200b\u4e2d\u200b\u8fdb\u884c\u200b\u8f93\u5165\u200b. \u200b\u5f53\u200b\u8bb8\u53ef\u8bc1\u200b\u53d1\u5e03\u200b\u5230\u200b\u5ba2\u6237\u7aef\u200b\u672c\u5730\u200b\u540e\u200b, \u200b\u5ba2\u6237\u7aef\u200b\u542f\u52a8\u200b\u8c03\u7528\u200bcheck\u200b\u63a5\u53e3\u200b\u8fdb\u884c\u200b\u9a8c\u8bc1\u200b. </p> <ol> <li>\u200b\u751f\u6210\u200b\u516c\u94a5\u200b\u79c1\u94a5\u200b\u914d\u5bf9\u200b\u7684\u200b\u4fe1\u606f\u200b\u6587\u4ef6\u200b.</li> </ol> <pre><code>// \u200b\u521b\u5efa\u200b\u79c1\u94a5\u200b\u6587\u4ef6\u200b\n(1) openssl genrsa -out privatekey.pem 2048                 \n\n// \u200b\u6839\u636e\u200b\u79c1\u94a5\u200b\u6587\u4ef6\u521b\u5efa\u200b\u5bf9\u5e94\u200b\u7684\u200b\u516c\u94a5\u200b\u6587\u4ef6\u200b          \n(2) openssl rsa -in privatekey.pem -pubout -out publickey.pem         \n</code></pre> <ol> <li>\u200b\u901a\u8fc7\u200bmaker\u200b\u547d\u4ee4\u884c\u200b\u521b\u5efa\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b:</li> </ol> <pre><code>// \u200b\u4ec5\u200b\u751f\u6210\u200b\u65f6\u95f4\u200b\u9650\u5236\u200b\u7684\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\nmaker.exe --type=1 --date=\"2024-04-30\" --keyfile=\"privatekey.pem\"\n\n// \u200b\u4ec5\u200b\u751f\u6210\u200b\u673a\u5668\u7801\u200b\u9650\u5236\u200b\u7684\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\nmaker.exe --type=2 --id=\"9ea03801651cd3d93add9d42a07d3c4b\" --keyfile=\"privatekey.pem\"\n\n// \u200b\u751f\u6210\u200b\u540c\u65f6\u200b\u62e5\u6709\u200b\u65f6\u95f4\u200b\u9650\u5236\u200b\u548c\u200b\u673a\u5668\u7801\u200b\u9650\u5236\u200b\u7684\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\nmaker.exe --type=3 --date=\"2024-04-30\" --id=\"9ea03801651cd3d93add9d42a07d3c4b\" --keyfile=\"privatekey.pem\"\n</code></pre>"},{"location":"component/tianzuo.Hundun/#_7","title":"\u4f8b\u5b50","text":"cpp <pre><code>#include &lt;iostream&gt;\n#include \"../../include/tianzuo.HundunInterface.h\" // \u200b\u63a5\u53e3\u200b\u5934\u6587\u4ef6\u200b interface heaher file\n\n#define Get_Machineid 0\n\nint main() {\n    std::string public_key = \"-----BEGIN PUBLIC KEY-----\\n\"\n        \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\"\n        \"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\"\n        \"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\"\n        \"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\"\n        \"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\"\n        \"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\"\n        \"lQIDAQAB\\n\"\n        \"-----END PUBLIC KEY-----\\n\";\n\n    tianzuo_HundunInt hundun;\n#if Get_Machineid\n    const char* id = hundun.get_machineid();\n    if (id == nullptr) {\n        std::cerr &lt;&lt; \"hundun.get_machineid error\" &lt;&lt; std::endl;\n        return -1;\n    }\n    std::cout &lt;&lt; \"id: \" &lt;&lt; id &lt;&lt; std::endl;\n#else\n    int days = 0;\n    int error_code = tianzuo_Hundun_check(public_key.c_str(), \"license.dat\", &amp;days);\n    if (error_code != Hundun_error_code_success) {\n        std::cout &lt;&lt; \"hundun.check error_code: \" &lt;&lt; error_code &lt;&lt; \" error_string: \" &lt;&lt; Hundun_error_code_strings_cn[error_code] &lt;&lt; std::endl;\n        return -1;\n    }\n    std::cout &lt;&lt; \"hundun.check days: \" &lt;&lt; days &lt;&lt; std::endl;\n#endif\n    return 0;\n}\n\n</code></pre> python <pre><code>from ctypes import *\nfrom enum import Enum\nimport ctypes\n\n\ntianzuo_HundunLib = cdll.LoadLibrary('./tianzuo.Hundun.dll')\n\n\nclass Hundun_error_code(Enum):\n    Hundun_error_code_success       = 0 # \u200b\u6210\u529f\u200b\n    Hundun_error_code_parameter     = 1 # \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\n    Hundun_error_code_parse         = 2 # \u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\n    Hundun_error_code_licensefile   = 3 # \u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\n    Hundun_error_code_outofdate     = 4 # \u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\n    Hundun_error_code_unmatched     = 5 # \u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\n\n\ndef tianzuo_Hundun_check(public_key_string, license_file, days):\n    tianzuo_HundunLib.tianzuo_Hundun_check.argtypes = [c_char_p, c_char_p, ctypes.POINTER(ctypes.c_int)]\n    return tianzuo_HundunLib.tianzuo_Hundun_check(public_key_string, license_file, days)\n\n\ndef main():\n    public_key = (b\"-----BEGIN PUBLIC KEY-----\\n\"\n                  b\"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\"\n                  b\"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\"\n                  b\"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\"\n                  b\"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\"\n                  b\"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\"\n                  b\"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\"\n                  b\"lQIDAQAB\\n\"\n                  b\"-----END PUBLIC KEY-----\\n\")\n\n    Hundun_error_code_strings_cn = (\n        \"\u200b\u6210\u529f\u200b\",\n        \"\u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\",\n        \"\u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\")\n\n    Hundun_error_code_strings = (\n        \"success\",\n        \"parameter error\",\n        \"parse error\",\n        \"license filename error\",\n        \"out of date\",\n        \"machine id unmatched\")\n\n    days = ctypes.c_int()\n    license_file = b\"license.dat\"\n    error_code = tianzuo_Hundun_check(public_key, license_file, days)\n    if error_code != Hundun_error_code.Hundun_error_code_success.value:\n        print(\"hundun.check error_code: {} error_string: {}\".format(error_code, Hundun_error_code_strings_cn[error_code]))\n        return\n\n    int_days = days.value\n    print(\"hundun.check days: {}\".format(int_days))\n\n\nif __name__ == '__main__':\n    main()\n\n</code></pre> java <pre><code>package cn.camelsoft;\n\nimport com.sun.jna.Library;\nimport com.sun.jna.Native;\n\nenum Hundun_error_code {\n    Hundun_error_code_success       (0),            ///&lt;  \u200b\u6210\u529f\u200b\n    Hundun_error_code_parameter     (1),            ///&lt;  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\n    Hundun_error_code_parse         (2),            ///&lt;  \u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\n    Hundun_error_code_licensefile   (3),            ///&lt;  \u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\n    Hundun_error_code_outofdate     (4),            ///&lt;  \u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\n    Hundun_error_code_unmatched     (5);            ///&lt;  \u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\n\n    private int value;\n\n    Hundun_error_code(int value) {\n        this.value = value;\n    }\n\n    public int getValue() {\n        return value;\n    }\n}\n\npublic class Main {\n    public interface tianzuo_HundunLib extends Library {\n        tianzuo_HundunLib instance = (tianzuo_HundunLib) Native.load(\"./tianzuo.Hundun.dll\", tianzuo_HundunLib.class);\n        int tianzuo_Hundun_check(String public_key_string, String license_file, int[] days);\n    }\n\n    public static void main(String[] args) {\n        System.setProperty(\"jna.encoding\",\"UTF-8\");\n\n        String public_key = \"-----BEGIN PUBLIC KEY-----\\n\" +\n        \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\" +\n        \"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\" +\n        \"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\" +\n        \"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\" +\n        \"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\" +\n        \"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\" +\n        \"lQIDAQAB\\n\" +\n        \"-----END PUBLIC KEY-----\\n\";\n\n        String[] Hundun_error_code_strings_cn = {\"\u200b\u6210\u529f\u200b\",\n                \"\u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\",\n                \"\u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\",\n                \"\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\",\n                \"\u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\",\n                \"\u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\"};\n\n        String[] Hundun_error_code_strings = {\n                \"success\",\n                \"parameter error\",\n                \"parse error\",\n                \"license filename error\",\n                \"out of date\",\n                \"machine id unmatched\"\n        };\n\n        int[] days = {0};\n        int error_code = tianzuo_HundunLib.instance.tianzuo_Hundun_check(public_key, \"license.dat\", days);\n        if (error_code != Hundun_error_code.Hundun_error_code_success.getValue()) {\n            System.out.printf(\"hundun.check error_code: %d error_string: %s\\n\", error_code, Hundun_error_code_strings_cn[error_code]);\n            return;\n        }\n        System.out.printf(\"hundun.check days: : %d\\n\", days[0]);\n    }\n}\n\n</code></pre> csharp <pre><code>\n\nusing System.Runtime.InteropServices;\n\nclass Program {\n    [DllImport(\"tianzuo.Hundun.dll\")]\n    public static extern int tianzuo_Hundun_check(string public_key_string, string license_file, ref int days);\n\n    public enum Hundun_error_code\n    {\n        Hundun_error_code_success,                ///&lt;  \u200b\u6210\u529f\u200b\n        Hundun_error_code_parameter,              ///&lt;  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\n        Hundun_error_code_parse,                  ///&lt;  \u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\n        Hundun_error_code_licensefile,            ///&lt;  \u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\n        Hundun_error_code_outofdate,              ///&lt;  \u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\n        Hundun_error_code_unmatched               ///&lt;  \u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\n    }\n\n    public string[] Hundun_error_code_strings_cn = {\n        \"\u200b\u6210\u529f\u200b\",\n        \"\u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\",\n        \"\u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\"\n    };\n\n    public string[] Hundun_error_code_strings = {\n        \"success\",\n        \"parameter error\",\n        \"parse error\",\n        \"license filename error\",\n        \"out of date\",\n        \"machine id unmatched\"\n    };\n\n    static void Main(string[] args) {\n        string public_key = \"-----BEGIN PUBLIC KEY-----\\n\" +\n            \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\" +\n            \"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\" +\n            \"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\" +\n            \"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\" +\n            \"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\" +\n            \"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\" +\n            \"lQIDAQAB\\n\" +\n            \"-----END PUBLIC KEY-----\\n\";\n\n        int days = 0;\n        int error_code = tianzuo_Hundun_check(public_key, \"license.dat\", ref days);\n        if (error_code != (int)Hundun_error_code.Hundun_error_code_success)\n        {\n            Program myProgram = new Program();\n            Console.WriteLine(\"hundun.check error_code: \" + error_code + \" error_string: \" + myProgram.Hundun_error_code_strings_cn[error_code]);\n            return;\n        }\n        Console.WriteLine(\"hundun.check days: \" + days);\n\n    }\n\n}\n</code></pre> javascript <pre><code>\nHundun_error_code_success     = 0 //  \u200b\u6210\u529f\u200b\nHundun_error_code_parameter   = 1 //  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\nHundun_error_code_parse       = 2 //  \u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\nHundun_error_code_licensefile = 3 //  \u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\nHundun_error_code_outofdate   = 4 //  \u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\nHundun_error_code_unmatched   = 5 //  \u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\n\nlet ffi = require('ffi-napi')\nconst ref = require('ref-napi');\n\nlet tianzuo_HundunLib = ffi.Library(\"tianzuo.Hundun.dll\", {\n    'tianzuo_Hundun_check':['int',['string','string','pointer']],\n})\n\nlet public_key = \"-----BEGIN PUBLIC KEY-----\\n\" +\n\"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\" +\n\"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\" +\n\"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\" +\n\"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\" +\n\"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\" +\n\"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\" +\n\"lQIDAQAB\\n\" +\n\"-----END PUBLIC KEY-----\\n\";\n\nconst Hundun_error_code_strings_cn = [\n    \"\u200b\u6210\u529f\u200b\",\n    \"\u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\",\n    \"\u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\",\n    \"\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\",\n    \"\u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\",\n    \"\u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\"];\n\nconst Hundun_error_code_strings = [\n    \"success\",\n    \"parameter error\",\n    \"parse error\",\n    \"license filename error\",\n    \"out of date\",\n    \"machine id unmatched\"];\n\ndays = Buffer.alloc(1 * ref.sizeof.int);\nlet error_code = tianzuo_HundunLib.tianzuo_Hundun_check(public_key, \"license.dat\", days);\nif (error_code !== Hundun_error_code_success) {\n    console.log(\"hundun.check error_code: %d error_string: %s\\n\", error_code, Hundun_error_code_strings_cn[error_code]);\n    return -1;\n}\ndays_data = ref.get(days, 0, ref.types.int);\nconsole.log(\"hundun.check days: %d\\n\", days_data);\n\n</code></pre> php <pre><code>&lt;?php\n\n// \u200b\u68c0\u67e5\u200b\u662f\u5426\u200b\u52a0\u8f7d\u200b\u4e86\u200b FFI \u200b\u6269\u5c55\u200b\nif (extension_loaded('ffi')) {\n    echo(\"\u200b\u5df2\u200b\u542f\u7528\u200b FFI \u200b\u6269\u5c55\u200b\\n\");\n} else {\n    die(\"\u200b\u672a\u200b\u542f\u52a8\u200b FFI \u200b\u6269\u5c55\u200b\\n\");\n}\n\nenum Hundun_error_code\n{\n    const Hundun_error_code_success = 0;        //  \u200b\u6210\u529f\u200b\n    const Hundun_error_code_parameter = 1;      //  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\n    const Hundun_error_code_parse = 2;          //  \u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\n    const Hundun_error_code_licensefile = 3;    //  \u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\n    const Hundun_error_code_outofdate = 4;      //  \u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\n    const Hundun_error_code_unmatched = 5;      //  \u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\n}\n\n$ffi = FFI::cdef(\"\n    int tianzuo_Hundun_check(const char* public_key_string, const char* license_file, int* days);\n\", \"tianzuo.Hundun.dll\");\n\n$public_key = \"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\np1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\nLrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\nENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\nz1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\nouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\nlQIDAQAB\n-----END PUBLIC KEY-----\\n\";\n\ndefine('Hundun_error_code_strings_cn', [\n    \"\u200b\u6210\u529f\u200b\",\n    \"\u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\",\n    \"\u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\",\n    \"\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\",\n    \"\u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\",\n    \"\u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\"]);\n\ndefine('Hundun_error_code_strings', [\n    \"success\",\n    \"parameter error\",\n    \"parse error\",\n    \"license filename error\",\n    \"out of date\",\n    \"machine id unmatched\"\n]);\n\n$days = FFI::new(\"int\");\n$error_code = $ffi-&gt;tianzuo_Hundun_check($public_key, \"license.dat\", FFI::addr($days));\nif ($error_code != Hundun_error_code::Hundun_error_code_success) {\n    echo \"hundun.check error_code: \" . $error_code . \" error_string: \" . Hundun_error_code_strings_cn[$error_code] . \"\\n\";\n    return;\n}\necho \"hundun.check days: \" . $days-&gt;cdata . \"\\n\";\n\n?&gt;\n</code></pre> vb <pre><code>\nImports System.Runtime.InteropServices\n\nEnum Hundun_error_code\n    Hundun_error_code_success = 0 '  \u200b\u6210\u529f\u200b\n    Hundun_error_code_parameter = 1 '  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\n    Hundun_error_code_parse = 2 '  \u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\n    Hundun_error_code_licensefile = 3 '  \u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\n    Hundun_error_code_outofdate = 4 '  \u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\n    Hundun_error_code_unmatched = 5 '  \u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\nEnd Enum\n\nModule Program\n    &lt;DllImport(\"tianzuo.Hundun.dll\")&gt;\n    Public Function tianzuo_Hundun_check(public_key_string As String, license_file As String, ByRef days As Integer) As Integer\n    End Function\n\n    ReadOnly Hundun_error_code_strings_cn() As String = {\n        \"\u200b\u6210\u529f\u200b\",\n        \"\u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\",\n        \"\u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\"}\n\n    ReadOnly Hundun_error_code_strings() As String = {\n        \"success\",\n        \"parameter error\",\n        \"parse error\",\n        \"license filename error\",\n        \"out of date\",\n        \"machine id unmatched\"}\n\n    Sub Main(args As String())\n        Dim public_key As String = \"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\np1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\nLrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\nENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\nz1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\nouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\nlQIDAQAB\n-----END PUBLIC KEY-----\"\n\n        Dim license_file As String = \"license.dat\"\n        Dim days As Integer = 0\n        Dim error_code As Integer = tianzuo_Hundun_check(public_key, license_file, days)\n        If (error_code &lt;&gt; Hundun_error_code.Hundun_error_code_success) Then\n            Console.WriteLine(\"hundun.check error_code: \" + error_code.ToString + \" error_string: \" + Hundun_error_code_strings_cn(error_code))\n            Return\n        End If\n\n        Console.WriteLine(\"hundun.check days:\" + days.ToString)\n    End Sub\nEnd Module\n\n</code></pre> go <pre><code>package main\n\n/*\n#include \"tianzuo.HundunInterface.h\"\n*/\nimport \"C\"\nimport (\n    \"fmt\"\n    \"syscall\"\n    \"unsafe\"\n)\n\nconst (\n    Hundun_error_code_success     = 0 //  \u200b\u6210\u529f\u200b\n    Hundun_error_code_parameter   = 1 //  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\n    Hundun_error_code_parse       = 2 //  \u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\n    Hundun_error_code_licensefile = 3 //  \u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\n    Hundun_error_code_outofdate   = 4 //  \u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\n    Hundun_error_code_unmatched   = 5 //  \u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\n)\n\nfunc main() {\n    const public_key string = \"-----BEGIN PUBLIC KEY-----\\n\" +\n        \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\" +\n        \"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\" +\n        \"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\" +\n        \"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\" +\n        \"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\" +\n        \"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\" +\n        \"lQIDAQAB\\n\" +\n        \"-----END PUBLIC KEY-----\\n\"\n\n    Hundun_error_code_strings_cn := [6]string{\n        \"\u200b\u6210\u529f\u200b\",\n        \"\u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\",\n        \"\u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\"}\n\n    //Hundun_error_code_strings := [6]string{\n    //  \"success\",\n    //  \"parameter error\",\n    //  \"parse error\",\n    //  \"license filename error\",\n    //  \"out of date\",\n    //  \"machine id unmatched\"}\n\n    dll := syscall.MustLoadDLL(\"tianzuo.Hundun.dll\")\n    tianzuo_Hundun_check := dll.MustFindProc(\"tianzuo_Hundun_check\")\n    days := C.int(0)\n    pub_key := C.CString(public_key)\n    license_file := C.CString(\"license.dat\")\n    error_code, _, _ := tianzuo_Hundun_check.Call(uintptr(unsafe.Pointer(pub_key)), uintptr(unsafe.Pointer(license_file)), uintptr(unsafe.Pointer(&amp;days)))\n    if error_code != Hundun_error_code_success {\n        fmt.Println(\"hundun.check error_code: \", error_code, \" error_string: \", Hundun_error_code_strings_cn[error_code])\n        return\n    }\n    fmt.Println(\"hundun.check days: \", days)\n}\n\n</code></pre> rust <pre><code>\nuse std::os::raw::c_char;\nuse std::ffi::{c_int};\nuse std::ffi::CString;\n\n#[link(name = \"tianzuo.Hundun\")]\nextern {\n    fn tianzuo_Hundun_check(public_key_string: *const c_char, license_file: *const c_char, days: *const c_int) -&gt; c_int;\n}\n\nconst Hundun_error_code_strings_cn: [&amp;str; 6] = [\n    \"\u200b\u6210\u529f\u200b\",\n    \"\u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\",\n    \"\u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\",\n    \"\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\",\n    \"\u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\",\n    \"\u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\"];\n\nconst Hundun_error_code_strings: [&amp;str; 6] = [\n    \"success\",\n    \"parameter error\",\n    \"parse error\",\n    \"license filename error\",\n    \"out of date\",\n    \"machine id unmatched\"];\n\nfn main() {\n    unsafe {\n        let public_key = CString::new(String::from(\"-----BEGIN PUBLIC KEY-----\\n\\\n        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\\\n        p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\\\n        LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\\\n        ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\\\n        z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\\\n        ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\\\n        lQIDAQAB\\n\\\n        -----END PUBLIC KEY-----\\n\")).expect(\"Failed to create CString\");\n\n\n\n        let license_file = CString::new(String::from(\"license.dat\")).expect(\"Failed to create CString\");\n        let mut days: c_int = 0;\n        let error_code = tianzuo_Hundun_check(public_key.as_ptr(), license_file.as_ptr(), &amp;mut days);\n        if 0 != error_code {\n            let errorc: usize =  error_code as usize;\n            println!(\"hundun.check error_code: {:?} error_string: {:?}\", error_code, Hundun_error_code_strings_cn[errorc]);\n        }\n\n        println!(\"hundun.check days: {:?}\", days);\n    }\n}\n\n</code></pre> ruby <pre><code>require 'fiddle'\n\nlib = Fiddle::dlopen('C:/Users/zhengtianzuo/RubymineProjects/tianzuo.HundunTest/tianzuo.Hundun.dll')\ntianzuo_Hundun_check = Fiddle::Function.new(lib['tianzuo_Hundun_check'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\n\npublic_key = \"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\np1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\nLrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\nENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\nz1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\nouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\nlQIDAQAB\n-----END PUBLIC KEY-----\"\n\nHundun_error_code_strings_cn = [\n  \"\u200b\u6210\u529f\u200b\",\n  \"\u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\",\n  \"\u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\",\n  \"\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\",\n  \"\u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\",\n  \"\u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\"]\n\nHundun_error_code_strings = [\n  \"success\",\n  \"parameter error\",\n  \"parse error\",\n  \"license filename error\",\n  \"out of date\",\n  \"machine id unmatched\"]\n\nlicense_file = \"license.dat\"\ndays = Fiddle::Pointer.malloc(Fiddle::SIZEOF_INT)\nerror_code = tianzuo_Hundun_check.call(public_key, license_file, days)\nif error_code != 0\n  print(\"hundun.check error_code: \", error_code, \" error_string:\", Hundun_error_code_strings_cn[error_code] ,\" \\n\")\n  return\nend\n\nint_days = days[0, Fiddle::SIZEOF_INT].unpack('I')[0]\nprint(\"hundun.check days: \", int_days, \"\\n\")\n\n</code></pre>"},{"location":"component/tianzuo.Hundun/#_8","title":"\u4e0b\u8f7d","text":""},{"location":"component/tianzuo.Kongtong/","title":"\u5929\u4f50\u200b.\u200b\u5d06\u5cd2\u200b\u5370","text":""},{"location":"component/tianzuo.Kongtong/#_2","title":"\u5929\u4f50\u200b.\u200b\u5d06\u5cd2\u200b\u5370","text":"\u64cd\u4f5c\u7cfb\u7edf\u200b \u200b\u7f16\u8bd1\u5668\u200b \u200b\u7f16\u7a0b\u8bed\u8a00"},{"location":"component/tianzuo.Kongtong/#_3","title":"\u7b80\u4ecb","text":"<p>\u200b\u5929\u4f50\u200b.\u200b\u5d06\u5cd2\u200b\u5370\u200b Windows\u200b\u5e73\u53f0\u200b\u4e0b\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u53d1\u751f\u200b\u5d29\u6e83\u200b\u65f6\u200b, \u200b\u751f\u6210\u200b\u5d29\u6e83\u200b\u8f6c\u50a8\u200b\u6587\u4ef6\u200b\u7528\u4e8e\u200b\u5206\u6790\u200b\u5b9a\u4f4d\u200b\u5230\u200b\u5d29\u6e83\u200b\u4ee3\u7801\u200b\u884c\u200b\uff0c\u200b\u540c\u65f6\u200b\u751f\u6210\u200b\u7cfb\u7edf\u200b\u73af\u5883\u200b\u76f8\u5173\u200b\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u4f20\u8bf4\u200b: \u200b\u5d06\u5cd2\u200b\u6d77\u4e0a\u200b\u4e0d\u6b7b\u200b\u9f99\u65cf\u200b\u7684\u200b\u62a4\u5b88\u200b\u795e\u5668\u200b\uff0c\u200b\u5176\u4e0a\u523b\u200b\u5851\u6709\u200b\u4e94\u65b9\u200b\u5929\u5e1d\u200b\u5f62\u8c8c\u200b\uff0c\u200b\u5e76\u200b\u6709\u200b\u7389\u9f99\u200b\u76d8\u7ed5\u200b\u3002\u200b\u81ea\u53e4\u200b\u76f8\u4f20\u200b\u5f97\u5230\u200b\u5b83\u200b\u7684\u200b\u4eba\u200b\uff0c\u200b\u5c31\u200b\u80fd\u200b\u62e5\u6709\u200b\u5929\u4e0b\u200b\uff0c\u200b\u4e5f\u200b\u6709\u4eba\u200b\u4f20\u8bf4\u200b\u5b83\u200b\u80fd\u200b\u8ba9\u200b\u4eba\u200b\u4e0d\u200b\u8001\u4e0d\u6b7b\u200b\u3002</p>"},{"location":"component/tianzuo.Kongtong/#_4","title":"\u76ee\u6807","text":"<p>\u200b\u5f00\u53d1\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u5076\u5c14\u200b\u9047\u5230\u200b\u7a0b\u5e8f\u200b\u5d29\u6e83\u200b\u7684\u200b\u60c5\u51b5\u200b\uff0c\u200b\u9700\u8981\u200b\u5206\u6790\u200b\u5d29\u6e83\u200b\u539f\u56e0\u200b\u548c\u200b\u5b9a\u4f4d\u200b\u5230\u200b\u4ee3\u7801\u200b\u884c\u200b\uff0c\u200b\u540c\u65f6\u200b\u9700\u8981\u200b\u5206\u6790\u200b\u73af\u5883\u56e0\u7d20\u200b\u7b49\u200b\u3002</p> <p></p>"},{"location":"component/tianzuo.Kongtong/#_5","title":"\u529f\u80fd","text":"<ul> <li>\ud83e\udde9 \u200b\u96c6\u6210\u200b\u7b80\u5355\u200b</li> <li>\ud83d\udcdd \u200b\u53ef\u200b\u9009\u62e9\u200b\u751f\u6210\u200bdmp\u200b\u4e0e\u200b\u65e5\u5fd7\u200b</li> <li>\ud83e\ude90 \u200b\u65e5\u5fd7\u200b\u591a\u200b\u8bed\u8a00\u200b(\u200b\u7b80\u4f53\u4e2d\u6587\u200b/English)</li> <li>\u26d3 \u200b\u652f\u6301\u200b\u7ebf\u7a0b\u200b\u5185\u200b\u68c0\u6d4b\u200b</li> </ul>"},{"location":"component/tianzuo.Kongtong/#_6","title":"\u622a\u56fe","text":"<p>\u200b\u901a\u8fc7\u200bdmp\u200b\u6587\u4ef6\u200b\u5206\u6790\u200b\u5b9a\u4f4d\u200b\u5d29\u6e83\u200b\u4ee3\u7801\u200b\u884c\u200b:</p> <p>Visual Studio \u200b\u5206\u6790\u200bdmp\u200b\u6587\u4ef6\u200b</p> <p></p> <p>WinDbg \u200b\u5206\u6790\u200bdmp\u200b\u6587\u4ef6\u200b</p> <p></p> <p>\u200b\u73af\u5883\u200b\u65e5\u5fd7\u200b:</p> <p></p>"},{"location":"component/tianzuo.Kongtong/#_7","title":"\u5b89\u88c5","text":"<p>\u200b\u9879\u76ee\u200b\u4e2d\u200b\u542f\u7528\u200b\u5f02\u5e38\u200b\u68c0\u6d4b\u200b</p>"},{"location":"component/tianzuo.Kongtong/#visual-studio","title":"Visual Studio","text":"<p>Visual Studio\u200b\u4e2d\u200b\u5f00\u542f\u200bC++\u200b\u5f02\u5e38\u200b\u68c0\u6d4b\u200b</p> <p></p> <p>Visual Studio\u200b\u4e2d\u200b\u5f00\u542f\u200b\u751f\u6210\u200bpdb\u200b\u6587\u4ef6\u200b</p>"},{"location":"component/tianzuo.Kongtong/#qt-creator","title":"Qt Creator","text":"<p>Qt Creator\u200b\u4e2d\u200b\u5f00\u542f\u200b\u751f\u6210\u200bpdb\u200b\u6587\u4ef6\u200b</p> <pre><code>CONFIG += force_debug_info\nCONFIG += senarate_debug_info\n</code></pre>"},{"location":"component/tianzuo.Kongtong/#_8","title":"\u4f8b\u5b50","text":"<pre><code>#include \"tianzuo.KongtongTest.h\"\n#include \"../../include/tianzuo.Kongtong.h\"\n#include &lt;Windows.h&gt;\n\nvoid init(int argc, char* argv[]) {\n    tianzuo_KongtongTest test;\n    test.doSomething();\n}\n\nint main(int argc, char* argv[]) {\n    HINSTANCE hKongtong = LoadLibrary(L\"tianzuo.Kongtong.dll\");\n    if (!hKongtong) {\n        init(argc, argv);\n        return(0);\n    }\n\n    tianzuo_Kongtong_get_exception getException = (tianzuo_Kongtong_get_exception)GetProcAddress(hKongtong, \"Kongtong_get_exception\");\n    if (!getException) return -1;\n    __try {\n        init(argc, argv);\n    }\n    __except (getException(GetExceptionInformation(), Kongtong_create_normal, 0)) {\n    }\n\n    if (hKongtong != nullptr) {\n        getException = nullptr;\n        FreeLibrary(hKongtong);\n        hKongtong = nullptr;\n    }\n    return(0);\n}\n</code></pre>"},{"location":"component/tianzuo.Kongtong/#_9","title":"\u4e0b\u8f7d","text":""},{"location":"component/tianzuo.LianYao/","title":"\u5929\u4f50\u200b.\u200b\u70bc\u200b\u5996\u200b\u58f6","text":""},{"location":"component/tianzuo.LianYao/#_2","title":"\u5929\u4f50\u200b.\u200b\u70bc\u200b\u5996\u200b\u58f6","text":"\u64cd\u4f5c\u7cfb\u7edf\u200b \u200b\u7f16\u8bd1\u5668\u200b \u200b\u7f16\u7a0b\u8bed\u8a00"},{"location":"component/tianzuo.LianYao/#_3","title":"\u7b80\u4ecb","text":"<p>\u200b\u5929\u4f50\u200b.\u200b\u70bc\u200b\u5996\u200b\u58f6\u200b \u200b\u4e00\u79cd\u200b\u7b80\u5355\u200b\u7684\u200b\u5185\u5b58\u200b\u6c60\u200b\uff0c\u200b\u521d\u59cb\u5316\u200b\u7533\u8bf7\u200b\u4e00\u4e9b\u200b\u5185\u5b58\u200b\u5faa\u73af\u200b\u4f7f\u7528\u200b\uff0c\u200b\u4e0d\u591f\u200b\u65f6\u200b\u52a8\u6001\u200b\u8fdb\u884c\u200b\u6269\u5bb9\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5e26\u200b\u5185\u5b58\u200b\u6cc4\u6f0f\u200b\u68c0\u6d4b\u200b\u529f\u80fd\u200b\u3002</p> <p>\u200b\u4f20\u8bf4\u200b: \u200b\u5b83\u200b\u4ee3\u8868\u200b\u7740\u200b\u878d\u5408\u200b\u548c\u200b\u8fdb\u5316\u200b\u3002\u200b\u70bc\u200b\u5996\u200b\u58f6\u200b\u53ef\u4ee5\u200b\u6536\u7eb3\u200b\u4e07\u7269\u200b\uff0c\u200b\u5c06\u200b\u5996\u200b\u517d\u200b\u3001\u200b\u7075\u517d\u200b\u7b49\u200b\u751f\u7269\u200b\u70bc\u5316\u200b\u4e3a\u200b\u58f6\u200b\u4e2d\u200b\u5143\u6c14\u200b\u3002\u200b\u8fd9\u79cd\u200b\u529b\u91cf\u200b\u8c61\u5f81\u200b\u7740\u200b\u878d\u5408\u200b\u4e0e\u200b\u8fdb\u5316\u200b\uff0c\u200b\u5bd3\u610f\u200b\u7740\u200b\u9053\u5bb6\u200b\u6587\u5316\u200b\u7684\u200b\u5305\u5bb9\u200b\u4e0e\u200b\u548c\u8c10\u200b\u3002</p>"},{"location":"component/tianzuo.LianYao/#_4","title":"\u76ee\u6807","text":"<p>\u200b\u8bbe\u8ba1\u200b\u4e00\u79cd\u200b\u5185\u5b58\u200b\u6c60\u200b\uff0c\u200b\u5faa\u73af\u200b\u8fdb\u884c\u200b\u5185\u5b58\u200b\u4f7f\u7528\u200b\uff0c\u200b\u63d0\u9ad8\u200b\u5185\u5b58\u200b\u4f7f\u7528\u200b\u6548\u7387\u200b\uff0c\u200b\u540c\u65f6\u200b\u63d0\u4f9b\u200b\u5185\u5b58\u200b\u6cc4\u6f0f\u200b\u68c0\u6d4b\u200b\u529f\u80fd\u200b\u3002</p> <p></p>"},{"location":"component/tianzuo.LianYao/#_5","title":"\u529f\u80fd","text":"<ul> <li>\ud83e\udde9 \u200b\u96c6\u6210\u200b\u7b80\u5355\u200b</li> <li>\ud83d\udcdd \u200b\u53ef\u200b\u9009\u62e9\u200b\u751f\u6210\u200b\u5185\u5b58\u200b\u6cc4\u6f0f\u200b\u65e5\u5fd7\u200b</li> <li>\ud83e\ude90 \u200b\u65e5\u5fd7\u200b\u591a\u200b\u8bed\u8a00\u200b(\u200b\u7b80\u4f53\u4e2d\u6587\u200b/English)</li> </ul>"},{"location":"component/tianzuo.LianYao/#_6","title":"\u622a\u56fe","text":"<p>\u200b\u901a\u8fc7\u200b\u65e5\u5fd7\u200b\u5206\u6790\u200b\u5b9a\u4f4d\u200b\u5185\u5b58\u200b\u6cc4\u6f0f\u200b\u4ee3\u7801\u200b\u884c\u200b:</p> <p></p>"},{"location":"component/tianzuo.LianYao/#_7","title":"\u4f8b\u5b50","text":"<pre><code>\n#include &lt;iostream&gt;\n#include \"../../include/tianzuo.LianYaoInterface.h\"\n\nvoid* operator new(size_t size) {\n    return tianzuo_LianYaoInt::mem_get(size);\n}\nvoid* operator new[](size_t size) {\n    return operator new(size);\n}\n\nvoid operator delete(void* ptr) noexcept {\n    tianzuo_LianYaoInt::mem_del(ptr);\n}\nvoid operator delete[](void* ptr) noexcept {\n    operator delete(ptr);\n}\n\nclass cpp {\n public:\n    cpp() {}\n    ~cpp() {}\n private:\n     int m_a;\n     long m_l;\n     float m_f;\n};\n\nint main(int argc, char* argv[]) {\n    std::cout &lt;&lt; \"start tianzuo.LianYaoTest ...\\n\";\n#ifdef WIN32\n    tianzuo_LianYaoInt::initialize(3, \"memory_leaks.log\", nullptr, 0);\n#else\n    tianzuo_LianYaoInt::initialize(3, \"memory_leaks.log\", \"./tianzuo.LianYaoTest\", 0);\n#endif\n\n    int* new_int = new int(10); // leak 4\n    int* new_int2 = new int(10);\n    *new_int2 = 12;\n\n    for (size_t i = 0; i &lt; 10; i++) {\n        int* new_int3 = new int(10);\n        *new_int3 = 12;\n        delete new_int3;\n    }\n\n    char* new_buf = new char[1555]; // leak 1555\n    char* new_buf2 = new char[123];\n\n    cpp* new_class = new cpp(); // leak 12\n    cpp* new_class2 = new cpp();\n\n    class1* cls1 = new class1();\n    delete cls1;\n\n    delete new_class2;\n    delete new_int2;\n    delete[] new_buf2;\n\n    tianzuo_LianYaoInt::terminate();\n\n    return 0;\n}\n\n</code></pre>"},{"location":"component/tianzuo.LianYao/#_8","title":"\u4e0b\u8f7d","text":""},{"location":"component/tianzuo.Qiankun/","title":"\u5929\u4f50\u200b.\u200b\u4e7e\u5764\u888b","text":""},{"location":"component/tianzuo.Qiankun/#_2","title":"\u5929\u4f50\u200b.\u200b\u4e7e\u5764\u888b","text":"\u64cd\u4f5c\u7cfb\u7edf\u200b \u200b\u7f16\u8bd1\u5668\u200b \u200b\u7f16\u7a0b\u8bed\u8a00"},{"location":"component/tianzuo.Qiankun/#_3","title":"\u7b80\u4ecb","text":"<p>\u200b\u5929\u4f50\u200b.\u200b\u4e7e\u5764\u888b\u200b \u200b\u57fa\u4e8e\u200b\u62bd\u5c49\u5f0f\u200b\u6587\u4ef6\u200b\u5b58\u50a8\u200b\u7684\u200bNoSql\u200b\u6570\u636e\u5e93\u200b\uff0c\u200b\u53ef\u200b\u7528\u4e8e\u200b\u6587\u4ef6\u200b\u6253\u5305\u200b\uff0c\u200b\u6570\u636e\u200b\u6574\u5408\u200b\uff0c\u200b\u52a0\u5bc6\u200b\u5b58\u653e\u200b\u7b49\u200b\u591a\u79cd\u200b\u7528\u9014\u200b\u3002\u200b\u53ef\u4ee5\u200b\u65b9\u4fbf\u5feb\u6377\u200b\u7684\u200b\u642d\u5efa\u200b\u548c\u200b\u90e8\u7f72\u200b\u5b58\u50a8\u200b\u5e94\u7528\u200b\u7684\u200b\u7cfb\u7edf\u200b\u3002</p> <p>\u200b\u4f20\u8bf4\u200b: \u200b\u5f25\u52d2\u200b\u6240\u6709\u200b\uff0c\u200b\u4e13\u505a\u200b\u50a8\u7269\u200b\u4e4b\u7528\u200b\u3002\u200b\u62e5\u6709\u200b\u4e0d\u53ef\u601d\u8bae\u200b\u4e4b\u529b\u200b\uff0c\u200b\u5185\u90e8\u200b\u6709\u8457\u200b\u5947\u5f02\u200b\u4e4b\u200b\u7a7a\u95f4\u200b\uff0c\u200b\u7a7a\u95f4\u200b\u4e4b\u5927\u4f3c\u200b\u80fd\u200b\u5c06\u200b\u5929\u5730\u200b\u6536\u7eb3\u200b\u4e8e\u200b\u5185\u200b\u3002\u200b\u888b\u4e2d\u200b\u53e6\u6709\u200b\u4e7e\u5764\u200b\uff0c\u200b\u5e94\u6709\u5c3d\u6709\u200b\uff0c\u200b\u53d6\u4e4b\u4e0d\u5c3d\u200b\u3002</p>"},{"location":"component/tianzuo.Qiankun/#_4","title":"\u76ee\u6807","text":"<p>\u200b\u6784\u5efa\u200b\u4e00\u79cd\u200b\u4f7f\u7528\u200b\u7b80\u5355\u200b\u63a5\u53e3\u200b\u8c03\u7528\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5b8c\u6210\u200b\u6570\u636e\u7ba1\u7406\u200b\u7684\u200bNoSql\u200b\u6570\u636e\u5e93\u200b\u3002</p> <p></p>"},{"location":"component/tianzuo.Qiankun/#_5","title":"\u529f\u80fd","text":"<ul> <li>\ud83e\udde9 \u200b\u96c6\u6210\u200b\u7b80\u5355\u200b</li> <li>\ud83d\udce6 \u200b\u5b58\u653e\u200b\u6587\u4ef6\u200b\u53ef\u200b\u81ea\u7531\u9009\u62e9\u200b\u538b\u7f29\u200b</li> <li>\ud83e\udea2 \u200b\u6570\u636e\u200b\u7ecf\u8fc7\u200b256\u200b\u4f4d\u200bAES\u200b\u7b97\u6cd5\u200b\u52a0\u5bc6\u200b</li> <li>\ud83d\udcd2 \u200b\u652f\u6301\u200b\u6570\u636e\u200b\u6279\u91cf\u200b\u589e\u52a0\u200b/\u200b\u5220\u9664\u200b/\u200b\u4fee\u6539\u200b/\u200b\u67e5\u8be2\u200b</li> <li>\ud83d\udcc3 \u200b\u652f\u6301\u200b\u76f4\u63a5\u200b\u83b7\u53d6\u200b\u539f\u59cb\u6570\u636e\u200b\u6d41\u200b</li> </ul>"},{"location":"component/tianzuo.Qiankun/#_6","title":"\u622a\u56fe","text":"<p>\u200b\u5929\u4f50\u200b.\u200b\u4e7e\u5764\u888b\u200b\u6d4b\u8bd5\u7a0b\u5e8f\u200b:</p> <p></p>"},{"location":"component/tianzuo.Qiankun/#_7","title":"\u4f8b\u5b50","text":"cpp <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\n#include \"tianzuo.QiankunInterface.h\" // \u200b\u63a5\u53e3\u200b\u5934\u6587\u4ef6\u200b interface heaher file\n\nint main() {\n    // \u200b\u51c6\u5907\u200b\u6570\u636e\u200b prepare data\n    Qiankun_db_verify_struct db_verify(\"qiankunDataBase.Ztz\", \"password\");\n    int integer = 12345678;\n    Qiankun_data_type_struct data_type(Qiankun_data_type_integer, -1, \"integer\");\n    Qiankun_user_data_struct user_data(&amp;integer, 0);\n    int data_size = 0;\n    Qiankun_get_user_data_struct get_user_data(reinterpret_cast&lt;void*&amp;&gt;(integer), &amp;data_size);\n\n    // \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n    std::unique_ptr&lt;tianzuo_QiankunInterface&gt; qiankun_interface(new tianzuo_QiankunInterface());\n\n    // \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n    tianzuo_QiankunInt* qiankun = qiankun_interface-&gt;initialize();\n\n    // \u200b\u521d\u59cb\u5316\u200b\u5b9e\u4f8b\u200b initialize the instance\n    int error_code = qiankun-&gt;initialize();\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"initialize error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\n    // \u200b\u521b\u5efa\u200b\u6570\u636e\u5e93\u200b create database\n    error_code = qiankun-&gt;db_create_database(&amp;db_verify, \"qiankunDataBase\", true);\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"db_create_database error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\n    // \u200b\u6253\u5f00\u200b\u6570\u636e\u5e93\u200b open database\n    error_code = qiankun-&gt;db_open_database(&amp;db_verify);\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"db_open_database error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\n    // \u200b\u5411\u200b\u6570\u636e\u5e93\u200b\u5199\u5165\u200b\u4e00\u4e2a\u200b\u6574\u578b\u200b\u6570\u636e\u200b writes an integer to the database\n    error_code = qiankun-&gt;data_combine(&amp;db_verify, &amp;data_type, nullptr, &amp;user_data, false, -1);\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"data_combine error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\n\n    // \u200b\u8bfb\u53d6\u200b\u521a\u200b\u5199\u5165\u200b\u7684\u200b\u6570\u636e\u200b read the data just written\n    integer = -1;\n    error_code = qiankun-&gt;data_extract(&amp;db_verify, &amp;data_type, nullptr, &amp;get_user_data);\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"data_extract error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\n    std::cout &lt;&lt; \"get integer data: \" &lt;&lt; integer;\n\n    // \u200b\u5173\u95ed\u200b\u6570\u636e\u5e93\u200b close database\n    error_code = qiankun-&gt;db_close_database(&amp;db_verify);\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"db_close_database error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\nreturn_error:\n\n    // \u200b\u91ca\u653e\u200b\u63a5\u53e3\u200b terminate the interface\n    if (qiankun_interface != nullptr &amp;&amp; qiankun != nullptr) {\n        qiankun_interface-&gt;terminate(&amp;qiankun);\n    }\n\n    std::cout &lt;&lt; \"test done -------------------\";\n\n    return 0;\n}\n</code></pre> python <pre><code>from ctypes import *\nfrom enum import Enum\nimport ctypes\n\ntianzuo_QiankunLib = cdll.LoadLibrary('./tianzuo.Qiankun.dll')\n\nclass Qiankun_error_code(Enum):\n    Qiankun_errorcode_success           = 1 # \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b\n    Qiankun_errorcode_normal            = 2 # \u200b\u9519\u8bef\u200b\u7684\u200b\u503c\u200b\n    Qiankun_errorcode_differ            = 3 # \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u6570\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The number of database files fails to be verified)\n    Qiankun_errorcode_no_rights         = 4 # \u200b\u6570\u636e\u5e93\u200b\u5bc6\u7801\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The database password verification failed)\n    Qiankun_errorcode_db_not_exist      = 5 # \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u4e0d\u200b\u5b58\u5728\u200b (The database file does not exist)\n    Qiankun_errorcode_exist             = 6 # \u200b\u6570\u636e\u200b\u5df2\u200b\u5b58\u5728\u200b (Data already exists)\n    Qiankun_errorcode_not_exist         = 7 # \u200b\u6570\u636e\u200b\u4e0d\u200b\u5b58\u5728\u200b (Data does not exist)\n    Qiankun_errorcode_out_of_range      = 8 # \u200b\u8d85\u51fa\u8303\u56f4\u200b (out of range)\n    Qiankun_errorcode_type              = 9 # \u200b\u7c7b\u578b\u200b\u4e0d\u7b26\u200b (wrong type)\n    Qiankun_errorcode_param             = 10 # \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b (parameter error)\n    Qiankun_errorcode_compress          = 11 # \u200b\u538b\u7f29\u200b\u9519\u8bef\u200b (compression error)\n    Qiankun_errorcode_get_array         = 12 # \u200b\u6570\u7ec4\u200b\u9519\u8bef\u200b (arrary error)\n    Qiankun_errorcode_out_of_memory     = 13 # \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (memory overflow)\n    Qiankun_errorcode_handle            = 14 # \u200b\u53e5\u67c4\u200b\u9519\u8bef\u200b (error handle)\n    Qiankun_errorcode_io                = 15 # IO\u200b\u9519\u8bef\u200b (io error)\n\nclass tianzuo_QiankunInt:\n    def __init__(self):\n        tianzuo_QiankunLib.tianzuo_QiankunInterface_initialize.restype = c_void_p\n        self.obj = tianzuo_QiankunLib.tianzuo_QiankunInterface_initialize()\n\n    def __del__(self):\n        tianzuo_QiankunLib.tianzuo_QiankunInterface_terminate.argtypes = [c_void_p]\n        tianzuo_QiankunLib.tianzuo_QiankunInterface_terminate(self.obj)\n\n    def initialize(self):\n        tianzuo_QiankunLib.tianzuo_QiankunInterface_initialize.restype = c_int\n        tianzuo_QiankunLib.tianzuo_QiankunInt_initialize.argtypes = [c_void_p]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_initialize(self.obj)\n\n    def db_create_database(self, db_file_name, db_password, db_name, over_write):\n        tianzuo_QiankunLib.tianzuo_QiankunInt_db_create_database.argtypes = [c_void_p, c_char_p, c_char_p, c_char_p, c_int]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_db_create_database(self.obj, db_file_name, db_password, db_name, over_write)\n\n    def db_open_database(self, db_file_name, db_password):\n        tianzuo_QiankunLib.tianzuo_QiankunInt_db_open_database.argtypes = [c_void_p, c_char_p, c_char_p]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_db_open_database(self.obj, db_file_name, db_password)\n\n    def db_close_database(self, db_file_name, db_password):\n        tianzuo_QiankunLib.tianzuo_QiankunInt_db_close_database.argtypes = [c_void_p, c_char_p, c_char_p]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_db_close_database(self.obj, db_file_name, db_password)\n\n    def data_int_combine(self, db_file_name, db_password, data_name, remark, data):\n        tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_combine.argtypes = [c_void_p, c_char_p, c_char_p, c_char_p, c_char_p, c_int]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_combine(self.obj, db_file_name, db_password, data_name, remark, data)\n\n    def data_int_extract(self, db_file_name, db_password, data_name, data):\n        tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_extract.argtypes = [c_void_p, c_char_p, c_char_p, c_char_p, ctypes.POINTER(ctypes.c_int)]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_extract(self.obj, db_file_name, db_password, data_name, data)\n\ndef main():\n\n    # \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n    print(\"initialize the interface\")\n\n    # \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n    qiankun = tianzuo_QiankunInt()\n    error_code = qiankun.initialize()\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"initialize error:\", error_code)\n        return\n\n    # \u200b\u521b\u5efa\u200b\u6570\u636e\u5e93\u200b create database\n    db_file_name = b\"qiankunDataBase.Ztz\"\n    db_password = b\"password\"\n    error_code = qiankun.db_create_database(db_file_name, db_password, b\"qiankunDataBase\", True)\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"db_create_database error:\", error_code)\n        return\n\n    # \u200b\u6253\u5f00\u200b\u6570\u636e\u5e93\u200b open database\n    error_code = qiankun.db_open_database(db_file_name, db_password)\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"db_open_database error:\", error_code)\n        return\n\n    # \u200b\u5411\u200b\u6570\u636e\u5e93\u200b\u5199\u5165\u200b\u4e00\u4e2a\u200b\u6574\u578b\u200b\u6570\u636e\u200b writes an integer to the database\n    intInt = 12345678\n    error_code = qiankun.data_int_combine(db_file_name, db_password, b\"integer\", None, intInt)\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"data_combine error:\", error_code)\n        return\n\n    # \u200b\u8bfb\u53d6\u200b\u521a\u200b\u5199\u5165\u200b\u7684\u200b\u6570\u636e\u200b read the data just written\n    return_data = ctypes.c_int()\n    error_code = qiankun.data_int_extract(db_file_name, db_password, b\"integer\", ctypes.byref(return_data))\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"data_extract error:\", error_code)\n        return\n\n    integer = return_data.value\n    print(\"get integer data: {}\".format(integer))\n\n    # \u200b\u5173\u95ed\u200b\u6570\u636e\u5e93\u200b close database\n    error_code = qiankun.db_close_database(db_file_name, db_password)\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"db_close_database error:\", error_code)\n        return\n\n    print(\"test done -------------------\")\n\nif __name__ == '__main__':\n    main()\n\n</code></pre> java <pre><code>package cn.camelsoft;\n\nimport com.sun.jna.Library;\nimport com.sun.jna.Native;\nimport com.sun.jna.Pointer;\n\nenum Qiankun_error_code {\n    Qiankun_errorcode_success           (0x00000001),   ///&lt;  \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b\n    Qiankun_errorcode_normal            (0x00000002),   ///&lt;  \u200b\u9519\u8bef\u200b\u7684\u200b\u503c\u200b\n    Qiankun_errorcode_differ            (0x00000003),   ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u6570\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The number of database files fails to be verified)\n    Qiankun_errorcode_no_rights         (0x00000004),   ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u5bc6\u7801\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The database password verification failed)\n    Qiankun_errorcode_db_not_exist      (0x00000005),   ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u4e0d\u200b\u5b58\u5728\u200b (The database file does not exist)\n    Qiankun_errorcode_exist             (0x00000006),   ///&lt;  \u200b\u6570\u636e\u200b\u5df2\u200b\u5b58\u5728\u200b (Data already exists)\n    Qiankun_errorcode_not_exist         (0x00000007),   ///&lt;  \u200b\u6570\u636e\u200b\u4e0d\u200b\u5b58\u5728\u200b (Data does not exist)\n    Qiankun_errorcode_out_of_range      (0x00000008),   ///&lt;  \u200b\u8d85\u51fa\u8303\u56f4\u200b (out of range)\n    Qiankun_errorcode_type              (0x00000009),   ///&lt;  \u200b\u7c7b\u578b\u200b\u4e0d\u7b26\u200b (wrong type)\n    Qiankun_errorcode_param             (0x0000000A),   ///&lt;  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b (parameter error)\n    Qiankun_errorcode_compress          (0x0000000B),   ///&lt;  \u200b\u538b\u7f29\u200b\u9519\u8bef\u200b (compression error)\n    Qiankun_errorcode_get_array         (0x0000000C),   ///&lt;  \u200b\u6570\u7ec4\u200b\u9519\u8bef\u200b (arrary error)\n    Qiankun_errorcode_out_of_memory     (0x0000000D),   ///&lt;  \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (memory overflow)\n    Qiankun_errorcode_handle            (0x0000000E),   ///&lt;  \u200b\u53e5\u67c4\u200b\u9519\u8bef\u200b (error handle)\n    Qiankun_errorcode_io                (0x0000000F);   ///&lt;  IO\u200b\u9519\u8bef\u200b (io error)\n\n    private int value;\n\n    Qiankun_error_code(int value) {\n        this.value = value;\n    }\n\n    public int getValue() {\n        return value;\n    }\n}\n\npublic class Main {\n\n    public interface tianzuo_QiankunLib extends Library {\n        tianzuo_QiankunLib instance = (tianzuo_QiankunLib) Native.load(\"./tianzuo.Qiankun.dll\", tianzuo_QiankunLib.class);\n        Pointer tianzuo_QiankunInterface_initialize();\n        void tianzuo_QiankunInterface_terminate(Pointer qiankun);\n        int tianzuo_QiankunInt_initialize(Pointer qiankun);\n\n        int tianzuo_QiankunInt_db_create_database(Pointer qiankun, String db_file_name, String db_password, String db_name, Boolean over_write);\n        int tianzuo_QiankunInt_db_open_database(Pointer qiankun, String db_file_name, String db_password);\n        int tianzuo_QiankunInt_db_close_database(Pointer qiankun, String db_file_name, String db_password);\n        int tianzuo_QiankunInt_data_int_combine(Pointer qiankun, String db_file_name, String db_password, String data_name, String remark, int data);\n        int tianzuo_QiankunInt_data_int_extract(Pointer qiankun, String db_file_name, String db_password, String data_name, int[] data);\n    }\n\n    public static void main(String[] args) {\n        System.setProperty(\"jna.encoding\",\"UTF-8\");\n\n        // \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n        System.out.printf(\"initialize the interface\\n\");\n\n        // \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n        Pointer qiankun = tianzuo_QiankunLib.instance.tianzuo_QiankunInterface_initialize();\n        int error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_initialize(qiankun);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_initialize error: %d\\n\", error_code);\n            return;\n        }\n\n        // \u200b\u521b\u5efa\u200b\u6570\u636e\u5e93\u200b create database\n        String db_file_name = \"qiankunDataBase.Ztz\";\n        String db_password = \"password\";\n        error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_db_create_database(qiankun, db_file_name, db_password, \"qiankunDataBase\", true);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_db_create_database error: %d\\n\", error_code);\n            return;\n        }\n\n        // \u200b\u6253\u5f00\u200b\u6570\u636e\u5e93\u200b open database\n        error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_db_open_database(qiankun, db_file_name, db_password);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_db_open_database error: %d\\n\", error_code);\n            return;\n        }\n\n        // \u200b\u5411\u200b\u6570\u636e\u5e93\u200b\u5199\u5165\u200b\u4e00\u4e2a\u200b\u6574\u578b\u200b\u6570\u636e\u200b writes an integer to the database\n        int intInt = 12345678;\n        error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_data_int_combine(qiankun, db_file_name, db_password, \"integer\", \"\", intInt);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_data_int_combine error: %d\\n\", error_code);\n            return;\n        }\n\n        // \u200b\u8bfb\u53d6\u200b\u521a\u200b\u5199\u5165\u200b\u7684\u200b\u6570\u636e\u200b read the data just written\n        int[] return_data = {0};\n        error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_data_int_extract(qiankun, db_file_name, db_password, \"integer\", return_data);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_data_int_extract error: %d\\n\", error_code);\n            return;\n        }\n\n        System.out.printf(\"get int: %d\\n\", return_data[0]);\n\n        // \u200b\u5173\u95ed\u200b\u6570\u636e\u5e93\u200b close database\n        error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_db_close_database(qiankun, db_file_name, db_password);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_db_close_database error: %d\\n\", error_code);\n            return;\n        }\n\n        System.out.printf(\"test done -------------------\\n\");\n\n        tianzuo_QiankunLib.instance.tianzuo_QiankunInterface_terminate(qiankun);\n    }\n}\n</code></pre> csharp <pre><code>\n\nusing System.Runtime.InteropServices;\n\npublic enum Qiankun_error_code\n{\n    Qiankun_errorcode_success       = 0x00000001,              ///&lt;  \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b\n    Qiankun_errorcode_normal        = 0x00000002,              ///&lt;  \u200b\u9519\u8bef\u200b\u7684\u200b\u503c\u200b\n    Qiankun_errorcode_differ        = 0x00000003,              ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u6570\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The number of database files fails to be verified)\n    Qiankun_errorcode_no_rights     = 0x00000004,              ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u5bc6\u7801\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The database password verification failed)\n    Qiankun_errorcode_db_not_exist  = 0x00000005,              ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u4e0d\u200b\u5b58\u5728\u200b (The database file does not exist)\n    Qiankun_errorcode_exist         = 0x00000006,              ///&lt;  \u200b\u6570\u636e\u200b\u5df2\u200b\u5b58\u5728\u200b (Data already exists)\n    Qiankun_errorcode_not_exist     = 0x00000007,              ///&lt;  \u200b\u6570\u636e\u200b\u4e0d\u200b\u5b58\u5728\u200b (Data does not exist)\n    Qiankun_errorcode_out_of_range  = 0x00000008,              ///&lt;  \u200b\u8d85\u51fa\u8303\u56f4\u200b (out of range)\n    Qiankun_errorcode_type          = 0x00000009,              ///&lt;  \u200b\u7c7b\u578b\u200b\u4e0d\u7b26\u200b (wrong type)\n    Qiankun_errorcode_param         = 0x0000000A,              ///&lt;  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b (parameter error)\n    Qiankun_errorcode_compress      = 0x0000000B,              ///&lt;  \u200b\u538b\u7f29\u200b\u9519\u8bef\u200b (compression error)\n    Qiankun_errorcode_get_array     = 0x0000000C,              ///&lt;  \u200b\u6570\u7ec4\u200b\u9519\u8bef\u200b (arrary error)\n    Qiankun_errorcode_out_of_memory = 0x0000000D,              ///&lt;  \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (memory overflow)\n    Qiankun_errorcode_handle        = 0x0000000E,              ///&lt;  \u200b\u53e5\u67c4\u200b\u9519\u8bef\u200b (error handle)\n    Qiankun_errorcode_io            = 0x0000000F,              ///&lt;  IO\u200b\u9519\u8bef\u200b (io error)\n}\n\nclass Program {\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern IntPtr tianzuo_QiankunInterface_initialize();\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern void tianzuo_QiankunInterface_terminate(IntPtr qiankun);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_initialize(IntPtr qiankun);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_db_create_database(IntPtr qiankun, string db_file_name, string db_password, string db_name, bool over_write);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_db_open_database(IntPtr qiankun, string db_file_name, string db_password);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_db_close_database(IntPtr qiankun, string db_file_name, string db_password);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_data_int_combine(IntPtr qiankun, string db_file_name, string db_password, string data_name, string remark, int data);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_data_int_extract(IntPtr qiankun, string db_file_name, string db_password, string data_name, ref int data);\n\n    static void Main(string[] args) {\n        // \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n        Console.WriteLine(\"initialize the interface\\n\");\n\n        // \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n        IntPtr qiankun = tianzuo_QiankunInterface_initialize();\n        int error_code = tianzuo_QiankunInt_initialize(qiankun);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success))\n        {\n            Console.WriteLine(\"tianzuo_QiankunInt_initialize error:\" + error_code);\n            return;\n        }\n\n        // \u200b\u521b\u5efa\u200b\u6570\u636e\u5e93\u200b create database\n        string db_file_name = \"qiankunDataBase.Ztz\";\n        string db_password = \"password\";\n        error_code = tianzuo_QiankunInt_db_create_database(qiankun, db_file_name, db_password, \"qiankunDataBase\", true);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success))\n        {\n            Console.WriteLine(\"tianzuo_QiankunInt_db_create_database error:\" + error_code);\n            return;\n        }\n\n        // \u200b\u6253\u5f00\u200b\u6570\u636e\u5e93\u200b open database\n        error_code = tianzuo_QiankunInt_db_open_database(qiankun, db_file_name, db_password);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success)) {\n            Console.WriteLine(\"tianzuo_QiankunInt_db_open_database error:\" + error_code);\n            return;\n        }\n\n        // \u200b\u5411\u200b\u6570\u636e\u5e93\u200b\u5199\u5165\u200b\u4e00\u4e2a\u200b\u6574\u578b\u200b\u6570\u636e\u200b writes an integer to the database\n        int intInt = 12345678;\n        error_code = tianzuo_QiankunInt_data_int_combine(qiankun, db_file_name, db_password, \"integer\", \"\", intInt);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success))\n        {\n            Console.WriteLine(\"tianzuo_QiankunInt_data_int_combine error:\" + error_code);\n            return;\n        }\n\n        // \u200b\u8bfb\u53d6\u200b\u521a\u200b\u5199\u5165\u200b\u7684\u200b\u6570\u636e\u200b read the data just written\n        int return_data = 0;\n        error_code = tianzuo_QiankunInt_data_int_extract(qiankun, db_file_name, db_password, \"integer\", ref return_data);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success))\n        {\n            Console.WriteLine(\"tianzuo_QiankunInt_data_int_extract error:\" + error_code);\n            return;\n        }\n\n        Console.WriteLine(\"get int: \" + return_data);\n\n        // \u200b\u5173\u95ed\u200b\u6570\u636e\u5e93\u200b close database\n        error_code = tianzuo_QiankunInt_db_close_database(qiankun, db_file_name, db_password);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success))\n        {\n            Console.WriteLine(\"tianzuo_QiankunInt_db_close_database error:\" + error_code);\n            return;\n        }\n\n        Console.WriteLine(\"test done -------------------\\n\");\n\n        tianzuo_QiankunInterface_terminate(qiankun);\n\n    }\n\n}\n</code></pre> javascript <pre><code>\nQiankun_errorcode_success           = 0x00000001;   ///&lt;  \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b\nQiankun_errorcode_normal            = 0x00000002;   ///&lt;  \u200b\u9519\u8bef\u200b\u7684\u200b\u503c\u200b\nQiankun_errorcode_differ            = 0x00000003;   ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u6570\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The number of database files fails to be verified)\nQiankun_errorcode_no_rights         = 0x00000004;   ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u5bc6\u7801\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The database password verification failed)\nQiankun_errorcode_db_not_exist      = 0x00000005;   ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u4e0d\u200b\u5b58\u5728\u200b (The database file does not exist)\nQiankun_errorcode_exist             = 0x00000006;   ///&lt;  \u200b\u6570\u636e\u200b\u5df2\u200b\u5b58\u5728\u200b (Data already exists)\nQiankun_errorcode_not_exist         = 0x00000007;   ///&lt;  \u200b\u6570\u636e\u200b\u4e0d\u200b\u5b58\u5728\u200b (Data does not exist)\nQiankun_errorcode_out_of_range      = 0x00000008;   ///&lt;  \u200b\u8d85\u51fa\u8303\u56f4\u200b (out of range)\nQiankun_errorcode_type              = 0x00000009;   ///&lt;  \u200b\u7c7b\u578b\u200b\u4e0d\u7b26\u200b (wrong type)\nQiankun_errorcode_param             = 0x0000000A;   ///&lt;  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b (parameter error)\nQiankun_errorcode_compress          = 0x0000000B;   ///&lt;  \u200b\u538b\u7f29\u200b\u9519\u8bef\u200b (compression error)\nQiankun_errorcode_get_array         = 0x0000000C;   ///&lt;  \u200b\u6570\u7ec4\u200b\u9519\u8bef\u200b (arrary error)\nQiankun_errorcode_out_of_memory     = 0x0000000D;   ///&lt;  \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (memory overflow)\nQiankun_errorcode_handle            = 0x0000000E;   ///&lt;  \u200b\u53e5\u67c4\u200b\u9519\u8bef\u200b (error handle)\nQiankun_errorcode_io                = 0x0000000F;   ///&lt;  IO\u200b\u9519\u8bef\u200b (io error)\n\nlet ffi = require('ffi-napi')\nconst ref = require('ref-napi');\n\nlet tianzuo_QiankunLib = ffi.Library(\"tianzuo.Qiankun.dll\", {\n    'tianzuo_QiankunInterface_initialize': ['pointer', []],\n    'tianzuo_QiankunInterface_terminate':['void',['pointer']],\n    'tianzuo_QiankunInt_initialize':['int',['pointer']],\n    'tianzuo_QiankunInt_db_create_database':['int',['pointer','string','string','string', 'bool']],\n    'tianzuo_QiankunInt_db_open_database':['int',['pointer', 'string', 'string']],\n    'tianzuo_QiankunInt_db_close_database':['int',['pointer', 'string', 'string']],\n    'tianzuo_QiankunInt_data_int_combine':['int',['pointer','string','string','string', 'string', 'int']],\n    'tianzuo_QiankunInt_data_int_extract':['int',['pointer','string','string','string', 'pointer']],\n})\n\n\n// \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\nconsole.log(\"initialize the interface\\n\");\n\n// \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\nlet qiankun = tianzuo_QiankunLib.tianzuo_QiankunInterface_initialize();\nlet error_code = tianzuo_QiankunLib.tianzuo_QiankunInt_initialize(qiankun);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_initialize error: %d\\n\", error_code);\n    return;\n}\n\n// \u200b\u521b\u5efa\u200b\u6570\u636e\u5e93\u200b create database\nlet db_file_name = \"qiankunDataBase.Ztz\";\nlet db_password = \"password\";\nerror_code = tianzuo_QiankunLib.tianzuo_QiankunInt_db_create_database(qiankun, db_file_name, db_password, \"qiankunDataBase\", true);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_db_create_database error: %d\\n\", error_code);\n    return;\n}\n\n// \u200b\u6253\u5f00\u200b\u6570\u636e\u5e93\u200b open database\nerror_code = tianzuo_QiankunLib.tianzuo_QiankunInt_db_open_database(qiankun, db_file_name, db_password);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_db_open_database error: %d\\n\", error_code);\n    return;\n}\n\n// \u200b\u5411\u200b\u6570\u636e\u5e93\u200b\u5199\u5165\u200b\u4e00\u4e2a\u200b\u6574\u578b\u200b\u6570\u636e\u200b writes an integer to the database\nlet intInt = 12345678;\nerror_code = tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_combine(qiankun, db_file_name, db_password, \"integer\", \"\", intInt);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_data_int_combine error: %d\\n\", error_code);\n    return;\n}\n\n// \u200b\u8bfb\u53d6\u200b\u521a\u200b\u5199\u5165\u200b\u7684\u200b\u6570\u636e\u200b read the data just written\nreturn_buf = Buffer.alloc(1 * ref.sizeof.int);\nerror_code = tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_extract(qiankun, db_file_name, db_password, \"integer\", return_buf);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_data_int_extract error: %d\\n\", error_code);\n    return;\n}\n\nreturn_data = ref.get(return_buf, 0, ref.types.int);\nconsole.log(\"get int: %d\\n\", return_data);\n\n// \u200b\u5173\u95ed\u200b\u6570\u636e\u5e93\u200b close database\nerror_code = tianzuo_QiankunLib.tianzuo_QiankunInt_db_close_database(qiankun, db_file_name, db_password);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_db_close_database error: %d\\n\", error_code);\n   return;\n}\n\nconsole.log(\"test done -------------------\\n\");\n\ntianzuo_QiankunLib.tianzuo_QiankunInterface_terminate(qiankun);\n\n</code></pre> php <pre><code>&lt;?php\n\n// \u200b\u68c0\u67e5\u200b\u662f\u5426\u200b\u52a0\u8f7d\u200b\u4e86\u200b FFI \u200b\u6269\u5c55\u200b\nif (extension_loaded('ffi')) {\n    echo(\"\u200b\u5df2\u200b\u542f\u7528\u200b FFI \u200b\u6269\u5c55\u200b\\n\");\n} else {\n    die(\"\u200b\u672a\u200b\u542f\u52a8\u200b FFI \u200b\u6269\u5c55\u200b\\n\");\n}\n\nenum Qiankun_error_code\n{\nconst Qiankun_errorcode_success       = 0x00000001;            ///&lt;  \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b\nconst Qiankun_errorcode_normal        = 0x00000002;            ///&lt;  \u200b\u9519\u8bef\u200b\u7684\u200b\u503c\u200b\nconst Qiankun_errorcode_differ        = 0x00000003;            ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u6570\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The number of database files fails to be verified)\nconst Qiankun_errorcode_no_rights     = 0x00000004;            ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u5bc6\u7801\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The database password verification failed)\nconst Qiankun_errorcode_db_not_exist  = 0x00000005;            ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u4e0d\u200b\u5b58\u5728\u200b (The database file does not exist)\nconst Qiankun_errorcode_exist         = 0x00000006;            ///&lt;  \u200b\u6570\u636e\u200b\u5df2\u200b\u5b58\u5728\u200b (Data already exists)\nconst Qiankun_errorcode_not_exist     = 0x00000007;            ///&lt;  \u200b\u6570\u636e\u200b\u4e0d\u200b\u5b58\u5728\u200b (Data does not exist)\nconst Qiankun_errorcode_out_of_range  = 0x00000008;            ///&lt;  \u200b\u8d85\u51fa\u8303\u56f4\u200b (out of range)\nconst Qiankun_errorcode_type          = 0x00000009;            ///&lt;  \u200b\u7c7b\u578b\u200b\u4e0d\u7b26\u200b (wrong type)\nconst Qiankun_errorcode_param         = 0x0000000A;            ///&lt;  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b (parameter error)\nconst Qiankun_errorcode_compress      = 0x0000000B;            ///&lt;  \u200b\u538b\u7f29\u200b\u9519\u8bef\u200b (compression error)\nconst Qiankun_errorcode_get_array     = 0x0000000C;            ///&lt;  \u200b\u6570\u7ec4\u200b\u9519\u8bef\u200b (arrary error)\nconst Qiankun_errorcode_out_of_memory = 0x0000000D;            ///&lt;  \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (memory overflow)\nconst Qiankun_errorcode_handle        = 0x0000000E;            ///&lt;  \u200b\u53e5\u67c4\u200b\u9519\u8bef\u200b (error handle)\nconst Qiankun_errorcode_io            = 0x0000000F;            ///&lt;  IO\u200b\u9519\u8bef\u200b (io error)\n}\n\n$ffi = FFI::cdef(\"\n    void* tianzuo_QiankunInterface_initialize();\n    void tianzuo_QiankunInterface_terminate(void* *QiankunInt_pointer);\n    int tianzuo_QiankunInt_initialize(void* QiankunInt_pointer);\n    int tianzuo_QiankunInt_db_create_database(void* QiankunInt_pointer, const char* db_file_name, const char* db_password, const char* db_name, bool const over_write);\n    int tianzuo_QiankunInt_db_open_database(void* QiankunInt_pointer, const char* db_file_name, const char* db_password);\n    int tianzuo_QiankunInt_db_close_database(void* QiankunInt_pointer, const char* db_file_name, const char* db_password);\n    int tianzuo_QiankunInt_data_int_combine(void* QiankunInt_pointer, const char* db_file_name, const char* db_password, const char* data_name, const char* remark, int data);\n    int tianzuo_QiankunInt_data_int_extract(void* QiankunInt_pointer, const char* db_file_name, const char* db_password, const char* data_name, int* data);\n\", \"tianzuo.Qiankun.dll\");\n\n# \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\necho \"initialize the interface\" . \"\\n\";\n\n# \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n$qiankun = $ffi-&gt;tianzuo_QiankunInterface_initialize();\n\n$error_code = $ffi-&gt;tianzuo_QiankunInt_initialize($qiankun);\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"initialize error: \" . $error_code . \"\\n\";\n    return;\n}\n\n# \u200b\u521b\u5efa\u200b\u6570\u636e\u5e93\u200b create database\n$db_file_name = \"qiankunDataBase.Ztz\";\n$db_password = \"password\";\n$error_code = $ffi-&gt;tianzuo_QiankunInt_db_create_database($qiankun, $db_file_name, $db_password, \"qiankunDataBase\", true);\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"tianzuo_QiankunInt_db_create_database error: \" . $error_code . \"\\n\";\n    return;\n}\n\n# \u200b\u6253\u5f00\u200b\u6570\u636e\u5e93\u200b open database\n$error_code = $ffi-&gt;tianzuo_QiankunInt_db_open_database($qiankun, $db_file_name, $db_password);\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"tianzuo_QiankunInt_db_open_database error: \" . $error_code . \"\\n\";\n    return;\n}\n\n# \u200b\u5411\u200b\u6570\u636e\u5e93\u200b\u5199\u5165\u200b\u4e00\u4e2a\u200b\u6574\u578b\u200b\u6570\u636e\u200b writes an integer to the database\n$intInt = 12345678;\n$error_code = $ffi-&gt;tianzuo_QiankunInt_data_int_combine($qiankun, $db_file_name, $db_password, \"integer\", \"\", $intInt);\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"tianzuo_QiankunInt_data_int_combine error: \" . $error_code . \"\\n\";\n    return;\n}\n\n# \u200b\u8bfb\u53d6\u200b\u521a\u200b\u5199\u5165\u200b\u7684\u200b\u6570\u636e\u200b read the data just written\n$return_data = FFI::new(\"int\");\n$error_code = $ffi-&gt;tianzuo_QiankunInt_data_int_extract($qiankun, $db_file_name, $db_password, \"integer\", FFI::addr($return_data));\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"tianzuo_QiankunInt_data_int_extract error: \" . $error_code . \"\\n\";\n    return;\n}\n\necho \"get integer data: \" . $return_data-&gt;cdata . \"\\n\";\n\n# \u200b\u5173\u95ed\u200b\u6570\u636e\u5e93\u200b close database\n$error_code = $ffi-&gt;tianzuo_QiankunInt_db_close_database($qiankun, $db_file_name, $db_password);\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"tianzuo_QiankunInt_db_close_database error: \" . $error_code . \"\\n\";\n    return;\n}\n\necho \"test done -------------------\" . \"\\n\";\n\n?&gt;\n</code></pre> vb <pre><code>\nImports System.Runtime.InteropServices\n\nEnum Qiankun_error_code\n    Qiankun_errorcode_success = 1                     '  \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b\n    Qiankun_errorcode_normal = 2                      '  \u200b\u9519\u8bef\u200b\u7684\u200b\u503c\u200b\n    Qiankun_errorcode_differ = 3                      '  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u6570\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The number Of database files fails To be verified)\n    Qiankun_errorcode_no_rights = 4                   '  \u200b\u6570\u636e\u5e93\u200b\u5bc6\u7801\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The database password verification failed)\n    Qiankun_errorcode_db_not_exist = 5                '  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u4e0d\u200b\u5b58\u5728\u200b (The database file does Not exist)\n    Qiankun_errorcode_exist = 6                       '  \u200b\u6570\u636e\u200b\u5df2\u200b\u5b58\u5728\u200b (Data already exists)\n    Qiankun_errorcode_not_exist = 7                   '  \u200b\u6570\u636e\u200b\u4e0d\u200b\u5b58\u5728\u200b (Data does Not exist)\n    Qiankun_errorcode_out_of_range = 8                '  \u200b\u8d85\u51fa\u8303\u56f4\u200b (out Of range)\n    Qiankun_errorcode_type = 9                        '  \u200b\u7c7b\u578b\u200b\u4e0d\u7b26\u200b (wrong type)\n    Qiankun_errorcode_param = 10                      '  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b (parameter Error)\n    Qiankun_errorcode_compress = 11                   '  \u200b\u538b\u7f29\u200b\u9519\u8bef\u200b (compression Error)\n    Qiankun_errorcode_get_array = 12                  '  \u200b\u6570\u7ec4\u200b\u9519\u8bef\u200b (arrary Error)\n    Qiankun_errorcode_out_of_memory = 13              '  \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (memory overflow)\n    Qiankun_errorcode_handle = 14                     '  \u200b\u53e5\u67c4\u200b\u9519\u8bef\u200b (Error handle)\n    Qiankun_errorcode_io = 15                         '  IO\u200b\u9519\u8bef\u200b (io Error)\nEnd Enum\n\nModule Program\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInterface_initialize() As IntPtr\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInterface_terminate(ByRef QiankunInt_pointer As IntPtr)\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_initialize(QiankunInt_pointer As IntPtr) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_db_create_database(QiankunInt_pointer As IntPtr, db_file_name As String, db_password As String, db_name As String, over_write As Boolean) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_db_open_database(QiankunInt_pointer As IntPtr, db_file_name As String, db_password As String) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_db_close_database(QiankunInt_pointer As IntPtr, db_file_name As String, db_password As String) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_data_int_combine(QiankunInt_pointer As IntPtr, db_file_name As String, db_password As String, data_name As String, remark As String, data As Integer) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_data_int_extract(QiankunInt_pointer As IntPtr, db_file_name As String, db_password As String, data_name As String, ByRef data As Integer) As Integer\n    End Function\n\n    Sub Main(args As String())\n        ' \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n        Console.WriteLine(\"initialize the interface\")\n\n        ' \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n        Dim qiankun As IntPtr = tianzuo_QiankunInterface_initialize()\n        Dim error_code As Integer = tianzuo_QiankunInt_initialize(qiankun)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_initialize error:\" + error_code.ToString)\n            Return\n        End If\n\n        ' \u200b\u521b\u5efa\u200b\u6570\u636e\u5e93\u200b create database\n        Dim db_file_name As String = \"qiankunDataBase.Ztz\"\n        Dim db_password As String = \"password\"\n        error_code = tianzuo_QiankunInt_db_create_database(qiankun, db_file_name, db_password, \"qiankunDataBase\", True)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_db_create_database error:\" + error_code.ToString)\n            Return\n        End If\n\n        ' \u200b\u6253\u5f00\u200b\u6570\u636e\u5e93\u200b open database\n        error_code = tianzuo_QiankunInt_db_open_database(qiankun, db_file_name, db_password)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_db_open_database error:\" + error_code.ToString)\n            Return\n        End If\n\n        ' \u200b\u5411\u200b\u6570\u636e\u5e93\u200b\u5199\u5165\u200b\u4e00\u4e2a\u200b\u6574\u578b\u200b\u6570\u636e\u200b writes an integer to the database\n        Dim intInt As Integer = 12345678\n        error_code = tianzuo_QiankunInt_data_int_combine(qiankun, db_file_name, db_password, \"integer\", \"\", intInt)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_data_int_combine error:\" + error_code.ToString)\n            Return\n        End If\n\n        ' \u200b\u8bfb\u53d6\u200b\u521a\u200b\u5199\u5165\u200b\u7684\u200b\u6570\u636e\u200b read the data just written\n        Dim return_data As Integer = 0\n        error_code = tianzuo_QiankunInt_data_int_extract(qiankun, db_file_name, db_password, \"integer\", return_data)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_data_int_extract error:\" + error_code.ToString)\n            Return\n        End If\n\n        Console.WriteLine(\"get int: \" + return_data.ToString)\n\n        ' \u200b\u5173\u95ed\u200b\u6570\u636e\u5e93\u200b close database\n        error_code = tianzuo_QiankunInt_db_close_database(qiankun, db_file_name, db_password)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_db_close_database error:\" + error_code.ToString)\n            Return\n        End If\n\n        Console.WriteLine(\"test done -------------------\")\n\n    End Sub\nEnd Module\n\n</code></pre> go <pre><code>package main\n\n/*\n#include \"tianzuo.QiankunInterface.h\"\n*/\nimport \"C\"\nimport (\n    \"fmt\"\n    \"syscall\"\n    \"unsafe\"\n)\n\nconst (\n    Qiankun_errorcode_success       = 1  //  \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b\n    Qiankun_errorcode_normal        = 2  //  \u200b\u9519\u8bef\u200b\u7684\u200b\u503c\u200b\n    Qiankun_errorcode_differ        = 3  //  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u6570\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The number Of database files fails To be verified)\n    Qiankun_errorcode_no_rights     = 4  //  \u200b\u6570\u636e\u5e93\u200b\u5bc6\u7801\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The database password verification failed)\n    Qiankun_errorcode_db_not_exist  = 5  //  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u4e0d\u200b\u5b58\u5728\u200b (The database file does Not exist)\n    Qiankun_errorcode_exist         = 6  //  \u200b\u6570\u636e\u200b\u5df2\u200b\u5b58\u5728\u200b (Data already exists)\n    Qiankun_errorcode_not_exist     = 7  //  \u200b\u6570\u636e\u200b\u4e0d\u200b\u5b58\u5728\u200b (Data does Not exist)\n    Qiankun_errorcode_out_of_range  = 8  //  \u200b\u8d85\u51fa\u8303\u56f4\u200b (out Of range)\n    Qiankun_errorcode_type          = 9  //  \u200b\u7c7b\u578b\u200b\u4e0d\u7b26\u200b (wrong type)\n    Qiankun_errorcode_param         = 10 //  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b (parameter Error)\n    Qiankun_errorcode_compress      = 11 //  \u200b\u538b\u7f29\u200b\u9519\u8bef\u200b (compression Error)\n    Qiankun_errorcode_get_array     = 12 //  \u200b\u6570\u7ec4\u200b\u9519\u8bef\u200b (arrary Error)\n    Qiankun_errorcode_out_of_memory = 13 //  \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (memory overflow)\n    Qiankun_errorcode_handle        = 14 //  \u200b\u53e5\u67c4\u200b\u9519\u8bef\u200b (Error handle)\n    Qiankun_errorcode_io            = 15 //  IO\u200b\u9519\u8bef\u200b (io Error)\n)\n\nfunc main() {\n    // \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n    dll := syscall.MustLoadDLL(\"tianzuo.Qiankun.dll\")\n\n    // \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n    tianzuo_QiankunInterface_initialize := dll.MustFindProc(\"tianzuo_QiankunInterface_initialize\")\n    qiankun, _, _ := tianzuo_QiankunInterface_initialize.Call()\n\n    tianzuo_QiankunInt_initialize := dll.MustFindProc(\"tianzuo_QiankunInt_initialize\")\n    error_code, _, _ := tianzuo_QiankunInt_initialize.Call(qiankun)\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_initialize error: \", error_code)\n    }\n\n    // \u200b\u521b\u5efa\u200b\u6570\u636e\u5e93\u200b create database\n    db_file_name := C.CString(\"qiankunDataBase.Ztz\")\n    db_password := C.CString(\"password\")\n    tianzuo_QiankunInt_db_create_database := dll.MustFindProc(\"tianzuo_QiankunInt_db_create_database\")\n    error_code, _, _ = tianzuo_QiankunInt_db_create_database.Call(qiankun, uintptr(unsafe.Pointer(db_file_name)), uintptr(unsafe.Pointer(db_password)), uintptr(unsafe.Pointer(C.CString(\"qiankunDataBase\"))), 1)\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_db_create_database error: \", error_code)\n    }\n\n    // \u200b\u6253\u5f00\u200b\u6570\u636e\u5e93\u200b open database\n    tianzuo_QiankunInt_db_open_database := dll.MustFindProc(\"tianzuo_QiankunInt_db_open_database\")\n    error_code, _, _ = tianzuo_QiankunInt_db_open_database.Call(qiankun, uintptr(unsafe.Pointer(db_file_name)), uintptr(unsafe.Pointer(db_password)))\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_db_open_database error: \", error_code)\n    }\n\n    // \u200b\u5411\u200b\u6570\u636e\u5e93\u200b\u5199\u5165\u200b\u4e00\u4e2a\u200b\u6574\u578b\u200b\u6570\u636e\u200b writes an integer to the database\n    intInt := C.int(12345678)\n    tianzuo_QiankunInt_data_int_combine := dll.MustFindProc(\"tianzuo_QiankunInt_data_int_combine\")\n    error_code, _, _ = tianzuo_QiankunInt_data_int_combine.Call(qiankun, uintptr(unsafe.Pointer(db_file_name)), uintptr(unsafe.Pointer(db_password)), uintptr(unsafe.Pointer(C.CString(\"integer\"))), uintptr(unsafe.Pointer(C.CString(\"\"))), uintptr(intInt))\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_data_int_combine error: \", error_code)\n    }\n\n    // \u200b\u8bfb\u53d6\u200b\u521a\u200b\u5199\u5165\u200b\u7684\u200b\u6570\u636e\u200b read the data just written\n    return_int := C.int(0)\n    tianzuo_QiankunInt_data_int_extract := dll.MustFindProc(\"tianzuo_QiankunInt_data_int_extract\")\n    error_code, _, _ = tianzuo_QiankunInt_data_int_extract.Call(qiankun, uintptr(unsafe.Pointer(db_file_name)), uintptr(unsafe.Pointer(db_password)), uintptr(unsafe.Pointer(C.CString(\"integer\"))), uintptr(unsafe.Pointer(&amp;return_int)))\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_data_int_extract error: \", error_code)\n    }\n\n    fmt.Println(\"get integer data: \", return_int)\n\n    // \u200b\u5173\u95ed\u200b\u6570\u636e\u5e93\u200b close database\n    tianzuo_QiankunInt_db_close_database := dll.MustFindProc(\"tianzuo_QiankunInt_db_close_database\")\n    error_code, _, _ = tianzuo_QiankunInt_db_close_database.Call(qiankun, uintptr(unsafe.Pointer(db_file_name)), uintptr(unsafe.Pointer(db_password)))\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_db_close_database error: \", error_code)\n    }\n\n    fmt.Println(\"test done -------------------\")\n}\n\n</code></pre> rust <pre><code>\nuse std::os::raw::c_char;\nuse std::ffi::{c_int};\nuse std::ffi::CString;\nuse std::ptr::null;\n\n#[link(name = \"tianzuo.Qiankun\")]\nextern {\n    fn tianzuo_QiankunInterface_initialize() -&gt; *mut std::ffi::c_void;\n    fn tianzuo_QiankunInterface_terminate(obj: *mut std::ffi::c_void);\n    fn tianzuo_QiankunInt_initialize(obj: *mut std::ffi::c_void) -&gt; c_int;\n    fn tianzuo_QiankunInt_db_create_database(obj: *mut std::ffi::c_void, db_file_name: *const c_char, db_password: *const c_char, db_name: *const c_char, over_write: c_int) -&gt; c_int;\n    fn tianzuo_QiankunInt_db_open_database(obj: *mut std::ffi::c_void, db_file_name: *const c_char, db_password: *const c_char) -&gt; c_int;\n    fn tianzuo_QiankunInt_db_close_database(obj: *mut std::ffi::c_void, db_file_name: *const c_char, db_password: *const c_char) -&gt; c_int;\n    fn tianzuo_QiankunInt_data_int_combine(obj: *mut std::ffi::c_void, db_file_name: *const c_char, db_password: *const c_char, data_name: *const c_char, remark: *const c_char, data: c_int) -&gt; c_int;\n    fn tianzuo_QiankunInt_data_int_extract(obj: *mut std::ffi::c_void, db_file_name: *const c_char, db_password: *const c_char, data_name: *const c_char, data: *const c_int) -&gt; c_int;\n}\n\nfn main() {\n    unsafe {\n        // \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n        println!(\"initialize the interface\");\n\n        // \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n        let qiankun = tianzuo_QiankunInterface_initialize();\n        let error_code = tianzuo_QiankunInt_initialize(qiankun);\n        if 1 != error_code {\n            println!(\"initialize error: {:?}\", error_code);\n        }\n\n        // \u200b\u521b\u5efa\u200b\u6570\u636e\u5e93\u200b create database\n        let db_file_name = CString::new(String::from(\"qiankunDataBase.Ztz\")).expect(\"Failed to create CString\");\n        let db_password = CString::new(String::from(\"password\")).expect(\"Failed to create CString\");\n        let db_name = CString::new(String::from(\"qiankunDataBase\")).expect(\"Failed to create CString\");\n        let error_code = tianzuo_QiankunInt_db_create_database(qiankun, db_file_name.as_ptr(), db_password.as_ptr(), db_name.as_ptr(), 1);\n        if 1 != error_code {\n            println!(\"db_create_database error: {:?}\", error_code);\n        }\n\n        // \u200b\u6253\u5f00\u200b\u6570\u636e\u5e93\u200b open database\n        let error_code = tianzuo_QiankunInt_db_open_database(qiankun, db_file_name.as_ptr(), db_password.as_ptr());\n        if 1 != error_code {\n            println!(\"db_open_database error: {:?}\", error_code);\n        }\n\n        // \u200b\u5411\u200b\u6570\u636e\u5e93\u200b\u5199\u5165\u200b\u4e00\u4e2a\u200b\u6574\u578b\u200b\u6570\u636e\u200b writes an integer to the database\n        let int = 12345678;\n        let data_name = CString::new(String::from(\"integer\")).expect(\"Failed to create CString\");\n        let error_code = tianzuo_QiankunInt_data_int_combine(qiankun, db_file_name.as_ptr(), db_password.as_ptr(), data_name.as_ptr(), null(), int);\n        if 1 != error_code {\n            println!(\"data_combine error: {:?}\", error_code);\n        }\n\n        // \u200b\u8bfb\u53d6\u200b\u521a\u200b\u5199\u5165\u200b\u7684\u200b\u6570\u636e\u200b read the data just written\n        let mut return_data: c_int = 0;\n        let error_code = tianzuo_QiankunInt_data_int_extract(qiankun, db_file_name.as_ptr(), db_password.as_ptr(), data_name.as_ptr(), &amp;mut return_data);\n        if 1 != error_code {\n            println!(\"data_extract error: {:?}\", error_code);\n        }\n\n        println!(\"get integer data: {:?}\", return_data);\n\n        // \u200b\u5173\u95ed\u200b\u6570\u636e\u5e93\u200b close database\n        let error_code = tianzuo_QiankunInt_db_close_database(qiankun, db_file_name.as_ptr(), db_password.as_ptr());\n        if 1 != error_code {\n            println!(\"db_close_database error: {:?}\", error_code);\n        }\n\n        println!(\"test done -------------------\")\n    }\n}\n\n</code></pre> ruby <pre><code>require 'fiddle'\n\nlib = Fiddle::dlopen('C:/Users/zhengtianzuo/RubymineProjects/tianzuo.QiankunTest/tianzuo.Qiankun.dll')\ntianzuo_QiankunInterface_initialize = Fiddle::Function.new(lib['tianzuo_QiankunInterface_initialize'], [], Fiddle::TYPE_VOIDP)\ntianzuo_QiankunInterface_terminate = Fiddle::Function.new(lib['tianzuo_QiankunInterface_terminate'], [Fiddle::TYPE_VOIDP], Fiddle::TYPE_VOID)\ntianzuo_QiankunInt_initialize = Fiddle::Function.new(lib['tianzuo_QiankunInt_initialize'], [Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\ntianzuo_QiankunInt_db_create_database = Fiddle::Function.new(lib['tianzuo_QiankunInt_db_create_database'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT], Fiddle::TYPE_INT)\ntianzuo_QiankunInt_db_open_database = Fiddle::Function.new(lib['tianzuo_QiankunInt_db_open_database'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\ntianzuo_QiankunInt_data_int_combine = Fiddle::Function.new(lib['tianzuo_QiankunInt_data_int_combine'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT], Fiddle::TYPE_INT)\ntianzuo_QiankunInt_data_int_extract = Fiddle::Function.new(lib['tianzuo_QiankunInt_data_int_extract'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\ntianzuo_QiankunInt_db_close_database = Fiddle::Function.new(lib['tianzuo_QiankunInt_db_close_database'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\n\n# \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\nprint(\"initialize the interface\\n\")\n\n# \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\nqiankun = tianzuo_QiankunInterface_initialize.call()\nerror_code = tianzuo_QiankunInt_initialize.call(qiankun)\nif error_code != 1\n  print(\"initialize error:\", error_code, \"\\n\")\n  return\nend\n\n# \u200b\u521b\u5efa\u200b\u6570\u636e\u5e93\u200b create database\ndb_file_name = \"qiankunDataBase.Ztz\"\ndb_password = \"password\"\nerror_code = tianzuo_QiankunInt_db_create_database.call(qiankun, db_file_name, db_password, \"qiankunDataBase\", 1)\nif error_code != 1\n  print(\"db_create_database error:\", error_code, \"\\n\")\n  return\nend\n\n# \u200b\u6253\u5f00\u200b\u6570\u636e\u5e93\u200b open database\nerror_code = tianzuo_QiankunInt_db_open_database.call(qiankun, db_file_name, db_password)\nif error_code != 1\n  print(\"db_open_database error:\", error_code, \"\\n\")\nreturn\nend\n\n# \u200b\u5411\u200b\u6570\u636e\u5e93\u200b\u5199\u5165\u200b\u4e00\u4e2a\u200b\u6574\u578b\u200b\u6570\u636e\u200b writes an integer to the database\nintInt = 12345678\nerror_code = tianzuo_QiankunInt_data_int_combine.call(qiankun, db_file_name, db_password, \"integer\", \"\", intInt)\nif error_code != 1\n  print(\"data_combine error:\", error_code, \"\\n\")\nreturn\nend\n\n# \u200b\u8bfb\u53d6\u200b\u521a\u200b\u5199\u5165\u200b\u7684\u200b\u6570\u636e\u200b read the data just written\nreturn_data = Fiddle::Pointer.malloc(Fiddle::SIZEOF_INT)\nerror_code = tianzuo_QiankunInt_data_int_extract.call(qiankun, db_file_name, db_password, \"integer\", return_data)\nif error_code != 1\n  print(\"data_extract error:\", error_code, \"\\n\")\nreturn\nend\n\ninteger = return_data[0, Fiddle::SIZEOF_INT].unpack('I')[0]\nprint(\"get integer data: \", integer, \"\\n\")\n\n# \u200b\u5173\u95ed\u200b\u6570\u636e\u5e93\u200b close database\nerror_code = tianzuo_QiankunInt_db_close_database.call(qiankun, db_file_name, db_password)\nif error_code != 1\n  print(\"db_close_database error:\", error_code)\nreturn\nend\n\nprint(\"test done -------------------\")\n\n</code></pre>"},{"location":"component/tianzuo.Qiankun/#_8","title":"\u4e0b\u8f7d","text":""},{"location":"component/tianzuo.Zhuiri/","title":"\u5929\u4f50\u200b.\u200b\u8ffd\u65e5\u200b\u9774","text":""},{"location":"component/tianzuo.Zhuiri/#_2","title":"\u5929\u4f50\u200b.\u200b\u8ffd\u65e5\u200b\u9774","text":"\u64cd\u4f5c\u7cfb\u7edf\u200b \u200b\u7f16\u8bd1\u5668\u200b \u200b\u7f16\u7a0b\u8bed\u8a00"},{"location":"component/tianzuo.Zhuiri/#_3","title":"\u7b80\u4ecb","text":"<p>\u200b\u5929\u4f50\u200b.\u200b\u8ffd\u65e5\u200b\u9774\u200b \u200b\u9ad8\u6027\u80fd\u200b\u53ef\u9760\u200bUDP\u200b\u6570\u636e\u4f20\u8f93\u200bP2P\u200b\u901a\u8baf\u200b\u6846\u67b6\u200b\uff0c\u200b\u53ef\u200b\u7528\u4e8e\u200b\u5efa\u7acb\u200bP2P\u200b\u73af\u5883\u200b\uff0c\u200b\u6587\u4ef6\u4f20\u8f93\u200b\uff0c\u200b\u6570\u636e\u901a\u8baf\u200b\u3002\u200b\u57fa\u4e8e\u200bUDP\u200b\u534f\u8bae\u200b\u7684\u200b\u5185\u7f51\u200b\u7a7f\u900f\u200b\u89e3\u51b3\u65b9\u6848\u200b\uff0c\u200b\u8f7b\u677e\u200b\u5b9e\u73b0\u200b\u97f3\u89c6\u9891\u200b\u4f1a\u8bae\u200b\u4e2d\u5fc3\u200b\uff0c\u200b\u76f4\u64ad\u200b\uff0c\u200b\u8fdc\u7a0b\u684c\u9762\u200b/\u200b\u6587\u6863\u200b\u6f14\u793a\u200b\u7b49\u200b\u529f\u80fd\u200b\u3002</p> <p>\u200b\u4f20\u8bf4\u200b: \u200b\u51ed\u6b64\u200b\u9774\u200b\u53ef\u4ee5\u200b\u65e5\u884c\u5343\u91cc\u200b\u3001\u200b\u591c\u8d70\u200b\u516b\u767e\u200b\uff0c\u200b\u5982\u751f\u200b\u7fbd\u7ffc\u200b\u3002\u200b\u6e34\u6b32\u5f97\u200b\u996e\u200b\uff0c\u200b\u996e\u4e8e\u200b\u6cb3\u6e2d\u200b\uff0c\u200b\u6cb3\u6e2d\u200b\u4e0d\u8db3\u200b\uff0c\u200b\u5317\u996e\u200b\u5927\u6cfd\u200b\u3002\u200b\u672a\u81f3\u200b\uff0c\u200b\u9053\u200b\u6e34\u200b\u800c\u200b\u6b7b\u200b\u3002\u200b\u5f03\u5176\u6756\u200b\uff0c\u200b\u5316\u4e3a\u200b\u9093\u6797\u200b\u3002</p>"},{"location":"component/tianzuo.Zhuiri/#_4","title":"\u76ee\u6807","text":"<p>\u200b\u6784\u5efa\u200bUDP\u200b\u53ef\u9760\u200b\u6570\u636e\u4f20\u8f93\u200b\uff0c\u200b\u6309\u200b\u7b56\u7565\u200b\u52a8\u6001\u200b\u8c03\u6574\u200b\u4e22\u200b\u5305\u7387\u200b\u548c\u200b\u4f20\u8f93\u200b\u6027\u80fd\u200b\uff0c\u200b\u53ef\u200b\u65b9\u4fbf\u200b\u642d\u5efa\u200bP2P\u200b\u901a\u8baf\u200b\u3002</p> <p></p>"},{"location":"component/tianzuo.Zhuiri/#_5","title":"\u529f\u80fd","text":"<ul> <li>\ud83e\udde9 \u200b\u96c6\u6210\u200b\u7b80\u5355\u200b</li> <li>\ud83d\udcca \u200b\u9ad8\u5c42\u200b\u534f\u8bae\u200b\u5b9e\u73b0\u200b\u6570\u636e\u901a\u8baf\u200b\u7684\u200b\u7a33\u5b9a\u200b\u53ef\u9760\u200b, \u200b\u53ef\u200b\u52a8\u6001\u200b\u4fee\u6539\u200b\u53c2\u6570\u200b\u8c03\u6574\u200b\u901a\u8baf\u200b\u7b56\u7565\u200b.</li> <li>\ud83e\udea1 \u200b\u53ef\u200b\u4f7f\u7528\u200b\u540c\u200b\u4e00\u5957\u200b\u63a5\u5b57\u200b\u521d\u59cb\u5316\u200b\u591a\u4e2a\u200b\u7ec4\u4ef6\u200b\u8fdb\u884c\u200b\u591a\u7ebf\u7a0b\u200b\u6570\u636e\u901a\u8baf\u200b.</li> <li>\ud83d\udd22 \u200b\u89e3\u51b3\u200b\u4e22\u5305\u200b: \u200b\u91c7\u7528\u200b\u81ea\u884c\u200b\u7814\u53d1\u200b\u7684\u200b\u5e76\u884c\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u534f\u8bae\u200b, \u200b\u4fdd\u8bc1\u6570\u636e\u200b\u7684\u200b\u7a33\u5b9a\u200b\u53ef\u9760\u200b\u4f20\u8f93\u200b.</li> <li>\ud83e\ude9f \u200b\u52a8\u6001\u200b\u8c03\u6574\u200b: \u200b\u6570\u636e\u901a\u8baf\u200b\u53ef\u884c\u200b\u6548\u7387\u200b\u52a8\u6001\u200b\u8bc4\u4f30\u200b\u548c\u200b\u8ba1\u7b97\u200b\u83b7\u5f97\u200b\u5f53\u524d\u200b\u73af\u5883\u200b\u4e0b\u200b\u7684\u200b\u6700\u4f73\u200b\u901a\u8baf\u200b\u8868\u73b0\u200b.</li> <li>\ud83d\udc5c \u200b\u6570\u636e\u200b\u7ec4\u5e27\u200b: \u200b\u901a\u8baf\u200b\u6570\u636e\u5305\u200b\u53d1\u9001\u200b\u5206\u5305\u200b, \u200b\u63a5\u6536\u200b\u7ec4\u5305\u200b, \u200b\u4fdd\u8bc1\u6570\u636e\u200b\u987a\u5e8f\u200b\u5b8c\u6574\u200b.</li> </ul>"},{"location":"component/tianzuo.Zhuiri/#_6","title":"\u622a\u56fe","text":"<p>\u200b\u5929\u4f50\u200b.\u200b\u8ffd\u65e5\u200b\u9774\u200b\u6d4b\u8bd5\u7a0b\u5e8f\u200b:</p> <p></p>"},{"location":"component/tianzuo.Zhuiri/#_7","title":"\u4f8b\u5b50","text":"cpp <pre><code>#include &lt;iostream&gt;\n#include &lt;thread&gt;\n#include \"tianzuo.ZhuiriInterface.h\" // \u200b\u63a5\u53e3\u200b\u5934\u6587\u4ef6\u200b interface heaher file\n\n#include &lt;winsock.h&gt;\n#pragma comment(lib, \"ws2_32.lib\")\n\n// \u200b\u6570\u636e\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b\nvoid msg_recv_callback(void* context, Zhuiri_data_pkg_pointer data_pkg) {\n    Zhuiri_data_pkg_struct data_new;\n    memcpy(&amp;data_new, data_pkg, sizeof(Zhuiri_data_pkg_struct));\n    int send_size = data_pkg-&gt;m_data.get_send_size();\n    if (send_size &gt; Zhuiri_content_size) {\n        char* send_data = new char[static_cast&lt;unsigned int&gt;(send_size)];\n        memcpy(send_data, data_pkg-&gt;get_send_data(), static_cast&lt;unsigned int&gt;(send_size));\n        data_new.set_send_data(send_data);\n    } else {\n        data_new.set_send_data(data_new.m_data.m_data);\n    }\n    tianzuo_DataQueue* const dataQueue = reinterpret_cast&lt;tianzuo_DataQueue*&gt;(context);\n    dataQueue-&gt;push_back(&amp;data_new);\n}\n\n// \u200b\u63a5\u6536\u200b\u7ebf\u7a0b\u200b\nvoid recv_thread(tianzuo_DataQueue* data_queue_recv) {\n    while (1) {\n        Zhuiri_data_pkg_struct recv_msg;\n        if (data_queue_recv-&gt;pop_up(&amp;recv_msg) != Zhuiri_queue_error_code_success) {\n            //std::cout &lt;&lt; \"pop_up no data\" &lt;&lt; std::endl;\n            std::this_thread::sleep_for(std::chrono::milliseconds(200));\n            continue;\n        }\n\n        std::cout &lt;&lt; \"recv data: \" &lt;&lt; recv_msg.m_data.m_data &lt;&lt; std::endl;\n        if (strcmp(recv_msg.m_data.m_data, \"send data 99\") == 0) {\n            std::cout &lt;&lt; \"recv done\" &lt;&lt; std::endl;\n            return;\n        }\n    }\n}\n\nint main() {\n\n    // \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n    std::unique_ptr&lt;tianzuo_ZhuiriInterface&gt; zhuiri_interface(new tianzuo_ZhuiriInterface());\n\n    // \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n    tianzuo_ZhuiriInt* zhuiri = zhuiri_interface-&gt;initialize();\n\n    // \u200b\u521d\u59cb\u5316\u200b\u6570\u636e\u200b\u961f\u5217\u200b\u63a5\u53e3\u200b initialize the data queue interface\n    std::unique_ptr&lt;tianzuo_DataQueueInterface&gt; data_queue_interface(new tianzuo_DataQueueInterface());\n\n    // \u200b\u521b\u5efa\u200b\u6570\u636e\u200b\u961f\u5217\u200b\u5b9e\u4f8b\u200b create an data queue instance\n    tianzuo_DataQueue* data_queue_recv = data_queue_interface-&gt;initialize();\n\n    // \u200b\u521d\u59cb\u5316\u200b\u5b9e\u4f8b\u200b initialize the instance\n    int port = 6666;\n    int error_code = zhuiri-&gt;initialize(\n        nullptr, port, reinterpret_cast&lt;void*&gt;(msg_recv_callback),\n        data_queue_recv, 6000, false);\n    if (error_code != Zhuiri_error_code_success) {\n        std::cout &lt;&lt; \"initialize error: \" &lt;&lt; error_code;\n\n        // \u200b\u91ca\u653e\u200b\u63a5\u53e3\u200b terminate the interface\n        if (data_queue_interface != nullptr &amp;&amp; data_queue_recv != nullptr) {\n            data_queue_interface-&gt;terminate(&amp;data_queue_recv);\n        }\n        if (zhuiri_interface != nullptr &amp;&amp; zhuiri != nullptr) {\n            zhuiri_interface-&gt;terminate(&amp;zhuiri);\n        }\n        return -1;\n    }\n\n    // \u200b\u8bbe\u7f6e\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b set default parameters\n    Zhuiri_param_struct param(0, 5168, 1024, 2280, 3, 5, 600);\n    zhuiri-&gt;set_param(&amp;param);\n\n    // \u200b\u542f\u52a8\u200b\u63a5\u6536\u200b\u7ebf\u7a0b\u200b start receiving thread\n    std::thread recv_th(recv_thread, data_queue_recv);\n\n    // \u200b\u5f00\u59cb\u200b\u53d1\u9001\u6570\u636e\u200b start sending data\n    int data_size = 1024;\n    char data[1024];\n    memset(data, 0, data_size);\n    int ip = ntohl(inet_addr(\"127.0.0.1\"));\n    for (size_t i = 0; i &lt; 100; i++) {\n        //std::cout &lt;&lt; \"start send index: \" &lt;&lt; i &lt;&lt; std::endl;\n        sprintf_s(data, data_size, \"send data %d\", i);\n        int data_len = strlen(data);\n        Zhuiri_send_param_struct send_param(0, ip, port, Zhuiri_data_sign_reliable, 7788, data, data_len);\n        error_code = zhuiri-&gt;send(&amp;send_param);\n        if (error_code != Zhuiri_error_code_success) {\n            std::cout &lt;&lt; \"send error: \" &lt;&lt; error_code;\n\n            // \u200b\u91ca\u653e\u200b\u63a5\u53e3\u200b terminate the interface\n            if (data_queue_interface != nullptr &amp;&amp; data_queue_recv != nullptr) {\n                data_queue_interface-&gt;terminate(&amp;data_queue_recv);\n            }\n            if (zhuiri_interface != nullptr &amp;&amp; zhuiri != nullptr) {\n                zhuiri_interface-&gt;terminate(&amp;zhuiri);\n            }\n            return -1;\n        }\n        //std::this_thread::sleep_for(std::chrono::milliseconds(10));\n    }\n    std::cout &lt;&lt; \"send done\" &lt;&lt; std::endl;\n    recv_th.join();\n\n    // \u200b\u91ca\u653e\u200b\u63a5\u53e3\u200b terminate the interface\n    if (data_queue_interface != nullptr &amp;&amp; data_queue_recv != nullptr) {\n        data_queue_interface-&gt;terminate(&amp;data_queue_recv);\n    }\n    if (zhuiri_interface != nullptr &amp;&amp; zhuiri != nullptr) {\n        zhuiri_interface-&gt;terminate(&amp;zhuiri);\n    }\n\n    return 0;\n}\n</code></pre> python <pre><code>from ctypes import *\nfrom enum import Enum\nimport ctypes\nimport ipaddress\n\ntianzuo_ZhuiriLib = cdll.LoadLibrary('./tianzuo.Zhuiri.dll')\n\n\nclass Zhuiri_error_code(Enum):\n    Zhuiri_error_code_success       = 0x00000001                                     # \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b (success)\n    Zhuiri_error_code_no_rights     = 0x00000002                                     # \u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (no rights)\n    Zhuiri_error_code_socket        = 0x0000000D                                     # \u200b\u5957\u200b\u63a5\u5b57\u200b\u9519\u8bef\u200b (socket error)\n    Zhuiri_error_code_thread_error  = 0x00000021                                     # \u200b\u7ebf\u7a0b\u200b\u5931\u8d25\u200b (thread error)\n    Zhuiri_error_code_handle        = 0x00000022                                     # \u200b\u521b\u5efa\u200b\u53e5\u67c4\u200b\u5931\u8d25\u200b (handle error)\n    Zhuiri_error_code_out_of_cache  = 0x00000023                                     # \u200b\u8d85\u51fa\u200b\u7f13\u51b2\u200b\u6700\u5927\u503c\u200b (out f cache)\n    Zhuiri_error_code_out_of_memory = 0x00000024                                     # \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (out of memory)\n    Zhuiri_error_code_time_out      = 0x00000025                                     # \u200b\u64cd\u4f5c\u200b\u8d85\u65f6\u200b (time out)\n    Zhuiri_error_code_user_reject   = 0x00000098                                     # \u200b\u5bf9\u65b9\u200b\u51b3\u7edd\u200b (user reject)\n    Zhuiri_error_code_user_exit     = 0x00000099                                     # \u200b\u81ea\u884c\u200b\u9000\u51fa\u200b (user exit)\n\n\nclass Zhuiri_queue_error_code(Enum):\n    Zhuiri_queue_error_code_success       = 0x00000001                               # \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b (success)\n    Zhuiri_queue_error_code_invalid_value = 0x00000002                               # \u200b\u65e0\u6548\u200b\u7684\u200b\u503c\u200b (invalid value)\n    Zhuiri_queue_error_code_out_of_cache  = 0x00000003                               # \u200b\u8d85\u51fa\u200b\u7f13\u51b2\u200b (out f cache)\n    Zhuiri_queue_error_code_out_of_memory = 0x00000004                               # \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (out of memory)\n    Zhuiri_queue_error_code_no_data       = 0x00000005                               # \u200b\u65e0\u200b\u6570\u636e\u200b (no data)\n\n\nclass Zhuiri_data_sign(Enum):\n    Zhuiri_data_sign_none       = 0x00000000                                         # \u200b\u65e0\u200b\u6807\u8bc6\u200b  (no sign)\n    Zhuiri_data_sign_reliable   = 0x00000001                                         # \u200b\u53ef\u9760\u200b    (reliable)\n    Zhuiri_data_sign_processing = 0x00000002                                         # \u200b\u5904\u7406\u200b\u4e2d\u200b  (processing)\n    Zhuiri_data_sign_response   = 0x00000003                                         # \u200b\u56de\u5e94\u200b\u6d88\u606f\u200b (response)\n    Zhuiri_data_sign_heart      = 0x00000004                                         # \u200b\u5fc3\u8df3\u200b\u5305\u200b  (heart)\n\n\nclass tianzuo_ZhuiriInt:\n    def __init__(self):\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInterface_initialize.restype = c_void_p\n        self.obj = tianzuo_ZhuiriLib.tianzuo_ZhuiriInterface_initialize()\n\n    def __del__(self):\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInterface_terminate.argtypes = [c_void_p]\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInterface_terminate(self.obj)\n\n    def initialize(self, ip_addr, port, callback, context, heart_check_time, log_trace, iocp):\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_initialize.restype = c_int\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_initialize.argtypes = [c_void_p, c_char_p, ctypes.c_int, c_void_p, c_void_p, ctypes.c_int, ctypes.c_int, c_void_p]\n        return tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_initialize(self.obj, ip_addr, port, callback, context, heart_check_time, log_trace, iocp)\n\n    def set_param(self, sender_index, init_server_port, msg_init_size, recv_ex_data_max, retry_max, retry_all_number, init_retry_time):\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_set_param.restype = c_int\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_set_param.argtypes = [c_void_p, c_int, c_int, c_int, c_int, c_int, c_int, c_int]\n        return tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_set_param(self.obj, sender_index, init_server_port, msg_init_size, recv_ex_data_max, retry_max, retry_all_number, init_retry_time)\n\n    def send(self, sender_index, ip, port, sign, function, send_data, send_size):\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_send.restype = c_int\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_send.argtypes = [c_void_p, c_int, c_int, c_int, c_int, c_int, c_char_p, c_int]\n        return tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_send(self.obj, sender_index, ip, port, sign, function, send_data, send_size)\n\n\nclass tianzuo_DataQueueInt:\n    def __init__(self):\n        tianzuo_ZhuiriLib.tianzuo_DataQueueInterface_initialize.restype = c_void_p\n        self.obj = tianzuo_ZhuiriLib.tianzuo_DataQueueInterface_initialize()\n\n    def __del__(self):\n        tianzuo_ZhuiriLib.tianzuo_DataQueueInterface_terminate.argtypes = [c_void_p]\n        tianzuo_ZhuiriLib.tianzuo_DataQueueInterface_terminate(self.obj)\n\n    def initialize(self):\n        tianzuo_ZhuiriLib.tianzuo_DataQueueInt_initialize.restype = c_void_p\n        tianzuo_ZhuiriLib.tianzuo_DataQueueInt_initialize.argtypes = [c_void_p]\n        return tianzuo_ZhuiriLib.tianzuo_DataQueueInt_initialize(self.obj)\n\n\ncallback_type = ctypes.CFUNCTYPE(c_void_p, c_void_p, c_void_p)\n\n\nclass Zhuiri_data_struct(ctypes.Structure):\n    _fields_ = [(\"m_ip_adrs\", ctypes.c_int),\n                (\"m_port\", ctypes.c_int),\n                (\"m_function\", ctypes.c_int),\n                (\"m_sign\", ctypes.c_int),\n                (\"m_index\", ctypes.c_int),\n                (\"m_send_time\", ctypes.c_int),\n                (\"m_send_size\", ctypes.c_int),\n                (\"m_data\", ctypes.c_char * 492)]\n\n\nclass Zhuiri_data_pkg_struct(ctypes.Structure):\n    _fields_ = [(\"m_data\", Zhuiri_data_struct),\n                (\"m_send_data\", ctypes.c_char_p),\n                (\"m_Zhuiri\", ctypes.c_void_p),\n                (\"m_user_data\", ctypes.c_void_p)]\n\n\ndef msg_recv_callback(context, pData):\n    data = ctypes.cast(pData, ctypes.POINTER(Zhuiri_data_pkg_struct)).contents\n    print(\"recv data:\", data.m_data.m_data)\n\n\ndef main():\n    # \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n    print(\"initialize the interface\")\n\n    # \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n    data_queue_recv = tianzuo_DataQueueInt()\n    pdata_queue_recv = ctypes.pointer(ctypes.py_object(data_queue_recv))\n\n    pmsg_recv_callback = callback_type(msg_recv_callback)\n\n    Zhuiri = tianzuo_ZhuiriInt()\n    port = 6666\n    error_code = Zhuiri.initialize(None, port, pmsg_recv_callback, pdata_queue_recv, 6000, False, None)\n    if error_code != Zhuiri_error_code.Zhuiri_error_code_success.value:\n        print(\"initialize error:\", error_code)\n        return\n\n    # \u200b\u8bbe\u7f6e\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b set default parameters\n    Zhuiri.set_param(0, 5168, 1024, 2280, 3, 5, 600)\n\n    # \u200b\u5f00\u59cb\u200b\u53d1\u9001\u6570\u636e\u200b start sending data\n    ip = int(ipaddress.IPv4Address(\"127.0.0.1\"))\n    for i in range(100):\n        data = \"send data {}\".format(i)\n        data_len = len(data)\n        bytes_string = data.encode('utf-8')\n        error_code = Zhuiri.send(0, ip, port, Zhuiri_data_sign.Zhuiri_data_sign_reliable.value, 7788, bytes_string, data_len)\n        if error_code != Zhuiri_error_code.Zhuiri_error_code_success.value:\n            print(\"send error:\", error_code)\n            return\n\n    print(\"test done\")\n\n\nif __name__ == '__main__':\n    main()\n\n</code></pre> java <pre><code>package cn.camelsoft;\n\nimport com.sun.jna.Library;\nimport com.sun.jna.Native;\nimport com.sun.jna.Pointer;\nimport com.sun.jna.Callback;\nimport com.sun.jna.CallbackReference;\nimport com.sun.jna.ptr.IntByReference;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\n\nenum Zhuiri_error_code {\n    Zhuiri_error_code_success       (0x00000001),                                     ///&lt; \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b (success)\n    Zhuiri_error_code_no_rights     (0x00000002),                                     ///&lt; \u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (no rights)\n    Zhuiri_error_code_socket        (0x0000000D),                                     ///&lt; \u200b\u5957\u200b\u63a5\u5b57\u200b\u9519\u8bef\u200b (socket error)\n    Zhuiri_error_code_thread_error  (0x00000021),                                     ///&lt; \u200b\u7ebf\u7a0b\u200b\u5931\u8d25\u200b (thread error)\n    Zhuiri_error_code_handle        (0x00000022),                                     ///&lt; \u200b\u521b\u5efa\u200b\u53e5\u67c4\u200b\u5931\u8d25\u200b (handle error)\n    Zhuiri_error_code_out_of_cache  (0x00000023),                                     ///&lt; \u200b\u8d85\u51fa\u200b\u7f13\u51b2\u200b\u6700\u5927\u503c\u200b (out f cache)\n    Zhuiri_error_code_out_of_memory (0x00000024),                                     ///&lt; \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (out of memory)\n    Zhuiri_error_code_time_out      (0x00000025),                                     ///&lt; \u200b\u64cd\u4f5c\u200b\u8d85\u65f6\u200b (time out)\n    Zhuiri_error_code_user_reject   (0x00000098),                                     ///&lt; \u200b\u5bf9\u65b9\u200b\u51b3\u7edd\u200b (user reject)\n    Zhuiri_error_code_user_exit     (0x00000099);                                     ///&lt; \u200b\u81ea\u884c\u200b\u9000\u51fa\u200b (user exit)\n    private int value;\n    Zhuiri_error_code(int value) {\n        this.value = value;\n    }\n    public int getValue() {\n        return value;\n    }\n};\n\nenum Zhuiri_data_sign {\n    Zhuiri_data_sign_none       (0x00000000),                                         ///&lt; \u200b\u65e0\u200b\u6807\u8bc6\u200b  (no sign)\n    Zhuiri_data_sign_reliable   (0x00000001),                                         ///&lt; \u200b\u53ef\u9760\u200b    (reliable)\n    Zhuiri_data_sign_processing (0x00000002),                                         ///&lt; \u200b\u5904\u7406\u200b\u4e2d\u200b  (processing)\n    Zhuiri_data_sign_response   (0x00000003),                                         ///&lt; \u200b\u56de\u5e94\u200b\u6d88\u606f\u200b (response)\n    Zhuiri_data_sign_heart      (0x00000004);                                         ///&lt; \u200b\u5fc3\u8df3\u200b\u5305\u200b  (heart)\n    private int value;\n    Zhuiri_data_sign(int value) {\n        this.value = value;\n    }\n    public int getValue() {\n        return value;\n    }\n};\n\ninterface tianzuo_ZhuiriLib extends Library {\n    tianzuo_ZhuiriLib instance = (tianzuo_ZhuiriLib) Native.load(\"./tianzuo.Zhuiri.dll\", tianzuo_ZhuiriLib.class);\n    Pointer tianzuo_ZhuiriInterface_initialize();\n    void tianzuo_ZhuiriInterface_terminate(Pointer zhuiri);\n    int tianzuo_ZhuiriInt_initialize(Pointer zhuiri, String ip_addr, int port, Pointer callback, Pointer context, int heart_check_time, Boolean log_trace, Pointer iocp);\n    int tianzuo_ZhuiriInt_set_param(Pointer zhuiri, int sender_index, int init_server_port, int msg_init_size, int recv_ex_data_max, int retry_max, int retry_all_number, int init_retry_time);\n    int tianzuo_ZhuiriInt_send(Pointer zhuiri, int sender_index, int ip, int port, int sign, int function, String send_data, int send_size);\n}\n\ninterface tianzuo_DataQueueLib extends Library {\n    tianzuo_DataQueueLib instance = (tianzuo_DataQueueLib) Native.load(\"./tianzuo.Zhuiri.dll\", tianzuo_DataQueueLib.class);\n    Pointer tianzuo_DataQueueInterface_initialize();\n    void tianzuo_DataQueueInterface_terminate(Pointer DataQueue);\n    int tianzuo_DataQueueInt_initialize(Pointer DataQueue);\n}\n\ninterface MyCallback extends Callback {\n    void callbackFunction(Pointer context, Pointer pData);\n}\nclass MyCallbackImpl implements MyCallback {\n\n    @Override\n    public void callbackFunction(Pointer context, Pointer pData) {\n        Zhuiri_data_pkg_struct data_pkg = new Zhuiri_data_pkg_struct(pData);\n        String str = new String(data_pkg.m_data.m_data).trim();\n        System.out.printf(\"recv data: %s\\n\", str);\n    }\n}\n\npublic class Main {\n    public static int ipToInt(String ipAddress) {\n        try {\n            InetAddress inetAddress = InetAddress.getByName(ipAddress);\n            byte[] bytes = inetAddress.getAddress();\n\n            int result = 0;\n            for (byte b : bytes) {\n                result = result &lt;&lt; 8 | (b &amp; 0xFF);\n            }\n\n            return result;\n        } catch (UnknownHostException e) {\n            System.err.println(\"Invalid IP address: \" + ipAddress);\n            return 0;\n        }\n    }\n\n    public static void main(String[] args) {\n\n        System.setProperty(\"jna.encoding\",\"UTF-8\");\n\n        // \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n        System.out.printf(\"initialize the interface\\n\");\n\n        // \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n        Pointer data_queue_recv = tianzuo_DataQueueLib.instance.tianzuo_DataQueueInterface_initialize();\n\n        MyCallback callback = new MyCallbackImpl();\n        Pointer pcallback = CallbackReference.getFunctionPointer(callback);\n\n        Pointer zhuiri = tianzuo_ZhuiriLib.instance.tianzuo_ZhuiriInterface_initialize();\n        int port = 6666;\n        int error_code = tianzuo_ZhuiriLib.instance.tianzuo_ZhuiriInt_initialize(zhuiri, null, port, pcallback, data_queue_recv, 6000, false, null);\n        if (error_code != Zhuiri_error_code.Zhuiri_error_code_success.getValue()) {\n            System.out.printf(\"tianzuo_ZhuiriInt_initialize error: %d\\n\", error_code);\n            return;\n        }\n\n        // \u200b\u8bbe\u7f6e\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b set default parameters\n        tianzuo_ZhuiriLib.instance.tianzuo_ZhuiriInt_set_param(zhuiri, 0, 5168, 1024, 2280, 3, 5, 600);\n\n        // \u200b\u5f00\u59cb\u200b\u53d1\u9001\u6570\u636e\u200b start sending data\n        String ipAddress = \"127.0.0.1\";\n        int ip = ipToInt(ipAddress);\n        int sport = 6666;\n        for (int i = 0; i &lt; 100; i++) {\n            String data = String.format(\"send data %d \", i);\n            int data_len = data.length();\n            int error_code2 = tianzuo_ZhuiriLib.instance.tianzuo_ZhuiriInt_send(zhuiri, 0, ip, sport, Zhuiri_data_sign.Zhuiri_data_sign_reliable.getValue(), 7788, data, data_len);\n            if (error_code2 != Zhuiri_error_code.Zhuiri_error_code_success.getValue()) {\n                System.out.printf(\"tianzuo_ZhuiriInt_send error: %d\\n\", error_code2);\n                return;\n            }\n        }\n\n        System.out.printf(\"test done\\n\");\n    }\n}\n</code></pre> csharp <pre><code>\n\nusing System.Collections;\nusing System.Net;\nusing System.Runtime.InteropServices;\nusing System.Text;\n\npublic enum Zhuiri_error_code\n{\n    Zhuiri_error_code_success       = 0x00000001,                                     ///&lt; \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b (success)\n    Zhuiri_error_code_no_rights     = 0x00000002,                                     ///&lt; \u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (no rights)\n    Zhuiri_error_code_socket        = 0x0000000D,                                     ///&lt; \u200b\u5957\u200b\u63a5\u5b57\u200b\u9519\u8bef\u200b (socket error)\n    Zhuiri_error_code_thread_error  = 0x00000021,                                     ///&lt; \u200b\u7ebf\u7a0b\u200b\u5931\u8d25\u200b (thread error)\n    Zhuiri_error_code_handle        = 0x00000022,                                     ///&lt; \u200b\u521b\u5efa\u200b\u53e5\u67c4\u200b\u5931\u8d25\u200b (handle error)\n    Zhuiri_error_code_out_of_cache  = 0x00000023,                                     ///&lt; \u200b\u8d85\u51fa\u200b\u7f13\u51b2\u200b\u6700\u5927\u503c\u200b (out f cache)\n    Zhuiri_error_code_out_of_memory = 0x00000024,                                     ///&lt; \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (out of memory)\n    Zhuiri_error_code_time_out      = 0x00000025,                                     ///&lt; \u200b\u64cd\u4f5c\u200b\u8d85\u65f6\u200b (time out)\n    Zhuiri_error_code_user_reject   = 0x00000098,                                     ///&lt; \u200b\u5bf9\u65b9\u200b\u51b3\u7edd\u200b (user reject)\n    Zhuiri_error_code_user_exit     = 0x00000099,                                     ///&lt; \u200b\u81ea\u884c\u200b\u9000\u51fa\u200b (user exit)\n}\n\npublic enum Zhuiri_data_sign\n{\n    Zhuiri_data_sign_none       = 0x00000000,                                         ///&lt; \u200b\u65e0\u200b\u6807\u8bc6\u200b  (no sign)\n    Zhuiri_data_sign_reliable   = 0x00000001,                                         ///&lt; \u200b\u53ef\u9760\u200b    (reliable)\n    Zhuiri_data_sign_processing = 0x00000002,                                         ///&lt; \u200b\u5904\u7406\u200b\u4e2d\u200b  (processing)\n    Zhuiri_data_sign_response   = 0x00000003,                                         ///&lt; \u200b\u56de\u5e94\u200b\u6d88\u606f\u200b (response)\n    Zhuiri_data_sign_heart      = 0x00000004,                                         ///&lt; \u200b\u5fc3\u8df3\u200b\u5305\u200b  (heart)\n};\n\npublic struct Zhuiri_data_struct\n{\n    public Zhuiri_data_struct()\n    {\n    }\n    public int m_ip_adrs;\n    public int m_port;\n    public int m_function;\n    public int m_sign;\n    public int m_index;\n    public int m_send_time;\n    public int m_send_size;\n    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 492)]\n    public byte[] m_data;\n}\n\npublic struct Zhuiri_data_pkg_struct\n{\n    public Zhuiri_data_pkg_struct()\n    {\n    }\n    public Zhuiri_data_struct m_data;\n    public IntPtr m_send_data;\n    public IntPtr m_Zhuiri;\n    public IntPtr m_user_data;\n}\n\npublic delegate void CallbackDelegate(IntPtr context, IntPtr pData);\n\nclass Program\n{\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern IntPtr tianzuo_ZhuiriInterface_initialize();\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern void tianzuo_ZhuiriInterface_terminate(IntPtr Zhuiri);\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern int tianzuo_ZhuiriInt_initialize(IntPtr Zhuiri, string ip_addr, int port, IntPtr callback, IntPtr context, int heart_check_time, bool log_trace, IntPtr iocp);\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern IntPtr tianzuo_DataQueueInterface_initialize();\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern int tianzuo_ZhuiriInt_set_param(IntPtr Zhuiri, int sender_index, int init_server_port, int msg_init_size, int recv_ex_data_max, int retry_max, int retry_all_number, int init_retry_time);\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern int tianzuo_ZhuiriInt_send(IntPtr Zhuiri, int sender_index, int ip, int port, int sign, int function, string send_data, int send_size);\n\n    static void MyCallback(IntPtr context, IntPtr pData)\n    {\n        Zhuiri_data_pkg_struct data = Marshal.PtrToStructure&lt;Zhuiri_data_pkg_struct&gt;(pData);\n        string str = Encoding.ASCII.GetString(data.m_data.m_data);\n        Console.WriteLine(\"recv data:\" + str);\n    }\n\n    static void Main(string[] args)\n    {\n        // \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n        Console.WriteLine(\"initialize the interface\\n\");\n\n        // \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n        IntPtr data_queue_recv = tianzuo_DataQueueInterface_initialize();\n\n        CallbackDelegate callback = new CallbackDelegate(MyCallback);\n        IntPtr callbackPtr = Marshal.GetFunctionPointerForDelegate(callback);\n\n        IntPtr zhuiri = tianzuo_ZhuiriInterface_initialize();\n        int port = 6666;\n        int error_code = tianzuo_ZhuiriInt_initialize(zhuiri, null, port, callbackPtr, data_queue_recv, 6000, false, 0);\n        if (error_code != ((int)Zhuiri_error_code.Zhuiri_error_code_success))\n        {\n            Console.WriteLine(\"tianzuo_ZhuiriInt_initialize error:\" + error_code);\n            return;\n        }\n\n        // \u200b\u8bbe\u7f6e\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b set default parameters\n        tianzuo_ZhuiriInt_set_param(zhuiri, 0, 5168, 1024, 2280, 3, 5, 600);\n\n        // \u200b\u5f00\u59cb\u200b\u53d1\u9001\u6570\u636e\u200b start sending data\n        string ipAddressString = \"127.0.1.1\";\n        IPAddress ipAddress = IPAddress.Parse(ipAddressString);\n        byte[] bytes = ipAddress.GetAddressBytes();\n        if (BitConverter.IsLittleEndian)\n        {\n            Array.Reverse(bytes);\n        }\n        int ip = BitConverter.ToInt32(bytes, 0);\n        int sport = 6666;\n        for (int i = 0; i &lt; 100; i++)\n        {\n            string data = String.Format(\"send data {0}\", i);\n            int data_len = data.Length;\n            error_code = tianzuo_ZhuiriInt_send(zhuiri, 0, ip, sport, (int)Zhuiri_data_sign.Zhuiri_data_sign_reliable, 7788, data, data_len);\n            if (error_code != ((int)Zhuiri_error_code.Zhuiri_error_code_success))\n            {\n                Console.WriteLine(\"tianzuo_ZhuiriInt_send error:\" + error_code);\n                return;\n            }\n        }\n\n        Console.WriteLine(\"test done\");\n    }\n}\n\n</code></pre> javascript <pre><code>\n\nZhuiri_error_code_success       = 0x00000001;                                     ///&lt; \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b (success)\nZhuiri_error_code_no_rights     = 0x00000002;                                     ///&lt; \u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (no rights)\nZhuiri_error_code_socket        = 0x0000000D;                                     ///&lt; \u200b\u5957\u200b\u63a5\u5b57\u200b\u9519\u8bef\u200b (socket error)\nZhuiri_error_code_thread_error  = 0x00000021;                                     ///&lt; \u200b\u7ebf\u7a0b\u200b\u5931\u8d25\u200b (thread error)\nZhuiri_error_code_handle        = 0x00000022;                                     ///&lt; \u200b\u521b\u5efa\u200b\u53e5\u67c4\u200b\u5931\u8d25\u200b (handle error)\nZhuiri_error_code_out_of_cache  = 0x00000023;                                     ///&lt; \u200b\u8d85\u51fa\u200b\u7f13\u51b2\u200b\u6700\u5927\u503c\u200b (out f cache)\nZhuiri_error_code_out_of_memory = 0x00000024;                                     ///&lt; \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (out of memory)\nZhuiri_error_code_time_out      = 0x00000025;                                     ///&lt; \u200b\u64cd\u4f5c\u200b\u8d85\u65f6\u200b (time out)\nZhuiri_error_code_user_reject   = 0x00000098;                                     ///&lt; \u200b\u5bf9\u65b9\u200b\u51b3\u7edd\u200b (user reject)\nZhuiri_error_code_user_exit     = 0x00000099;                                     ///&lt; \u200b\u81ea\u884c\u200b\u9000\u51fa\u200b (user exit)\n\nZhuiri_data_sign_none           = 0x00000000;                                     ///&lt; \u200b\u65e0\u200b\u6807\u8bc6\u200b  (no sign)\nZhuiri_data_sign_reliable       = 0x00000001;                                     ///&lt; \u200b\u53ef\u9760\u200b    (reliable)\nZhuiri_data_sign_processing     = 0x00000002;                                     ///&lt; \u200b\u5904\u7406\u200b\u4e2d\u200b  (processing)\nZhuiri_data_sign_response       = 0x00000003;                                     ///&lt; \u200b\u56de\u5e94\u200b\u6d88\u606f\u200b (response)\nZhuiri_data_sign_heart          = 0x00000004;                                     ///&lt; \u200b\u5fc3\u8df3\u200b\u5305\u200b  (heart)\n\nlet ffi = require('ffi-napi')\nconst ref = require('ref-napi');\n\nlet tianzuo_ZhuiriLib = ffi.Library(\"tianzuo.Zhuiri.dll\", {\n    'tianzuo_ZhuiriInterface_initialize': ['pointer', []],\n    'tianzuo_ZhuiriInterface_terminate':['void',['pointer']],\n    'tianzuo_ZhuiriInt_initialize':['int',['pointer','pointer','int','pointer','pointer','int', 'bool','pointer']],\n    'tianzuo_ZhuiriInt_set_param':['int',['pointer','int','int','int','int','int','int','int']],\n    'tianzuo_ZhuiriInt_send':['int',['pointer','int','int','int','int','int','string','int']],\n    'tianzuo_DataQueueInterface_initialize': ['pointer', []],\n    'tianzuo_DataQueueInterface_terminate':['void',['pointer']],\n})\n\nfunction ipToInt(ip) {\n    let parts = ip.split('.').map(Number);\n    return (parts[0] &lt;&lt; 24) + (parts[1] &lt;&lt; 16) + (parts[2] &lt;&lt; 8) + parts[3];\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve =&gt; setTimeout(resolve, ms));\n}\n\nasync function main() {\n\n    // \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n    console.log(\"initialize the interface\\n\");\n\n    // \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n    let data_queue_recv = tianzuo_ZhuiriLib.tianzuo_DataQueueInterface_initialize();\n\n    const callback = ffi.Callback('void', ['pointer', 'pointer'], function(context, pData) {\n        const data = pData.readCString(4*7);\n        console.log(`recv data: ${data}`);\n    });\n\n    let port = 5555;\n    let zhuiri = tianzuo_ZhuiriLib.tianzuo_ZhuiriInterface_initialize();\n    let error_code = tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_initialize(zhuiri, null, port, callback, data_queue_recv, 6000, false, null);\n    if (error_code !== Zhuiri_error_code_success) {\n        console.log(\"tianzuo_ZhuiriInt_initialize error: %d\\n\", error_code);\n        return;\n    }\n\n    // \u200b\u8bbe\u7f6e\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b set default parameters\n    tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_set_param(zhuiri, 0, 5168, 1024, 2280, 3, 5, 600);\n\n    // \u200b\u5f00\u59cb\u200b\u53d1\u9001\u6570\u636e\u200b start sending data\n    const ipString = '127.0.0.1';\n    const ip = ipToInt(ipString);\n    let sport = 6666;\n\n    for (let i = 0; i &lt; 10; i++) {\n        const data = `send data ${i}`;\n        const data_len = data.length;\n        error_code = tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_send(zhuiri, 0, ip, sport, Zhuiri_data_sign_reliable, 7788, data, data_len);\n        if (error_code !== Zhuiri_error_code_success) {\n            console.log(\"tianzuo_ZhuiriInt_send error: %d\\n\", error_code);\n            return;\n        }\n    }\n    await sleep(20000);\n}\n\nmain();\n\nconsole.log(\"test done\\n\");\n\n\n</code></pre> php <pre><code>&lt;?php\n\n// \u200b\u68c0\u67e5\u200b\u662f\u5426\u200b\u52a0\u8f7d\u200b\u4e86\u200b FFI \u200b\u6269\u5c55\u200b\nif (extension_loaded('ffi')) {\n    echo(\"\u200b\u5df2\u200b\u542f\u7528\u200b FFI \u200b\u6269\u5c55\u200b\\n\");\n} else {\n    die(\"\u200b\u672a\u200b\u542f\u52a8\u200b FFI \u200b\u6269\u5c55\u200b\\n\");\n}\n\nenum Zhuiri_error_code\n{\nconst Zhuiri_error_code_success       = 0x00000001;                                     ///&lt; \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b (success)\nconst Zhuiri_error_code_no_rights     = 0x00000002;                                     ///&lt; \u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (no rights)\nconst Zhuiri_error_code_socket        = 0x0000000D;                                     ///&lt; \u200b\u5957\u200b\u63a5\u5b57\u200b\u9519\u8bef\u200b (socket error)\nconst Zhuiri_error_code_thread_error  = 0x00000021;                                     ///&lt; \u200b\u7ebf\u7a0b\u200b\u5931\u8d25\u200b (thread error)\nconst Zhuiri_error_code_handle        = 0x00000022;                                     ///&lt; \u200b\u521b\u5efa\u200b\u53e5\u67c4\u200b\u5931\u8d25\u200b (handle error)\nconst Zhuiri_error_code_out_of_cache  = 0x00000023;                                     ///&lt; \u200b\u8d85\u51fa\u200b\u7f13\u51b2\u200b\u6700\u5927\u503c\u200b (out f cache)\nconst Zhuiri_error_code_out_of_memory = 0x00000024;                                     ///&lt; \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (out of memory)\nconst Zhuiri_error_code_time_out      = 0x00000025;                                     ///&lt; \u200b\u64cd\u4f5c\u200b\u8d85\u65f6\u200b (time out)\nconst Zhuiri_error_code_user_reject   = 0x00000098;                                     ///&lt; \u200b\u5bf9\u65b9\u200b\u51b3\u7edd\u200b (user reject)\nconst Zhuiri_error_code_user_exit     = 0x00000099;                                     ///&lt; \u200b\u81ea\u884c\u200b\u9000\u51fa\u200b (user exit)\n};\n\nenum Zhuiri_data_sign\n{\nconst Zhuiri_data_sign_none           = 0x00000000;                                     ///&lt; \u200b\u65e0\u200b\u6807\u8bc6\u200b  (no sign)\nconst Zhuiri_data_sign_reliable       = 0x00000001;                                     ///&lt; \u200b\u53ef\u9760\u200b    (reliable)\nconst Zhuiri_data_sign_processing     = 0x00000002;                                     ///&lt; \u200b\u5904\u7406\u200b\u4e2d\u200b  (processing)\nconst Zhuiri_data_sign_response       = 0x00000003;                                     ///&lt; \u200b\u56de\u5e94\u200b\u6d88\u606f\u200b (response)\nconst Zhuiri_data_sign_heart          = 0x00000004;                                     ///&lt; \u200b\u5fc3\u8df3\u200b\u5305\u200b  (heart)\n};\n\n$ffi = FFI::cdef(\"\n    void* tianzuo_ZhuiriInterface_initialize();\n    void tianzuo_ZhuiriInterface_terminate(void* *ZhuiriInt_pointer);\n    int tianzuo_ZhuiriInt_initialize(void* ZhuiriInt_pointer, const char* ip_addr, int port, const void* callback, const void* context, int const heart_check_time, bool log_trace, void* iocp);\n    int tianzuo_ZhuiriInt_set_param(void* ZhuiriInt_pointer, int sender_index, int init_server_port, int msg_init_size, int recv_ex_data_max, int retry_max, int retry_all_number, int init_retry_time);\n    int tianzuo_ZhuiriInt_send(void* ZhuiriInt_pointer, int sender_index, int ip, int port, int sign, int function, char* send_data, int send_size);\n    void* tianzuo_DataQueueInterface_initialize();\n    void tianzuo_DataQueueInterface_terminate(void* *DataQueue_pointer);\n    typedef unsigned(*Zhuiri_callback)(const void *context, const void *pData);\n\", \"tianzuo.Zhuiri.dll\");\n\n# \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\necho \"initialize the interface\" . \"\\n\";\n\n# \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n$data_queue_recv = $ffi-&gt;tianzuo_DataQueueInterface_initialize();\n\n\n//function myCallback($context, $pData) {\n//    echo \"phpCallback\" . \"\\n\";\n//}\n//\n//// Define the callback function signature\n//$callback = function($context, $pData) {\n//    myCallback($context, $pData);\n//};\n//\n//$callableCallback = FFI::addr($callback);\n\n\n//$phpCallback = function($context, $pData): void {\n//    echo \"phpCallback\" . \"\\n\";\n//};\n//$callback= FFI::new(\"Zhuiri_callback\", $phpCallback);\n\n\n$callback = $ffi-&gt;callback(\"void(const char*)\", function($message) {\n    echo \"Callback message: $message\\n\";\n});\n\n\n\n$port = 6666;\n$zhuiri = $ffi-&gt;tianzuo_ZhuiriInterface_initialize();\n$error_code = $ffi-&gt;tianzuo_ZhuiriInt_initialize($zhuiri, null, $port, $callback, $data_queue_recv, 6000, False, null);\nif ($error_code != Zhuiri_error_code::Zhuiri_error_code_success) {\n    echo \"initialize error: \" . $error_code . \"\\n\";\n    return;\n}\n\n# \u200b\u8bbe\u7f6e\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b set default parameters\n$ffi-&gt;tianzuo_ZhuiriInt_set_param($zhuiri, 0, 5168, 1024, 2280, 3, 5, 600);\n\n# \u200b\u5f00\u59cb\u200b\u53d1\u9001\u6570\u636e\u200b start sending data\n$ip = ip2long(\"127.0.0.1\");\nfor ($i = 0; $i &lt; 10; $i++) {\n    $data = sprintf(\"send data %d\", $i);\n    $data_len = strlen($data);\n    echo \"ip: \" . $ip . \"\\n\";\n    echo \"port: \" . $port . \"\\n\";\n    echo \"send data: \" . $data . \"\\n\";\n    echo \"data_len: \" . $data_len . \"\\n\";\n    $error_code = $ffi-&gt;tianzuo_ZhuiriInt_send($zhuiri, 0, $ip, $port, Zhuiri_data_sign::Zhuiri_data_sign_reliable, 7788, $data, $data_len);\n    if ($error_code != Zhuiri_error_code::Zhuiri_error_code_success) {\n        echo \"send error: \" . $error_code . \"\\n\";\n        return;\n    }\n}\n\necho \"test done\" . \"\\n\";\n\n\n?&gt;\n</code></pre> vb <pre><code>\nImports System.IO\nImports System.Net\nImports System.Runtime.InteropServices\nImports System.Runtime.InteropServices.JavaScript.JSType\nImports System.Text\n\nEnum Zhuiri_error_code\n    Zhuiri_error_code_success = 1                                            ' \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b (success)\n    Zhuiri_error_code_no_rights = 2                                          ' \u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (no rights)\n    Zhuiri_error_code_socket = 13                                            ' \u200b\u5957\u200b\u63a5\u5b57\u200b\u9519\u8bef\u200b (socket Error)\n    Zhuiri_error_code_thread_error = 21                                      ' \u200b\u7ebf\u7a0b\u200b\u5931\u8d25\u200b (thread Error)\n    Zhuiri_error_code_handle = 22                                            ' \u200b\u521b\u5efa\u200b\u53e5\u67c4\u200b\u5931\u8d25\u200b (handle Error)\n    Zhuiri_error_code_out_of_cache = 23                                      ' \u200b\u8d85\u51fa\u200b\u7f13\u51b2\u200b\u6700\u5927\u503c\u200b (out f cache)\n    Zhuiri_error_code_out_of_memory = 24                                     ' \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (out Of memory)\n    Zhuiri_error_code_time_out = 25                                          ' \u200b\u64cd\u4f5c\u200b\u8d85\u65f6\u200b (time out)\n    Zhuiri_error_code_user_reject = 98                                       ' \u200b\u5bf9\u65b9\u200b\u51b3\u7edd\u200b (user reject)\n    Zhuiri_error_code_user_exit = 99                                         ' \u200b\u81ea\u884c\u200b\u9000\u51fa\u200b (user Exit)\nEnd Enum\n\nEnum Zhuiri_data_sign\n    Zhuiri_data_sign_none = 0                                               ' \u200b\u65e0\u200b\u6807\u8bc6\u200b  (no sign)\n    Zhuiri_data_sign_reliable = 1                                           ' \u200b\u53ef\u9760\u200b    (reliable)\n    Zhuiri_data_sign_processing = 2                                         ' \u200b\u5904\u7406\u200b\u4e2d\u200b  (processing)\n    Zhuiri_data_sign_response = 3                                           ' \u200b\u56de\u5e94\u200b\u6d88\u606f\u200b (response)\n    Zhuiri_data_sign_heart = 4                                              ' \u200b\u5fc3\u8df3\u200b\u5305\u200b  (heart)\nEnd Enum\n\nStructure Zhuiri_data_struct\n    Public m_ip_adrs As Integer\n    Public m_port As Integer\n    Public m_function As Integer\n    Public m_sign As Integer\n    Public m_index As Integer\n    Public m_send_time As Integer\n    Public m_send_size As Integer\n    &lt;MarshalAs(UnmanagedType.ByValArray, SizeConst:=492)&gt;\n    Public m_data As Byte()\nEnd Structure\n\nStructure Zhuiri_data_pkg_struct\n    Public m_data As Zhuiri_data_struct\n    Public m_send_data As IntPtr\n    Public m_Zhuiri As IntPtr\n    Public m_user_data As IntPtr\nEnd Structure\n\nModule Program\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_ZhuiriInterface_initialize() As IntPtr\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_ZhuiriInterface_terminate(ByRef ZhuiriInt_pointer As IntPtr)\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_ZhuiriInt_initialize(ZhuiriInt_pointer As IntPtr, ip_addr As String, port As Integer,\n        callback As IntPtr, context As IntPtr, heart_check_time As Integer, log_trace As Boolean, iocp As IntPtr) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_ZhuiriInt_set_param(ZhuiriInt_pointer As IntPtr,\n        sender_index As Integer, init_server_port As Integer, msg_init_size As Integer,\n        recv_ex_data_max As Integer, retry_max As Integer, retry_all_number As Integer,\n        init_retry_time As Integer) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_ZhuiriInt_send(ZhuiriInt_pointer As IntPtr,\n        sender_index As Integer, ip As Integer, port As Integer, sign As Integer, func As Integer, send_data As String, send_size As Integer) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_DataQueueInterface_initialize() As IntPtr\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_DataQueueInterface_terminate(ByRef DataQueue_pointer As IntPtr)\n    End Function\n\n    Public Delegate Sub CallbackFunc(context As IntPtr, pData As IntPtr)\n\n    Public Sub msg_recv_callback(context As IntPtr, pData As IntPtr)\n        Dim data As Zhuiri_data_pkg_struct = Marshal.PtrToStructure(Of Zhuiri_data_pkg_struct)(pData)\n        Dim Str As String = Encoding.ASCII.GetString(data.m_data.m_data)\n        Console.WriteLine(\"recv data:\" + Str)\n    End Sub\n\n    Sub Main(args As String())\n\n        ' \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n        Console.WriteLine(\"initialize the interface\")\n\n        ' \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n        Dim data_queue_recv As IntPtr = tianzuo_DataQueueInterface_initialize()\n        Dim callbackDelegate As CallbackFunc = AddressOf msg_recv_callback\n        Dim callbackPtr As IntPtr = Marshal.GetFunctionPointerForDelegate(callbackDelegate)\n\n        Dim port As Integer = 6666\n        Dim Zhuiri As IntPtr = tianzuo_ZhuiriInterface_initialize()\n        Dim error_code As Integer = tianzuo_ZhuiriInt_initialize(Zhuiri, IntPtr.Zero, port, callbackPtr, data_queue_recv, 6000, False, IntPtr.Zero)\n        If (error_code &lt;&gt; Zhuiri_error_code.Zhuiri_error_code_success) Then\n            Console.WriteLine(\"tianzuo_ZhuiriInt_initialize error:\" + error_code.ToString)\n            Return\n        End If\n\n        ' \u200b\u8bbe\u7f6e\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b Set Default parameters\n        tianzuo_ZhuiriInt_set_param(Zhuiri, 0, 5168, 1024, 2280, 3, 5, 600)\n\n        ' \u200b\u5f00\u59cb\u200b\u53d1\u9001\u6570\u636e\u200b start sending data\n        Dim ipAddressString As String = \"127.0.1.1\"\n        Dim ipAddress As IPAddress = IPAddress.Parse(ipAddressString)\n        Dim bytes As Byte() = ipAddress.GetAddressBytes()\n        If (BitConverter.IsLittleEndian) Then\n            Array.Reverse(bytes)\n        End If\n        Dim ip As Integer = BitConverter.ToInt32(bytes, 0)\n        Dim sport As Integer = 6666\n        For i As Integer = 0 To 99\n            Dim data As String = String.Format(\"send data {0}\", i)\n            Dim data_len As Integer = data.Length\n            error_code = tianzuo_ZhuiriInt_send(Zhuiri, 0, ip, sport, Zhuiri_data_sign.Zhuiri_data_sign_reliable, 7788, data, data_len)\n            If (error_code &lt;&gt; Zhuiri_error_code.Zhuiri_error_code_success) Then\n                Console.WriteLine(\"tianzuo_ZhuiriInt_send error:\" + error_code.ToString)\n                Return\n            End If\n        Next\n\n        Console.WriteLine(\"test done -------------------\")\n\n    End Sub\nEnd Module\n\n</code></pre> go <pre><code>package main\n\n/*\n#include \"tianzuo.ZhuiriInterface.h\"\nvoid msg_recv_callback_cgo(const void *context, const void *pData);\n*/\nimport \"C\"\nimport (\n    \"fmt\"\n    \"net\"\n    \"syscall\"\n    \"unsafe\"\n)\n\nconst (\n    Zhuiri_error_code_success       = 1  // \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b (success)\n    Zhuiri_error_code_no_rights     = 2  // \u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (no rights)\n    Zhuiri_error_code_socket        = 13 // \u200b\u5957\u200b\u63a5\u5b57\u200b\u9519\u8bef\u200b (socket error)\n    Zhuiri_error_code_thread_error  = 21 // \u200b\u7ebf\u7a0b\u200b\u5931\u8d25\u200b (thread error)\n    Zhuiri_error_code_handle        = 22 // \u200b\u521b\u5efa\u200b\u53e5\u67c4\u200b\u5931\u8d25\u200b (handle error)\n    Zhuiri_error_code_out_of_cache  = 23 // \u200b\u8d85\u51fa\u200b\u7f13\u51b2\u200b\u6700\u5927\u503c\u200b (out f cache)\n    Zhuiri_error_code_out_of_memory = 24 // \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (out of memory)\n    Zhuiri_error_code_time_out      = 25 // \u200b\u64cd\u4f5c\u200b\u8d85\u65f6\u200b (time out)\n    Zhuiri_error_code_user_reject   = 98 // \u200b\u5bf9\u65b9\u200b\u51b3\u7edd\u200b (user reject)\n    Zhuiri_error_code_user_exit     = 99 // \u200b\u81ea\u884c\u200b\u9000\u51fa\u200b (user exit)\n)\n\nconst (\n    Zhuiri_data_sign_none       = 0 // \u200b\u65e0\u200b\u6807\u8bc6\u200b  (no sign)\n    Zhuiri_data_sign_reliable   = 1 // \u200b\u53ef\u9760\u200b    (reliable)\n    Zhuiri_data_sign_processing = 2 // \u200b\u5904\u7406\u200b\u4e2d\u200b  (processing)\n    Zhuiri_data_sign_response   = 3 // \u200b\u56de\u5e94\u200b\u6d88\u606f\u200b (response)\n    Zhuiri_data_sign_heart      = 4 // \u200b\u5fc3\u8df3\u200b\u5305\u200b  (heart)\n)\n\nfunc ipToInt(ip net.IP) uint32 {\n    ip = ip.To4()\n    if ip == nil {\n        return 0\n    }\n\n    ipInt := uint32(ip[0])&lt;&lt;24 | uint32(ip[1])&lt;&lt;16 | uint32(ip[2])&lt;&lt;8 | uint32(ip[3])\n    return ipInt\n}\n\ntype Zhuiri_data_pkg_struct C.Zhuiri_data_pkg_struct\n\n//export msg_recv_callback\nfunc msg_recv_callback(context unsafe.Pointer, pData unsafe.Pointer) {\n    data := *(*Zhuiri_data_pkg_struct)(unsafe.Pointer(pData))\n    charArray := data.m_data.m_data\n    goStr := C.GoString((*C.char)(unsafe.Pointer(&amp;charArray[0])))\n    fmt.Println(\"recv data:\", goStr)\n}\n\nfunc main() {\n    // \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n    dll := syscall.MustLoadDLL(\"tianzuo.Zhuiri.dll\")\n\n    // \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n    tianzuo_DataQueueInterface_initialize := dll.MustFindProc(\"tianzuo_DataQueueInterface_initialize\")\n    data_queue_recv, _, _ := tianzuo_DataQueueInterface_initialize.Call()\n\n    tianzuo_ZhuiriInterface_initialize := dll.MustFindProc(\"tianzuo_ZhuiriInterface_initialize\")\n    Zhuiri, _, _ := tianzuo_ZhuiriInterface_initialize.Call()\n\n    var ip uintptr\n    port := 6666\n    var iocp uintptr\n    tianzuo_ZhuiriInt_initialize := dll.MustFindProc(\"tianzuo_ZhuiriInt_initialize\")\n    msg_recv_callback_ptr := uintptr(unsafe.Pointer(C.msg_recv_callback_cgo))\n    error_code, _, _ := tianzuo_ZhuiriInt_initialize.Call(Zhuiri, ip, uintptr(C.int(port)), msg_recv_callback_ptr, data_queue_recv, 6000, uintptr(C.int(0)), iocp)\n    if error_code != Zhuiri_error_code_success {\n        fmt.Println(\"tianzuo_ZhuiriInt_initialize error: \", error_code)\n    }\n\n    // \u200b\u8bbe\u7f6e\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b set default parameters\n    tianzuo_ZhuiriInt_set_param := dll.MustFindProc(\"tianzuo_ZhuiriInt_set_param\")\n    tianzuo_ZhuiriInt_set_param.Call(Zhuiri, 0, 5168, 1024, 2280, 3, 5, 600)\n\n    // \u200b\u5f00\u59cb\u200b\u53d1\u9001\u6570\u636e\u200b start sending data\n    ipStr := \"127.0.0.1\"\n    ipint := net.ParseIP(ipStr)\n    nip := ipToInt(ipint)\n    tianzuo_ZhuiriInt_send := dll.MustFindProc(\"tianzuo_ZhuiriInt_send\")\n    for i := 0; i &lt; 100; i++ {\n        data := \"send data %d\"\n        gdata := fmt.Sprintf(data, i)\n        cdata := C.CString(gdata)\n        gdata_len := len(gdata)\n        data_len := C.int(gdata_len)\n        error_code, _, _ = tianzuo_ZhuiriInt_send.Call(Zhuiri, 0, uintptr(C.int(nip)), uintptr(C.int(port)), Zhuiri_data_sign_reliable, 7788, uintptr(unsafe.Pointer(cdata)), uintptr(data_len))\n        if error_code != Zhuiri_error_code_success {\n            fmt.Println(\"tianzuo_ZhuiriInt_send error: \", error_code)\n            return\n        }\n    }\n\n    fmt.Println(\"test done -------------------\")\n}\n\n</code></pre> rust <pre><code>\nuse std::os::raw::c_char;\nuse std::ffi::{c_int};\nuse std::ffi::CString;\nuse std::ptr::null;\nuse std::mem;\n\ntype CallbackFunc = extern \"C\" fn(context: *mut std::ffi::c_void, pData: *mut std::ffi::c_void);\n\nstruct Zhuiri_data_struct {\n    m_ip_adrs: i32,\n    m_port: i32,\n    m_function: i32,\n    m_sign: i32,\n    m_index: i32,\n    m_send_time: i32,\n    m_send_size: i32,\n    m_data: [u8; 492],\n}\n\nstruct Zhuiri_data_pkg_struct {\n    m_data: Zhuiri_data_struct,\n    m_send_data: *const c_char,\n    m_Zhuiri: *mut std::ffi::c_void,\n    m_user_data: *mut std::ffi::c_void,\n}\n\n#[link(name = \"tianzuo.Zhuiri\")]\nextern {\n    fn tianzuo_ZhuiriInterface_initialize() -&gt; *mut std::ffi::c_void;\n    fn tianzuo_ZhuiriInterface_terminate(obj: *mut std::ffi::c_void);\n    fn tianzuo_ZhuiriInt_initialize(obj: *mut std::ffi::c_void, ip_addr: *const c_char, port: c_int, callback: *mut std::ffi::c_void, context: *mut std::ffi::c_void, heart_check_time: c_int, log_trace: c_int, iocp: *const std::ffi::c_void) -&gt; c_int;\n    fn tianzuo_ZhuiriInt_set_param(obj: *mut std::ffi::c_void, sender_index: c_int, init_server_port: c_int, msg_init_size: c_int, recv_ex_data_max: c_int, retry_max: c_int, retry_all_number: c_int, init_retry_time: c_int);\n    fn tianzuo_ZhuiriInt_send(obj: *mut std::ffi::c_void, sender_index: c_int, ip: c_int, port: c_int, sign: c_int, function: c_int, send_data: *const c_char, send_size: c_int) -&gt; c_int;\n    fn tianzuo_DataQueueInterface_initialize() -&gt; *mut std::ffi::c_void;\n    fn tianzuo_DataQueueInterface_terminate(obj: *mut std::ffi::c_void);\n    fn tianzuo_DataQueueInt_initializee(obj: *mut std::ffi::c_void);\n}\n\nextern \"C\" fn msg_recv_callback(context: *mut std::ffi::c_void, pData: *mut std::ffi::c_void) {\n    unsafe {\n        //println!(\"Rust callback function called\");\n        let data: &amp;mut Zhuiri_data_pkg_struct = unsafe { mem::transmute(pData) };\n        let string = std::str::from_utf8(&amp;data.m_data.m_data).unwrap();\n        println!(\"recv data: {}\", string);\n    }\n}\n\nfn ip_to_int(ip: &amp;str) -&gt; i32 {\n    let parts: Vec&lt;i32&gt; = ip.split('.').map(|part| part.parse().unwrap()).collect();\n    (parts[0] &lt;&lt; 24) + (parts[1] &lt;&lt; 16) + (parts[2] &lt;&lt; 8) + parts[3]\n}\n\nfn main() {\n    unsafe {\n        // \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n        println!(\"initialize the interface\");\n\n        // \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n        let data_queue_recv = tianzuo_DataQueueInterface_initialize();\n\n        let pdata_queue_recv= data_queue_recv as *mut std::ffi::c_void;\n\n        let pmsg_recv_callback = msg_recv_callback as *mut std::ffi::c_void;\n\n        let zhuiri = tianzuo_ZhuiriInterface_initialize();\n        let port = 6666;\n        let error_code = tianzuo_ZhuiriInt_initialize(zhuiri, null(), port, pmsg_recv_callback, pdata_queue_recv, 6000, 0, null());\n        if 1 != error_code {\n            println!(\"tianzuo_ZhuiriInt_initialize error: {:?}\", error_code);\n        }\n\n        // \u200b\u8bbe\u7f6e\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b set default parameters\n        tianzuo_ZhuiriInt_set_param(zhuiri,0, 5168, 1024, 2280, 3, 5, 600);\n\n        // \u200b\u5f00\u59cb\u200b\u53d1\u9001\u6570\u636e\u200b start sending data\n        let ip = ip_to_int(\"127.0.0.1\");\n        for i in 0..=99 {\n            let data = format!(\"send data {}\", i);\n            let data_str = CString::new(String::from(data.clone())).expect(\"Failed to create CString\");\n            let data_len = data.len() as i32;\n            let error_code = tianzuo_ZhuiriInt_send(zhuiri, 0, ip, port, 1, 7788, data_str.as_ptr(), data_len);\n            if 1 != error_code {\n                println!(\"tianzuo_ZhuiriInt_send error: {:?}\", error_code);\n            }\n        }\n\n        println!(\"test done -------------------\")\n    }\n}\n\n</code></pre> ruby <pre><code>require 'fiddle'\nrequire 'ipaddr'\n\nlib = Fiddle::dlopen('C:/Users/zhengtianzuo/RubymineProjects/tianzuo.ZhuiriTest/tianzuo.Zhuiri.dll')\ntianzuo_ZhuiriInterface_initialize = Fiddle::Function.new(lib['tianzuo_ZhuiriInterface_initialize'], [], Fiddle::TYPE_VOIDP)\ntianzuo_ZhuiriInterface_terminate = Fiddle::Function.new(lib['tianzuo_ZhuiriInterface_terminate'], [Fiddle::TYPE_VOIDP], Fiddle::TYPE_VOID)\ntianzuo_ZhuiriInt_initialize = Fiddle::Function.new(lib['tianzuo_ZhuiriInt_initialize'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\ntianzuo_ZhuiriInt_set_param = Fiddle::Function.new(lib['tianzuo_ZhuiriInt_set_param'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT], Fiddle::TYPE_INT)\ntianzuo_ZhuiriInt_send = Fiddle::Function.new(lib['tianzuo_ZhuiriInt_send'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT], Fiddle::TYPE_INT)\ntianzuo_DataQueueInterface_initialize = Fiddle::Function.new(lib['tianzuo_DataQueueInterface_initialize'], [], Fiddle::TYPE_VOIDP)\ntianzuo_DataQueueInterface_terminate = Fiddle::Function.new(lib['tianzuo_DataQueueInterface_terminate'], [Fiddle::TYPE_VOIDP], Fiddle::TYPE_VOID)\n\ndef string_to_char_pointer(str)\n  ptr = Fiddle::Pointer[str]\n  ptr.to_s\nend\n\n# \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\nprint(\"initialize the interface\\n\")\n\n# \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\ndata_queue_recv = tianzuo_DataQueueInterface_initialize.call()\n\ncallback = Fiddle::Closure::BlockCaller.new(Fiddle::TYPE_INT, [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]) do |context, pData|\n  puts \"callback function called\"\nend\n\nport = 6666\nzhuiri = tianzuo_ZhuiriInterface_initialize.call()\nerror_code = tianzuo_ZhuiriInt_initialize.call(zhuiri, nil, port, callback.to_i, data_queue_recv, 6000, 0, nil)\nif error_code != 1\n  print(\"initialize error:\", error_code, \"\\n\")\n  return\nend\n\n# \u200b\u8bbe\u7f6e\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b set default parameters\ntianzuo_ZhuiriInt_set_param.call(zhuiri, 0, 5168, 1024, 2280, 3, 5, 600)\n\n# \u200b\u5f00\u59cb\u200b\u53d1\u9001\u6570\u636e\u200b start sending data\nip = IPAddr.new(\"127.0.0.1\").to_i\nfor i in 1..10\n  data = \"send data %d\" % [i]\n  data_len = data.length\n  error_code = tianzuo_ZhuiriInt_send.call(zhuiri, 0, ip, port, 1, 7788, data, data_len)\n  if error_code != 1\n    print(\"tianzuo_ZhuiriInt_send error:\", error_code, \"\\n\")\n    return\n  end\nend\n\n</code></pre>"},{"location":"component/tianzuo.Zhuiri/#_8","title":"\u4e0b\u8f7d","text":""},{"location":"other/","title":"\u5176\u4ed6","text":""},{"location":"product/tianzuo.Fuxi/","title":"\u5929\u4f50\u200b.\u200b\u4f0f\u7fb2\u200b\u7434","text":""},{"location":"product/tianzuo.Fuxi/#_2","title":"\u5929\u4f50\u200b.\u200b\u4f0f\u7fb2\u200b\u7434","text":"\u64cd\u4f5c\u7cfb\u7edf\u200b \u200b\u7f16\u8bd1\u5668\u200b \u200b\u7f16\u7a0b\u8bed\u8a00"},{"location":"product/tianzuo.Fuxi/#_3","title":"\u7b80\u4ecb","text":"<p>\u200b\u5929\u4f50\u200b.\u200b\u4f0f\u7fb2\u200b\u7434\u200b </p> <p>\u200b\u4f20\u8bf4\u200b: \u200b\u4f0f\u7fb2\u200b\u4ee5\u200b\u7389\u77f3\u200b\u52a0\u5929\u4e1d\u200b\u6240\u200b\u5236\u51fa\u200b\u4e4b\u200b\u4e50\u5668\u200b\uff0c\u200b\u6cdb\u8457\u200b\u6e29\u67d4\u200b\u7684\u200b\u767d\u8272\u200b\u5149\u8292\u200b\uff0c\u200b\u5176\u200b\u7434\u97f3\u200b\u80fd\u200b\u4f7f\u200b\u4eba\u5fc3\u200b\u611f\u5230\u200b\u5b81\u9759\u200b\u7965\u548c\u200b\uff0c\u200b\u636e\u8bf4\u200b\u62e5\u6709\u200b\u80fd\u200b\u652f\u914d\u200b\u4e07\u7269\u200b\u5fc3\u7075\u200b\u4e4b\u200b\u795e\u79d8\u200b\u529b\u91cf\u200b\u3002</p>"},{"location":"product/tianzuo.Fuxi/#_4","title":"\u76ee\u6807","text":""},{"location":"product/tianzuo.Fuxi/#_5","title":"\u529f\u80fd","text":""},{"location":"product/tianzuo.Fuxi/#_6","title":"\u622a\u56fe","text":""},{"location":"product/tianzuo.Fuxi/#_7","title":"\u4e0b\u8f7d","text":""},{"location":"product/tianzuo.Kunlun/","title":"\u5929\u4f50\u200b.\u200b\u6606\u4ed1\u955c","text":""},{"location":"product/tianzuo.Kunlun/#_2","title":"\u5929\u4f50\u200b.\u200b\u6606\u4ed1\u955c","text":"\u64cd\u4f5c\u7cfb\u7edf\u200b \u200b\u7f16\u8bd1\u5668\u200b \u200b\u7f16\u7a0b\u8bed\u8a00"},{"location":"product/tianzuo.Kunlun/#_3","title":"\u7b80\u4ecb","text":"<p>\u200b\u5929\u4f50\u200b.\u200b\u6606\u4ed1\u955c\u200b \u200b\u5f3a\u5927\u200b\u7684\u200b\u672c\u5730\u200b\u6784\u5efa\u200b\u5de5\u5177\u200b, \u200b\u63d0\u4f9b\u200b\u7ed9\u200b\u9879\u76ee\u200b\u5168\u65b9\u4f4d\u200b\u7684\u200b\u9759\u6001\u200b\u68c0\u6d4b\u200b, \u200b\u52a8\u6001\u200b\u68c0\u6d4b\u200b, \u200b\u4ee3\u7801\u200b\u5de5\u5177\u200b\u4ee5\u53ca\u200b\u5404\u79cd\u200b\u4fbf\u5229\u200b\u7684\u200b\u63d2\u4ef6\u200b\u5de5\u5177\u200b, \u200b\u901a\u8fc7\u200b\u8bcd\u6cd5\u200b\u5206\u6790\u200b\u3001\u200b\u8bed\u6cd5\u5206\u6790\u200b\u3001\u200b\u63a7\u5236\u6d41\u200b\u3001\u200b\u6570\u636e\u6d41\u200b\u5206\u6790\u200b\u3001\u200b\u5185\u5b58\u200b\u68c0\u6d4b\u200b\u3001\u200b\u4ee3\u7801\u200b\u8986\u76d6\u7387\u200b\u3001\u200b\u70ed\u70b9\u200b\u51fd\u6570\u200b\u68c0\u6d4b\u200b\u7b49\u200b\u6280\u672f\u200b\u5bf9\u200b\u7a0b\u5e8f\u4ee3\u7801\u200b\u8fdb\u884c\u200b\u626b\u63cf\u200b\uff0c\u200b\u9a8c\u8bc1\u200b\u4ee3\u7801\u200b\u662f\u5426\u200b\u6ee1\u8db3\u200b\u89c4\u8303\u6027\u200b\u3001\u200b\u5b89\u5168\u6027\u200b\u3001\u200b\u53ef\u9760\u6027\u200b\u3001\u200b\u53ef\u7ef4\u62a4\u6027\u200b\u7b49\u200b\u6307\u6807\u200b. \u200b\u6839\u636e\u200b\u5206\u6790\u200b\u7ed3\u679c\u200b\u5bf9\u200b\u4ee3\u7801\u200b\u8fdb\u884c\u200b\u6df1\u5ea6\u200b\u4f18\u5316\u200b. \u200b\u63d0\u5347\u200b\u4ee3\u7801\u200b\u8d28\u91cf\u200b, \u200b\u589e\u5f3a\u200b\u4ea7\u54c1\u200b\u5065\u58ee\u6027\u200b.</p> <p>\u200b\u4f20\u8bf4\u200b: \u200b\u4ed9\u4eba\u200b\u6545\u4e61\u200b\u6606\u4ed1\u5c71\u200b\u4e2d\u200b\u7684\u200b\u6606\u4ed1\u200b\u5929\u200b\u5bab\u4e2d\u200b\uff0c\u200b\u4f20\u8bf4\u200b\u6709\u200b\u4e00\u9762\u200b\u795e\u955c\u200b\uff0c\u200b\u662f\u200b\u62e5\u6709\u200b\u81ea\u7531\u200b\u7a7f\u68ad\u200b\u65f6\u7a7a\u200b\u4e4b\u529b\u200b\u3002\u200b\u4f46\u200b\u5728\u200b\u4e00\u6b21\u200b\u4ed9\u4eba\u200b\u7684\u200b\u76db\u4f1a\u200b\u4e2d\u200b\uff0c\u200b\u795e\u955c\u200b\u88ab\u200b\u4eba\u200b\u6240\u200b\u5077\u200b\uff0c\u200b\u81f3\u4eca\u200b\u4e00\u76f4\u200b\u4e0b\u843d\u4e0d\u660e\u200b\u3002</p>"},{"location":"product/tianzuo.Kunlun/#_4","title":"\u76ee\u6807","text":"<p>\u200b\u642d\u5efa\u200b\u4e00\u79cd\u200b\u65b9\u4fbf\u200b\u8fd0\u884c\u200b\u7684\u200b\u672c\u5730\u200b\u6784\u5efa\u200b\u5de5\u5177\u200b, \u200b\u96c6\u6210\u200b\u5404\u79cd\u200b\u4ee3\u7801\u200b\u68c0\u6d4b\u200b\u3002</p> <p></p>"},{"location":"product/tianzuo.Kunlun/#_5","title":"\u529f\u80fd","text":"<ul> <li>\u200b\u5de5\u4f5c\u53f0\u200b \u200b\u9879\u76ee\u200b\u6307\u6807\u200b \u200b\u7edf\u8ba1\u200b\u51fa\u200b\u9879\u76ee\u200b\u7684\u200b\u5404\u79cd\u200b\u6307\u6807\u200b, \u200b\u4f5c\u4e3a\u200b\u8861\u91cf\u200b\u9879\u76ee\u200b\u590d\u6742\u5ea6\u200b\u7684\u200b\u90e8\u5206\u200b\u6807\u51c6\u200b</li> <li>\u200b\u5de5\u4f5c\u53f0\u200b \u200b\u7f16\u8bd1\u200b\u8fd0\u884c\u200b \u200b\u53ef\u4ee5\u200b\u624b\u52a8\u200b\u6216\u200b\u81ea\u52a8\u5316\u200b\u7f16\u8bd1\u200b\u9879\u76ee\u200b</li> <li>\u200b\u5de5\u4f5c\u53f0\u200b \u200b\u9759\u6001\u200b\u68c0\u6d4b\u200b \u200b\u901a\u8fc7\u200b\u8bcd\u6cd5\u200b\u5206\u6790\u200b\u3001\u200b\u8bed\u6cd5\u5206\u6790\u200b\u3001\u200b\u63a7\u5236\u6d41\u200b\u3001\u200b\u6570\u636e\u6d41\u200b\u5206\u6790\u200b\u7b49\u200b\u6280\u672f\u200b\u5bf9\u200b\u7a0b\u5e8f\u4ee3\u7801\u200b\u8fdb\u884c\u200b\u626b\u63cf\u200b\uff0c\u200b\u68c0\u67e5\u200b\u4ee3\u7801\u200b\u548c\u200b\u8bbe\u8ba1\u200b\u7684\u200b\u4e00\u81f4\u6027\u200b\uff0c\u200b\u4ee3\u7801\u200b\u5bf9\u200b\u6807\u51c6\u200b\u7684\u200b\u9075\u5faa\u200b\u3001\u200b\u53ef\u8bfb\u6027\u200b\uff0c\u200b\u4ee3\u7801\u200b\u7684\u200b\u903b\u8f91\u200b\u8868\u8fbe\u200b\u7684\u200b\u6b63\u786e\u6027\u200b\uff0c\u200b\u4ee3\u7801\u200b\u7ed3\u6784\u200b\u7684\u200b\u5408\u7406\u6027\u200b\u7b49\u200b\u65b9\u9762\u200b</li> <li>\u200b\u5de5\u4f5c\u53f0\u200b \u200b\u52a8\u6001\u200b\u68c0\u6d4b\u200b \u200b\u901a\u8fc7\u200b\u5185\u5b58\u200b\u68c0\u6d4b\u200b\u3001\u200b\u4ee3\u7801\u200b\u8986\u76d6\u7387\u200b\u3001\u200b\u70ed\u70b9\u200b\u51fd\u6570\u200b\u68c0\u6d4b\u200b\u7b49\u200b\u6280\u672f\u200b\u6839\u636e\u200b\u5206\u6790\u200b\u7ed3\u679c\u200b\u5bf9\u200b\u4ee3\u7801\u200b\u8fdb\u884c\u200b\u6df1\u5ea6\u200b\u4f18\u5316\u200b. \u200b\u63d0\u5347\u200b\u4ee3\u7801\u200b\u8d28\u91cf\u200b, \u200b\u589e\u5f3a\u200b\u4ea7\u54c1\u200b\u5065\u58ee\u6027\u200b</li> <li>\u200b\u5de5\u4f5c\u53f0\u200b \u200b\u4ee3\u7801\u200b\u5de5\u5177\u200b \u200b\u81ea\u52a8\u5316\u200b\u4ee3\u7801\u200b\u683c\u5f0f\u5316\u200b, \u200b\u751f\u6210\u200b\u9879\u76ee\u200b\u6587\u6863\u200b</li> <li>\u200b\u5de5\u5177\u7bb1\u200b \u200b\u6db5\u76d6\u200b\u901a\u8baf\u200b/\u200b\u56fe\u5f62\u200b/\u200b\u8bbe\u8ba1\u200b/\u200b\u8f6c\u6362\u200b/\u200b\u751f\u6210\u200b/\u200b\u6742\u9879\u200b\u7b49\u200b\u5404\u200b\u65b9\u9762\u200b\u7684\u200b\u5c0f\u200b\u5de5\u5177\u200b</li> <li>\u200b\u8d44\u6599\u888b\u200b \u200b\u53ef\u200b\u8bb0\u5f55\u200b\u5e73\u65f6\u200b\u5e38\u7528\u200b\u7684\u200b\u4ee3\u7801\u200b\u5230\u200b\u8d44\u6599\u888b\u200b, \u200b\u968f\u65f6\u200b\u67e5\u9605\u200b\u6d4f\u89c8\u200b\u62f7\u8d1d\u200b</li> </ul>"},{"location":"product/tianzuo.Kunlun/#_6","title":"\u622a\u56fe","text":""},{"location":"product/tianzuo.Kunlun/#_7","title":"\u652f\u6301","text":""},{"location":"product/tianzuo.Kunlun/#_8","title":"\u652f\u6301\u200b\u5185\u5bb9","text":"\u540d\u79f0\u200b \u200b\u652f\u6301\u200b \u200b\u5f00\u53d1\u200b\u4e2d\u200b \u200b\u64cd\u4f5c\u7cfb\u7edf\u200b \u200b\u7f16\u7a0b\u8bed\u8a00\u200b \u200b\u9879\u76ee\u200b\u7c7b\u578b"},{"location":"product/tianzuo.Kunlun/#_9","title":"\u4e0b\u8f7d","text":""},{"location":"product/tianzuo.Pangu/","title":"\u5929\u4f50\u200b.\u200b\u76d8\u53e4\u200b\u65a7","text":""},{"location":"product/tianzuo.Pangu/#_2","title":"\u5929\u4f50\u200b.\u200b\u76d8\u53e4\u200b\u65a7","text":"\u64cd\u4f5c\u7cfb\u7edf\u200b \u200b\u7f16\u8bd1\u5668\u200b \u200b\u7f16\u7a0b\u8bed\u8a00"},{"location":"product/tianzuo.Pangu/#_3","title":"\u7b80\u4ecb","text":"<p>\u200b\u5929\u4f50\u200b.\u200b\u76d8\u53e4\u200b\u65a7\u200b \u200b\u5373\u65f6\u901a\u8baf\u200b\u5e73\u53f0\u200b, \u200b\u91c7\u7528\u200b\u81ea\u4e3b\u200b\u7814\u53d1\u200b\u7684\u200b\u5206\u5e03\u5f0f\u200b\u5b58\u50a8\u200b\u4e0e\u200bUDP\u200b\u53ef\u9760\u200bP2P\u200b\u7f51\u7edc\u200b\u4f20\u8f93\u6280\u672f\u200b, \u200b\u81ea\u4e3b\u200b\u7814\u53d1\u200b\u7684\u200bIM\u200b\u901a\u8baf\u200b\u534f\u8bae\u200b, \u200b\u8986\u76d6\u200b\u4e3b\u6d41\u200b\u5e73\u53f0\u200b, \u200b\u63d2\u4ef6\u200b\u5f0f\u200b\u9ad8\u200b\u6269\u5c55\u6027\u200b, OpenGL\u200b\u6e32\u67d3\u200b\u9ad8\u200b\u6d41\u7545\u200bUI, \u200b\u652f\u6301\u200b\u96c6\u6210\u200bWeb\u200b\u5e94\u7528\u200b, \u200b\u53ef\u4ee5\u200b\u79c1\u6709\u5316\u200b\u90e8\u7f72\u200b, \u200b\u516c\u6709\u200b\u4e91\u200b\u90e8\u7f72\u200b.</p> <p>\u200b\u4f20\u8bf4\u200b: \u200b\u4f20\u8bf4\u200b\u5929\u5730\u200b\u6df7\u6c8c\u200b\u4e4b\u521d\u200b\uff0c\u200b\u76d8\u53e4\u200b\u7531\u200b\u7761\u68a6\u200b\u9192\u6765\u200b\uff0c\u200b\u89c1\u200b\u5929\u5730\u200b\u6666\u6697\u200b\uff0c\u200b\u4e8e\u662f\u200b\u4f38\u624b\u200b\u4e00\u6325\u200b\u62ff\u51fa\u200b\u4e00\u628a\u200b\u5de8\u5927\u200b\u7684\u200b\u65a7\u5b50\u200b\u5288\u5f00\u200b\u5929\u5730\u200b\uff0c\u200b\u81ea\u6b64\u200b\u624d\u200b\u6709\u200b\u6211\u4eec\u200b\u7684\u200b\u4e16\u754c\u200b\u3002\u200b\u6b64\u65a7\u200b\u62e5\u6709\u200b\u5206\u200b\u5929\u5730\u200b\u3001\u200b\u7a7f\u68ad\u200b\u592a\u865a\u200b\u4e4b\u529b\u200b\uff0c\u200b\u5a01\u529b\u200b\u4e0d\u4e0b\u200b\u8f69\u8f95\u5251\u200b\u3002\u200b\u4f20\u8a00\u200b\u638c\u63a7\u200b\u76d8\u53e4\u200b\u65a7\u8005\u200b\uff0c\u200b\u53ef\u200b\u638c\u63a7\u200b\u529b\u91cf\u200b\u6cd5\u5219\u200b\u3002</p>"},{"location":"product/tianzuo.Pangu/#_4","title":"\u76ee\u6807","text":"<p>\u200b\u642d\u5efa\u200bCS\u200b\u67b6\u6784\u200b\u7684\u200bIM\u200b\u901a\u8baf\u200b\u7cfb\u7edf\u200b\uff0c\u200b\u652f\u6301\u200b\u6587\u5b57\u200b/\u200b\u8868\u60c5\u200b/\u200b\u56fe\u7247\u200b/\u200b\u8bed\u97f3\u200b/\u200b\u89c6\u9891\u200b/\u200b\u8fdc\u7a0b\u684c\u9762\u200b/\u200b\u8fdc\u7a0b\u200b\u63a7\u5236\u200b/\u200b\u767d\u677f\u200b\u7b49\u200b\u529f\u80fd\u200b\u3002</p>"},{"location":"product/tianzuo.Pangu/#_5","title":"\u529f\u80fd","text":"<ul> <li>\ud83e\udde9 \u200b\u96c6\u6210\u200b\u7b80\u5355\u200b</li> <li>\ud83d\udce6 \u200b\u652f\u6301\u200b\u79c1\u6709\u200b\u90e8\u7f72\u200b</li> <li>\ud83e\udea2 \u200b\u804a\u5929\u200b\u6570\u636e\u200b\u70b9\u5bf9\u70b9\u200b\u52a0\u5bc6\u200b\uff0c\u200b\u81ea\u4e3b\u200b\u7814\u53d1\u200bIM\u200b\u534f\u8bae\u200b\uff0c\u200b\u7f51\u7edc\u200b\u5e93\u200b\u4f7f\u7528\u200b'\u200b\u5929\u4f50\u200b.\u200b\u8ffd\u65e5\u200b\u9774\u200b'\u200b\u8f6f\u4ef6\u5f00\u53d1\u200b\u5de5\u5177\u5305\u200b</li> <li>\ud83d\udcd2 \u200b\u804a\u5929\u8bb0\u5f55\u200b\u672c\u5730\u200b\u4fdd\u5b58\u200b\uff0c\u200b\u6570\u636e\u5e93\u200b\u4f7f\u7528\u200b'\u200b\u5929\u4f50\u200b.\u200b\u4e7e\u5764\u888b\u200b'\u200b\u8f6f\u4ef6\u5f00\u53d1\u200b\u5de5\u5177\u5305\u200b</li> </ul>"},{"location":"product/tianzuo.Pangu/#_6","title":"\u622a\u56fe","text":"<p>\u200b\u5929\u4f50\u200b.\u200b\u76d8\u53e4\u200b\u65a7\u200bdemo:</p> <p> </p>"},{"location":"product/tianzuo.Pangu/#_7","title":"\u4e0b\u8f7d","text":""},{"location":"technology/C%2B%2B/","title":"C++","text":""},{"location":"technology/C%2B%2B/#_1","title":"\u7b80\u4ecb","text":"<p>C++\u200b\u662f\u200b\u4e00\u79cd\u200b\u9762\u5411\u5bf9\u8c61\u200b\u7684\u200b\u8ba1\u7b97\u673a\u200b\u7a0b\u5e8f\u8bbe\u8ba1\u200b\u8bed\u8a00\u200b\uff0c\u200b\u7531\u200b\u7f8e\u56fd\u200bAT&amp;T\u200b\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u200b\u7684\u200b\u672c\u200b\u8d3e\u5c3c\u200b\u00b7\u200b\u65af\u7279\u52b3\u65af\u200b\u7279\u5362\u666e\u200b\u535a\u58eb\u200b\u5728\u200b20\u200b\u4e16\u7eaa\u200b80\u200b\u5e74\u4ee3\u200b\u521d\u671f\u200b\u53d1\u660e\u200b\u5e76\u200b\u5b9e\u73b0\u200b\uff08\u200b\u6700\u521d\u200b\u8fd9\u79cd\u200b\u8bed\u8a00\u200b\u88ab\u79f0\u4f5c\u200b\u201cC with Classes\u201d\u200b\u5e26\u7c7b\u200b\u7684\u200bC\uff09\u3002\u200b\u5b83\u200b\u662f\u200b\u4e00\u79cd\u200b\u9759\u6001\u6570\u636e\u200b\u7c7b\u578b\u200b\u68c0\u67e5\u200b\u7684\u200b\u3001\u200b\u652f\u6301\u200b\u591a\u91cd\u200b\u7f16\u7a0b\u200b\u8303\u5f0f\u200b\u7684\u200b\u901a\u7528\u200b\u7a0b\u5e8f\u8bbe\u8ba1\u200b\u8bed\u8a00\u200b\u3002\u200b\u5b83\u200b\u652f\u6301\u200b\u8fc7\u7a0b\u200b\u5316\u200b\u7a0b\u5e8f\u8bbe\u8ba1\u200b\u3001\u200b\u6570\u636e\u62bd\u8c61\u200b\u3001\u200b\u9762\u5411\u5bf9\u8c61\u200b\u7a0b\u5e8f\u8bbe\u8ba1\u200b\u3001\u200b\u6cdb\u578b\u200b\u7a0b\u5e8f\u8bbe\u8ba1\u200b\u7b49\u200b\u591a\u79cd\u200b\u7a0b\u5e8f\u8bbe\u8ba1\u200b\u98ce\u683c\u200b\u3002 C++\u200b\u662f\u200bC\u200b\u8bed\u8a00\u200b\u7684\u200b\u7ee7\u627f\u200b\uff0c\u200b\u8fdb\u4e00\u6b65\u200b\u6269\u5145\u200b\u548c\u200b\u5b8c\u5584\u200b\u4e86\u200bC\u200b\u8bed\u8a00\u200b\uff0c\u200b\u6210\u4e3a\u200b\u4e00\u79cd\u200b\u9762\u5411\u5bf9\u8c61\u200b\u7684\u200b\u7a0b\u5e8f\u8bbe\u8ba1\u200b\u8bed\u8a00\u200b\u3002C++\u200b\u8fd9\u4e2a\u200b\u8bcd\u200b\u5728\u200b\u4e2d\u56fd\u200b\u5927\u9646\u200b\u7684\u200b\u7a0b\u5e8f\u5458\u200b\u5708\u5b50\u200b\u4e2d\u200b\u901a\u5e38\u200b\u88ab\u200b\u8bfb\u200b\u505a\u200b\u201cC\u200b\u52a0\u52a0\u200b\u201d\uff0c\u200b\u800c\u200b\u897f\u65b9\u200b\u7684\u200b\u7a0b\u5e8f\u5458\u200b\u901a\u5e38\u200b\u8bfb\u200b\u505a\u200b\u201cC plus plus\u201d\uff0c\u201cCPP\u201d\u3002</p> \u200b\u4e2d\u6587\u540d\u200b C++\u200b\u8bed\u8a00\u200b \u200b\u521b\u59cb\u4eba\u200b BjarneStroustrup \u200b\u5916\u6587\u200b\u540d\u200b The C++ Programming Language \u200b\u521b\u59cb\u200b\u516c\u53f8\u200b \u200b\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u200b \u200b\u7c7b\u522b\u200b \u200b\u8ba1\u7b97\u673a\u200b\u7a0b\u5e8f\u8bbe\u8ba1\u200b\u8bed\u8a00\u200b \u200b\u57fa\u672c\u200b\u5185\u5bb9\u200b \u200b\u7c7b\u200b\u3001\u200b\u5c01\u88c5\u200b\u3001\u200b\u91cd\u8f7d\u200b\u3001\u200b\u7ee7\u627f\u200b\u3001\u200b\u6a21\u7248\u200b \u200b\u9996\u6b21\u200b\u4f7f\u7528\u200b\u65f6\u95f4\u200b 1983\u200b\u5e74\u200b12\u200b\u6708\u200b \u200b\u521b\u59cb\u4eba\u200b \u200b\u672c\u200b\u8d3e\u5c3c\u200b\u00b7\u200b\u65af\u7279\u52b3\u65af\u200b\u7279\u5362\u666e\u200b <p> </p>"},{"location":"technology/C%2B%2B/#_2","title":"\u8def\u7ebf\u56fe\u200b:","text":""},{"location":"technology/CSharp/","title":"CSHARP","text":""},{"location":"technology/CSharp/#_1","title":"\u7b80\u4ecb","text":"<p>CSharp\u200b\u662f\u200b\u5fae\u8f6f\u516c\u53f8\u200b\u53d1\u5e03\u200b\u7684\u200b\u4e00\u79cd\u200b\u9762\u5411\u5bf9\u8c61\u200b\u7684\u200b\u3001\u200b\u8fd0\u884c\u200b\u4e8e\u200b.NET Framework\u200b\u4e4b\u4e0a\u200b\u7684\u200b\u9ad8\u7ea7\u200b\u7a0b\u5e8f\u8bbe\u8ba1\u200b\u8bed\u8a00\u200b\u3002\u200b\u5e76\u200b\u5b9a\u4e8e\u200b\u5728\u200b\u5fae\u8f6f\u200b\u804c\u4e1a\u200b\u5f00\u53d1\u8005\u200b\u8bba\u575b\u200b(PDC)\u200b\u4e0a\u200b\u767b\u53f0\u200b\u4eae\u76f8\u200b\u3002CSharp\u200b\u662f\u200b\u5fae\u8f6f\u516c\u53f8\u200b\u7814\u7a76\u5458\u200bAnders Hejlsberg\u200b\u7684\u200b\u6700\u65b0\u200b\u6210\u679c\u200b\u3002CSharp\u200b\u770b\u8d77\u6765\u200b\u4e0e\u200bJava\u200b\u6709\u7740\u200b\u60ca\u4eba\u200b\u7684\u200b\u76f8\u4f3c\u200b\uff1b\u200b\u5b83\u200b\u5305\u62ec\u200b\u4e86\u200b\u8bf8\u5982\u200b\u5355\u4e00\u200b\u7ee7\u627f\u200b\u3001\u200b\u63a5\u53e3\u200b\u3001\u200b\u4e0e\u200bJava\u200b\u51e0\u4e4e\u200b\u540c\u6837\u200b\u7684\u200b\u8bed\u6cd5\u200b\u548c\u200b\u7f16\u8bd1\u6210\u200b\u4e2d\u95f4\u4ee3\u7801\u200b\u518d\u200b\u8fd0\u884c\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u3002\u200b\u4f46\u662f\u200bCSharp\u200b\u4e0e\u200bJava\u200b\u6709\u7740\u200b\u660e\u663e\u200b\u7684\u200b\u4e0d\u540c\u200b\uff0c\u200b\u5b83\u200b\u501f\u9274\u200b\u4e86\u200bDelphi\u200b\u7684\u200b\u4e00\u4e2a\u200b\u7279\u70b9\u200b\uff0c\u200b\u4e0e\u200bCOM\uff08\u200b\u7ec4\u4ef6\u200b\u5bf9\u8c61\u200b\u6a21\u578b\u200b\uff09\u200b\u662f\u200b\u76f4\u63a5\u200b\u96c6\u6210\u200b\u7684\u200b\uff0c\u200b\u800c\u4e14\u200b\u5b83\u200b\u662f\u200b\u5fae\u8f6f\u516c\u53f8\u200b .NET windows\u200b\u7f51\u7edc\u200b\u6846\u67b6\u200b\u7684\u200b\u4e3b\u89d2\u200b\u3002</p> \u200b\u5916\u6587\u200b\u540d\u200b CSharp \u200b\u522b\u79f0\u200b CSHARP \u200b\u7c7b\u522b\u200b \u200b\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u200b\u8bed\u8a00\u200b \u200b\u53d1\u5e03\u200b\u65f6\u95f4\u200b 2000\u200b\u5e74\u200b6\u200b\u6708\u200b \u200b\u53d1\u5e03\u200b\u5355\u4f4d\u200b \u200b\u5fae\u8f6f\u516c\u53f8\u200b \u200b\u5f00\u53d1\u8005\u200b \u200b\u5b89\u5fb7\u65af\u200b\u00b7\u200b\u6d77\u5c14\u200b\u65af\u4f2f\u683c\u200b <p></p>"},{"location":"technology/CSharp/#_2","title":"\u8def\u7ebf\u56fe\u200b:","text":""},{"location":"technology/DevelopmentTools/","title":"\u5f00\u53d1\u5de5\u5177","text":""},{"location":"technology/Go/","title":"Go","text":""},{"location":"technology/Go/#_1","title":"\u7b80\u4ecb","text":"<p>Go\u200b\u8bed\u8a00\u200b\u662f\u200bGoogle\u200b\u5f00\u53d1\u200b\u7684\u200b\u4e00\u79cd\u200b\u9759\u6001\u200b\u5f3a\u200b\u7c7b\u578b\u200b\u3001\u200b\u7f16\u8bd1\u200b\u578b\u200b\u3001\u200b\u5e76\u200b\u53d1\u578b\u200b\uff0c\u200b\u5e76\u200b\u5177\u6709\u200b\u5783\u573e\u200b\u56de\u6536\u200b\u529f\u80fd\u200b\u7684\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\uff0c\u200b\u5b83\u7528\u200b\u6279\u5224\u200b\u5438\u6536\u200b\u7684\u200b\u773c\u5149\u200b\uff0c\u200b\u878d\u5408\u200bC\u200b\u8bed\u8a00\u200b\u3001Java\u200b\u7b49\u200b\u4f17\u5bb6\u200b\u4e4b\u200b\u957f\u200b\uff0c\u200b\u5c06\u200b\u7b80\u6d01\u200b\u3001\u200b\u9ad8\u6548\u200b\u6f14\u7ece\u200b\u5f97\u200b\u6dcb\u6f13\u5c3d\u81f4\u200b\u3002</p> <p>Go\u200b\u8bed\u8a00\u200b\u8d77\u6e90\u4e8e\u200b2007\u200b\u5e74\u200b\uff0c\u200b\u5f53\u65f6\u200bGoogle\u200b\u7684\u200b\u6280\u672f\u200b\u5927\u795e\u200b\u4eec\u200b\u5907\u53d7\u200bC++\u200b\u8d8a\u6765\u8d8a\u200b\u81c3\u80bf\u200b\u7684\u200b\u56f0\u6270\u200b\uff0c\u200b\u51b3\u5fc3\u200b\u5f00\u53d1\u200b\u4e00\u79cd\u200b\u65b0\u200b\u7684\u200b\u8bed\u8a00\u200b\u6765\u200b\u53d6\u4ee3\u200bC++\u3002\u200b\u4ed6\u4eec\u200b\u8ba4\u4e3a\u200b\uff1a\u200b\u4e0e\u5176\u200b\u5728\u200b\u81c3\u80bf\u200b\u7684\u200b\u8bed\u8a00\u200b\u4e0a\u200b\u4e0d\u65ad\u200b\u589e\u52a0\u200b\u65b0\u200b\u7684\u200b\u7279\u6027\u200b\uff0c\u200b\u4e0d\u5982\u200b\u7b80\u5316\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u3002\u200b\u4e8e\u662f\u200b\uff0cGolang\u200b\u8fd9\u95e8\u200b\u65b0\u200b\u8bed\u8a00\u200b\u5e94\u8fd0\u800c\u751f\u200b\u3002</p>"},{"location":"technology/Go/#_2","title":"\u8def\u7ebf\u56fe\u200b:","text":""},{"location":"technology/Java/","title":"Java","text":""},{"location":"technology/Java/#_1","title":"\u7b80\u4ecb","text":"<p>Java\u200b\u662f\u200b\u4e00\u95e8\u200b\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u200b\u8bed\u8a00\u200b\uff0c\u200b\u4e0d\u4ec5\u200b\u5438\u6536\u200b\u4e86\u200bC++\u200b\u8bed\u8a00\u200b\u7684\u200b\u5404\u79cd\u200b\u4f18\u70b9\u200b\uff0c\u200b\u8fd8\u200b\u6452\u5f03\u200b\u4e86\u200bC++\u200b\u91cc\u200b\u96be\u4ee5\u200b\u7406\u89e3\u200b\u7684\u200b\u591a\u200b\u7ee7\u627f\u200b\u3001\u200b\u6307\u9488\u200b\u7b49\u200b\u6982\u5ff5\u200b\uff0c\u200b\u56e0\u6b64\u200bJava\u200b\u8bed\u8a00\u200b\u5177\u6709\u200b\u529f\u80fd\u5f3a\u5927\u200b\u548c\u200b\u7b80\u5355\u200b\u6613\u7528\u200b\u4e24\u4e2a\u200b\u7279\u5f81\u200b\u3002Java\u200b\u8bed\u8a00\u200b\u4f5c\u4e3a\u200b\u9759\u6001\u200b\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u200b\u8bed\u8a00\u200b\u7684\u200b\u4ee3\u8868\u200b\uff0c\u200b\u6781\u597d\u5730\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u9762\u5411\u5bf9\u8c61\u200b\u7406\u8bba\u200b\uff0c\u200b\u5141\u8bb8\u200b\u7a0b\u5e8f\u5458\u200b\u4ee5\u200b\u4f18\u96c5\u200b\u7684\u200b\u601d\u7ef4\u200b\u65b9\u5f0f\u200b\u8fdb\u884c\u200b\u590d\u6742\u200b\u7684\u200b\u7f16\u7a0b\u200b\u3002 Java\u200b\u5177\u6709\u200b\u7b80\u5355\u200b\u6027\u200b\u3001\u200b\u9762\u5411\u5bf9\u8c61\u200b\u3001\u200b\u5206\u5e03\u5f0f\u200b\u3001\u200b\u5065\u58ee\u6027\u200b\u3001\u200b\u5b89\u5168\u6027\u200b\u3001\u200b\u5e73\u53f0\u200b\u72ec\u7acb\u200b\u4e0e\u200b\u53ef\u79fb\u690d\u6027\u200b\u3001\u200b\u591a\u7ebf\u7a0b\u200b\u3001\u200b\u52a8\u6001\u6027\u200b\u7b49\u200b\u7279\u70b9\u200b\u3002Java\u200b\u53ef\u4ee5\u200b\u7f16\u5199\u200b\u684c\u9762\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3001Web\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3001\u200b\u5206\u5e03\u5f0f\u7cfb\u7edf\u200b\u548c\u200b\u5d4c\u5165\u5f0f\u200b\u7cfb\u7edf\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7b49\u200b\u3002</p> <p></p>"},{"location":"technology/Java/#_2","title":"\u8def\u7ebf\u56fe\u200b:","text":""},{"location":"technology/JavaScript/","title":"JavaScript","text":""},{"location":"technology/JavaScript/#_1","title":"\u7b80\u4ecb","text":"<p>JavaScript\u200b\u662f\u200b\u4e00\u79cd\u200b\u52a8\u6001\u200b\u7684\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\uff0c\u200b\u5e7f\u6cdb\u5e94\u7528\u200b\u4e8e\u200b\u7f51\u9875\u200b\u5f00\u53d1\u200b\u4e2d\u200b\uff0c\u200b\u4e3b\u8981\u200b\u7528\u4e8e\u200b\u589e\u5f3a\u200b\u7f51\u9875\u200b\u7684\u200b\u4ea4\u4e92\u6027\u200b\u548c\u200b\u52a8\u6001\u6027\u200b\u3002\u200b\u4f5c\u4e3a\u200bWeb\u200b\u5f00\u53d1\u200b\u7684\u200b\u6838\u5fc3\u6280\u672f\u200b\u4e4b\u4e00\u200b\uff0c\u200b\u5b83\u200b\u4e0e\u200bHTML\u200b\u548c\u200bCSS\u200b\u5171\u540c\u200b\u534f\u4f5c\u200b\uff0cHTML\u200b\u8d1f\u8d23\u200b\u5b9a\u4e49\u200b\u7f51\u9875\u200b\u7684\u200b\u5185\u5bb9\u200b\u7ed3\u6784\u200b\uff0cCSS\u200b\u5904\u7406\u200b\u6837\u5f0f\u200b\u548c\u200b\u5e03\u5c40\u200b\uff0c\u200b\u800c\u200bJavaScript\u200b\u5219\u200b\u63a7\u5236\u200b\u7f51\u9875\u200b\u7684\u200b\u884c\u4e3a\u200b\u548c\u200b\u4ea4\u4e92\u200b\u3002\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u5229\u7528\u200bJavaScript\u200b\u8fdb\u884c\u200b\u4e8b\u4ef6\u5904\u7406\u200b\u3001\u200b\u8868\u5355\u200b\u9a8c\u8bc1\u200b\u3001\u200b\u52a8\u753b\u200b\u521b\u5efa\u200b\u7b49\u200b\u591a\u79cd\u200b\u529f\u80fd\u200b\u3002\u200b\u6b64\u5916\u200b\uff0cJavaScript\u200b\u7684\u200b\u5e94\u7528\u200b\u5df2\u7ecf\u200b\u6269\u5c55\u200b\u5230\u200b\u670d\u52a1\u5668\u7aef\u200b\uff08\u200b\u5982\u200bNode.js\uff09\u3001\u200b\u79fb\u52a8\u200b\u5e94\u7528\u200b\u5f00\u53d1\u200b\u548c\u200b\u6e38\u620f\u200b\u5f00\u53d1\u200b\u7b49\u200b\u9886\u57df\u200b\uff0c\u200b\u6210\u4e3a\u200b\u73b0\u4ee3\u200b\u7f16\u7a0b\u200b\u73af\u5883\u200b\u4e2d\u200b\u4e0d\u53ef\u6216\u7f3a\u200b\u7684\u200b\u4e00\u90e8\u5206\u200b\u3002\u200b\u5176\u200b\u8de8\u5e73\u53f0\u200b\u548c\u200b\u9ad8\u200b\u9002\u5e94\u6027\u200b\u7684\u200b\u7279\u70b9\u200b\uff0c\u200b\u4f7f\u5f97\u200bJavaScript\u200b\u6210\u4e3a\u200b\u5168\u7403\u200b\u6700\u200b\u53d7\u6b22\u8fce\u200b\u548c\u200b\u5e7f\u6cdb\u200b\u4f7f\u7528\u200b\u7684\u200b\u811a\u672c\u8bed\u8a00\u200b\u4e4b\u4e00\u200b\u3002</p> <p></p>"},{"location":"technology/JavaScript/#_2","title":"\u8def\u7ebf\u56fe\u200b:","text":""},{"location":"technology/NetWork/","title":"\u7f51\u7edc\u200b\u5f00\u53d1","text":""},{"location":"technology/OperatingSystem/","title":"\u64cd\u4f5c\u7cfb\u7edf","text":""},{"location":"technology/PHP/","title":"PHP","text":""},{"location":"technology/PHP/#_1","title":"\u7b80\u4ecb","text":"<p>PHP\uff08\u200b\u5916\u6587\u200b\u540d\u200b:PHP: Hypertext Preprocessor\uff0c\u200b\u4e2d\u6587\u540d\u200b\uff1a\u201c\u200b\u8d85\u6587\u672c\u200b\u9884\u200b\u5904\u7406\u5668\u200b\u201d\uff09\u200b\u662f\u200b\u4e00\u79cd\u200b\u901a\u7528\u200b\u5f00\u6e90\u200b\u811a\u672c\u8bed\u8a00\u200b\u3002\u200b\u8bed\u6cd5\u200b\u5438\u6536\u200b\u4e86\u200bC\u200b\u8bed\u8a00\u200b\u3001Java\u200b\u548c\u200bPerl\u200b\u7684\u200b\u7279\u70b9\u200b\uff0c\u200b\u5229\u4e8e\u200b\u5b66\u4e60\u200b\uff0c\u200b\u4f7f\u7528\u200b\u5e7f\u6cdb\u200b\uff0c\u200b\u4e3b\u8981\u200b\u9002\u7528\u200b\u4e8e\u200bWeb\u200b\u5f00\u53d1\u200b\u9886\u57df\u200b\u3002PHP \u200b\u72ec\u7279\u200b\u7684\u200b\u8bed\u6cd5\u200b\u6df7\u5408\u200b\u4e86\u200bC\u3001Java\u3001Perl\u200b\u4ee5\u53ca\u200bPHP\u200b\u81ea\u521b\u200b\u7684\u200b\u8bed\u6cd5\u200b\u3002\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u6bd4\u200bCGI\u200b\u6216\u8005\u200bPerl\u200b\u66f4\u200b\u5feb\u901f\u200b\u5730\u200b\u6267\u884c\u200b\u52a8\u6001\u200b\u7f51\u9875\u200b\u3002\u200b\u7528\u200bPHP\u200b\u505a\u51fa\u200b\u7684\u200b\u52a8\u6001\u200b\u9875\u9762\u200b\u4e0e\u200b\u5176\u4ed6\u200b\u7684\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u76f8\u6bd4\u200b\uff0cPHP\u200b\u662f\u200b\u5c06\u200b\u7a0b\u5e8f\u200b\u5d4c\u5165\u200b\u5230\u200bHTML\uff08\u200b\u6807\u51c6\u200b\u901a\u7528\u200b\u6807\u8bb0\u200b\u8bed\u8a00\u200b\u4e0b\u200b\u7684\u200b\u4e00\u4e2a\u200b\u5e94\u7528\u200b\uff09\u200b\u6587\u6863\u200b\u4e2d\u200b\u53bb\u200b\u6267\u884c\u200b\uff0c\u200b\u6267\u884c\u200b\u6548\u7387\u200b\u6bd4\u200b\u5b8c\u5168\u200b\u751f\u6210\u200bHTML\u200b\u6807\u8bb0\u200b\u7684\u200bCGI\u200b\u8981\u200b\u9ad8\u200b\u8bb8\u591a\u200b\uff1bPHP\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u6267\u884c\u200b\u7f16\u8bd1\u200b\u540e\u200b\u4ee3\u7801\u200b\uff0c\u200b\u7f16\u8bd1\u200b\u53ef\u4ee5\u200b\u8fbe\u5230\u200b\u52a0\u5bc6\u200b\u548c\u200b\u4f18\u5316\u200b\u4ee3\u7801\u8fd0\u884c\u200b\uff0c\u200b\u4f7f\u200b\u4ee3\u7801\u8fd0\u884c\u200b\u66f4\u200b\u5feb\u200b\u3002</p> \u200b\u4e2d\u6587\u540d\u200b \u200b\u8d85\u6587\u672c\u200b\u9884\u200b\u5904\u7406\u5668\u200b \u200b\u5916\u6587\u200b\u540d\u200b Hyper Text Preprocessor \u200b\u7f16\u7a0b\u200b\u8303\u578b\u200b \u200b\u9762\u5411\u5bf9\u8c61\u200b\u3001\u200b\u547d\u4ee4\u5f0f\u200b\u7f16\u7a0b\u200b \u200b\u8bbe\u8ba1\u8005\u200b Rasmus Lerdorf \u200b\u7ef4\u62a4\u200b The PHP Group \u200b\u5916\u8bed\u200b\u7f29\u5199\u200b PHP <p></p>"},{"location":"technology/PHP/#_2","title":"\u8def\u7ebf\u56fe\u200b:","text":""},{"location":"technology/Python/","title":"Python","text":""},{"location":"technology/Python/#_1","title":"\u7b80\u4ecb","text":"<p>Python\uff08\u200b\u82f1\u56fd\u200b\u53d1\u97f3\u200b\uff1a/\u02c8pa\u026a\u03b8\u0259n/\u200b\u7f8e\u56fd\u200b\u53d1\u97f3\u200b\uff1a/\u02c8pa\u026a\u03b8\u0251\u02d0n/\uff09,\u200b\u662f\u200b\u8377\u5170\u200b\u79d1\u5b66\u5bb6\u200b\u5409\u591a\u200b\u00b7\u200b\u8303\u200b\u7f57\u82cf\u200b\u59c6\u200b\uff08Guido van Rossum\uff09\uff0c\u200b\u5728\u200b1989\u200b\u5e74\u200b\u671f\u95f4\u200b\u5f00\u53d1\u200b\u7684\u200b\u8ba1\u7b97\u673a\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u3002\u200b\u5728\u200bPython\u200b\u8bed\u8a00\u200b\u4e2d\u200b\uff0c\u200b\u4e00\u5207\u200b\u7686\u200b\u4e3a\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5373\u4f7f\u200b\u51fd\u6570\u200b\u4e5f\u200b\u662f\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u6709\u200b\u81ea\u8eab\u200b\u7684\u200b\u5c5e\u6027\u200b\u3002Python\u200b\u662f\u200b\u89e3\u91ca\u200b\u578b\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\uff0c\u200b\u8fd0\u884c\u200bPython\u200b\u7a0b\u5e8f\u200b\u65f6\u200b\uff0c\u200b\u9700\u8981\u200b\u5c06\u200b\u89e3\u91ca\u5668\u200b\u7ffb\u8bd1\u200bPython\u200b\u4ee3\u7801\u200b\u3002</p> <p>Python\u200b\u662f\u200b\u4e00\u79cd\u200b\u4e0d\u200b\u53d7\u200b\u5c40\u9650\u200b\u3001\u200b\u8de8\u5e73\u53f0\u200b\u7684\u200b\u5f00\u6e90\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\uff0c\u200b\u5176\u200b\u6570\u636e\u5904\u7406\u200b\u901f\u5ea6\u200b\u5feb\u200b\u3001\u200b\u529f\u80fd\u5f3a\u5927\u200b\u4e14\u200b\u7b80\u5355\u200b\u6613\u5b66\u200b\uff0c\u200b\u5728\u200b\u6570\u636e\u5206\u6790\u200b\u4e0e\u200b\u5904\u7406\u200b\u4e2d\u200b\u88ab\u200b\u5e7f\u6cdb\u5e94\u7528\u200b\u3002\u200b\u800c\u4e14\u200b\uff0cPython\u200b\u91c7\u7528\u200b\u89e3\u91ca\u200b\u8fd0\u884c\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u7f16\u5199\u200b\u540e\u200b\u65e0\u9700\u200b\u8fdb\u884c\u200b\u7f16\u8bd1\u200b\u5373\u53ef\u200b\u76f4\u63a5\u200b\u901a\u8fc7\u200b\u89e3\u91ca\u5668\u200b\u6267\u884c\u200b\uff0c\u200b\u5177\u6709\u200b\u5178\u578b\u200b\u7684\u200b\u52a8\u6001\u200b\u8bed\u8a00\u7279\u70b9\u200b\uff0c\u200b\u7f16\u7a0b\u200b\u6548\u7387\u200b\u6781\u9ad8\u200b\u3002Python\u200b\u662f\u200b\u5b8c\u5168\u200b\u9762\u5411\u5bf9\u8c61\u200b\u7684\u200b\u8bed\u8a00\u200b\uff0c\u200b\u6570\u5b57\u200b\u3001\u200b\u6a21\u5757\u200b\u3001\u200b\u5b57\u7b26\u4e32\u200b\u3001\u200b\u6570\u636e\u7ed3\u6784\u200b\u90fd\u200b\u662f\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5e76\u4e14\u200b\u652f\u6301\u200b\u5e38\u89c1\u200b\u7684\u200b\u7c7b\u200b\u6982\u5ff5\u200b\uff0c\u200b\u5982\u200b\u7ee7\u627f\u200b\uff0c\u200b\u91cd\u8f7d\u200b\uff0c\u200b\u6d3e\u751f\u200b\uff0c\u200b\u591a\u91cd\u200b\u7ee7\u627f\u200b\u3002</p> <p>2017\u200b\u5e74\u200b7\u200b\u6708\u200b20\u200b\u65e5\u200b\uff0cIEEE\u200b\u53d1\u5e03\u200b2017\u200b\u5e74\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u6392\u884c\u699c\u200b\uff1aPython\u200b\u9ad8\u200b\u5c45\u9996\u4f4d\u200b\u30022018\u200b\u5e74\u200b3\u200b\u6708\u200b\uff0c\u200b\u8be5\u200b\u8bed\u8a00\u200b\u4f5c\u8005\u200b\u5728\u200b\u90ae\u4ef6\u200b\u5217\u8868\u200b\u4e0a\u200b\u5ba3\u5e03\u200bPython 2.7\u200b\u5c06\u200b\u4e8e\u200b2020\u200b\u5e74\u200b1\u200b\u6708\u200b1\u200b\u65e5\u200b\u7ec8\u6b62\u200b\u652f\u6301\u200b\u3002\u200b\u7528\u6237\u200b\u5982\u679c\u200b\u60f3\u8981\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u65e5\u671f\u200b\u4e4b\u540e\u200b\u7ee7\u7eed\u200b\u5f97\u5230\u200b\u4e0e\u200bPython 2.7\u200b\u6709\u5173\u200b\u7684\u200b\u652f\u6301\u200b\uff0c\u200b\u5219\u200b\u9700\u8981\u200b\u4ed8\u8d39\u200b\u7ed9\u200b\u5546\u4e1a\u200b\u4f9b\u5e94\u5546\u200b\u3002</p> <p></p>"},{"location":"technology/Python/#_2","title":"\u8def\u7ebf\u56fe\u200b:","text":""},{"location":"technology/Ruby/","title":"Ruby","text":""},{"location":"technology/Ruby/#_1","title":"\u7b80\u4ecb","text":"<p>Ruby\uff0c\u200b\u4e00\u79cd\u200b\u4e3a\u200b\u7b80\u5355\u200b\u5feb\u6377\u200b\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u200b\u800c\u521b\u200b\u7684\u200b\u811a\u672c\u8bed\u8a00\u200b\uff0c\u200b\u5728\u200b20\u200b\u4e16\u7eaa\u200b90\u200b\u5e74\u4ee3\u200b\u7531\u200b\u65e5\u672c\u200b\u4eba\u200b\u677e\u672c\u200b\u884c\u5f18\u200b\uff08\u307e\u3064\u3082\u3068\u3086\u304d\u3072\u308d\uff09\u200b\u5f00\u53d1\u200b\uff0c\u200b\u9075\u5b88\u200bGPL\u200b\u534f\u8bae\u200b\u548c\u200bRuby License\u3002Ruby\u200b\u662f\u200b\u4e00\u4e2a\u200b\u8bed\u6cd5\u200b\u50cf\u200bSmalltalk\u200b\u4e00\u6837\u200b\u5b8c\u5168\u200b\u9762\u5411\u5bf9\u8c61\u200b\u3001\u200b\u811a\u672c\u200b\u6267\u884c\u200b\u3001\u200b\u53c8\u200b\u6709\u200bPerl\u200b\u5f3a\u5927\u200b\u7684\u200b\u6587\u5b57\u5904\u7406\u200b\u529f\u80fd\u200b\u7684\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u3002\u200b\u5b83\u200b\u7684\u200b\u7075\u611f\u200b\u4e0e\u200b\u7279\u6027\u200b\u6765\u81ea\u200b\u4e8e\u200bPerl\u3001Smalltalk\u3001Eiffel\u3001Ada\u200b\u4ee5\u53ca\u200bLisp\u200b\u8bed\u8a00\u200b\u3002\u200b\u7531\u200bRuby\u200b\u8bed\u8a00\u200b\u672c\u8eab\u200b\u8fd8\u200b\u53d1\u5c55\u200b\u51fa\u200b\u4e86\u200bJRuby\uff08Java\u200b\u5e73\u53f0\u200b\uff09\u3001IronRuby\uff08.NET\u200b\u5e73\u53f0\u200b\uff09\u200b\u7b49\u200b\u5176\u4ed6\u200b\u5e73\u53f0\u200b\u7684\u200bRuby\u200b\u8bed\u8a00\u200b\u66ff\u4ee3\u54c1\u200b\u3002Ruby\u200b\u4e8e\u200b1993\u200b\u5e74\u200b2\u200b\u6708\u200b24\u200b\u65e5\u200b\u5f00\u59cb\u200b\u7f16\u5199\u200b\u81f3\u200b1995\u200b\u5e74\u200b12\u200b\u6708\u200b\u624d\u200b\u6b63\u5f0f\u200b\u516c\u5f00\u200b\u53d1\u5e03\u200b\u4e8e\u200bfj\uff08\u200b\u65b0\u95fb\u7ec4\u200b\uff09\u3002\u200b\u56e0\u4e3a\u200bPerl\u200b\u53d1\u97f3\u200b\u4e0e\u200b6\u200b\u6708\u200b\u8bde\u751f\u77f3\u200bpearl\uff08\u200b\u73cd\u73e0\u200b\uff09\u200b\u76f8\u540c\u200b\uff0c\u200b\u56e0\u6b64\u200bRuby\u200b\u4ee5\u200b7\u200b\u6708\u200b\u8bde\u751f\u77f3\u200bruby\uff08\u200b\u7ea2\u5b9d\u77f3\u200b\uff09\u200b\u547d\u540d\u200b\u3002</p> <p></p>"},{"location":"technology/Ruby/#_2","title":"\u8def\u7ebf\u56fe\u200b:","text":""},{"location":"technology/Rust/","title":"Rust","text":""},{"location":"technology/Rust/#_1","title":"\u7b80\u4ecb","text":"<p>Rust\u200b\u662f\u200b\u4e00\u79cd\u200b\u7cfb\u7edf\u200b\u7ea7\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\uff0c\u200b\u6ce8\u91cd\u200b\u9ad8\u6027\u80fd\u200b\u3001\u200b\u53ef\u9760\u6027\u200b\u548c\u200b\u751f\u4ea7\u529b\u200b[1]\uff0c\u200b\u652f\u6301\u200b\u7ed3\u6784\u5316\u7f16\u7a0b\u200b\u3001\u200b\u51fd\u6570\u200b\u5f0f\u200b\u7f16\u7a0b\u200b\u3001\u200b\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u200b\u7b49\u200b\u591a\u79cd\u200b\u7f16\u7a0b\u200b\u8303\u5f0f\u200b\u3002</p> <p>Rust\u200b\u662f\u200b\u7f16\u8bd1\u200b\u578b\u200b\u8bed\u8a00\u200b\uff0c\u200b\u6ca1\u6709\u200b\u8fd0\u884c\u200b\u65f6\u200b(Runtime)\u200b\u548c\u200b\u5783\u573e\u200b\u56de\u6536\u200b(Garbage Collector)\u3002Rust\u200b\u4f7f\u7528\u200b\u6240\u6709\u6743\u200b\u673a\u5236\u200b\u6765\u200b\u5b9e\u73b0\u200b\u81ea\u52a8\u200b\u5185\u5b58\u200b\u7ba1\u7406\u200b\uff0c\u200b\u5e76\u200b\u4ee5\u6b64\u200b\u6765\u200b\u4fdd\u8bc1\u200b\u5185\u5b58\u200b\u5b89\u5168\u200b\u3002Rust\u200b\u662f\u200b\u5f00\u6e90\u200b\u9879\u76ee\u200b\uff0c\u200b\u76ee\u524d\u200b\u6258\u7ba1\u200b\u5728\u200bGithub\u200b\u4e0a\u200b\uff0cRust\u200b\u548c\u200b\u6240\u6709\u200b\u5176\u4ed6\u200b\u5b98\u65b9\u200b\u9879\u76ee\u200b\u90fd\u200b\u91c7\u7528\u200bApache\u200b\u8bb8\u53ef\u8bc1\u200b2.0\u200b\u548c\u200bMIT\u200b\u8bb8\u53ef\u8bc1\u200b\u53cc\u91cd\u200b\u8bb8\u53ef\u200b[2]\u3002Rust\u200b\u5b98\u65b9\u200b\u8f6f\u4ef6\u5305\u200b\u7ba1\u7406\u5668\u200b\u4e3a\u200bCargo\u3002</p>"},{"location":"technology/Rust/#_2","title":"\u8def\u7ebf\u56fe\u200b:","text":""},{"location":"technology/VisualBasic/","title":"VisualBasic","text":""},{"location":"technology/VisualBasic/#_1","title":"\u7b80\u4ecb","text":"<p>Visual Basic\uff08\u200b\u7b80\u79f0\u200bVB\uff09\u200b\u662f\u200bMicrosoft\u200b\u516c\u53f8\u200b\u5f00\u53d1\u200b\u7684\u200b\u4e00\u79cd\u200b\u901a\u7528\u200b\u7684\u200b\u57fa\u4e8e\u200b\u5bf9\u8c61\u200b\u7684\u200b\u7a0b\u5e8f\u8bbe\u8ba1\u200b\u8bed\u8a00\u200b\uff0c\u200b\u4e3a\u200b\u7ed3\u6784\u5316\u200b\u7684\u200b\u3001\u200b\u6a21\u5757\u5316\u200b\u7684\u200b\u3001\u200b\u9762\u5411\u5bf9\u8c61\u200b\u7684\u200b\u3001\u200b\u5305\u542b\u200b\u534f\u52a9\u200b\u5f00\u53d1\u200b\u73af\u5883\u200b\u7684\u200b\u4e8b\u4ef6\u9a71\u52a8\u200b\u4e3a\u200b\u673a\u5236\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u7a0b\u5e8f\u8bbe\u8ba1\u200b\u8bed\u8a00\u200b\u3002\u200b\u662f\u200b\u4e00\u79cd\u200b\u53ef\u200b\u7528\u4e8e\u200b\u5fae\u8f6f\u200b\u81ea\u5bb6\u200b\u4ea7\u54c1\u5f00\u53d1\u200b\u7684\u200b\u8bed\u8a00\u200b\u3002 \u201cVisual\u201d \u200b\u6307\u200b\u7684\u200b\u662f\u200b\u5f00\u53d1\u200b\u56fe\u5f62\u7528\u6237\u754c\u9762\u200b (GUI) \u200b\u7684\u200b\u65b9\u6cd5\u200b\u2014\u2014\u200b\u4e0d\u9700\u200b\u7f16\u5199\u200b\u5927\u91cf\u200b\u4ee3\u7801\u200b\u53bb\u200b\u63cf\u8ff0\u200b\u754c\u9762\u200b\u5143\u7d20\u200b\u7684\u200b\u5916\u89c2\u200b\u548c\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u800c\u200b\u53ea\u8981\u200b\u628a\u200b\u9884\u5148\u200b\u5efa\u7acb\u200b\u7684\u200b\u5bf9\u8c61\u200badd\u200b\u5230\u200b\u5c4f\u5e55\u200b\u4e0a\u200b\u7684\u200b\u4e00\u70b9\u200b\u5373\u53ef\u200b\u3002 \u201cBasic\u201d\u200b\u6307\u200b\u7684\u200b\u662f\u200b BASIC (Beginners All-Purpose Symbolic Instruction Code) \u200b\u8bed\u8a00\u200b\uff0c\u200b\u662f\u200b\u4e00\u79cd\u200b\u5728\u200b\u8ba1\u7b97\u6280\u672f\u200b\u53d1\u5c55\u200b\u5386\u53f2\u200b\u4e0a\u200b\u5e94\u7528\u200b\u5f97\u200b\u6700\u4e3a\u200b\u5e7f\u6cdb\u200b\u7684\u200b\u8bed\u8a00\u200b\u3002 Visual Basic\u200b\u6e90\u81ea\u200b\u4e8e\u200bBASIC\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u3002VB\u200b\u62e5\u6709\u200b\u56fe\u5f62\u7528\u6237\u754c\u9762\u200b\uff08GUI\uff09\u200b\u548c\u200b\u5feb\u901f\u200b\u5e94\u7528\u200b\u7a0b\u5e8f\u5f00\u53d1\u200b\uff08RAD\uff09\u200b\u7cfb\u7edf\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8f7b\u6613\u200b\u7684\u200b\u4f7f\u7528\u200bDAO\u3001RDO\u3001ADO\u200b\u8fde\u63a5\u200b\u6570\u636e\u5e93\u200b\uff0c\u200b\u6216\u8005\u200b\u8f7b\u677e\u200b\u7684\u200b\u521b\u5efa\u200bActiveX\u200b\u63a7\u4ef6\u200b\uff0c\u200b\u7528\u4e8e\u200b\u9ad8\u6548\u200b\u751f\u6210\u200b\u7c7b\u578b\u200b\u5b89\u5168\u200b\u548c\u200b\u9762\u5411\u5bf9\u8c61\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002\u200b\u7a0b\u5e8f\u5458\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u7684\u200b\u4f7f\u7528\u200bVB\u200b\u63d0\u4f9b\u200b\u7684\u200b\u7ec4\u4ef6\u200b\u5feb\u901f\u200b\u5efa\u7acb\u200b\u4e00\u4e2a\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002</p>"},{"location":"technology/VisualBasic/#_2","title":"\u8def\u7ebf\u56fe\u200b:","text":""},{"location":"technology/Cpp/001-BoostMessageQueue/","title":"Boost\u200b\u6d88\u606f\u200b\u961f\u5217","text":""},{"location":"technology/Cpp/001-BoostMessageQueue/#_1","title":"\u57fa\u7840\u200b\u5e94\u7528","text":"<p>\u200b\u4ee5\u4e0b\u200b\u4e3a\u200b\u57fa\u4e8e\u200bBoost\u200b\u5e93\u200b\u7684\u200b\u6d88\u606f\u200b\u961f\u5217\u200b\u5b8c\u6574\u200b\u4f7f\u7528\u6307\u5357\u200b\uff0c\u200b\u5305\u542b\u200b\u8fdb\u7a0b\u200b\u95f4\u901a\u4fe1\u200b\u7684\u200b\u751f\u4ea7\u8005\u200b-\u200b\u6d88\u8d39\u8005\u200b\u6a21\u578b\u200b\u5b9e\u73b0\u200b\u548c\u200b\u4ee3\u7801\u200b\u89e3\u6790\u200b\uff1a</p>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_2","title":"\u4e00\u200b\u3001\u200b\u73af\u5883\u200b\u51c6\u5907","text":"<p>\u200b\u5b89\u88c5\u200bBoost\u200b\u5f00\u53d1\u200b\u5e93\u200b\uff08Ubuntu\u200b\u793a\u4f8b\u200b\uff09</p> <pre><code>sudo apt-get install libboost-dev libboost-system-dev \n</code></pre> <p>\u200b\u7f16\u8bd1\u200b\u65f6\u9700\u200b\u94fe\u63a5\u200b\u76f8\u5173\u200b\u5e93\u200b</p> <pre><code>g++ producer.cpp  -o producer -lboost_system -lrt \ng++ consumer.cpp  -o consumer -lboost_system -lrt \n</code></pre>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_3","title":"\u4e8c\u200b\u3001\u200b\u6838\u5fc3\u200b\u7ec4\u4ef6\u200b\u8bf4\u660e","text":"<ol> <li>\u200b\u6d88\u606f\u200b\u961f\u5217\u200b\u6784\u9020\u51fd\u6570\u200b</li> </ol> <pre><code>// \u200b\u521b\u5efa\u200b\u65b0\u200b\u961f\u5217\u200b\uff08\u200b\u540c\u540d\u200b\u5b58\u5728\u200b\u5219\u200b\u629b\u200b\u5f02\u5e38\u200b\uff09\nmessage_queue mq(create_only, \"MyQueue\", 100, sizeof(MyMessage));\n\n// \u200b\u6253\u5f00\u200b\u6216\u200b\u521b\u5efa\u200b\u961f\u5217\u200b \nmessage_queue mq(open_or_create, \"MyQueue\", 100, sizeof(MyMessage));\n\n// \u200b\u4ec5\u200b\u6253\u5f00\u200b\u73b0\u6709\u200b\u961f\u5217\u200b \nmessage_queue mq(open_only, \"MyQueue\");\n</code></pre> <p>\u25b6 \u200b\u53c2\u6570\u200b\u8bf4\u660e\u200b\uff1a\u200b\u961f\u5217\u200b\u540d\u79f0\u200b\u3001\u200b\u6700\u5927\u200b\u6d88\u606f\u200b\u6570\u91cf\u200b\u3001\u200b\u5355\u200b\u6d88\u606f\u200b\u6700\u5927\u200b\u5b57\u8282\u200b\u3001\u200b\u6743\u9650\u200b\u6a21\u5f0f\u200b\uff08\u200b\u9ed8\u8ba4\u200b0644\uff09</p> <ol> <li>\u200b\u6d88\u606f\u200b\u53d1\u9001\u200b\u6a21\u5f0f\u200b</li> </ol> <pre><code>// \u200b\u963b\u585e\u200b\u53d1\u9001\u200b\uff08\u200b\u961f\u5217\u200b\u6ee1\u65f6\u200b\u7b49\u5f85\u200b\uff09\nmq.send(buffer,  sizeof(data), 0); \n\n// \u200b\u975e\u200b\u963b\u585e\u200b\u53d1\u9001\u200b\uff08\u200b\u7acb\u5373\u200b\u8fd4\u56de\u200b\u72b6\u6001\u200b\uff09\nbool sent = mq.try_send(buffer,  sizeof(data), 0);\n\n// \u200b\u8d85\u65f6\u200b\u53d1\u9001\u200b\uff08\u200b\u7b49\u5f85\u200b2\u200b\u79d2\u200b\uff09\nboost::posix_time::ptime timeout = /* \u200b\u8bbe\u7f6e\u200b\u8d85\u65f6\u200b\u65f6\u95f4\u200b */;\nbool sent = mq.timed_send(buffer,  sizeof(data), 0, timeout);\n</code></pre> <p>\u25b6 \u200b\u4f18\u5148\u7ea7\u200b\u53c2\u6570\u200b\uff1a0\u200b\u4e3a\u200b\u9ed8\u8ba4\u200b\uff0c\u200b\u6570\u503c\u200b\u8d8a\u5927\u200b\u4f18\u5148\u7ea7\u200b\u8d8a\u9ad8\u200b</p> <ol> <li>\u200b\u6d88\u606f\u200b\u63a5\u6536\u200b\u6a21\u5f0f\u200b</li> </ol> <pre><code>// \u200b\u963b\u585e\u200b\u63a5\u6536\u200b \nmq.receive(buffer,  sizeof(buffer), recvd_size, priority);\n\n// \u200b\u975e\u200b\u963b\u585e\u200b\u63a5\u6536\u200b \nbool received = mq.try_receive(buffer,  sizeof(buffer), recvd_size, priority);\n\n// \u200b\u8d85\u65f6\u200b\u63a5\u6536\u200b \nboost::posix_time::ptime timeout = /* \u200b\u8bbe\u7f6e\u200b\u8d85\u65f6\u200b\u65f6\u95f4\u200b */;\nbool received = mq.timed_receive(buffer,  sizeof(buffer), recvd_size, priority, timeout);\n</code></pre>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_4","title":"\u4e09\u200b\u3001\u200b\u5b8c\u6574\u200b\u4ee3\u7801\u200b\u5b9e\u73b0","text":"<p>\u200b\u751f\u4ea7\u8005\u200b\u7a0b\u5e8f\u200b\uff08producer.cpp \uff09</p> <pre><code>#include &lt;boost/interprocess/ipc/message_queue.hpp&gt; \n#include &lt;iostream&gt;\n\nusing namespace boost::interprocess;\n\nstruct Message {\n    int id;\n    float value;\n};\n\nint main() {\n    try {\n        // \u200b\u521b\u5efa\u200b\u6216\u200b\u6253\u5f00\u200b\u6d88\u606f\u200b\u961f\u5217\u200b \n        message_queue mq(open_or_create, \"demo_queue\", 100, sizeof(Message));\n\n        // \u200b\u53d1\u9001\u200b\u7ed3\u6784\u5316\u200b\u6d88\u606f\u200b \n        for(int i=0; i&lt;5; ++i) {\n            Message msg = {i, i*1.5f};\n            mq.send(&amp;msg,  sizeof(msg), 0);\n            std::cout &lt;&lt; \"Sent: ID=\" &lt;&lt; msg.id  &lt;&lt; \" Value=\" &lt;&lt; msg.value  &lt;&lt; std::endl;\n        }\n    } \n    catch(interprocess_exception &amp;ex) {\n        std::cerr &lt;&lt; \"Error: \" &lt;&lt; ex.what()  &lt;&lt; std::endl;\n        return 1;\n    }\n    return 0;\n}\n</code></pre> <p>\u200b\u6d88\u8d39\u8005\u200b\u7a0b\u5e8f\u200b\uff08consumer.cpp \uff09</p> <pre><code>#include &lt;boost/interprocess/ipc/message_queue.hpp&gt; \n#include &lt;iostream&gt;\n\nusing namespace boost::interprocess;\n\nstruct Message {\n    int id;\n    float value;\n};\n\nint main() {\n    try {\n        // \u200b\u6253\u5f00\u200b\u73b0\u6709\u200b\u961f\u5217\u200b \n        message_queue mq(open_only, \"demo_queue\");\n\n        Message msg;\n        size_t recvd_size;\n        unsigned int priority;\n\n        // \u200b\u6301\u7eed\u200b\u63a5\u6536\u200b\u6d88\u606f\u200b \n        while(true) {\n            mq.receive(&amp;msg,  sizeof(msg), recvd_size, priority);\n            if(recvd_size == sizeof(msg)) {\n                std::cout &lt;&lt; \"Received: ID=\" &lt;&lt; msg.id  \n                          &lt;&lt; \" Value=\" &lt;&lt; msg.value  &lt;&lt; std::endl;\n            }\n        }\n    }\n    catch(interprocess_exception &amp;ex) {\n        message_queue::remove(\"demo_queue\");\n        std::cerr &lt;&lt; ex.what()  &lt;&lt; std::endl;\n        return 1;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_5","title":"\u56db\u200b\u3001\u200b\u5173\u952e\u200b\u7279\u6027\u200b\u8bf4\u660e","text":"<p>\u200b\u7ebf\u7a0b\u200b\u5b89\u5168\u6027\u200b \u200b\u5185\u90e8\u200b\u4f7f\u7528\u200b\u4e92\u65a5\u200b\u9501\u200b\u4fdd\u8bc1\u200b\u539f\u5b50\u200b\u64cd\u4f5c\u200b \u200b\u652f\u6301\u200b\u591a\u200b\u751f\u4ea7\u8005\u200b/\u200b\u591a\u200b\u6d88\u8d39\u8005\u200b\u5e76\u53d1\u200b\u8bbf\u95ee\u200b \u200b\u6027\u80fd\u200b\u4f18\u5316\u200b\u70b9\u200b \u200b\u4f18\u5148\u200b\u4f7f\u7528\u200b\u56fa\u5b9a\u200b\u957f\u5ea6\u200b\u6d88\u606f\u200b\uff08\u200b\u907f\u514d\u200b\u5185\u5b58\u200b\u788e\u7247\u200b\uff09 \u200b\u5408\u7406\u200b\u8bbe\u7f6e\u200bmax_num_msg\u200b\u9632\u6b62\u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b \u200b\u8d44\u6e90\u7ba1\u7406\u200b // \u200b\u7a0b\u5e8f\u200b\u9000\u51fa\u200b\u65f6\u200b\u5220\u9664\u200b\u961f\u5217\u200b  message_queue::remove(\"demo_queue\"); \u200b\u6570\u636e\u7c7b\u578b\u200b\u5efa\u8bae\u200b \u200b\u5efa\u8bae\u200b\u4f7f\u7528\u200bPOD\u200b\u7c7b\u578b\u200b\uff08\u200b\u7eaf\u65e7\u200b\u6570\u636e\u200b\uff09 \u200b\u590d\u6742\u200b\u5bf9\u8c61\u200b\u9700\u200b\u5e8f\u5217\u5316\u200b\u5904\u7406\u200b</p>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_6","title":"\u4e94\u200b\u3001\u200b\u8fd0\u884c\u200b\u9a8c\u8bc1","text":"<p>\u200b\u7ec8\u7aef\u200b1\uff1a\u200b\u542f\u52a8\u200b\u6d88\u8d39\u8005\u200b  ./consumer</p> <p>\u200b\u7ec8\u7aef\u200b2\uff1a\u200b\u542f\u52a8\u200b\u751f\u4ea7\u8005\u200b  ./producer</p> <p>\u200b\u8f93\u51fa\u200b\u793a\u4f8b\u200b </p> <p>Sent: ID=0 Value=0 </p> <p>Received: ID=0 Value=0 </p> <p>Sent: ID=1 Value=1.5 </p> <p>Received: ID=1 Value=1.5 </p> <p>...</p>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_7","title":"\u516d\u200b\u3001\u200b\u6269\u5c55\u200b\u5e94\u7528\u200b\u573a\u666f","text":"<p>\u200b\u5206\u5e03\u5f0f\u7cfb\u7edf\u200b\u72b6\u6001\u200b\u540c\u6b65\u200b \u200b\u65e5\u5fd7\u200b\u6536\u96c6\u200b\u7cfb\u7edf\u200b \u200b\u5b9e\u65f6\u200b\u6570\u636e\u5904\u7406\u200b\u6d41\u6c34\u7ebf\u200b \u200b\u8de8\u200b\u8fdb\u7a0b\u200b\u4efb\u52a1\u8c03\u5ea6\u200b \u200b\u5b8c\u6574\u200b\u5b9e\u73b0\u200b\u53c2\u8003\u200bBoost\u200b\u5b98\u65b9\u200b\u6587\u6863\u200b\uff0c\u200b\u5efa\u8bae\u200b\u7ed3\u5408\u200bboost::serialization\u200b\u5e93\u200b\u5904\u7406\u200b\u590d\u6742\u200b\u5bf9\u8c61\u200b\u7684\u200b\u5e8f\u5217\u5316\u200b\u9700\u6c42\u200b\u3002</p>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_8","title":"\u6027\u80fd\u200b\u4f18\u5316\u200b\u6280\u5de7","text":"<p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u9488\u5bf9\u200bBoost\u200b\u6d88\u606f\u200b\u961f\u5217\u200b\u7684\u200b\u6027\u80fd\u200b\u4f18\u5316\u200b\u6280\u5de7\u200b\uff0c\u200b\u7efc\u5408\u200b\u5b9e\u9645\u200b\u5f00\u53d1\u200b\u7ecf\u9a8c\u200b\u548c\u200b\u5206\u5e03\u5f0f\u7cfb\u7edf\u200b\u8bbe\u8ba1\u200b\u539f\u5219\u200b\u6574\u7406\u200b\u7684\u200b\u6838\u5fc3\u200b\u65b9\u6848\u200b\uff1a</p>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_9","title":"\u4e00\u200b\u3001\u200b\u6d88\u606f\u200b\u7ed3\u6784\u200b\u4f18\u5316","text":"<ul> <li>\u200b\u56fa\u5b9a\u200b\u957f\u5ea6\u200b\u6d88\u606f\u200b\u8bbe\u8ba1\u200b</li> </ul> <p>\u200b\u4f18\u5148\u200b\u4f7f\u7528\u200bPOD\uff08Plain Old Data\uff09\u200b\u7c7b\u578b\u200b\uff0c\u200b\u907f\u514d\u200b\u52a8\u6001\u5185\u5b58\u200b\u5206\u914d\u200b</p> <pre><code>// \u200b\u4f18\u5316\u200b\u540e\u200b\u7684\u200b\u6d88\u606f\u200b\u7ed3\u6784\u200b\uff088\u200b\u5b57\u8282\u200b\u5bf9\u9f50\u200b\uff09\n#pragma pack(push, 1)\nstruct OptimizedMsg {\n    uint32_t id;\n    double timestamp;\n    float sensor_data[4]();\n};\n#pragma pack(pop)\n</code></pre> <p>\u200b\u7981\u7528\u200b\u865a\u200b\u51fd\u6570\u200b\u548c\u200b\u590d\u6742\u200b\u7ed3\u6784\u200b\u4f53\u200b\uff0c\u200b\u51cf\u5c11\u200b\u5e8f\u5217\u5316\u200b\u5f00\u9500\u200b</p> <ul> <li>\u200b\u6d88\u606f\u538b\u7f29\u200b\u7b56\u7565\u200b</li> </ul> <p>\u200b\u5bf9\u200b\u5927\u578b\u200b\u6570\u636e\u200b\uff08&gt;1KB\uff09\u200b\u4f7f\u7528\u200bzlib\u200b\u538b\u7f29\u200b</p> <pre><code>boost::iostreams::filtering_ostream os;\nos.push(boost::iostreams::zlib_compressor()); \nos.push(boost::iostreams::back_inserter(compressed_data)); \n</code></pre>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_10","title":"\u4e8c\u200b\u3001\u200b\u961f\u5217\u200b\u914d\u7f6e\u200b\u8c03\u4f18","text":"<ul> <li>\u200b\u5bb9\u91cf\u200b\u53c2\u6570\u200b\u8bbe\u5b9a\u200b</li> </ul> <pre><code>// \u200b\u6839\u636e\u200b\u4e1a\u52a1\u200b\u8d1f\u8f7d\u200b\u8ba1\u7b97\u200b\u961f\u5217\u200b\u53c2\u6570\u200b\nconstexpr size_t MAX_MSG = 100000;  // \u200b\u5386\u53f2\u200b\u5cf0\u503c\u200b*1.5\nconstexpr size_t MSG_SIZE = sizeof(OptimizedMsg);\nmessage_queue mq(open_or_create, \"HighPerfQueue\", MAX_MSG, MSG_SIZE);\n</code></pre> <p>\u200b\u5efa\u8bae\u200b\u5185\u5b58\u200b\u7528\u91cf\u200b\uff1aMAX_MSG * MSG_SIZE \u2264 \u200b\u7269\u7406\u200b\u5185\u5b58\u200b\u7684\u200b70%</p> <ul> <li>\u200b\u5b58\u50a8\u4ecb\u8d28\u200b\u4f18\u5316\u200b</li> </ul> <p>\u200b\u5c06\u200b\u5171\u4eab\u5185\u5b58\u200b\u6587\u4ef6\u200b\u6302\u8f7d\u200b\u5230\u200bRAM\u200b\u78c1\u76d8\u200b\uff1a</p> <pre><code>mount -t tmpfs -o size=512M tmpfs /dev/shm/boost_queue\n</code></pre>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_11","title":"\u4e09\u200b\u3001\u200b\u5e76\u53d1\u200b\u5904\u7406\u200b\u4f18\u5316","text":"<ul> <li>\u200b\u591a\u200b\u6d88\u8d39\u8005\u200b\u6a21\u5f0f\u200b</li> </ul> <pre><code>// \u200b\u542f\u52a8\u200b\u591a\u4e2a\u200b\u6d88\u8d39\u8005\u200b\u7ebf\u7a0b\u200b\nstd::vector&lt;std::thread&gt; consumers;\nfor(int i=0; i&lt;4; ++i){\n    consumers.emplace_back([]{ \n        message_queue mq(open_only, \"HighPerfQueue\");\n        // \u200b\u5904\u7406\u200b\u903b\u8f91\u200b\n    });\n}\n</code></pre> <p>\u200b\u6d88\u8d39\u8005\u200b\u6570\u91cf\u200b\u5efa\u8bae\u200b\uff1aCPU\u200b\u6838\u5fc3\u200b\u6570\u200b\u00d72 * \u200b\u6279\u91cf\u200b\u5904\u7406\u200b\u673a\u5236\u200b</p> <pre><code>// \u200b\u751f\u4ea7\u8005\u200b\u6279\u91cf\u200b\u53d1\u9001\u200b\uff08\u200b\u6bcf\u6279\u200b100\u200b\u6761\u200b\uff09\nstd::vector&lt;OptimizedMsg&gt; batch(100);\nmq.send(batch.data(),  batch.size()*sizeof(OptimizedMsg),  0);\n\n// \u200b\u6d88\u8d39\u8005\u200b\u6279\u91cf\u200b\u63a5\u6536\u200b\nOptimizedMsg bulk[50]();\nsize_t received = mq.try_receive(bulk,  sizeof(bulk), recvd_size, prio);\n</code></pre>"},{"location":"technology/Cpp/001-BoostMessageQueue/#io","title":"\u56db\u200b\u3001\u200b\u7f51\u7edc\u200b\u4e0e\u200bIO\u200b\u4f18\u5316","text":"<ul> <li>\u200b\u4f20\u8f93\u5c42\u200b\u8c03\u4f18\u200b</li> </ul> <p>\u200b\u542f\u7528\u200bNagle\u200b\u7b97\u6cd5\u200b\uff1a</p> <pre><code>setsockopt(fd, IPPROTO_TCP, TCP_NODELAY, &amp;flag, sizeof(int));\n</code></pre> <p>\u200b\u8bbe\u7f6e\u200bSocket\u200b\u7f13\u51b2\u533a\u200b\u5927\u5c0f\u200b\uff08\u200b\u5efa\u8bae\u200b4MB\u200b\u4ee5\u4e0a\u200b\uff09 * \u200b\u5f02\u6b65\u200bIO\u200b\u6a21\u5f0f\u200b</p> <pre><code>// \u200b\u4f7f\u7528\u200bBoost.Asio\u200b\u7ed3\u5408\u200b\u6d88\u606f\u200b\u961f\u5217\u200b\nboost::asio::io_service io;\nboost::asio::post(io, [&amp;]{ mq.async_send(...);  });\n</code></pre>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_12","title":"\u4e94\u200b\u3001\u200b\u76d1\u63a7\u200b\u4e0e\u200b\u5bb9\u9519","text":"<ul> <li>\u200b\u5173\u952e\u200b\u6307\u6807\u200b\u76d1\u63a7\u200b</li> </ul> \u200b\u6307\u6807\u200b \u200b\u76d1\u63a7\u200b\u65b9\u5f0f\u200b \u200b\u5065\u5eb7\u200b\u9608\u503c\u200b \u200b\u961f\u5217\u200b\u586b\u5145\u200b\u7387\u200b mq.get_num_msg()/MAX_MSG &lt;80% \u200b\u6d88\u8d39\u200b\u5ef6\u8fdf\u200b \u200b\u6d88\u606f\u200b\u65f6\u95f4\u200b\u6233\u200b\u5dee\u503c\u200b &lt;100ms \u200b\u5931\u8d25\u200b\u91cd\u8bd5\u200b\u7387\u200b \u200b\u9519\u8bef\u200b\u8ba1\u6570\u5668\u200b\u7edf\u8ba1\u200b &lt;0.1% <ul> <li>\u200b\u6545\u969c\u200b\u6062\u590d\u200b\u673a\u5236\u200b</li> </ul> <pre><code>// \u200b\u5f02\u5e38\u200b\u5904\u7406\u200b\u6a21\u677f\u200b\ntry {\n    mq.send(...); \n} catch(boost::interprocess::interprocess_exception&amp; e) {\n    if(e.get_error_code()  == timeout) {\n        mq.timed_send(...);  // \u200b\u5e26\u200b\u8d85\u65f6\u200b\u91cd\u8bd5\u200b\n    }\n    // \u200b\u8bb0\u5f55\u200b\u9519\u8bef\u200b\u65e5\u5fd7\u200b\u5e76\u200b\u62a5\u8b66\u200b\n}\n</code></pre>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_13","title":"\u516d\u200b\u3001\u200b\u8fdb\u9636\u200b\u4f18\u5316\u200b\u65b9\u6848","text":"<ul> <li>NUMA\u200b\u67b6\u6784\u200b\u4f18\u5316\u200b</li> </ul> <p>\u200b\u901a\u8fc7\u200bnumactl\u200b\u7ed1\u5b9a\u200b\u961f\u5217\u200b\u5185\u5b58\u200b\u533a\u57df\u200b\u5230\u200b\u7279\u5b9a\u200bCPU\u200b\u8282\u70b9\u200b</p> <pre><code>numactl --cpunodebind=1 --membind=1 ./producer\n</code></pre> <p>RDMA\u200b\u52a0\u901f\u200b\uff08\u200b\u9700\u200bInfiniBand\u200b\u652f\u6301\u200b\uff09</p> <ul> <li>\u200b\u4f7f\u7528\u200bibv_post_send\u200b\u5b9e\u73b0\u200b\u96f6\u200b\u62f7\u8d1d\u200b\u4f20\u8f93\u200b</li> </ul> <p>\u200b\u6027\u80fd\u200b\u5bf9\u6bd4\u200b\u53c2\u8003\u200b</p> \u200b\u4f18\u5316\u200b\u524d\u200b \u200b\u4f18\u5316\u200b\u540e\u200b \u200b\u63d0\u5347\u200b\u5e45\u5ea6\u200b \u200b\u5355\u7ebf\u7a0b\u200b 2k msg/s \u200b\u56db\u200b\u7ebf\u7a0b\u200b 15k msg/s 650% 100\u03bcs\u200b\u5ef6\u8fdf\u200b 38\u03bcs\u200b\u5ef6\u8fdf\u200b 62%\u200b\u964d\u4f4e\u200b 70% CPU\u200b\u5360\u7528\u200b 45% CPU\u200b\u5360\u7528\u200b \u200b\u8d44\u6e90\u200b\u6548\u7387\u200b\u63d0\u5347\u200b <p>\u200b\u5b9e\u9645\u200b\u6d4b\u8bd5\u200b\u663e\u793a\u200b\uff0c\u200b\u7efc\u5408\u200b\u8fd0\u7528\u200b\u4e0a\u8ff0\u200b\u6280\u5de7\u200b\u53ef\u200b\u4f7f\u200bBoost\u200b\u6d88\u606f\u200b\u961f\u5217\u200b\u8fbe\u5230\u200b 80%\u200b\u7684\u200b\u786c\u4ef6\u200b\u7406\u8bba\u200b\u6027\u80fd\u200b\u4e0a\u9650\u200b\u3002\u200b\u5efa\u8bae\u200b\u6839\u636e\u200b\u5177\u4f53\u200b\u4e1a\u52a1\u200b\u573a\u666f\u200b\u9009\u62e9\u200b3-5\u200b\u4e2a\u200b\u91cd\u70b9\u200b\u4f18\u5316\u200b\u65b9\u5411\u200b\u5b9e\u65bd\u200b\u3002</p>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_14","title":"\u5b8c\u6574\u200b\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/002-BoostSharedMemory/","title":"Boost\u200b\u5171\u4eab\u5185\u5b58","text":"<p>\u200b\u4ee5\u4e0b\u200b\u662f\u200bBoost\u200b\u5171\u4eab\u5185\u5b58\u200b\u7684\u200b\u8be6\u7ec6\u200b\u4f7f\u7528\u6307\u5357\u200b\uff0c\u200b\u5305\u542b\u200b\u5b8c\u6574\u200bC++\u200b\u4ee3\u7801\u200b\u548c\u200b\u5206\u6b65\u200b\u89e3\u6790\u200b\uff0c\u200b\u6db5\u76d6\u200b\u57fa\u7840\u200b\u64cd\u4f5c\u200b\u548c\u200b\u9ad8\u7ea7\u200b\u5e94\u7528\u200b\u573a\u666f\u200b\uff1a</p>"},{"location":"technology/Cpp/002-BoostSharedMemory/#boost_1","title":"\u4e00\u200b\u3001Boost\u200b\u5171\u4eab\u5185\u5b58\u200b\u6838\u5fc3\u200b\u7ec4\u4ef6","text":"<ul> <li>shared_memory_object \u200b\u7528\u4e8e\u200b\u521b\u5efa\u200b/\u200b\u6253\u5f00\u200b\u5171\u4eab\u5185\u5b58\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u9700\u200b\u6307\u5b9a\u200b\u540d\u79f0\u200b\u548c\u200b\u8bbf\u95ee\u200b\u6a21\u5f0f\u200b\u3002</li> </ul> <pre><code>#include &lt;boost/interprocess/shared_memory_object.hpp&gt; \nusing namespace boost::interprocess;\n\nshared_memory_object shm(\n    open_or_create,    // \u200b\u6a21\u5f0f\u200b\uff1a\u200b\u5b58\u5728\u200b\u5219\u200b\u6253\u5f00\u200b\uff0c\u200b\u5426\u5219\u200b\u521b\u5efa\u200b \n    \"MySharedMemory\",  // \u200b\u552f\u4e00\u200b\u6807\u8bc6\u200b\u540d\u79f0\u200b \n    read_write         // \u200b\u8bbf\u95ee\u200b\u6743\u9650\u200b\uff08read_only / read_write\uff09\n);\n</code></pre> <ul> <li>mapped_region \u200b\u5c06\u200b\u5171\u4eab\u5185\u5b58\u200b\u6620\u5c04\u200b\u5230\u200b\u8fdb\u7a0b\u200b\u5730\u5740\u200b\u7a7a\u95f4\u200b\uff0c\u200b\u652f\u6301\u200b\u8bfb\u5199\u64cd\u4f5c\u200b\u3002</li> </ul> <pre><code>#include &lt;boost/interprocess/mapped_region.hpp&gt; \nmapped_region region(\n    shm,               // \u200b\u5171\u4eab\u5185\u5b58\u200b\u5bf9\u8c61\u200b \n    read_write,        // \u200b\u6620\u5c04\u200b\u6743\u9650\u200b \n    0,                 // \u200b\u504f\u79fb\u91cf\u200b\uff08\u200b\u9ed8\u8ba4\u200b0\uff09\n    1024               // \u200b\u6620\u5c04\u200b\u5927\u5c0f\u200b\uff08\u200b\u9ed8\u8ba4\u200b\u5168\u90e8\u200b\uff09\n);\n</code></pre>"},{"location":"technology/Cpp/002-BoostSharedMemory/#_1","title":"\u4e8c\u200b\u3001\u200b\u57fa\u7840\u200b\u4f7f\u7528\u200b\u4ee3\u7801\u200b\u793a\u4f8b","text":"<ul> <li>\u200b\u5199\u5165\u200b\u8fdb\u7a0b\u200b</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;boost/interprocess/shared_memory_object.hpp&gt; \n#include &lt;boost/interprocess/mapped_region.hpp&gt; \n\nint main() {\n    // 1. \u200b\u521b\u5efa\u200b\u6216\u200b\u6253\u5f00\u200b\u5171\u4eab\u5185\u5b58\u200b \n    shared_memory_object shm(\n        open_or_create, \n        \"MySharedMemory\", \n        read_write \n    );\n\n    // 2. \u200b\u8bbe\u7f6e\u200b\u5185\u5b58\u5927\u5c0f\u200b\uff08\u200b\u5fc5\u987b\u200b\u62e5\u6709\u200b\u5199\u200b\u6743\u9650\u200b\uff09\n    shm.truncate(1024);   // \u200b\u5206\u914d\u200b1024\u200b\u5b57\u8282\u200b \n\n    // 3. \u200b\u6620\u5c04\u200b\u5230\u200b\u5f53\u524d\u200b\u8fdb\u7a0b\u200b \n    mapped_region region(shm, read_write);\n\n    // 4. \u200b\u5199\u5165\u200b\u6570\u636e\u200b \n    char* data = static_cast&lt;char*&gt;(region.get_address()); \n    std::strcpy(data, \"Hello from Process A!\");\n\n    std::cout &lt;&lt; \"Data written to shared memory.\" &lt;&lt; std::endl;\n    // \u200b\u6ce8\u610f\u200b\uff1a\u200b\u5b9e\u9645\u200b\u5e94\u7528\u200b\u4e2d\u9700\u200b\u540c\u6b65\u200b\u673a\u5236\u200b\uff08\u200b\u5982\u200b\u4e92\u65a5\u200b\u9501\u200b\uff09\n    return 0;\n}\n</code></pre> <ul> <li>\u200b\u8bfb\u53d6\u200b\u8fdb\u7a0b\u200b</li> </ul> <pre><code>int main() {\n    // 1. \u200b\u6253\u5f00\u200b\u5df2\u6709\u200b\u5171\u4eab\u5185\u5b58\u200b \n    shared_memory_object shm(open_only, \"MySharedMemory\", read_only);\n\n    // 2. \u200b\u6620\u5c04\u200b\u5185\u5b58\u200b \n    mapped_region region(shm, read_only);\n\n    // 3. \u200b\u8bfb\u53d6\u6570\u636e\u200b \n    char* data = static_cast&lt;char*&gt;(region.get_address()); \n    std::cout &lt;&lt; \"Received: \" &lt;&lt; data &lt;&lt; std::endl;\n\n    // 4. \u200b\u6e05\u7406\u200b\uff08\u200b\u901a\u5e38\u200b\u7531\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u8fdb\u7a0b\u200b\u6267\u884c\u200b\uff09\n    shared_memory_object::remove(\"MySharedMemory\");\n    return 0;\n}\n</code></pre>"},{"location":"technology/Cpp/002-BoostSharedMemory/#stl","title":"\u4e09\u200b\u3001\u200b\u9ad8\u7ea7\u200b\u5e94\u7528\u200b\uff1a\u200b\u5171\u4eab\u5185\u5b58\u200b\u4e2d\u200b\u4f7f\u7528\u200bSTL\u200b\u5bb9\u5668","text":"<ul> <li>\u200b\u4f7f\u7528\u200b\u6258\u7ba1\u200b\u5185\u5b58\u200b\u548c\u200b\u81ea\u5b9a\u4e49\u200b\u5206\u914d\u5668\u200b</li> </ul> <pre><code>#include &lt;boost/interprocess/managed_shared_memory.hpp&gt; \n#include &lt;boost/interprocess/containers/vector.hpp&gt; \n#include &lt;boost/interprocess/allocators/allocator.hpp&gt; \n\ntypedef int ValueType;\ntypedef allocator&lt;ValueType, managed_shared_memory::segment_manager&gt; ShmemAllocator;\ntypedef vector&lt;ValueType, ShmemAllocator&gt; SharedVector;\n\nint main() {\n    // \u200b\u521b\u5efa\u200b\u6258\u7ba1\u200b\u5171\u4eab\u5185\u5b58\u200b\uff08\u200b\u81ea\u52a8\u200b\u7ba1\u7406\u200b\u751f\u547d\u5468\u671f\u200b\uff09\n    managed_shared_memory segment(open_or_create, \"ManagedSHM\", 65536);\n\n    // \u200b\u6784\u9020\u200b\u5171\u4eab\u200bvector \n    SharedVector* vec = segment.find_or_construct&lt;SharedVector&gt;(\"MyVector\") \n        (segment.get_allocator&lt;ValueType&gt;()); \n\n    // \u200b\u6dfb\u52a0\u200b\u6570\u636e\u200b \n    vec-&gt;push_back(42);\n    vec-&gt;push_back(88);\n\n    // \u200b\u5176\u4ed6\u200b\u8fdb\u7a0b\u200b\u53ef\u200b\u901a\u8fc7\u200b\u76f8\u540c\u200b\u540d\u79f0\u200b\u8bbf\u95ee\u200b\u8be5\u200bvector \n    return 0;\n}\n</code></pre>"},{"location":"technology/Cpp/002-BoostSharedMemory/#_2","title":"\u56db\u200b\u3001\u200b\u540c\u6b65\u200b\u673a\u5236\u200b\uff08\u200b\u4e92\u65a5\u200b\u9501\u200b\u793a\u4f8b\u200b\uff09","text":"<pre><code>#include &lt;boost/interprocess/sync/interprocess_mutex.hpp&gt; \n\nstruct SharedData {\n    interprocess_mutex mutex;\n    int counter = 0;\n};\n\n// \u200b\u5199\u5165\u200b\u8fdb\u7a0b\u200b \nmanaged_shared_memory segment(open_or_create, \"SyncSHM\", 4096);\nSharedData* data = segment.find_or_construct&lt;SharedData&gt;(\"Data\")(); \n\n{\n    scoped_lock&lt;interprocess_mutex&gt; lock(data-&gt;mutex); // \u200b\u81ea\u52a8\u200b\u52a0\u9501\u200b \n    data-&gt;counter++;\n}\n\n// \u200b\u8bfb\u53d6\u200b\u8fdb\u7a0b\u200b\u540c\u7406\u200b\uff0c\u200b\u901a\u8fc7\u200b\u4e92\u65a5\u200b\u9501\u200b\u4fdd\u8bc1\u200b\u539f\u5b50\u200b\u64cd\u4f5c\u200b \n</code></pre>"},{"location":"technology/Cpp/002-BoostSharedMemory/#_3","title":"\u4e94\u200b\u3001\u200b\u5173\u952e\u200b\u6ce8\u610f\u4e8b\u9879","text":"<ul> <li>\u200b\u751f\u547d\u5468\u671f\u200b\u7ba1\u7406\u200b</li> <li>\u200b\u4f7f\u7528\u200bshared_memory_object::remove()\u200b\u663e\u5f0f\u200b\u5220\u9664\u200b\u5171\u4eab\u5185\u5b58\u200b\u3002</li> <li>\u200b\u6258\u7ba1\u200b\u5185\u5b58\u200b\uff08managed_shared_memory\uff09\u200b\u81ea\u52a8\u200b\u7ba1\u7406\u200b\u5bf9\u8c61\u200b\u6784\u9020\u200b/\u200b\u6790\u6784\u200b\u3002</li> <li>\u200b\u907f\u514d\u200b\u76f4\u63a5\u200b\u5b58\u50a8\u200b\u6307\u9488\u200b\uff0c\u200b\u4f7f\u7528\u200boffset_ptr\u200b\u5904\u7406\u200b\u5730\u5740\u200b\u504f\u79fb\u200b\u3002</li> <li>\u200b\u9884\u200b\u5206\u914d\u200b\u8db3\u591f\u200b\u5185\u5b58\u200b\u907f\u514d\u200b\u9891\u7e41\u200b\u8c03\u6574\u200b\u3002</li> <li>\u200b\u51cf\u5c11\u200b\u9501\u200b\u7c92\u5ea6\u200b\u63d0\u5347\u200b\u5e76\u53d1\u200b\u6027\u80fd\u200b\u3002</li> </ul> <p>\u200b\u901a\u8fc7\u200b\u4e0a\u8ff0\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u53ef\u200b\u5b9e\u73b0\u200b\u8de8\u200b\u8fdb\u7a0b\u200b\u9ad8\u6548\u200b\u6570\u636e\u4ea4\u6362\u200b\uff0c\u200b\u9002\u7528\u200b\u4e8e\u200b\u9ad8\u9891\u200b\u901a\u4fe1\u200b\u573a\u666f\u200b\u5982\u5b9e\u200b\u65f6\u200b\u6570\u636e\u5904\u7406\u200b\u3002</p>"},{"location":"technology/Cpp/002-BoostSharedMemory/#_4","title":"\u5b8c\u6574\u200b\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/Building/","title":"\u6784\u5efa","text":""},{"location":"technology/Cpp/CodeSmell/","title":"\u5473\u9053","text":""},{"location":"technology/Cpp/Debugging/","title":"\u8c03\u8bd5","text":""},{"location":"technology/Cpp/DynamicAnalysis/","title":"\u52a8\u6001\u5206\u6790","text":""},{"location":"technology/Cpp/Performance/","title":"\u6027\u80fd","text":""},{"location":"technology/Cpp/QtQuick/","title":"QtQuick","text":""},{"location":"technology/Cpp/QtWidgets/","title":"QtWidgets","text":""},{"location":"technology/Cpp/StaticAnalysis/","title":"\u9759\u6001\u200b\u5206\u6790","text":""},{"location":"technology/Cpp/wxWidgets/","title":"wxWidgets","text":""},{"location":"en/","title":"Home","text":"I am zhengtianzuo, currently focusing on remote desktop development, primarily using C++. I enjoy researching high performance and code architecture. Vision: Technology Sharing, Creating Brilliance Together Mission: Creating Value, Empowering Clients, Serving the Industry Values: Exploring Functionality, Integrating Excellence, Delivering Precision Personal Projects: Logo Project Github Gitee Description Technologies tianzuo.Pangu Instant Messaging Platform tianzuo.Kunlun Local Build Tool tianzuo.Fuxi In development Personal Modules: Logo Module Github Gitee Description Technologies tianzuo.Kongtong Crash Detection &amp; Analysis tianzuo.Qiankun NoSQL Database tianzuo.Zhuiri Reliable UDP Data Transfer tianzuo.Hundun Software Licensing tianzuo.LianYao Memory Pool tianzuo.Shennong In development tianzuo.Linglong In development tianzuo.Fengtian In development          Add QQ Friend                 Add WeChat Friend                 AliPay sponsor                 WeChat sponsor        Author zhengtianzuo QQ 278969898 Email zhengtianzuo06@163.com Homepage http://www.zhengtianzuo.com Blog http://blog.csdn.net/zhengtianzuo06 github https://github.com/zhengtianzuo gitee https://gitee.com/zhengtianzuo QQ Group 199672080"},{"location":"en/component/tianzuo.Hundun/","title":"tianzuo.Hundun","text":""},{"location":"en/component/tianzuo.Hundun/#tianzuohundun_1","title":"tianzuo.Hundun","text":"operating system compiler programming language"},{"location":"en/component/tianzuo.Hundun/#introduction","title":"introduction","text":"<p>tianzuo.Hundun Protect the software you develop from unauthorized copies, limit the usage in time, to a specific machines.</p> <p>legend: is the first of the ten ancient artifacts, known as the most powerful artifact. East Emperor bell is called East Emperor bell, its owner is East Emperor Taiyi, East Emperor Taiyi is ancient mythology, ranked among the top five god, as its magic weapon East Emperor bell, strength is not bad. According to legend, East Emperor Bell is the gate of heaven, controllable sun and moon, can change Yin and Yang, East Emperor Bell is a kind of strong defense, weak attack, but amazing explosive power, once the outbreak of real strength, basically can destroy heaven and earth, devour the heavens.</p>"},{"location":"en/component/tianzuo.Hundun/#motivation","title":"motivation","text":"<p>Protect the software you develop from unauthorized copies, limit the usage in time, to a specific machines.</p> <p></p>"},{"location":"en/component/tianzuo.Hundun/#features","title":"features","text":"<ul> <li>\ud83e\udde9 simple integration</li> <li>\ud83e\udea2 data is encrypted algorithmically</li> <li>\ud83d\udd12 it can be limited by time, by device ID, or both</li> </ul>"},{"location":"en/component/tianzuo.Hundun/#workflow","title":"workflow","text":"<p>In the client software, the get_machineid interface can be called to obtain the machine code (registration code), and then enter the registration code/cut-off time through the maker program to create the license file. The maker needs to read the private key file when generating the license file, and the corresponding public key information is input in the client software. After the license is issued to the client locally, the client invokes the check interface for verification.</p> <ol> <li>Generate a public and private key pairing information file.</li> </ol> <pre><code>// Create a private key file\n(1) openssl genrsa -out privatekey.pem 2048\n\n// Create a public key file based on the private key file\n(2) openssl rsa -in privatekey.pem -pubout -out publickey.pem\n</code></pre> <ol> <li>Create a license file from the maker command line:</li> </ol> <pre><code>// Generate only time-limited license files\nmaker.exe --type=1 --date=\"2024-04-30\" --keyfile=\"privatekey.pem\"\n\n// Only license files with machine code restrictions are generated\nmaker.exe --type=2 --id=\"9ea03801651cd3d93add9d42a07d3c4b\" --keyfile=\"privatekey.pem\"\n\n// Generate license files that have both time and machine code limits\nmaker.exe --type=3 --date=\"2024-04-30\" --id=\"9ea03801651cd3d93add9d42a07d3c4b\" --keyfile=\"privatekey.pem\"\n</code></pre>"},{"location":"en/component/tianzuo.Hundun/#example","title":"example","text":"cpp <pre><code>#include &lt;iostream&gt;\n#include \"../../include/tianzuo.HundunInterface.h\" // \u200b\u63a5\u53e3\u200b\u5934\u6587\u4ef6\u200b interface heaher file\n\n#define Get_Machineid 0\n\nint main() {\n    std::string public_key = \"-----BEGIN PUBLIC KEY-----\\n\"\n        \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\"\n        \"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\"\n        \"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\"\n        \"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\"\n        \"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\"\n        \"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\"\n        \"lQIDAQAB\\n\"\n        \"-----END PUBLIC KEY-----\\n\";\n\n    tianzuo_HundunInt hundun;\n#if Get_Machineid\n    const char* id = hundun.get_machineid();\n    if (id == nullptr) {\n        std::cerr &lt;&lt; \"hundun.get_machineid error\" &lt;&lt; std::endl;\n        return -1;\n    }\n    std::cout &lt;&lt; \"id: \" &lt;&lt; id &lt;&lt; std::endl;\n#else\n    int days = 0;\n    int error_code = tianzuo_Hundun_check(public_key.c_str(), \"license.dat\", &amp;days);\n    if (error_code != Hundun_error_code_success) {\n        std::cout &lt;&lt; \"hundun.check error_code: \" &lt;&lt; error_code &lt;&lt; \" error_string: \" &lt;&lt; Hundun_error_code_strings[error_code] &lt;&lt; std::endl;\n        return -1;\n    }\n    std::cout &lt;&lt; \"hundun.check days: \" &lt;&lt; days &lt;&lt; std::endl;\n#endif\n    return 0;\n}\n\n</code></pre> python <pre><code>from ctypes import *\nfrom enum import Enum\nimport ctypes\n\n\ntianzuo_HundunLib = cdll.LoadLibrary('./tianzuo.Hundun.dll')\n\n\nclass Hundun_error_code(Enum):\n    Hundun_error_code_success       = 0 # \u200b\u6210\u529f\u200b\n    Hundun_error_code_parameter     = 1 # \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\n    Hundun_error_code_parse         = 2 # \u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\n    Hundun_error_code_licensefile   = 3 # \u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\n    Hundun_error_code_outofdate     = 4 # \u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\n    Hundun_error_code_unmatched     = 5 # \u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\n\n\ndef tianzuo_Hundun_check(public_key_string, license_file, days):\n    tianzuo_HundunLib.tianzuo_Hundun_check.argtypes = [c_char_p, c_char_p, ctypes.POINTER(ctypes.c_int)]\n    return tianzuo_HundunLib.tianzuo_Hundun_check(public_key_string, license_file, days)\n\n\ndef main():\n    public_key = (b\"-----BEGIN PUBLIC KEY-----\\n\"\n                  b\"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\"\n                  b\"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\"\n                  b\"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\"\n                  b\"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\"\n                  b\"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\"\n                  b\"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\"\n                  b\"lQIDAQAB\\n\"\n                  b\"-----END PUBLIC KEY-----\\n\")\n\n    Hundun_error_code_strings_cn = (\n        \"\u200b\u6210\u529f\u200b\",\n        \"\u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\",\n        \"\u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\")\n\n    Hundun_error_code_strings = (\n        \"success\",\n        \"parameter error\",\n        \"parse error\",\n        \"license filename error\",\n        \"out of date\",\n        \"machine id unmatched\")\n\n    days = ctypes.c_int()\n    license_file = b\"license.dat\"\n    error_code = tianzuo_Hundun_check(public_key, license_file, days)\n    if error_code != Hundun_error_code.Hundun_error_code_success.value:\n        print(\"hundun.check error_code: {} error_string: {}\".format(error_code, Hundun_error_code_strings[error_code]))\n        return\n\n    int_days = days.value\n    print(\"hundun.check days: {}\".format(int_days))\n\n\nif __name__ == '__main__':\n    main()\n\n</code></pre> java <pre><code>package cn.camelsoft;\n\nimport com.sun.jna.Library;\nimport com.sun.jna.Native;\n\nenum Hundun_error_code {\n    Hundun_error_code_success       (0),            ///&lt;  \u200b\u6210\u529f\u200b\n    Hundun_error_code_parameter     (1),            ///&lt;  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\n    Hundun_error_code_parse         (2),            ///&lt;  \u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\n    Hundun_error_code_licensefile   (3),            ///&lt;  \u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\n    Hundun_error_code_outofdate     (4),            ///&lt;  \u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\n    Hundun_error_code_unmatched     (5);            ///&lt;  \u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\n\n    private int value;\n\n    Hundun_error_code(int value) {\n        this.value = value;\n    }\n\n    public int getValue() {\n        return value;\n    }\n}\n\npublic class Main {\n    public interface tianzuo_HundunLib extends Library {\n        tianzuo_HundunLib instance = (tianzuo_HundunLib) Native.load(\"./tianzuo.Hundun.dll\", tianzuo_HundunLib.class);\n        int tianzuo_Hundun_check(String public_key_string, String license_file, int[] days);\n    }\n\n    public static void main(String[] args) {\n        System.setProperty(\"jna.encoding\",\"UTF-8\");\n\n        String public_key = \"-----BEGIN PUBLIC KEY-----\\n\" +\n        \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\" +\n        \"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\" +\n        \"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\" +\n        \"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\" +\n        \"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\" +\n        \"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\" +\n        \"lQIDAQAB\\n\" +\n        \"-----END PUBLIC KEY-----\\n\";\n\n        String[] Hundun_error_code_strings_cn = {\"\u200b\u6210\u529f\u200b\",\n                \"\u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\",\n                \"\u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\",\n                \"\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\",\n                \"\u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\",\n                \"\u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\"};\n\n        String[] Hundun_error_code_strings = {\n                \"success\",\n                \"parameter error\",\n                \"parse error\",\n                \"license filename error\",\n                \"out of date\",\n                \"machine id unmatched\"\n        };\n\n        int[] days = {0};\n        int error_code = tianzuo_HundunLib.instance.tianzuo_Hundun_check(public_key, \"license.dat\", days);\n        if (error_code != Hundun_error_code.Hundun_error_code_success.getValue()) {\n            System.out.printf(\"hundun.check error_code: %d error_string: %s\\n\", error_code, Hundun_error_code_strings[error_code]);\n            return;\n        }\n        System.out.printf(\"hundun.check days: : %d\\n\", days[0]);\n    }\n}\n\n</code></pre> csharp <pre><code>\n\nusing System.Runtime.InteropServices;\n\nclass Program {\n    [DllImport(\"tianzuo.Hundun.dll\")]\n    public static extern int tianzuo_Hundun_check(string public_key_string, string license_file, ref int days);\n\n    public enum Hundun_error_code\n    {\n        Hundun_error_code_success,                ///&lt;  \u200b\u6210\u529f\u200b\n        Hundun_error_code_parameter,              ///&lt;  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\n        Hundun_error_code_parse,                  ///&lt;  \u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\n        Hundun_error_code_licensefile,            ///&lt;  \u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\n        Hundun_error_code_outofdate,              ///&lt;  \u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\n        Hundun_error_code_unmatched               ///&lt;  \u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\n    }\n\n    public string[] Hundun_error_code_strings_cn = {\n        \"\u200b\u6210\u529f\u200b\",\n        \"\u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\",\n        \"\u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\"\n    };\n\n    public string[] Hundun_error_code_strings = {\n        \"success\",\n        \"parameter error\",\n        \"parse error\",\n        \"license filename error\",\n        \"out of date\",\n        \"machine id unmatched\"\n    };\n\n    static void Main(string[] args) {\n        string public_key = \"-----BEGIN PUBLIC KEY-----\\n\" +\n            \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\" +\n            \"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\" +\n            \"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\" +\n            \"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\" +\n            \"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\" +\n            \"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\" +\n            \"lQIDAQAB\\n\" +\n            \"-----END PUBLIC KEY-----\\n\";\n\n        int days = 0;\n        int error_code = tianzuo_Hundun_check(public_key, \"license.dat\", ref days);\n        if (error_code != (int)Hundun_error_code.Hundun_error_code_success)\n        {\n            Program myProgram = new Program();\n            Console.WriteLine(\"hundun.check error_code: \" + error_code + \" error_string: \" + myProgram.Hundun_error_code_strings[error_code]);\n            return;\n        }\n        Console.WriteLine(\"hundun.check days: \" + days);\n\n    }\n\n}\n</code></pre> javascript <pre><code>\nHundun_error_code_success     = 0 //  \u200b\u6210\u529f\u200b\nHundun_error_code_parameter   = 1 //  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\nHundun_error_code_parse       = 2 //  \u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\nHundun_error_code_licensefile = 3 //  \u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\nHundun_error_code_outofdate   = 4 //  \u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\nHundun_error_code_unmatched   = 5 //  \u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\n\nlet ffi = require('ffi-napi')\nconst ref = require('ref-napi');\n\nlet tianzuo_HundunLib = ffi.Library(\"tianzuo.Hundun.dll\", {\n    'tianzuo_Hundun_check':['int',['string','string','pointer']],\n})\n\nlet public_key = \"-----BEGIN PUBLIC KEY-----\\n\" +\n\"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\" +\n\"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\" +\n\"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\" +\n\"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\" +\n\"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\" +\n\"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\" +\n\"lQIDAQAB\\n\" +\n\"-----END PUBLIC KEY-----\\n\";\n\nconst Hundun_error_code_strings_cn = [\n    \"\u200b\u6210\u529f\u200b\",\n    \"\u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\",\n    \"\u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\",\n    \"\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\",\n    \"\u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\",\n    \"\u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\"];\n\nconst Hundun_error_code_strings = [\n    \"success\",\n    \"parameter error\",\n    \"parse error\",\n    \"license filename error\",\n    \"out of date\",\n    \"machine id unmatched\"];\n\ndays = Buffer.alloc(1 * ref.sizeof.int);\nlet error_code = tianzuo_HundunLib.tianzuo_Hundun_check(public_key, \"license.dat\", days);\nif (error_code !== Hundun_error_code_success) {\n    console.log(\"hundun.check error_code: %d error_string: %s\\n\", error_code, Hundun_error_code_strings[error_code]);\n    return -1;\n}\ndays_data = ref.get(days, 0, ref.types.int);\nconsole.log(\"hundun.check days: %d\\n\", days_data);\n\n</code></pre> php <pre><code>&lt;?php\n\n// \u200b\u68c0\u67e5\u200b\u662f\u5426\u200b\u52a0\u8f7d\u200b\u4e86\u200b FFI \u200b\u6269\u5c55\u200b\nif (extension_loaded('ffi')) {\n    echo(\"\u200b\u5df2\u200b\u542f\u7528\u200b FFI \u200b\u6269\u5c55\u200b\\n\");\n} else {\n    die(\"\u200b\u672a\u200b\u542f\u52a8\u200b FFI \u200b\u6269\u5c55\u200b\\n\");\n}\n\nenum Hundun_error_code\n{\n    const Hundun_error_code_success = 0;        //  \u200b\u6210\u529f\u200b\n    const Hundun_error_code_parameter = 1;      //  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\n    const Hundun_error_code_parse = 2;          //  \u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\n    const Hundun_error_code_licensefile = 3;    //  \u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\n    const Hundun_error_code_outofdate = 4;      //  \u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\n    const Hundun_error_code_unmatched = 5;      //  \u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\n}\n\n$ffi = FFI::cdef(\"\n    int tianzuo_Hundun_check(const char* public_key_string, const char* license_file, int* days);\n\", \"tianzuo.Hundun.dll\");\n\n$public_key = \"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\np1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\nLrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\nENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\nz1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\nouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\nlQIDAQAB\n-----END PUBLIC KEY-----\\n\";\n\ndefine('Hundun_error_code_strings_cn', [\n    \"\u200b\u6210\u529f\u200b\",\n    \"\u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\",\n    \"\u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\",\n    \"\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\",\n    \"\u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\",\n    \"\u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\"]);\n\ndefine('Hundun_error_code_strings', [\n    \"success\",\n    \"parameter error\",\n    \"parse error\",\n    \"license filename error\",\n    \"out of date\",\n    \"machine id unmatched\"\n]);\n\n$days = FFI::new(\"int\");\n$error_code = $ffi-&gt;tianzuo_Hundun_check($public_key, \"license.dat\", FFI::addr($days));\nif ($error_code != Hundun_error_code::Hundun_error_code_success) {\n    echo \"hundun.check error_code: \" . $error_code . \" error_string: \" . Hundun_error_code_strings[$error_code] . \"\\n\";\n    return;\n}\necho \"hundun.check days: \" . $days-&gt;cdata . \"\\n\";\n\n?&gt;\n</code></pre> vb <pre><code>\nImports System.Runtime.InteropServices\n\nEnum Hundun_error_code\n    Hundun_error_code_success = 0 '  \u200b\u6210\u529f\u200b\n    Hundun_error_code_parameter = 1 '  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\n    Hundun_error_code_parse = 2 '  \u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\n    Hundun_error_code_licensefile = 3 '  \u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\n    Hundun_error_code_outofdate = 4 '  \u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\n    Hundun_error_code_unmatched = 5 '  \u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\nEnd Enum\n\nModule Program\n    &lt;DllImport(\"tianzuo.Hundun.dll\")&gt;\n    Public Function tianzuo_Hundun_check(public_key_string As String, license_file As String, ByRef days As Integer) As Integer\n    End Function\n\n    ReadOnly Hundun_error_code_strings_cn() As String = {\n        \"\u200b\u6210\u529f\u200b\",\n        \"\u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\",\n        \"\u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\"}\n\n    ReadOnly Hundun_error_code_strings() As String = {\n        \"success\",\n        \"parameter error\",\n        \"parse error\",\n        \"license filename error\",\n        \"out of date\",\n        \"machine id unmatched\"}\n\n    Sub Main(args As String())\n        Dim public_key As String = \"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\np1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\nLrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\nENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\nz1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\nouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\nlQIDAQAB\n-----END PUBLIC KEY-----\"\n\n        Dim license_file As String = \"license.dat\"\n        Dim days As Integer = 0\n        Dim error_code As Integer = tianzuo_Hundun_check(public_key, license_file, days)\n        If (error_code &lt;&gt; Hundun_error_code.Hundun_error_code_success) Then\n            Console.WriteLine(\"hundun.check error_code: \" + error_code.ToString + \" error_string: \" + Hundun_error_code_strings(error_code))\n            Return\n        End If\n\n        Console.WriteLine(\"hundun.check days:\" + days.ToString)\n    End Sub\nEnd Module\n\n</code></pre> go <pre><code>package main\n\n/*\n#include \"tianzuo.HundunInterface.h\"\n*/\nimport \"C\"\nimport (\n    \"fmt\"\n    \"syscall\"\n    \"unsafe\"\n)\n\nconst (\n    Hundun_error_code_success     = 0 //  \u200b\u6210\u529f\u200b\n    Hundun_error_code_parameter   = 1 //  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\n    Hundun_error_code_parse       = 2 //  \u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\n    Hundun_error_code_licensefile = 3 //  \u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\n    Hundun_error_code_outofdate   = 4 //  \u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\n    Hundun_error_code_unmatched   = 5 //  \u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\n)\n\nfunc main() {\n    const public_key string = \"-----BEGIN PUBLIC KEY-----\\n\" +\n        \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\" +\n        \"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\" +\n        \"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\" +\n        \"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\" +\n        \"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\" +\n        \"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\" +\n        \"lQIDAQAB\\n\" +\n        \"-----END PUBLIC KEY-----\\n\"\n\n    Hundun_error_code_strings_cn := [6]string{\n        \"\u200b\u6210\u529f\u200b\",\n        \"\u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\",\n        \"\u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\",\n        \"\u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\"}\n\n    //Hundun_error_code_strings := [6]string{\n    //  \"success\",\n    //  \"parameter error\",\n    //  \"parse error\",\n    //  \"license filename error\",\n    //  \"out of date\",\n    //  \"machine id unmatched\"}\n\n    dll := syscall.MustLoadDLL(\"tianzuo.Hundun.dll\")\n    tianzuo_Hundun_check := dll.MustFindProc(\"tianzuo_Hundun_check\")\n    days := C.int(0)\n    pub_key := C.CString(public_key)\n    license_file := C.CString(\"license.dat\")\n    error_code, _, _ := tianzuo_Hundun_check.Call(uintptr(unsafe.Pointer(pub_key)), uintptr(unsafe.Pointer(license_file)), uintptr(unsafe.Pointer(&amp;days)))\n    if error_code != Hundun_error_code_success {\n        fmt.Println(\"hundun.check error_code: \", error_code, \" error_string: \", Hundun_error_code_strings[error_code])\n        return\n    }\n    fmt.Println(\"hundun.check days: \", days)\n}\n\n</code></pre> rust <pre><code>\nuse std::os::raw::c_char;\nuse std::ffi::{c_int};\nuse std::ffi::CString;\n\n#[link(name = \"tianzuo.Hundun\")]\nextern {\n    fn tianzuo_Hundun_check(public_key_string: *const c_char, license_file: *const c_char, days: *const c_int) -&gt; c_int;\n}\n\nconst Hundun_error_code_strings_cn: [&amp;str; 6] = [\n    \"\u200b\u6210\u529f\u200b\",\n    \"\u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\",\n    \"\u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\",\n    \"\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\",\n    \"\u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\",\n    \"\u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\"];\n\nconst Hundun_error_code_strings: [&amp;str; 6] = [\n    \"success\",\n    \"parameter error\",\n    \"parse error\",\n    \"license filename error\",\n    \"out of date\",\n    \"machine id unmatched\"];\n\nfn main() {\n    unsafe {\n        let public_key = CString::new(String::from(\"-----BEGIN PUBLIC KEY-----\\n\\\n        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\\\n        p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\\\n        LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\\\n        ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\\\n        z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\\\n        ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\\\n        lQIDAQAB\\n\\\n        -----END PUBLIC KEY-----\\n\")).expect(\"Failed to create CString\");\n\n\n\n        let license_file = CString::new(String::from(\"license.dat\")).expect(\"Failed to create CString\");\n        let mut days: c_int = 0;\n        let error_code = tianzuo_Hundun_check(public_key.as_ptr(), license_file.as_ptr(), &amp;mut days);\n        if 0 != error_code {\n            let errorc: usize =  error_code as usize;\n            println!(\"hundun.check error_code: {:?} error_string: {:?}\", error_code, Hundun_error_code_strings[errorc]);\n        }\n\n        println!(\"hundun.check days: {:?}\", days);\n    }\n}\n\n</code></pre> ruby <pre><code>require 'fiddle'\n\nlib = Fiddle::dlopen('C:/Users/zhengtianzuo/RubymineProjects/tianzuo.HundunTest/tianzuo.Hundun.dll')\ntianzuo_Hundun_check = Fiddle::Function.new(lib['tianzuo_Hundun_check'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\n\npublic_key = \"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\np1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\nLrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\nENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\nz1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\nouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\nlQIDAQAB\n-----END PUBLIC KEY-----\"\n\nHundun_error_code_strings_cn = [\n  \"\u200b\u6210\u529f\u200b\",\n  \"\u200b\u53c2\u6570\u200b\u9519\u8bef\u200b\",\n  \"\u200b\u89e3\u6790\u200b\u9519\u8bef\u200b\",\n  \"\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u6216\u200b\u8def\u5f84\u200b\u9519\u8bef\u200b\",\n  \"\u200b\u65e5\u671f\u200b\u5df2\u8fc7\u200b\",\n  \"\u200b\u673a\u5668\u7801\u200b\u4e0d\u200b\u5339\u914d\u200b\"]\n\nHundun_error_code_strings = [\n  \"success\",\n  \"parameter error\",\n  \"parse error\",\n  \"license filename error\",\n  \"out of date\",\n  \"machine id unmatched\"]\n\nlicense_file = \"license.dat\"\ndays = Fiddle::Pointer.malloc(Fiddle::SIZEOF_INT)\nerror_code = tianzuo_Hundun_check.call(public_key, license_file, days)\nif error_code != 0\n  print(\"hundun.check error_code: \", error_code, \" error_string:\", Hundun_error_code_strings[error_code] ,\" \\n\")\n  return\nend\n\nint_days = days[0, Fiddle::SIZEOF_INT].unpack('I')[0]\nprint(\"hundun.check days: \", int_days, \"\\n\")\n\n</code></pre>"},{"location":"en/component/tianzuo.Hundun/#download","title":"download","text":""},{"location":"en/component/tianzuo.Kongtong/","title":"tianzuo.Kongtong","text":""},{"location":"en/component/tianzuo.Kongtong/#tianzuokongtong_1","title":"tianzuo.Kongtong","text":"operating system compiler programming language"},{"location":"en/component/tianzuo.Kongtong/#introduction","title":"introduction","text":"<p>tianzuo.Kongtong When an application crashes on a Windows platform, a crash dump file is generated to analyze the lines of the crashed code and generate information about the system environment.</p> <p>legend: The protective artifact of the undead dragon clan in Kongtong Sea is carved with the shape of the five heavenly emperors and surrounded by a jade dragon. According to ancient legend, those who get it can own the world, and some people say that it can make people not old and immortal.</p>"},{"location":"en/component/tianzuo.Kongtong/#motivation","title":"motivation","text":"<p>In the process of development, occasionally encounter the situation of program crash, need to analyze the cause of crash and locate the code line, and need to analyze environmental factors.</p> <p></p>"},{"location":"en/component/tianzuo.Kongtong/#features","title":"features","text":"<ul> <li>\ud83e\udde9 simple integration</li> <li>\ud83d\udcdd optionally generate dmp and logs</li> <li>\ud83e\ude90 log in multiple languages (simplified chinese / english)</li> <li>\u26d3  support for in-thread detection</li> </ul>"},{"location":"en/component/tianzuo.Kongtong/#screenshot","title":"screenshot","text":"<p>locate crashed lines of code through dmp file analysis:</p> <p>Visual Studio analyze the dmp file</p> <p></p> <p>WinDbg analyze the dmp file</p> <p></p> <p>environment log:</p> <p></p>"},{"location":"en/component/tianzuo.Kongtong/#install","title":"install","text":"<p>enable exception detection in project</p>"},{"location":"en/component/tianzuo.Kongtong/#visual-studio","title":"Visual Studio","text":"<p>enable c++ exception detection in Visual Studio</p> <p></p> <p>enable generation pdb files in Visual Studio</p>"},{"location":"en/component/tianzuo.Kongtong/#qt-creator","title":"Qt Creator","text":"<p>enable generation pdb files in Qt Creator</p> <pre><code>CONFIG += force_debug_info\nCONFIG += senarate_debug_info\n</code></pre>"},{"location":"en/component/tianzuo.Kongtong/#example","title":"example","text":"<pre><code>#include \"tianzuo.KongtongTest.h\"\n#include \"../../include/tianzuo.Kongtong.h\"\n#include &lt;Windows.h&gt;\n\nvoid init(int argc, char* argv[]) {\n    tianzuo_KongtongTest test;\n    test.doSomething();\n}\n\nint main(int argc, char* argv[]) {\n    HINSTANCE hKongtong = LoadLibrary(L\"tianzuo.Kongtong.dll\");\n    if (!hKongtong) {\n        init(argc, argv);\n        return(0);\n    }\n\n    tianzuo_Kongtong_get_exception getException = (tianzuo_Kongtong_get_exception)GetProcAddress(hKongtong, \"Kongtong_get_exception\");\n    if (!getException) return -1;\n    __try {\n        init(argc, argv);\n    }\n    __except (getException(GetExceptionInformation(), Kongtong_create_normal, 0)) {\n    }\n\n    if (hKongtong != nullptr) {\n        getException = nullptr;\n        FreeLibrary(hKongtong);\n        hKongtong = nullptr;\n    }\n    return(0);\n}\n</code></pre>"},{"location":"en/component/tianzuo.Kongtong/#download","title":"download","text":""},{"location":"en/component/tianzuo.LianYao/","title":"tianzuo.LianYao","text":""},{"location":"en/component/tianzuo.LianYao/#tianzuolianyao_1","title":"tianzuo.LianYao","text":"operating system compiler programming language"},{"location":"en/component/tianzuo.LianYao/#introduction","title":"introduction","text":"<p>tianzuo.LianYao A simple memory pool that initializes some memory for recycling, dynamically expands when insufficient, and has memory leak detection function.</p> <p>legend: It represents fusion and evolution. The demon pot can contain all things, and refine the demon beasts and spirit beasts into the vitality of the pot. This power symbolizes integration and evolution, and implies the tolerance and harmony of Taoist culture.</p>"},{"location":"en/component/tianzuo.LianYao/#motivation","title":"motivation","text":"<p>A memory pool is designed to use memory in cycles, improve memory usage efficiency, and provide memory leak detection function.</p> <p></p>"},{"location":"en/component/tianzuo.LianYao/#features","title":"features","text":"<ul> <li>\ud83e\udde9 simple integration</li> <li>\ud83d\udcdd optionally generate memory leak log</li> <li>\ud83e\ude90 log in multiple languages (simplified chinese / english)</li> </ul>"},{"location":"en/component/tianzuo.LianYao/#screenshot","title":"screenshot","text":"<p>locate memory leak lines of code through log file analysis:</p> <p></p>"},{"location":"en/component/tianzuo.LianYao/#example","title":"example","text":"<pre><code>\n#include &lt;iostream&gt;\n#include \"../../include/tianzuo.LianYaoInterface.h\"\n\nvoid* operator new(size_t size) {\n    return tianzuo_LianYaoInt::mem_get(size);\n}\nvoid* operator new[](size_t size) {\n    return operator new(size);\n}\n\nvoid operator delete(void* ptr) noexcept {\n    tianzuo_LianYaoInt::mem_del(ptr);\n}\nvoid operator delete[](void* ptr) noexcept {\n    operator delete(ptr);\n}\n\nclass cpp {\n public:\n    cpp() {}\n    ~cpp() {}\n private:\n     int m_a;\n     long m_l;\n     float m_f;\n};\n\nint main(int argc, char* argv[]) {\n    std::cout &lt;&lt; \"start tianzuo.LianYaoTest ...\\n\";\n#ifdef WIN32\n    tianzuo_LianYaoInt::initialize(3, \"memory_leaks.log\", nullptr, 0);\n#else\n    tianzuo_LianYaoInt::initialize(3, \"memory_leaks.log\", \"./tianzuo.LianYaoTest\", 0);\n#endif\n\n    int* new_int = new int(10); // leak 4\n    int* new_int2 = new int(10);\n    *new_int2 = 12;\n\n    for (size_t i = 0; i &lt; 10; i++) {\n        int* new_int3 = new int(10);\n        *new_int3 = 12;\n        delete new_int3;\n    }\n\n    char* new_buf = new char[1555]; // leak 1555\n    char* new_buf2 = new char[123];\n\n    cpp* new_class = new cpp(); // leak 12\n    cpp* new_class2 = new cpp();\n\n    class1* cls1 = new class1();\n    delete cls1;\n\n    delete new_class2;\n    delete new_int2;\n    delete[] new_buf2;\n\n    tianzuo_LianYaoInt::terminate();\n\n    return 0;\n}\n\n</code></pre>"},{"location":"en/component/tianzuo.LianYao/#download","title":"download","text":""},{"location":"en/component/tianzuo.Qiankun/","title":"tianzuo.Qiankun","text":""},{"location":"en/component/tianzuo.Qiankun/#tianzuoqiankun_1","title":"tianzuo.Qiankun","text":"operating system compiler programming language"},{"location":"en/component/tianzuo.Qiankun/#introduction","title":"introduction","text":"<p>tianzuo.Qiankun NoSql database based on drawer file storage can be used for file packaging, data integration, encryption storage and other purposes. The storage system can be easily and quickly built and deployed.</p> <p>legend: It's owned by Maitreya. It's for storage purposes. With incredible power, there is a strange space inside, a space so large that it seems to contain heaven and earth. There's more in the bag. There's more than enough.</p>"},{"location":"en/component/tianzuo.Qiankun/#motivation","title":"motivation","text":"<p>Build a NoSql database that can manage data with simple interface calls.</p> <p></p>"},{"location":"en/component/tianzuo.Qiankun/#features","title":"features","text":"<ul> <li>\ud83e\udde9 simple integration</li> <li>\ud83d\udce6 integrated simple storage files can be compressed freely</li> <li>\ud83e\udea2 the data is encrypted by 256-bit AES algorithm</li> <li>\ud83d\udcd2 data can be added, deleted, modified, or queried in batches</li> <li>\ud83d\udcc3 supports direct access to raw data streams</li> </ul>"},{"location":"en/component/tianzuo.Qiankun/#screenshot","title":"screenshot","text":"<p>tianzuo.Qiankun Test:</p> <p></p>"},{"location":"en/component/tianzuo.Qiankun/#example","title":"example","text":"cpp <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\n#include \"tianzuo.QiankunInterface.h\" // \u200b\u63a5\u53e3\u200b\u5934\u6587\u4ef6\u200b interface heaher file\n\nint main() {\n    // \u200b\u51c6\u5907\u200b\u6570\u636e\u200b prepare data\n    Qiankun_db_verify_struct db_verify(\"qiankunDataBase.Ztz\", \"password\");\n    int integer = 12345678;\n    Qiankun_data_type_struct data_type(Qiankun_data_type_integer, -1, \"integer\");\n    Qiankun_user_data_struct user_data(&amp;integer, 0);\n    int data_size = 0;\n    Qiankun_get_user_data_struct get_user_data(reinterpret_cast&lt;void*&amp;&gt;(integer), &amp;data_size);\n\n    // \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n    std::unique_ptr&lt;tianzuo_QiankunInterface&gt; qiankun_interface(new tianzuo_QiankunInterface());\n\n    // \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n    tianzuo_QiankunInt* qiankun = qiankun_interface-&gt;initialize();\n\n    // \u200b\u521d\u59cb\u5316\u200b\u5b9e\u4f8b\u200b initialize the instance\n    int error_code = qiankun-&gt;initialize();\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"initialize error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\n    // \u200b\u521b\u5efa\u200b\u6570\u636e\u5e93\u200b create database\n    error_code = qiankun-&gt;db_create_database(&amp;db_verify, \"qiankunDataBase\", true);\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"db_create_database error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\n    // \u200b\u6253\u5f00\u200b\u6570\u636e\u5e93\u200b open database\n    error_code = qiankun-&gt;db_open_database(&amp;db_verify);\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"db_open_database error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\n    // \u200b\u5411\u200b\u6570\u636e\u5e93\u200b\u5199\u5165\u200b\u4e00\u4e2a\u200b\u6574\u578b\u200b\u6570\u636e\u200b writes an integer to the database\n    error_code = qiankun-&gt;data_combine(&amp;db_verify, &amp;data_type, nullptr, &amp;user_data, false, -1);\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"data_combine error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\n\n    // \u200b\u8bfb\u53d6\u200b\u521a\u200b\u5199\u5165\u200b\u7684\u200b\u6570\u636e\u200b read the data just written\n    integer = -1;\n    error_code = qiankun-&gt;data_extract(&amp;db_verify, &amp;data_type, nullptr, &amp;get_user_data);\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"data_extract error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\n    std::cout &lt;&lt; \"get integer data: \" &lt;&lt; integer;\n\n    // \u200b\u5173\u95ed\u200b\u6570\u636e\u5e93\u200b close database\n    error_code = qiankun-&gt;db_close_database(&amp;db_verify);\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"db_close_database error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\nreturn_error:\n\n    // \u200b\u91ca\u653e\u200b\u63a5\u53e3\u200b terminate the interface\n    if (qiankun_interface != nullptr &amp;&amp; qiankun != nullptr) {\n        qiankun_interface-&gt;terminate(&amp;qiankun);\n    }\n\n    std::cout &lt;&lt; \"test done -------------------\";\n\n    return 0;\n}\n</code></pre> python <pre><code>from ctypes import *\nfrom enum import Enum\nimport ctypes\n\ntianzuo_QiankunLib = cdll.LoadLibrary('./tianzuo.Qiankun.dll')\n\nclass Qiankun_error_code(Enum):\n    Qiankun_errorcode_success           = 1 # \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b\n    Qiankun_errorcode_normal            = 2 # \u200b\u9519\u8bef\u200b\u7684\u200b\u503c\u200b\n    Qiankun_errorcode_differ            = 3 # \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u6570\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The number of database files fails to be verified)\n    Qiankun_errorcode_no_rights         = 4 # \u200b\u6570\u636e\u5e93\u200b\u5bc6\u7801\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The database password verification failed)\n    Qiankun_errorcode_db_not_exist      = 5 # \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u4e0d\u200b\u5b58\u5728\u200b (The database file does not exist)\n    Qiankun_errorcode_exist             = 6 # \u200b\u6570\u636e\u200b\u5df2\u200b\u5b58\u5728\u200b (Data already exists)\n    Qiankun_errorcode_not_exist         = 7 # \u200b\u6570\u636e\u200b\u4e0d\u200b\u5b58\u5728\u200b (Data does not exist)\n    Qiankun_errorcode_out_of_range      = 8 # \u200b\u8d85\u51fa\u8303\u56f4\u200b (out of range)\n    Qiankun_errorcode_type              = 9 # \u200b\u7c7b\u578b\u200b\u4e0d\u7b26\u200b (wrong type)\n    Qiankun_errorcode_param             = 10 # \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b (parameter error)\n    Qiankun_errorcode_compress          = 11 # \u200b\u538b\u7f29\u200b\u9519\u8bef\u200b (compression error)\n    Qiankun_errorcode_get_array         = 12 # \u200b\u6570\u7ec4\u200b\u9519\u8bef\u200b (arrary error)\n    Qiankun_errorcode_out_of_memory     = 13 # \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (memory overflow)\n    Qiankun_errorcode_handle            = 14 # \u200b\u53e5\u67c4\u200b\u9519\u8bef\u200b (error handle)\n    Qiankun_errorcode_io                = 15 # IO\u200b\u9519\u8bef\u200b (io error)\n\nclass tianzuo_QiankunInt:\n    def __init__(self):\n        tianzuo_QiankunLib.tianzuo_QiankunInterface_initialize.restype = c_void_p\n        self.obj = tianzuo_QiankunLib.tianzuo_QiankunInterface_initialize()\n\n    def __del__(self):\n        tianzuo_QiankunLib.tianzuo_QiankunInterface_terminate.argtypes = [c_void_p]\n        tianzuo_QiankunLib.tianzuo_QiankunInterface_terminate(self.obj)\n\n    def initialize(self):\n        tianzuo_QiankunLib.tianzuo_QiankunInterface_initialize.restype = c_int\n        tianzuo_QiankunLib.tianzuo_QiankunInt_initialize.argtypes = [c_void_p]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_initialize(self.obj)\n\n    def db_create_database(self, db_file_name, db_password, db_name, over_write):\n        tianzuo_QiankunLib.tianzuo_QiankunInt_db_create_database.argtypes = [c_void_p, c_char_p, c_char_p, c_char_p, c_int]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_db_create_database(self.obj, db_file_name, db_password, db_name, over_write)\n\n    def db_open_database(self, db_file_name, db_password):\n        tianzuo_QiankunLib.tianzuo_QiankunInt_db_open_database.argtypes = [c_void_p, c_char_p, c_char_p]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_db_open_database(self.obj, db_file_name, db_password)\n\n    def db_close_database(self, db_file_name, db_password):\n        tianzuo_QiankunLib.tianzuo_QiankunInt_db_close_database.argtypes = [c_void_p, c_char_p, c_char_p]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_db_close_database(self.obj, db_file_name, db_password)\n\n    def data_int_combine(self, db_file_name, db_password, data_name, remark, data):\n        tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_combine.argtypes = [c_void_p, c_char_p, c_char_p, c_char_p, c_char_p, c_int]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_combine(self.obj, db_file_name, db_password, data_name, remark, data)\n\n    def data_int_extract(self, db_file_name, db_password, data_name, data):\n        tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_extract.argtypes = [c_void_p, c_char_p, c_char_p, c_char_p, ctypes.POINTER(ctypes.c_int)]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_extract(self.obj, db_file_name, db_password, data_name, data)\n\ndef main():\n\n    # \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n    print(\"initialize the interface\")\n\n    # \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n    qiankun = tianzuo_QiankunInt()\n    error_code = qiankun.initialize()\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"initialize error:\", error_code)\n        return\n\n    # \u200b\u521b\u5efa\u200b\u6570\u636e\u5e93\u200b create database\n    db_file_name = b\"qiankunDataBase.Ztz\"\n    db_password = b\"password\"\n    error_code = qiankun.db_create_database(db_file_name, db_password, b\"qiankunDataBase\", True)\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"db_create_database error:\", error_code)\n        return\n\n    # \u200b\u6253\u5f00\u200b\u6570\u636e\u5e93\u200b open database\n    error_code = qiankun.db_open_database(db_file_name, db_password)\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"db_open_database error:\", error_code)\n        return\n\n    # \u200b\u5411\u200b\u6570\u636e\u5e93\u200b\u5199\u5165\u200b\u4e00\u4e2a\u200b\u6574\u578b\u200b\u6570\u636e\u200b writes an integer to the database\n    intInt = 12345678\n    error_code = qiankun.data_int_combine(db_file_name, db_password, b\"integer\", None, intInt)\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"data_combine error:\", error_code)\n        return\n\n    # \u200b\u8bfb\u53d6\u200b\u521a\u200b\u5199\u5165\u200b\u7684\u200b\u6570\u636e\u200b read the data just written\n    return_data = ctypes.c_int()\n    error_code = qiankun.data_int_extract(db_file_name, db_password, b\"integer\", ctypes.byref(return_data))\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"data_extract error:\", error_code)\n        return\n\n    integer = return_data.value\n    print(\"get integer data: {}\".format(integer))\n\n    # \u200b\u5173\u95ed\u200b\u6570\u636e\u5e93\u200b close database\n    error_code = qiankun.db_close_database(db_file_name, db_password)\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"db_close_database error:\", error_code)\n        return\n\n    print(\"test done -------------------\")\n\nif __name__ == '__main__':\n    main()\n\n</code></pre> java <pre><code>package cn.camelsoft;\n\nimport com.sun.jna.Library;\nimport com.sun.jna.Native;\nimport com.sun.jna.Pointer;\n\nenum Qiankun_error_code {\n    Qiankun_errorcode_success           (0x00000001),   ///&lt;  \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b\n    Qiankun_errorcode_normal            (0x00000002),   ///&lt;  \u200b\u9519\u8bef\u200b\u7684\u200b\u503c\u200b\n    Qiankun_errorcode_differ            (0x00000003),   ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u6570\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The number of database files fails to be verified)\n    Qiankun_errorcode_no_rights         (0x00000004),   ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u5bc6\u7801\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The database password verification failed)\n    Qiankun_errorcode_db_not_exist      (0x00000005),   ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u4e0d\u200b\u5b58\u5728\u200b (The database file does not exist)\n    Qiankun_errorcode_exist             (0x00000006),   ///&lt;  \u200b\u6570\u636e\u200b\u5df2\u200b\u5b58\u5728\u200b (Data already exists)\n    Qiankun_errorcode_not_exist         (0x00000007),   ///&lt;  \u200b\u6570\u636e\u200b\u4e0d\u200b\u5b58\u5728\u200b (Data does not exist)\n    Qiankun_errorcode_out_of_range      (0x00000008),   ///&lt;  \u200b\u8d85\u51fa\u8303\u56f4\u200b (out of range)\n    Qiankun_errorcode_type              (0x00000009),   ///&lt;  \u200b\u7c7b\u578b\u200b\u4e0d\u7b26\u200b (wrong type)\n    Qiankun_errorcode_param             (0x0000000A),   ///&lt;  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b (parameter error)\n    Qiankun_errorcode_compress          (0x0000000B),   ///&lt;  \u200b\u538b\u7f29\u200b\u9519\u8bef\u200b (compression error)\n    Qiankun_errorcode_get_array         (0x0000000C),   ///&lt;  \u200b\u6570\u7ec4\u200b\u9519\u8bef\u200b (arrary error)\n    Qiankun_errorcode_out_of_memory     (0x0000000D),   ///&lt;  \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (memory overflow)\n    Qiankun_errorcode_handle            (0x0000000E),   ///&lt;  \u200b\u53e5\u67c4\u200b\u9519\u8bef\u200b (error handle)\n    Qiankun_errorcode_io                (0x0000000F);   ///&lt;  IO\u200b\u9519\u8bef\u200b (io error)\n\n    private int value;\n\n    Qiankun_error_code(int value) {\n        this.value = value;\n    }\n\n    public int getValue() {\n        return value;\n    }\n}\n\npublic class Main {\n\n    public interface tianzuo_QiankunLib extends Library {\n        tianzuo_QiankunLib instance = (tianzuo_QiankunLib) Native.load(\"./tianzuo.Qiankun.dll\", tianzuo_QiankunLib.class);\n        Pointer tianzuo_QiankunInterface_initialize();\n        void tianzuo_QiankunInterface_terminate(Pointer qiankun);\n        int tianzuo_QiankunInt_initialize(Pointer qiankun);\n\n        int tianzuo_QiankunInt_db_create_database(Pointer qiankun, String db_file_name, String db_password, String db_name, Boolean over_write);\n        int tianzuo_QiankunInt_db_open_database(Pointer qiankun, String db_file_name, String db_password);\n        int tianzuo_QiankunInt_db_close_database(Pointer qiankun, String db_file_name, String db_password);\n        int tianzuo_QiankunInt_data_int_combine(Pointer qiankun, String db_file_name, String db_password, String data_name, String remark, int data);\n        int tianzuo_QiankunInt_data_int_extract(Pointer qiankun, String db_file_name, String db_password, String data_name, int[] data);\n    }\n\n    public static void main(String[] args) {\n        System.setProperty(\"jna.encoding\",\"UTF-8\");\n\n        // \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n        System.out.printf(\"initialize the interface\\n\");\n\n        // \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n        Pointer qiankun = tianzuo_QiankunLib.instance.tianzuo_QiankunInterface_initialize();\n        int error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_initialize(qiankun);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_initialize error: %d\\n\", error_code);\n            return;\n        }\n\n        // \u200b\u521b\u5efa\u200b\u6570\u636e\u5e93\u200b create database\n        String db_file_name = \"qiankunDataBase.Ztz\";\n        String db_password = \"password\";\n        error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_db_create_database(qiankun, db_file_name, db_password, \"qiankunDataBase\", true);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_db_create_database error: %d\\n\", error_code);\n            return;\n        }\n\n        // \u200b\u6253\u5f00\u200b\u6570\u636e\u5e93\u200b open database\n        error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_db_open_database(qiankun, db_file_name, db_password);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_db_open_database error: %d\\n\", error_code);\n            return;\n        }\n\n        // \u200b\u5411\u200b\u6570\u636e\u5e93\u200b\u5199\u5165\u200b\u4e00\u4e2a\u200b\u6574\u578b\u200b\u6570\u636e\u200b writes an integer to the database\n        int intInt = 12345678;\n        error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_data_int_combine(qiankun, db_file_name, db_password, \"integer\", \"\", intInt);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_data_int_combine error: %d\\n\", error_code);\n            return;\n        }\n\n        // \u200b\u8bfb\u53d6\u200b\u521a\u200b\u5199\u5165\u200b\u7684\u200b\u6570\u636e\u200b read the data just written\n        int[] return_data = {0};\n        error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_data_int_extract(qiankun, db_file_name, db_password, \"integer\", return_data);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_data_int_extract error: %d\\n\", error_code);\n            return;\n        }\n\n        System.out.printf(\"get int: %d\\n\", return_data[0]);\n\n        // \u200b\u5173\u95ed\u200b\u6570\u636e\u5e93\u200b close database\n        error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_db_close_database(qiankun, db_file_name, db_password);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_db_close_database error: %d\\n\", error_code);\n            return;\n        }\n\n        System.out.printf(\"test done -------------------\\n\");\n\n        tianzuo_QiankunLib.instance.tianzuo_QiankunInterface_terminate(qiankun);\n    }\n}\n</code></pre> csharp <pre><code>\n\nusing System.Runtime.InteropServices;\n\npublic enum Qiankun_error_code\n{\n    Qiankun_errorcode_success       = 0x00000001,              ///&lt;  \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b\n    Qiankun_errorcode_normal        = 0x00000002,              ///&lt;  \u200b\u9519\u8bef\u200b\u7684\u200b\u503c\u200b\n    Qiankun_errorcode_differ        = 0x00000003,              ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u6570\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The number of database files fails to be verified)\n    Qiankun_errorcode_no_rights     = 0x00000004,              ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u5bc6\u7801\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The database password verification failed)\n    Qiankun_errorcode_db_not_exist  = 0x00000005,              ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u4e0d\u200b\u5b58\u5728\u200b (The database file does not exist)\n    Qiankun_errorcode_exist         = 0x00000006,              ///&lt;  \u200b\u6570\u636e\u200b\u5df2\u200b\u5b58\u5728\u200b (Data already exists)\n    Qiankun_errorcode_not_exist     = 0x00000007,              ///&lt;  \u200b\u6570\u636e\u200b\u4e0d\u200b\u5b58\u5728\u200b (Data does not exist)\n    Qiankun_errorcode_out_of_range  = 0x00000008,              ///&lt;  \u200b\u8d85\u51fa\u8303\u56f4\u200b (out of range)\n    Qiankun_errorcode_type          = 0x00000009,              ///&lt;  \u200b\u7c7b\u578b\u200b\u4e0d\u7b26\u200b (wrong type)\n    Qiankun_errorcode_param         = 0x0000000A,              ///&lt;  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b (parameter error)\n    Qiankun_errorcode_compress      = 0x0000000B,              ///&lt;  \u200b\u538b\u7f29\u200b\u9519\u8bef\u200b (compression error)\n    Qiankun_errorcode_get_array     = 0x0000000C,              ///&lt;  \u200b\u6570\u7ec4\u200b\u9519\u8bef\u200b (arrary error)\n    Qiankun_errorcode_out_of_memory = 0x0000000D,              ///&lt;  \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (memory overflow)\n    Qiankun_errorcode_handle        = 0x0000000E,              ///&lt;  \u200b\u53e5\u67c4\u200b\u9519\u8bef\u200b (error handle)\n    Qiankun_errorcode_io            = 0x0000000F,              ///&lt;  IO\u200b\u9519\u8bef\u200b (io error)\n}\n\nclass Program {\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern IntPtr tianzuo_QiankunInterface_initialize();\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern void tianzuo_QiankunInterface_terminate(IntPtr qiankun);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_initialize(IntPtr qiankun);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_db_create_database(IntPtr qiankun, string db_file_name, string db_password, string db_name, bool over_write);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_db_open_database(IntPtr qiankun, string db_file_name, string db_password);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_db_close_database(IntPtr qiankun, string db_file_name, string db_password);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_data_int_combine(IntPtr qiankun, string db_file_name, string db_password, string data_name, string remark, int data);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_data_int_extract(IntPtr qiankun, string db_file_name, string db_password, string data_name, ref int data);\n\n    static void Main(string[] args) {\n        // \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n        Console.WriteLine(\"initialize the interface\\n\");\n\n        // \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n        IntPtr qiankun = tianzuo_QiankunInterface_initialize();\n        int error_code = tianzuo_QiankunInt_initialize(qiankun);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success))\n        {\n            Console.WriteLine(\"tianzuo_QiankunInt_initialize error:\" + error_code);\n            return;\n        }\n\n        // \u200b\u521b\u5efa\u200b\u6570\u636e\u5e93\u200b create database\n        string db_file_name = \"qiankunDataBase.Ztz\";\n        string db_password = \"password\";\n        error_code = tianzuo_QiankunInt_db_create_database(qiankun, db_file_name, db_password, \"qiankunDataBase\", true);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success))\n        {\n            Console.WriteLine(\"tianzuo_QiankunInt_db_create_database error:\" + error_code);\n            return;\n        }\n\n        // \u200b\u6253\u5f00\u200b\u6570\u636e\u5e93\u200b open database\n        error_code = tianzuo_QiankunInt_db_open_database(qiankun, db_file_name, db_password);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success)) {\n            Console.WriteLine(\"tianzuo_QiankunInt_db_open_database error:\" + error_code);\n            return;\n        }\n\n        // \u200b\u5411\u200b\u6570\u636e\u5e93\u200b\u5199\u5165\u200b\u4e00\u4e2a\u200b\u6574\u578b\u200b\u6570\u636e\u200b writes an integer to the database\n        int intInt = 12345678;\n        error_code = tianzuo_QiankunInt_data_int_combine(qiankun, db_file_name, db_password, \"integer\", \"\", intInt);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success))\n        {\n            Console.WriteLine(\"tianzuo_QiankunInt_data_int_combine error:\" + error_code);\n            return;\n        }\n\n        // \u200b\u8bfb\u53d6\u200b\u521a\u200b\u5199\u5165\u200b\u7684\u200b\u6570\u636e\u200b read the data just written\n        int return_data = 0;\n        error_code = tianzuo_QiankunInt_data_int_extract(qiankun, db_file_name, db_password, \"integer\", ref return_data);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success))\n        {\n            Console.WriteLine(\"tianzuo_QiankunInt_data_int_extract error:\" + error_code);\n            return;\n        }\n\n        Console.WriteLine(\"get int: \" + return_data);\n\n        // \u200b\u5173\u95ed\u200b\u6570\u636e\u5e93\u200b close database\n        error_code = tianzuo_QiankunInt_db_close_database(qiankun, db_file_name, db_password);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success))\n        {\n            Console.WriteLine(\"tianzuo_QiankunInt_db_close_database error:\" + error_code);\n            return;\n        }\n\n        Console.WriteLine(\"test done -------------------\\n\");\n\n        tianzuo_QiankunInterface_terminate(qiankun);\n\n    }\n\n}\n</code></pre> javascript <pre><code>\nQiankun_errorcode_success           = 0x00000001;   ///&lt;  \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b\nQiankun_errorcode_normal            = 0x00000002;   ///&lt;  \u200b\u9519\u8bef\u200b\u7684\u200b\u503c\u200b\nQiankun_errorcode_differ            = 0x00000003;   ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u6570\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The number of database files fails to be verified)\nQiankun_errorcode_no_rights         = 0x00000004;   ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u5bc6\u7801\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The database password verification failed)\nQiankun_errorcode_db_not_exist      = 0x00000005;   ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u4e0d\u200b\u5b58\u5728\u200b (The database file does not exist)\nQiankun_errorcode_exist             = 0x00000006;   ///&lt;  \u200b\u6570\u636e\u200b\u5df2\u200b\u5b58\u5728\u200b (Data already exists)\nQiankun_errorcode_not_exist         = 0x00000007;   ///&lt;  \u200b\u6570\u636e\u200b\u4e0d\u200b\u5b58\u5728\u200b (Data does not exist)\nQiankun_errorcode_out_of_range      = 0x00000008;   ///&lt;  \u200b\u8d85\u51fa\u8303\u56f4\u200b (out of range)\nQiankun_errorcode_type              = 0x00000009;   ///&lt;  \u200b\u7c7b\u578b\u200b\u4e0d\u7b26\u200b (wrong type)\nQiankun_errorcode_param             = 0x0000000A;   ///&lt;  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b (parameter error)\nQiankun_errorcode_compress          = 0x0000000B;   ///&lt;  \u200b\u538b\u7f29\u200b\u9519\u8bef\u200b (compression error)\nQiankun_errorcode_get_array         = 0x0000000C;   ///&lt;  \u200b\u6570\u7ec4\u200b\u9519\u8bef\u200b (arrary error)\nQiankun_errorcode_out_of_memory     = 0x0000000D;   ///&lt;  \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (memory overflow)\nQiankun_errorcode_handle            = 0x0000000E;   ///&lt;  \u200b\u53e5\u67c4\u200b\u9519\u8bef\u200b (error handle)\nQiankun_errorcode_io                = 0x0000000F;   ///&lt;  IO\u200b\u9519\u8bef\u200b (io error)\n\nlet ffi = require('ffi-napi')\nconst ref = require('ref-napi');\n\nlet tianzuo_QiankunLib = ffi.Library(\"tianzuo.Qiankun.dll\", {\n    'tianzuo_QiankunInterface_initialize': ['pointer', []],\n    'tianzuo_QiankunInterface_terminate':['void',['pointer']],\n    'tianzuo_QiankunInt_initialize':['int',['pointer']],\n    'tianzuo_QiankunInt_db_create_database':['int',['pointer','string','string','string', 'bool']],\n    'tianzuo_QiankunInt_db_open_database':['int',['pointer', 'string', 'string']],\n    'tianzuo_QiankunInt_db_close_database':['int',['pointer', 'string', 'string']],\n    'tianzuo_QiankunInt_data_int_combine':['int',['pointer','string','string','string', 'string', 'int']],\n    'tianzuo_QiankunInt_data_int_extract':['int',['pointer','string','string','string', 'pointer']],\n})\n\n\n// \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\nconsole.log(\"initialize the interface\\n\");\n\n// \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\nlet qiankun = tianzuo_QiankunLib.tianzuo_QiankunInterface_initialize();\nlet error_code = tianzuo_QiankunLib.tianzuo_QiankunInt_initialize(qiankun);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_initialize error: %d\\n\", error_code);\n    return;\n}\n\n// \u200b\u521b\u5efa\u200b\u6570\u636e\u5e93\u200b create database\nlet db_file_name = \"qiankunDataBase.Ztz\";\nlet db_password = \"password\";\nerror_code = tianzuo_QiankunLib.tianzuo_QiankunInt_db_create_database(qiankun, db_file_name, db_password, \"qiankunDataBase\", true);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_db_create_database error: %d\\n\", error_code);\n    return;\n}\n\n// \u200b\u6253\u5f00\u200b\u6570\u636e\u5e93\u200b open database\nerror_code = tianzuo_QiankunLib.tianzuo_QiankunInt_db_open_database(qiankun, db_file_name, db_password);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_db_open_database error: %d\\n\", error_code);\n    return;\n}\n\n// \u200b\u5411\u200b\u6570\u636e\u5e93\u200b\u5199\u5165\u200b\u4e00\u4e2a\u200b\u6574\u578b\u200b\u6570\u636e\u200b writes an integer to the database\nlet intInt = 12345678;\nerror_code = tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_combine(qiankun, db_file_name, db_password, \"integer\", \"\", intInt);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_data_int_combine error: %d\\n\", error_code);\n    return;\n}\n\n// \u200b\u8bfb\u53d6\u200b\u521a\u200b\u5199\u5165\u200b\u7684\u200b\u6570\u636e\u200b read the data just written\nreturn_buf = Buffer.alloc(1 * ref.sizeof.int);\nerror_code = tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_extract(qiankun, db_file_name, db_password, \"integer\", return_buf);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_data_int_extract error: %d\\n\", error_code);\n    return;\n}\n\nreturn_data = ref.get(return_buf, 0, ref.types.int);\nconsole.log(\"get int: %d\\n\", return_data);\n\n// \u200b\u5173\u95ed\u200b\u6570\u636e\u5e93\u200b close database\nerror_code = tianzuo_QiankunLib.tianzuo_QiankunInt_db_close_database(qiankun, db_file_name, db_password);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_db_close_database error: %d\\n\", error_code);\n   return;\n}\n\nconsole.log(\"test done -------------------\\n\");\n\ntianzuo_QiankunLib.tianzuo_QiankunInterface_terminate(qiankun);\n\n</code></pre> php <pre><code>&lt;?php\n\n// \u200b\u68c0\u67e5\u200b\u662f\u5426\u200b\u52a0\u8f7d\u200b\u4e86\u200b FFI \u200b\u6269\u5c55\u200b\nif (extension_loaded('ffi')) {\n    echo(\"\u200b\u5df2\u200b\u542f\u7528\u200b FFI \u200b\u6269\u5c55\u200b\\n\");\n} else {\n    die(\"\u200b\u672a\u200b\u542f\u52a8\u200b FFI \u200b\u6269\u5c55\u200b\\n\");\n}\n\nenum Qiankun_error_code\n{\nconst Qiankun_errorcode_success       = 0x00000001;            ///&lt;  \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b\nconst Qiankun_errorcode_normal        = 0x00000002;            ///&lt;  \u200b\u9519\u8bef\u200b\u7684\u200b\u503c\u200b\nconst Qiankun_errorcode_differ        = 0x00000003;            ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u6570\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The number of database files fails to be verified)\nconst Qiankun_errorcode_no_rights     = 0x00000004;            ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u5bc6\u7801\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The database password verification failed)\nconst Qiankun_errorcode_db_not_exist  = 0x00000005;            ///&lt;  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u4e0d\u200b\u5b58\u5728\u200b (The database file does not exist)\nconst Qiankun_errorcode_exist         = 0x00000006;            ///&lt;  \u200b\u6570\u636e\u200b\u5df2\u200b\u5b58\u5728\u200b (Data already exists)\nconst Qiankun_errorcode_not_exist     = 0x00000007;            ///&lt;  \u200b\u6570\u636e\u200b\u4e0d\u200b\u5b58\u5728\u200b (Data does not exist)\nconst Qiankun_errorcode_out_of_range  = 0x00000008;            ///&lt;  \u200b\u8d85\u51fa\u8303\u56f4\u200b (out of range)\nconst Qiankun_errorcode_type          = 0x00000009;            ///&lt;  \u200b\u7c7b\u578b\u200b\u4e0d\u7b26\u200b (wrong type)\nconst Qiankun_errorcode_param         = 0x0000000A;            ///&lt;  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b (parameter error)\nconst Qiankun_errorcode_compress      = 0x0000000B;            ///&lt;  \u200b\u538b\u7f29\u200b\u9519\u8bef\u200b (compression error)\nconst Qiankun_errorcode_get_array     = 0x0000000C;            ///&lt;  \u200b\u6570\u7ec4\u200b\u9519\u8bef\u200b (arrary error)\nconst Qiankun_errorcode_out_of_memory = 0x0000000D;            ///&lt;  \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (memory overflow)\nconst Qiankun_errorcode_handle        = 0x0000000E;            ///&lt;  \u200b\u53e5\u67c4\u200b\u9519\u8bef\u200b (error handle)\nconst Qiankun_errorcode_io            = 0x0000000F;            ///&lt;  IO\u200b\u9519\u8bef\u200b (io error)\n}\n\n$ffi = FFI::cdef(\"\n    void* tianzuo_QiankunInterface_initialize();\n    void tianzuo_QiankunInterface_terminate(void* *QiankunInt_pointer);\n    int tianzuo_QiankunInt_initialize(void* QiankunInt_pointer);\n    int tianzuo_QiankunInt_db_create_database(void* QiankunInt_pointer, const char* db_file_name, const char* db_password, const char* db_name, bool const over_write);\n    int tianzuo_QiankunInt_db_open_database(void* QiankunInt_pointer, const char* db_file_name, const char* db_password);\n    int tianzuo_QiankunInt_db_close_database(void* QiankunInt_pointer, const char* db_file_name, const char* db_password);\n    int tianzuo_QiankunInt_data_int_combine(void* QiankunInt_pointer, const char* db_file_name, const char* db_password, const char* data_name, const char* remark, int data);\n    int tianzuo_QiankunInt_data_int_extract(void* QiankunInt_pointer, const char* db_file_name, const char* db_password, const char* data_name, int* data);\n\", \"tianzuo.Qiankun.dll\");\n\n# \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\necho \"initialize the interface\" . \"\\n\";\n\n# \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n$qiankun = $ffi-&gt;tianzuo_QiankunInterface_initialize();\n\n$error_code = $ffi-&gt;tianzuo_QiankunInt_initialize($qiankun);\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"initialize error: \" . $error_code . \"\\n\";\n    return;\n}\n\n# \u200b\u521b\u5efa\u200b\u6570\u636e\u5e93\u200b create database\n$db_file_name = \"qiankunDataBase.Ztz\";\n$db_password = \"password\";\n$error_code = $ffi-&gt;tianzuo_QiankunInt_db_create_database($qiankun, $db_file_name, $db_password, \"qiankunDataBase\", true);\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"tianzuo_QiankunInt_db_create_database error: \" . $error_code . \"\\n\";\n    return;\n}\n\n# \u200b\u6253\u5f00\u200b\u6570\u636e\u5e93\u200b open database\n$error_code = $ffi-&gt;tianzuo_QiankunInt_db_open_database($qiankun, $db_file_name, $db_password);\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"tianzuo_QiankunInt_db_open_database error: \" . $error_code . \"\\n\";\n    return;\n}\n\n# \u200b\u5411\u200b\u6570\u636e\u5e93\u200b\u5199\u5165\u200b\u4e00\u4e2a\u200b\u6574\u578b\u200b\u6570\u636e\u200b writes an integer to the database\n$intInt = 12345678;\n$error_code = $ffi-&gt;tianzuo_QiankunInt_data_int_combine($qiankun, $db_file_name, $db_password, \"integer\", \"\", $intInt);\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"tianzuo_QiankunInt_data_int_combine error: \" . $error_code . \"\\n\";\n    return;\n}\n\n# \u200b\u8bfb\u53d6\u200b\u521a\u200b\u5199\u5165\u200b\u7684\u200b\u6570\u636e\u200b read the data just written\n$return_data = FFI::new(\"int\");\n$error_code = $ffi-&gt;tianzuo_QiankunInt_data_int_extract($qiankun, $db_file_name, $db_password, \"integer\", FFI::addr($return_data));\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"tianzuo_QiankunInt_data_int_extract error: \" . $error_code . \"\\n\";\n    return;\n}\n\necho \"get integer data: \" . $return_data-&gt;cdata . \"\\n\";\n\n# \u200b\u5173\u95ed\u200b\u6570\u636e\u5e93\u200b close database\n$error_code = $ffi-&gt;tianzuo_QiankunInt_db_close_database($qiankun, $db_file_name, $db_password);\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"tianzuo_QiankunInt_db_close_database error: \" . $error_code . \"\\n\";\n    return;\n}\n\necho \"test done -------------------\" . \"\\n\";\n\n?&gt;\n</code></pre> vb <pre><code>\nImports System.Runtime.InteropServices\n\nEnum Qiankun_error_code\n    Qiankun_errorcode_success = 1                     '  \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b\n    Qiankun_errorcode_normal = 2                      '  \u200b\u9519\u8bef\u200b\u7684\u200b\u503c\u200b\n    Qiankun_errorcode_differ = 3                      '  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u6570\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The number Of database files fails To be verified)\n    Qiankun_errorcode_no_rights = 4                   '  \u200b\u6570\u636e\u5e93\u200b\u5bc6\u7801\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The database password verification failed)\n    Qiankun_errorcode_db_not_exist = 5                '  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u4e0d\u200b\u5b58\u5728\u200b (The database file does Not exist)\n    Qiankun_errorcode_exist = 6                       '  \u200b\u6570\u636e\u200b\u5df2\u200b\u5b58\u5728\u200b (Data already exists)\n    Qiankun_errorcode_not_exist = 7                   '  \u200b\u6570\u636e\u200b\u4e0d\u200b\u5b58\u5728\u200b (Data does Not exist)\n    Qiankun_errorcode_out_of_range = 8                '  \u200b\u8d85\u51fa\u8303\u56f4\u200b (out Of range)\n    Qiankun_errorcode_type = 9                        '  \u200b\u7c7b\u578b\u200b\u4e0d\u7b26\u200b (wrong type)\n    Qiankun_errorcode_param = 10                      '  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b (parameter Error)\n    Qiankun_errorcode_compress = 11                   '  \u200b\u538b\u7f29\u200b\u9519\u8bef\u200b (compression Error)\n    Qiankun_errorcode_get_array = 12                  '  \u200b\u6570\u7ec4\u200b\u9519\u8bef\u200b (arrary Error)\n    Qiankun_errorcode_out_of_memory = 13              '  \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (memory overflow)\n    Qiankun_errorcode_handle = 14                     '  \u200b\u53e5\u67c4\u200b\u9519\u8bef\u200b (Error handle)\n    Qiankun_errorcode_io = 15                         '  IO\u200b\u9519\u8bef\u200b (io Error)\nEnd Enum\n\nModule Program\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInterface_initialize() As IntPtr\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInterface_terminate(ByRef QiankunInt_pointer As IntPtr)\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_initialize(QiankunInt_pointer As IntPtr) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_db_create_database(QiankunInt_pointer As IntPtr, db_file_name As String, db_password As String, db_name As String, over_write As Boolean) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_db_open_database(QiankunInt_pointer As IntPtr, db_file_name As String, db_password As String) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_db_close_database(QiankunInt_pointer As IntPtr, db_file_name As String, db_password As String) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_data_int_combine(QiankunInt_pointer As IntPtr, db_file_name As String, db_password As String, data_name As String, remark As String, data As Integer) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_data_int_extract(QiankunInt_pointer As IntPtr, db_file_name As String, db_password As String, data_name As String, ByRef data As Integer) As Integer\n    End Function\n\n    Sub Main(args As String())\n        ' \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n        Console.WriteLine(\"initialize the interface\")\n\n        ' \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n        Dim qiankun As IntPtr = tianzuo_QiankunInterface_initialize()\n        Dim error_code As Integer = tianzuo_QiankunInt_initialize(qiankun)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_initialize error:\" + error_code.ToString)\n            Return\n        End If\n\n        ' \u200b\u521b\u5efa\u200b\u6570\u636e\u5e93\u200b create database\n        Dim db_file_name As String = \"qiankunDataBase.Ztz\"\n        Dim db_password As String = \"password\"\n        error_code = tianzuo_QiankunInt_db_create_database(qiankun, db_file_name, db_password, \"qiankunDataBase\", True)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_db_create_database error:\" + error_code.ToString)\n            Return\n        End If\n\n        ' \u200b\u6253\u5f00\u200b\u6570\u636e\u5e93\u200b open database\n        error_code = tianzuo_QiankunInt_db_open_database(qiankun, db_file_name, db_password)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_db_open_database error:\" + error_code.ToString)\n            Return\n        End If\n\n        ' \u200b\u5411\u200b\u6570\u636e\u5e93\u200b\u5199\u5165\u200b\u4e00\u4e2a\u200b\u6574\u578b\u200b\u6570\u636e\u200b writes an integer to the database\n        Dim intInt As Integer = 12345678\n        error_code = tianzuo_QiankunInt_data_int_combine(qiankun, db_file_name, db_password, \"integer\", \"\", intInt)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_data_int_combine error:\" + error_code.ToString)\n            Return\n        End If\n\n        ' \u200b\u8bfb\u53d6\u200b\u521a\u200b\u5199\u5165\u200b\u7684\u200b\u6570\u636e\u200b read the data just written\n        Dim return_data As Integer = 0\n        error_code = tianzuo_QiankunInt_data_int_extract(qiankun, db_file_name, db_password, \"integer\", return_data)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_data_int_extract error:\" + error_code.ToString)\n            Return\n        End If\n\n        Console.WriteLine(\"get int: \" + return_data.ToString)\n\n        ' \u200b\u5173\u95ed\u200b\u6570\u636e\u5e93\u200b close database\n        error_code = tianzuo_QiankunInt_db_close_database(qiankun, db_file_name, db_password)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_db_close_database error:\" + error_code.ToString)\n            Return\n        End If\n\n        Console.WriteLine(\"test done -------------------\")\n\n    End Sub\nEnd Module\n\n</code></pre> go <pre><code>package main\n\n/*\n#include \"tianzuo.QiankunInterface.h\"\n*/\nimport \"C\"\nimport (\n    \"fmt\"\n    \"syscall\"\n    \"unsafe\"\n)\n\nconst (\n    Qiankun_errorcode_success       = 1  //  \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b\n    Qiankun_errorcode_normal        = 2  //  \u200b\u9519\u8bef\u200b\u7684\u200b\u503c\u200b\n    Qiankun_errorcode_differ        = 3  //  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u6570\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The number Of database files fails To be verified)\n    Qiankun_errorcode_no_rights     = 4  //  \u200b\u6570\u636e\u5e93\u200b\u5bc6\u7801\u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (The database password verification failed)\n    Qiankun_errorcode_db_not_exist  = 5  //  \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u4e0d\u200b\u5b58\u5728\u200b (The database file does Not exist)\n    Qiankun_errorcode_exist         = 6  //  \u200b\u6570\u636e\u200b\u5df2\u200b\u5b58\u5728\u200b (Data already exists)\n    Qiankun_errorcode_not_exist     = 7  //  \u200b\u6570\u636e\u200b\u4e0d\u200b\u5b58\u5728\u200b (Data does Not exist)\n    Qiankun_errorcode_out_of_range  = 8  //  \u200b\u8d85\u51fa\u8303\u56f4\u200b (out Of range)\n    Qiankun_errorcode_type          = 9  //  \u200b\u7c7b\u578b\u200b\u4e0d\u7b26\u200b (wrong type)\n    Qiankun_errorcode_param         = 10 //  \u200b\u53c2\u6570\u200b\u9519\u8bef\u200b (parameter Error)\n    Qiankun_errorcode_compress      = 11 //  \u200b\u538b\u7f29\u200b\u9519\u8bef\u200b (compression Error)\n    Qiankun_errorcode_get_array     = 12 //  \u200b\u6570\u7ec4\u200b\u9519\u8bef\u200b (arrary Error)\n    Qiankun_errorcode_out_of_memory = 13 //  \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (memory overflow)\n    Qiankun_errorcode_handle        = 14 //  \u200b\u53e5\u67c4\u200b\u9519\u8bef\u200b (Error handle)\n    Qiankun_errorcode_io            = 15 //  IO\u200b\u9519\u8bef\u200b (io Error)\n)\n\nfunc main() {\n    // \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n    dll := syscall.MustLoadDLL(\"tianzuo.Qiankun.dll\")\n\n    // \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n    tianzuo_QiankunInterface_initialize := dll.MustFindProc(\"tianzuo_QiankunInterface_initialize\")\n    qiankun, _, _ := tianzuo_QiankunInterface_initialize.Call()\n\n    tianzuo_QiankunInt_initialize := dll.MustFindProc(\"tianzuo_QiankunInt_initialize\")\n    error_code, _, _ := tianzuo_QiankunInt_initialize.Call(qiankun)\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_initialize error: \", error_code)\n    }\n\n    // \u200b\u521b\u5efa\u200b\u6570\u636e\u5e93\u200b create database\n    db_file_name := C.CString(\"qiankunDataBase.Ztz\")\n    db_password := C.CString(\"password\")\n    tianzuo_QiankunInt_db_create_database := dll.MustFindProc(\"tianzuo_QiankunInt_db_create_database\")\n    error_code, _, _ = tianzuo_QiankunInt_db_create_database.Call(qiankun, uintptr(unsafe.Pointer(db_file_name)), uintptr(unsafe.Pointer(db_password)), uintptr(unsafe.Pointer(C.CString(\"qiankunDataBase\"))), 1)\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_db_create_database error: \", error_code)\n    }\n\n    // \u200b\u6253\u5f00\u200b\u6570\u636e\u5e93\u200b open database\n    tianzuo_QiankunInt_db_open_database := dll.MustFindProc(\"tianzuo_QiankunInt_db_open_database\")\n    error_code, _, _ = tianzuo_QiankunInt_db_open_database.Call(qiankun, uintptr(unsafe.Pointer(db_file_name)), uintptr(unsafe.Pointer(db_password)))\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_db_open_database error: \", error_code)\n    }\n\n    // \u200b\u5411\u200b\u6570\u636e\u5e93\u200b\u5199\u5165\u200b\u4e00\u4e2a\u200b\u6574\u578b\u200b\u6570\u636e\u200b writes an integer to the database\n    intInt := C.int(12345678)\n    tianzuo_QiankunInt_data_int_combine := dll.MustFindProc(\"tianzuo_QiankunInt_data_int_combine\")\n    error_code, _, _ = tianzuo_QiankunInt_data_int_combine.Call(qiankun, uintptr(unsafe.Pointer(db_file_name)), uintptr(unsafe.Pointer(db_password)), uintptr(unsafe.Pointer(C.CString(\"integer\"))), uintptr(unsafe.Pointer(C.CString(\"\"))), uintptr(intInt))\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_data_int_combine error: \", error_code)\n    }\n\n    // \u200b\u8bfb\u53d6\u200b\u521a\u200b\u5199\u5165\u200b\u7684\u200b\u6570\u636e\u200b read the data just written\n    return_int := C.int(0)\n    tianzuo_QiankunInt_data_int_extract := dll.MustFindProc(\"tianzuo_QiankunInt_data_int_extract\")\n    error_code, _, _ = tianzuo_QiankunInt_data_int_extract.Call(qiankun, uintptr(unsafe.Pointer(db_file_name)), uintptr(unsafe.Pointer(db_password)), uintptr(unsafe.Pointer(C.CString(\"integer\"))), uintptr(unsafe.Pointer(&amp;return_int)))\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_data_int_extract error: \", error_code)\n    }\n\n    fmt.Println(\"get integer data: \", return_int)\n\n    // \u200b\u5173\u95ed\u200b\u6570\u636e\u5e93\u200b close database\n    tianzuo_QiankunInt_db_close_database := dll.MustFindProc(\"tianzuo_QiankunInt_db_close_database\")\n    error_code, _, _ = tianzuo_QiankunInt_db_close_database.Call(qiankun, uintptr(unsafe.Pointer(db_file_name)), uintptr(unsafe.Pointer(db_password)))\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_db_close_database error: \", error_code)\n    }\n\n    fmt.Println(\"test done -------------------\")\n}\n\n</code></pre> rust <pre><code>\nuse std::os::raw::c_char;\nuse std::ffi::{c_int};\nuse std::ffi::CString;\nuse std::ptr::null;\n\n#[link(name = \"tianzuo.Qiankun\")]\nextern {\n    fn tianzuo_QiankunInterface_initialize() -&gt; *mut std::ffi::c_void;\n    fn tianzuo_QiankunInterface_terminate(obj: *mut std::ffi::c_void);\n    fn tianzuo_QiankunInt_initialize(obj: *mut std::ffi::c_void) -&gt; c_int;\n    fn tianzuo_QiankunInt_db_create_database(obj: *mut std::ffi::c_void, db_file_name: *const c_char, db_password: *const c_char, db_name: *const c_char, over_write: c_int) -&gt; c_int;\n    fn tianzuo_QiankunInt_db_open_database(obj: *mut std::ffi::c_void, db_file_name: *const c_char, db_password: *const c_char) -&gt; c_int;\n    fn tianzuo_QiankunInt_db_close_database(obj: *mut std::ffi::c_void, db_file_name: *const c_char, db_password: *const c_char) -&gt; c_int;\n    fn tianzuo_QiankunInt_data_int_combine(obj: *mut std::ffi::c_void, db_file_name: *const c_char, db_password: *const c_char, data_name: *const c_char, remark: *const c_char, data: c_int) -&gt; c_int;\n    fn tianzuo_QiankunInt_data_int_extract(obj: *mut std::ffi::c_void, db_file_name: *const c_char, db_password: *const c_char, data_name: *const c_char, data: *const c_int) -&gt; c_int;\n}\n\nfn main() {\n    unsafe {\n        // \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n        println!(\"initialize the interface\");\n\n        // \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n        let qiankun = tianzuo_QiankunInterface_initialize();\n        let error_code = tianzuo_QiankunInt_initialize(qiankun);\n        if 1 != error_code {\n            println!(\"initialize error: {:?}\", error_code);\n        }\n\n        // \u200b\u521b\u5efa\u200b\u6570\u636e\u5e93\u200b create database\n        let db_file_name = CString::new(String::from(\"qiankunDataBase.Ztz\")).expect(\"Failed to create CString\");\n        let db_password = CString::new(String::from(\"password\")).expect(\"Failed to create CString\");\n        let db_name = CString::new(String::from(\"qiankunDataBase\")).expect(\"Failed to create CString\");\n        let error_code = tianzuo_QiankunInt_db_create_database(qiankun, db_file_name.as_ptr(), db_password.as_ptr(), db_name.as_ptr(), 1);\n        if 1 != error_code {\n            println!(\"db_create_database error: {:?}\", error_code);\n        }\n\n        // \u200b\u6253\u5f00\u200b\u6570\u636e\u5e93\u200b open database\n        let error_code = tianzuo_QiankunInt_db_open_database(qiankun, db_file_name.as_ptr(), db_password.as_ptr());\n        if 1 != error_code {\n            println!(\"db_open_database error: {:?}\", error_code);\n        }\n\n        // \u200b\u5411\u200b\u6570\u636e\u5e93\u200b\u5199\u5165\u200b\u4e00\u4e2a\u200b\u6574\u578b\u200b\u6570\u636e\u200b writes an integer to the database\n        let int = 12345678;\n        let data_name = CString::new(String::from(\"integer\")).expect(\"Failed to create CString\");\n        let error_code = tianzuo_QiankunInt_data_int_combine(qiankun, db_file_name.as_ptr(), db_password.as_ptr(), data_name.as_ptr(), null(), int);\n        if 1 != error_code {\n            println!(\"data_combine error: {:?}\", error_code);\n        }\n\n        // \u200b\u8bfb\u53d6\u200b\u521a\u200b\u5199\u5165\u200b\u7684\u200b\u6570\u636e\u200b read the data just written\n        let mut return_data: c_int = 0;\n        let error_code = tianzuo_QiankunInt_data_int_extract(qiankun, db_file_name.as_ptr(), db_password.as_ptr(), data_name.as_ptr(), &amp;mut return_data);\n        if 1 != error_code {\n            println!(\"data_extract error: {:?}\", error_code);\n        }\n\n        println!(\"get integer data: {:?}\", return_data);\n\n        // \u200b\u5173\u95ed\u200b\u6570\u636e\u5e93\u200b close database\n        let error_code = tianzuo_QiankunInt_db_close_database(qiankun, db_file_name.as_ptr(), db_password.as_ptr());\n        if 1 != error_code {\n            println!(\"db_close_database error: {:?}\", error_code);\n        }\n\n        println!(\"test done -------------------\")\n    }\n}\n\n</code></pre> ruby <pre><code>require 'fiddle'\n\nlib = Fiddle::dlopen('C:/Users/zhengtianzuo/RubymineProjects/tianzuo.QiankunTest/tianzuo.Qiankun.dll')\ntianzuo_QiankunInterface_initialize = Fiddle::Function.new(lib['tianzuo_QiankunInterface_initialize'], [], Fiddle::TYPE_VOIDP)\ntianzuo_QiankunInterface_terminate = Fiddle::Function.new(lib['tianzuo_QiankunInterface_terminate'], [Fiddle::TYPE_VOIDP], Fiddle::TYPE_VOID)\ntianzuo_QiankunInt_initialize = Fiddle::Function.new(lib['tianzuo_QiankunInt_initialize'], [Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\ntianzuo_QiankunInt_db_create_database = Fiddle::Function.new(lib['tianzuo_QiankunInt_db_create_database'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT], Fiddle::TYPE_INT)\ntianzuo_QiankunInt_db_open_database = Fiddle::Function.new(lib['tianzuo_QiankunInt_db_open_database'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\ntianzuo_QiankunInt_data_int_combine = Fiddle::Function.new(lib['tianzuo_QiankunInt_data_int_combine'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT], Fiddle::TYPE_INT)\ntianzuo_QiankunInt_data_int_extract = Fiddle::Function.new(lib['tianzuo_QiankunInt_data_int_extract'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\ntianzuo_QiankunInt_db_close_database = Fiddle::Function.new(lib['tianzuo_QiankunInt_db_close_database'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\n\n# \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\nprint(\"initialize the interface\\n\")\n\n# \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\nqiankun = tianzuo_QiankunInterface_initialize.call()\nerror_code = tianzuo_QiankunInt_initialize.call(qiankun)\nif error_code != 1\n  print(\"initialize error:\", error_code, \"\\n\")\n  return\nend\n\n# \u200b\u521b\u5efa\u200b\u6570\u636e\u5e93\u200b create database\ndb_file_name = \"qiankunDataBase.Ztz\"\ndb_password = \"password\"\nerror_code = tianzuo_QiankunInt_db_create_database.call(qiankun, db_file_name, db_password, \"qiankunDataBase\", 1)\nif error_code != 1\n  print(\"db_create_database error:\", error_code, \"\\n\")\n  return\nend\n\n# \u200b\u6253\u5f00\u200b\u6570\u636e\u5e93\u200b open database\nerror_code = tianzuo_QiankunInt_db_open_database.call(qiankun, db_file_name, db_password)\nif error_code != 1\n  print(\"db_open_database error:\", error_code, \"\\n\")\nreturn\nend\n\n# \u200b\u5411\u200b\u6570\u636e\u5e93\u200b\u5199\u5165\u200b\u4e00\u4e2a\u200b\u6574\u578b\u200b\u6570\u636e\u200b writes an integer to the database\nintInt = 12345678\nerror_code = tianzuo_QiankunInt_data_int_combine.call(qiankun, db_file_name, db_password, \"integer\", \"\", intInt)\nif error_code != 1\n  print(\"data_combine error:\", error_code, \"\\n\")\nreturn\nend\n\n# \u200b\u8bfb\u53d6\u200b\u521a\u200b\u5199\u5165\u200b\u7684\u200b\u6570\u636e\u200b read the data just written\nreturn_data = Fiddle::Pointer.malloc(Fiddle::SIZEOF_INT)\nerror_code = tianzuo_QiankunInt_data_int_extract.call(qiankun, db_file_name, db_password, \"integer\", return_data)\nif error_code != 1\n  print(\"data_extract error:\", error_code, \"\\n\")\nreturn\nend\n\ninteger = return_data[0, Fiddle::SIZEOF_INT].unpack('I')[0]\nprint(\"get integer data: \", integer, \"\\n\")\n\n# \u200b\u5173\u95ed\u200b\u6570\u636e\u5e93\u200b close database\nerror_code = tianzuo_QiankunInt_db_close_database.call(qiankun, db_file_name, db_password)\nif error_code != 1\n  print(\"db_close_database error:\", error_code)\nreturn\nend\n\nprint(\"test done -------------------\")\n\n</code></pre>"},{"location":"en/component/tianzuo.Qiankun/#download","title":"download","text":""},{"location":"en/component/tianzuo.Zhuiri/","title":"tianzuo.Zhuiri","text":""},{"location":"en/component/tianzuo.Zhuiri/#tianzuozhuiri_1","title":"tianzuo.Zhuiri","text":"operating system compiler programming language"},{"location":"en/component/tianzuo.Zhuiri/#introduction","title":"introduction","text":"<p>tianzuo.Zhuiri High performance reliable UDP data transmission P2P communication framework, can be used to establish P2P environment, file transfer, data communication. UDP protocol based Intranet penetration solution, easy to achieve audio and video conference center, live broadcast, remote desktop/document presentation and other functions.</p> <p>legend: With these boots, you can walk a thousand miles a day and eight hundred miles a night, like wings. Thirst to drink, drink in the river Wei, river Wei insufficient, north drink Daze. Before he arrived, Tao died of thirst. Give up his staff, become Deng Lin.</p>"},{"location":"en/component/tianzuo.Zhuiri/#motivation","title":"motivation","text":"<p>Build reliable UDP data transmission, dynamically adjust the packet loss rate and transmission performance according to the policy, which can facilitate the establishment of P2P communication.</p> <p></p>"},{"location":"en/component/tianzuo.Zhuiri/#features","title":"features","text":"<ul> <li>\ud83e\udde9 simple integration</li> <li>\ud83d\udcca The high level protocol realizes the stability and reliability of data communication, and can dynamically modify the parameters to adjust the communication strategy.</li> <li>\ud83e\udea1 Multiple components can be initialized with the same socket for multithreaded data communication.</li> <li>\ud83d\udd22 Solution to packet loss: using self-developed parallel sliding window protocol to ensure stable and reliable data transmission.</li> <li>\ud83e\ude9f Dynamic adjustment: The feasible efficiency of data communication is dynamically evaluated and calculated to obtain the best communication performance in the current environment.</li> <li>\ud83d\udc5c Data group frame: communication packet sending subcontract, receiving group packet, to ensure the integrity of the data order.</li> </ul>"},{"location":"en/component/tianzuo.Zhuiri/#screenshot","title":"screenshot","text":"<p>tianzuo.Zhuiri Test:</p> <p></p>"},{"location":"en/component/tianzuo.Zhuiri/#example","title":"example","text":"cpp <pre><code>#include &lt;iostream&gt;\n#include &lt;thread&gt;\n#include \"tianzuo.ZhuiriInterface.h\" // \u200b\u63a5\u53e3\u200b\u5934\u6587\u4ef6\u200b interface heaher file\n\n#include &lt;winsock.h&gt;\n#pragma comment(lib, \"ws2_32.lib\")\n\n// \u200b\u6570\u636e\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b\nvoid msg_recv_callback(void* context, Zhuiri_data_pkg_pointer data_pkg) {\n    Zhuiri_data_pkg_struct data_new;\n    memcpy(&amp;data_new, data_pkg, sizeof(Zhuiri_data_pkg_struct));\n    int send_size = data_pkg-&gt;m_data.get_send_size();\n    if (send_size &gt; Zhuiri_content_size) {\n        char* send_data = new char[static_cast&lt;unsigned int&gt;(send_size)];\n        memcpy(send_data, data_pkg-&gt;get_send_data(), static_cast&lt;unsigned int&gt;(send_size));\n        data_new.set_send_data(send_data);\n    } else {\n        data_new.set_send_data(data_new.m_data.m_data);\n    }\n    tianzuo_DataQueue* const dataQueue = reinterpret_cast&lt;tianzuo_DataQueue*&gt;(context);\n    dataQueue-&gt;push_back(&amp;data_new);\n}\n\n// \u200b\u63a5\u6536\u200b\u7ebf\u7a0b\u200b\nvoid recv_thread(tianzuo_DataQueue* data_queue_recv) {\n    while (1) {\n        Zhuiri_data_pkg_struct recv_msg;\n        if (data_queue_recv-&gt;pop_up(&amp;recv_msg) != Zhuiri_queue_error_code_success) {\n            //std::cout &lt;&lt; \"pop_up no data\" &lt;&lt; std::endl;\n            std::this_thread::sleep_for(std::chrono::milliseconds(200));\n            continue;\n        }\n\n        std::cout &lt;&lt; \"recv data: \" &lt;&lt; recv_msg.m_data.m_data &lt;&lt; std::endl;\n        if (strcmp(recv_msg.m_data.m_data, \"send data 99\") == 0) {\n            std::cout &lt;&lt; \"recv done\" &lt;&lt; std::endl;\n            return;\n        }\n    }\n}\n\nint main() {\n\n    // \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n    std::unique_ptr&lt;tianzuo_ZhuiriInterface&gt; zhuiri_interface(new tianzuo_ZhuiriInterface());\n\n    // \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n    tianzuo_ZhuiriInt* zhuiri = zhuiri_interface-&gt;initialize();\n\n    // \u200b\u521d\u59cb\u5316\u200b\u6570\u636e\u200b\u961f\u5217\u200b\u63a5\u53e3\u200b initialize the data queue interface\n    std::unique_ptr&lt;tianzuo_DataQueueInterface&gt; data_queue_interface(new tianzuo_DataQueueInterface());\n\n    // \u200b\u521b\u5efa\u200b\u6570\u636e\u200b\u961f\u5217\u200b\u5b9e\u4f8b\u200b create an data queue instance\n    tianzuo_DataQueue* data_queue_recv = data_queue_interface-&gt;initialize();\n\n    // \u200b\u521d\u59cb\u5316\u200b\u5b9e\u4f8b\u200b initialize the instance\n    int port = 6666;\n    int error_code = zhuiri-&gt;initialize(\n        nullptr, port, reinterpret_cast&lt;void*&gt;(msg_recv_callback),\n        data_queue_recv, 6000, false);\n    if (error_code != Zhuiri_error_code_success) {\n        std::cout &lt;&lt; \"initialize error: \" &lt;&lt; error_code;\n\n        // \u200b\u91ca\u653e\u200b\u63a5\u53e3\u200b terminate the interface\n        if (data_queue_interface != nullptr &amp;&amp; data_queue_recv != nullptr) {\n            data_queue_interface-&gt;terminate(&amp;data_queue_recv);\n        }\n        if (zhuiri_interface != nullptr &amp;&amp; zhuiri != nullptr) {\n            zhuiri_interface-&gt;terminate(&amp;zhuiri);\n        }\n        return -1;\n    }\n\n    // \u200b\u8bbe\u7f6e\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b set default parameters\n    Zhuiri_param_struct param(0, 5168, 1024, 2280, 3, 5, 600);\n    zhuiri-&gt;set_param(&amp;param);\n\n    // \u200b\u542f\u52a8\u200b\u63a5\u6536\u200b\u7ebf\u7a0b\u200b start receiving thread\n    std::thread recv_th(recv_thread, data_queue_recv);\n\n    // \u200b\u5f00\u59cb\u200b\u53d1\u9001\u6570\u636e\u200b start sending data\n    int data_size = 1024;\n    char data[1024];\n    memset(data, 0, data_size);\n    int ip = ntohl(inet_addr(\"127.0.0.1\"));\n    for (size_t i = 0; i &lt; 100; i++) {\n        //std::cout &lt;&lt; \"start send index: \" &lt;&lt; i &lt;&lt; std::endl;\n        sprintf_s(data, data_size, \"send data %d\", i);\n        int data_len = strlen(data);\n        Zhuiri_send_param_struct send_param(0, ip, port, Zhuiri_data_sign_reliable, 7788, data, data_len);\n        error_code = zhuiri-&gt;send(&amp;send_param);\n        if (error_code != Zhuiri_error_code_success) {\n            std::cout &lt;&lt; \"send error: \" &lt;&lt; error_code;\n\n            // \u200b\u91ca\u653e\u200b\u63a5\u53e3\u200b terminate the interface\n            if (data_queue_interface != nullptr &amp;&amp; data_queue_recv != nullptr) {\n                data_queue_interface-&gt;terminate(&amp;data_queue_recv);\n            }\n            if (zhuiri_interface != nullptr &amp;&amp; zhuiri != nullptr) {\n                zhuiri_interface-&gt;terminate(&amp;zhuiri);\n            }\n            return -1;\n        }\n        //std::this_thread::sleep_for(std::chrono::milliseconds(10));\n    }\n    std::cout &lt;&lt; \"send done\" &lt;&lt; std::endl;\n    recv_th.join();\n\n    // \u200b\u91ca\u653e\u200b\u63a5\u53e3\u200b terminate the interface\n    if (data_queue_interface != nullptr &amp;&amp; data_queue_recv != nullptr) {\n        data_queue_interface-&gt;terminate(&amp;data_queue_recv);\n    }\n    if (zhuiri_interface != nullptr &amp;&amp; zhuiri != nullptr) {\n        zhuiri_interface-&gt;terminate(&amp;zhuiri);\n    }\n\n    return 0;\n}\n</code></pre> python <pre><code>from ctypes import *\nfrom enum import Enum\nimport ctypes\nimport ipaddress\n\ntianzuo_ZhuiriLib = cdll.LoadLibrary('./tianzuo.Zhuiri.dll')\n\n\nclass Zhuiri_error_code(Enum):\n    Zhuiri_error_code_success       = 0x00000001                                     # \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b (success)\n    Zhuiri_error_code_no_rights     = 0x00000002                                     # \u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (no rights)\n    Zhuiri_error_code_socket        = 0x0000000D                                     # \u200b\u5957\u200b\u63a5\u5b57\u200b\u9519\u8bef\u200b (socket error)\n    Zhuiri_error_code_thread_error  = 0x00000021                                     # \u200b\u7ebf\u7a0b\u200b\u5931\u8d25\u200b (thread error)\n    Zhuiri_error_code_handle        = 0x00000022                                     # \u200b\u521b\u5efa\u200b\u53e5\u67c4\u200b\u5931\u8d25\u200b (handle error)\n    Zhuiri_error_code_out_of_cache  = 0x00000023                                     # \u200b\u8d85\u51fa\u200b\u7f13\u51b2\u200b\u6700\u5927\u503c\u200b (out f cache)\n    Zhuiri_error_code_out_of_memory = 0x00000024                                     # \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (out of memory)\n    Zhuiri_error_code_time_out      = 0x00000025                                     # \u200b\u64cd\u4f5c\u200b\u8d85\u65f6\u200b (time out)\n    Zhuiri_error_code_user_reject   = 0x00000098                                     # \u200b\u5bf9\u65b9\u200b\u51b3\u7edd\u200b (user reject)\n    Zhuiri_error_code_user_exit     = 0x00000099                                     # \u200b\u81ea\u884c\u200b\u9000\u51fa\u200b (user exit)\n\n\nclass Zhuiri_queue_error_code(Enum):\n    Zhuiri_queue_error_code_success       = 0x00000001                               # \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b (success)\n    Zhuiri_queue_error_code_invalid_value = 0x00000002                               # \u200b\u65e0\u6548\u200b\u7684\u200b\u503c\u200b (invalid value)\n    Zhuiri_queue_error_code_out_of_cache  = 0x00000003                               # \u200b\u8d85\u51fa\u200b\u7f13\u51b2\u200b (out f cache)\n    Zhuiri_queue_error_code_out_of_memory = 0x00000004                               # \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (out of memory)\n    Zhuiri_queue_error_code_no_data       = 0x00000005                               # \u200b\u65e0\u200b\u6570\u636e\u200b (no data)\n\n\nclass Zhuiri_data_sign(Enum):\n    Zhuiri_data_sign_none       = 0x00000000                                         # \u200b\u65e0\u200b\u6807\u8bc6\u200b  (no sign)\n    Zhuiri_data_sign_reliable   = 0x00000001                                         # \u200b\u53ef\u9760\u200b    (reliable)\n    Zhuiri_data_sign_processing = 0x00000002                                         # \u200b\u5904\u7406\u200b\u4e2d\u200b  (processing)\n    Zhuiri_data_sign_response   = 0x00000003                                         # \u200b\u56de\u5e94\u200b\u6d88\u606f\u200b (response)\n    Zhuiri_data_sign_heart      = 0x00000004                                         # \u200b\u5fc3\u8df3\u200b\u5305\u200b  (heart)\n\n\nclass tianzuo_ZhuiriInt:\n    def __init__(self):\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInterface_initialize.restype = c_void_p\n        self.obj = tianzuo_ZhuiriLib.tianzuo_ZhuiriInterface_initialize()\n\n    def __del__(self):\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInterface_terminate.argtypes = [c_void_p]\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInterface_terminate(self.obj)\n\n    def initialize(self, ip_addr, port, callback, context, heart_check_time, log_trace, iocp):\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_initialize.restype = c_int\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_initialize.argtypes = [c_void_p, c_char_p, ctypes.c_int, c_void_p, c_void_p, ctypes.c_int, ctypes.c_int, c_void_p]\n        return tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_initialize(self.obj, ip_addr, port, callback, context, heart_check_time, log_trace, iocp)\n\n    def set_param(self, sender_index, init_server_port, msg_init_size, recv_ex_data_max, retry_max, retry_all_number, init_retry_time):\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_set_param.restype = c_int\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_set_param.argtypes = [c_void_p, c_int, c_int, c_int, c_int, c_int, c_int, c_int]\n        return tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_set_param(self.obj, sender_index, init_server_port, msg_init_size, recv_ex_data_max, retry_max, retry_all_number, init_retry_time)\n\n    def send(self, sender_index, ip, port, sign, function, send_data, send_size):\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_send.restype = c_int\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_send.argtypes = [c_void_p, c_int, c_int, c_int, c_int, c_int, c_char_p, c_int]\n        return tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_send(self.obj, sender_index, ip, port, sign, function, send_data, send_size)\n\n\nclass tianzuo_DataQueueInt:\n    def __init__(self):\n        tianzuo_ZhuiriLib.tianzuo_DataQueueInterface_initialize.restype = c_void_p\n        self.obj = tianzuo_ZhuiriLib.tianzuo_DataQueueInterface_initialize()\n\n    def __del__(self):\n        tianzuo_ZhuiriLib.tianzuo_DataQueueInterface_terminate.argtypes = [c_void_p]\n        tianzuo_ZhuiriLib.tianzuo_DataQueueInterface_terminate(self.obj)\n\n    def initialize(self):\n        tianzuo_ZhuiriLib.tianzuo_DataQueueInt_initialize.restype = c_void_p\n        tianzuo_ZhuiriLib.tianzuo_DataQueueInt_initialize.argtypes = [c_void_p]\n        return tianzuo_ZhuiriLib.tianzuo_DataQueueInt_initialize(self.obj)\n\n\ncallback_type = ctypes.CFUNCTYPE(c_void_p, c_void_p, c_void_p)\n\n\nclass Zhuiri_data_struct(ctypes.Structure):\n    _fields_ = [(\"m_ip_adrs\", ctypes.c_int),\n                (\"m_port\", ctypes.c_int),\n                (\"m_function\", ctypes.c_int),\n                (\"m_sign\", ctypes.c_int),\n                (\"m_index\", ctypes.c_int),\n                (\"m_send_time\", ctypes.c_int),\n                (\"m_send_size\", ctypes.c_int),\n                (\"m_data\", ctypes.c_char * 492)]\n\n\nclass Zhuiri_data_pkg_struct(ctypes.Structure):\n    _fields_ = [(\"m_data\", Zhuiri_data_struct),\n                (\"m_send_data\", ctypes.c_char_p),\n                (\"m_Zhuiri\", ctypes.c_void_p),\n                (\"m_user_data\", ctypes.c_void_p)]\n\n\ndef msg_recv_callback(context, pData):\n    data = ctypes.cast(pData, ctypes.POINTER(Zhuiri_data_pkg_struct)).contents\n    print(\"recv data:\", data.m_data.m_data)\n\n\ndef main():\n    # \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n    print(\"initialize the interface\")\n\n    # \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n    data_queue_recv = tianzuo_DataQueueInt()\n    pdata_queue_recv = ctypes.pointer(ctypes.py_object(data_queue_recv))\n\n    pmsg_recv_callback = callback_type(msg_recv_callback)\n\n    Zhuiri = tianzuo_ZhuiriInt()\n    port = 6666\n    error_code = Zhuiri.initialize(None, port, pmsg_recv_callback, pdata_queue_recv, 6000, False, None)\n    if error_code != Zhuiri_error_code.Zhuiri_error_code_success.value:\n        print(\"initialize error:\", error_code)\n        return\n\n    # \u200b\u8bbe\u7f6e\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b set default parameters\n    Zhuiri.set_param(0, 5168, 1024, 2280, 3, 5, 600)\n\n    # \u200b\u5f00\u59cb\u200b\u53d1\u9001\u6570\u636e\u200b start sending data\n    ip = int(ipaddress.IPv4Address(\"127.0.0.1\"))\n    for i in range(100):\n        data = \"send data {}\".format(i)\n        data_len = len(data)\n        bytes_string = data.encode('utf-8')\n        error_code = Zhuiri.send(0, ip, port, Zhuiri_data_sign.Zhuiri_data_sign_reliable.value, 7788, bytes_string, data_len)\n        if error_code != Zhuiri_error_code.Zhuiri_error_code_success.value:\n            print(\"send error:\", error_code)\n            return\n\n    print(\"test done\")\n\n\nif __name__ == '__main__':\n    main()\n\n</code></pre> java <pre><code>package cn.camelsoft;\n\nimport com.sun.jna.Library;\nimport com.sun.jna.Native;\nimport com.sun.jna.Pointer;\nimport com.sun.jna.Callback;\nimport com.sun.jna.CallbackReference;\nimport com.sun.jna.ptr.IntByReference;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\n\nenum Zhuiri_error_code {\n    Zhuiri_error_code_success       (0x00000001),                                     ///&lt; \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b (success)\n    Zhuiri_error_code_no_rights     (0x00000002),                                     ///&lt; \u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (no rights)\n    Zhuiri_error_code_socket        (0x0000000D),                                     ///&lt; \u200b\u5957\u200b\u63a5\u5b57\u200b\u9519\u8bef\u200b (socket error)\n    Zhuiri_error_code_thread_error  (0x00000021),                                     ///&lt; \u200b\u7ebf\u7a0b\u200b\u5931\u8d25\u200b (thread error)\n    Zhuiri_error_code_handle        (0x00000022),                                     ///&lt; \u200b\u521b\u5efa\u200b\u53e5\u67c4\u200b\u5931\u8d25\u200b (handle error)\n    Zhuiri_error_code_out_of_cache  (0x00000023),                                     ///&lt; \u200b\u8d85\u51fa\u200b\u7f13\u51b2\u200b\u6700\u5927\u503c\u200b (out f cache)\n    Zhuiri_error_code_out_of_memory (0x00000024),                                     ///&lt; \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (out of memory)\n    Zhuiri_error_code_time_out      (0x00000025),                                     ///&lt; \u200b\u64cd\u4f5c\u200b\u8d85\u65f6\u200b (time out)\n    Zhuiri_error_code_user_reject   (0x00000098),                                     ///&lt; \u200b\u5bf9\u65b9\u200b\u51b3\u7edd\u200b (user reject)\n    Zhuiri_error_code_user_exit     (0x00000099);                                     ///&lt; \u200b\u81ea\u884c\u200b\u9000\u51fa\u200b (user exit)\n    private int value;\n    Zhuiri_error_code(int value) {\n        this.value = value;\n    }\n    public int getValue() {\n        return value;\n    }\n};\n\nenum Zhuiri_data_sign {\n    Zhuiri_data_sign_none       (0x00000000),                                         ///&lt; \u200b\u65e0\u200b\u6807\u8bc6\u200b  (no sign)\n    Zhuiri_data_sign_reliable   (0x00000001),                                         ///&lt; \u200b\u53ef\u9760\u200b    (reliable)\n    Zhuiri_data_sign_processing (0x00000002),                                         ///&lt; \u200b\u5904\u7406\u200b\u4e2d\u200b  (processing)\n    Zhuiri_data_sign_response   (0x00000003),                                         ///&lt; \u200b\u56de\u5e94\u200b\u6d88\u606f\u200b (response)\n    Zhuiri_data_sign_heart      (0x00000004);                                         ///&lt; \u200b\u5fc3\u8df3\u200b\u5305\u200b  (heart)\n    private int value;\n    Zhuiri_data_sign(int value) {\n        this.value = value;\n    }\n    public int getValue() {\n        return value;\n    }\n};\n\ninterface tianzuo_ZhuiriLib extends Library {\n    tianzuo_ZhuiriLib instance = (tianzuo_ZhuiriLib) Native.load(\"./tianzuo.Zhuiri.dll\", tianzuo_ZhuiriLib.class);\n    Pointer tianzuo_ZhuiriInterface_initialize();\n    void tianzuo_ZhuiriInterface_terminate(Pointer zhuiri);\n    int tianzuo_ZhuiriInt_initialize(Pointer zhuiri, String ip_addr, int port, Pointer callback, Pointer context, int heart_check_time, Boolean log_trace, Pointer iocp);\n    int tianzuo_ZhuiriInt_set_param(Pointer zhuiri, int sender_index, int init_server_port, int msg_init_size, int recv_ex_data_max, int retry_max, int retry_all_number, int init_retry_time);\n    int tianzuo_ZhuiriInt_send(Pointer zhuiri, int sender_index, int ip, int port, int sign, int function, String send_data, int send_size);\n}\n\ninterface tianzuo_DataQueueLib extends Library {\n    tianzuo_DataQueueLib instance = (tianzuo_DataQueueLib) Native.load(\"./tianzuo.Zhuiri.dll\", tianzuo_DataQueueLib.class);\n    Pointer tianzuo_DataQueueInterface_initialize();\n    void tianzuo_DataQueueInterface_terminate(Pointer DataQueue);\n    int tianzuo_DataQueueInt_initialize(Pointer DataQueue);\n}\n\ninterface MyCallback extends Callback {\n    void callbackFunction(Pointer context, Pointer pData);\n}\nclass MyCallbackImpl implements MyCallback {\n\n    @Override\n    public void callbackFunction(Pointer context, Pointer pData) {\n        Zhuiri_data_pkg_struct data_pkg = new Zhuiri_data_pkg_struct(pData);\n        String str = new String(data_pkg.m_data.m_data).trim();\n        System.out.printf(\"recv data: %s\\n\", str);\n    }\n}\n\npublic class Main {\n    public static int ipToInt(String ipAddress) {\n        try {\n            InetAddress inetAddress = InetAddress.getByName(ipAddress);\n            byte[] bytes = inetAddress.getAddress();\n\n            int result = 0;\n            for (byte b : bytes) {\n                result = result &lt;&lt; 8 | (b &amp; 0xFF);\n            }\n\n            return result;\n        } catch (UnknownHostException e) {\n            System.err.println(\"Invalid IP address: \" + ipAddress);\n            return 0;\n        }\n    }\n\n    public static void main(String[] args) {\n\n        System.setProperty(\"jna.encoding\",\"UTF-8\");\n\n        // \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n        System.out.printf(\"initialize the interface\\n\");\n\n        // \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n        Pointer data_queue_recv = tianzuo_DataQueueLib.instance.tianzuo_DataQueueInterface_initialize();\n\n        MyCallback callback = new MyCallbackImpl();\n        Pointer pcallback = CallbackReference.getFunctionPointer(callback);\n\n        Pointer zhuiri = tianzuo_ZhuiriLib.instance.tianzuo_ZhuiriInterface_initialize();\n        int port = 6666;\n        int error_code = tianzuo_ZhuiriLib.instance.tianzuo_ZhuiriInt_initialize(zhuiri, null, port, pcallback, data_queue_recv, 6000, false, null);\n        if (error_code != Zhuiri_error_code.Zhuiri_error_code_success.getValue()) {\n            System.out.printf(\"tianzuo_ZhuiriInt_initialize error: %d\\n\", error_code);\n            return;\n        }\n\n        // \u200b\u8bbe\u7f6e\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b set default parameters\n        tianzuo_ZhuiriLib.instance.tianzuo_ZhuiriInt_set_param(zhuiri, 0, 5168, 1024, 2280, 3, 5, 600);\n\n        // \u200b\u5f00\u59cb\u200b\u53d1\u9001\u6570\u636e\u200b start sending data\n        String ipAddress = \"127.0.0.1\";\n        int ip = ipToInt(ipAddress);\n        int sport = 6666;\n        for (int i = 0; i &lt; 100; i++) {\n            String data = String.format(\"send data %d \", i);\n            int data_len = data.length();\n            int error_code2 = tianzuo_ZhuiriLib.instance.tianzuo_ZhuiriInt_send(zhuiri, 0, ip, sport, Zhuiri_data_sign.Zhuiri_data_sign_reliable.getValue(), 7788, data, data_len);\n            if (error_code2 != Zhuiri_error_code.Zhuiri_error_code_success.getValue()) {\n                System.out.printf(\"tianzuo_ZhuiriInt_send error: %d\\n\", error_code2);\n                return;\n            }\n        }\n\n        System.out.printf(\"test done\\n\");\n    }\n}\n</code></pre> csharp <pre><code>\n\nusing System.Collections;\nusing System.Net;\nusing System.Runtime.InteropServices;\nusing System.Text;\n\npublic enum Zhuiri_error_code\n{\n    Zhuiri_error_code_success       = 0x00000001,                                     ///&lt; \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b (success)\n    Zhuiri_error_code_no_rights     = 0x00000002,                                     ///&lt; \u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (no rights)\n    Zhuiri_error_code_socket        = 0x0000000D,                                     ///&lt; \u200b\u5957\u200b\u63a5\u5b57\u200b\u9519\u8bef\u200b (socket error)\n    Zhuiri_error_code_thread_error  = 0x00000021,                                     ///&lt; \u200b\u7ebf\u7a0b\u200b\u5931\u8d25\u200b (thread error)\n    Zhuiri_error_code_handle        = 0x00000022,                                     ///&lt; \u200b\u521b\u5efa\u200b\u53e5\u67c4\u200b\u5931\u8d25\u200b (handle error)\n    Zhuiri_error_code_out_of_cache  = 0x00000023,                                     ///&lt; \u200b\u8d85\u51fa\u200b\u7f13\u51b2\u200b\u6700\u5927\u503c\u200b (out f cache)\n    Zhuiri_error_code_out_of_memory = 0x00000024,                                     ///&lt; \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (out of memory)\n    Zhuiri_error_code_time_out      = 0x00000025,                                     ///&lt; \u200b\u64cd\u4f5c\u200b\u8d85\u65f6\u200b (time out)\n    Zhuiri_error_code_user_reject   = 0x00000098,                                     ///&lt; \u200b\u5bf9\u65b9\u200b\u51b3\u7edd\u200b (user reject)\n    Zhuiri_error_code_user_exit     = 0x00000099,                                     ///&lt; \u200b\u81ea\u884c\u200b\u9000\u51fa\u200b (user exit)\n}\n\npublic enum Zhuiri_data_sign\n{\n    Zhuiri_data_sign_none       = 0x00000000,                                         ///&lt; \u200b\u65e0\u200b\u6807\u8bc6\u200b  (no sign)\n    Zhuiri_data_sign_reliable   = 0x00000001,                                         ///&lt; \u200b\u53ef\u9760\u200b    (reliable)\n    Zhuiri_data_sign_processing = 0x00000002,                                         ///&lt; \u200b\u5904\u7406\u200b\u4e2d\u200b  (processing)\n    Zhuiri_data_sign_response   = 0x00000003,                                         ///&lt; \u200b\u56de\u5e94\u200b\u6d88\u606f\u200b (response)\n    Zhuiri_data_sign_heart      = 0x00000004,                                         ///&lt; \u200b\u5fc3\u8df3\u200b\u5305\u200b  (heart)\n};\n\npublic struct Zhuiri_data_struct\n{\n    public Zhuiri_data_struct()\n    {\n    }\n    public int m_ip_adrs;\n    public int m_port;\n    public int m_function;\n    public int m_sign;\n    public int m_index;\n    public int m_send_time;\n    public int m_send_size;\n    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 492)]\n    public byte[] m_data;\n}\n\npublic struct Zhuiri_data_pkg_struct\n{\n    public Zhuiri_data_pkg_struct()\n    {\n    }\n    public Zhuiri_data_struct m_data;\n    public IntPtr m_send_data;\n    public IntPtr m_Zhuiri;\n    public IntPtr m_user_data;\n}\n\npublic delegate void CallbackDelegate(IntPtr context, IntPtr pData);\n\nclass Program\n{\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern IntPtr tianzuo_ZhuiriInterface_initialize();\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern void tianzuo_ZhuiriInterface_terminate(IntPtr Zhuiri);\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern int tianzuo_ZhuiriInt_initialize(IntPtr Zhuiri, string ip_addr, int port, IntPtr callback, IntPtr context, int heart_check_time, bool log_trace, IntPtr iocp);\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern IntPtr tianzuo_DataQueueInterface_initialize();\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern int tianzuo_ZhuiriInt_set_param(IntPtr Zhuiri, int sender_index, int init_server_port, int msg_init_size, int recv_ex_data_max, int retry_max, int retry_all_number, int init_retry_time);\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern int tianzuo_ZhuiriInt_send(IntPtr Zhuiri, int sender_index, int ip, int port, int sign, int function, string send_data, int send_size);\n\n    static void MyCallback(IntPtr context, IntPtr pData)\n    {\n        Zhuiri_data_pkg_struct data = Marshal.PtrToStructure&lt;Zhuiri_data_pkg_struct&gt;(pData);\n        string str = Encoding.ASCII.GetString(data.m_data.m_data);\n        Console.WriteLine(\"recv data:\" + str);\n    }\n\n    static void Main(string[] args)\n    {\n        // \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n        Console.WriteLine(\"initialize the interface\\n\");\n\n        // \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n        IntPtr data_queue_recv = tianzuo_DataQueueInterface_initialize();\n\n        CallbackDelegate callback = new CallbackDelegate(MyCallback);\n        IntPtr callbackPtr = Marshal.GetFunctionPointerForDelegate(callback);\n\n        IntPtr zhuiri = tianzuo_ZhuiriInterface_initialize();\n        int port = 6666;\n        int error_code = tianzuo_ZhuiriInt_initialize(zhuiri, null, port, callbackPtr, data_queue_recv, 6000, false, 0);\n        if (error_code != ((int)Zhuiri_error_code.Zhuiri_error_code_success))\n        {\n            Console.WriteLine(\"tianzuo_ZhuiriInt_initialize error:\" + error_code);\n            return;\n        }\n\n        // \u200b\u8bbe\u7f6e\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b set default parameters\n        tianzuo_ZhuiriInt_set_param(zhuiri, 0, 5168, 1024, 2280, 3, 5, 600);\n\n        // \u200b\u5f00\u59cb\u200b\u53d1\u9001\u6570\u636e\u200b start sending data\n        string ipAddressString = \"127.0.1.1\";\n        IPAddress ipAddress = IPAddress.Parse(ipAddressString);\n        byte[] bytes = ipAddress.GetAddressBytes();\n        if (BitConverter.IsLittleEndian)\n        {\n            Array.Reverse(bytes);\n        }\n        int ip = BitConverter.ToInt32(bytes, 0);\n        int sport = 6666;\n        for (int i = 0; i &lt; 100; i++)\n        {\n            string data = String.Format(\"send data {0}\", i);\n            int data_len = data.Length;\n            error_code = tianzuo_ZhuiriInt_send(zhuiri, 0, ip, sport, (int)Zhuiri_data_sign.Zhuiri_data_sign_reliable, 7788, data, data_len);\n            if (error_code != ((int)Zhuiri_error_code.Zhuiri_error_code_success))\n            {\n                Console.WriteLine(\"tianzuo_ZhuiriInt_send error:\" + error_code);\n                return;\n            }\n        }\n\n        Console.WriteLine(\"test done\");\n    }\n}\n\n</code></pre> javascript <pre><code>\n\nZhuiri_error_code_success       = 0x00000001;                                     ///&lt; \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b (success)\nZhuiri_error_code_no_rights     = 0x00000002;                                     ///&lt; \u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (no rights)\nZhuiri_error_code_socket        = 0x0000000D;                                     ///&lt; \u200b\u5957\u200b\u63a5\u5b57\u200b\u9519\u8bef\u200b (socket error)\nZhuiri_error_code_thread_error  = 0x00000021;                                     ///&lt; \u200b\u7ebf\u7a0b\u200b\u5931\u8d25\u200b (thread error)\nZhuiri_error_code_handle        = 0x00000022;                                     ///&lt; \u200b\u521b\u5efa\u200b\u53e5\u67c4\u200b\u5931\u8d25\u200b (handle error)\nZhuiri_error_code_out_of_cache  = 0x00000023;                                     ///&lt; \u200b\u8d85\u51fa\u200b\u7f13\u51b2\u200b\u6700\u5927\u503c\u200b (out f cache)\nZhuiri_error_code_out_of_memory = 0x00000024;                                     ///&lt; \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (out of memory)\nZhuiri_error_code_time_out      = 0x00000025;                                     ///&lt; \u200b\u64cd\u4f5c\u200b\u8d85\u65f6\u200b (time out)\nZhuiri_error_code_user_reject   = 0x00000098;                                     ///&lt; \u200b\u5bf9\u65b9\u200b\u51b3\u7edd\u200b (user reject)\nZhuiri_error_code_user_exit     = 0x00000099;                                     ///&lt; \u200b\u81ea\u884c\u200b\u9000\u51fa\u200b (user exit)\n\nZhuiri_data_sign_none           = 0x00000000;                                     ///&lt; \u200b\u65e0\u200b\u6807\u8bc6\u200b  (no sign)\nZhuiri_data_sign_reliable       = 0x00000001;                                     ///&lt; \u200b\u53ef\u9760\u200b    (reliable)\nZhuiri_data_sign_processing     = 0x00000002;                                     ///&lt; \u200b\u5904\u7406\u200b\u4e2d\u200b  (processing)\nZhuiri_data_sign_response       = 0x00000003;                                     ///&lt; \u200b\u56de\u5e94\u200b\u6d88\u606f\u200b (response)\nZhuiri_data_sign_heart          = 0x00000004;                                     ///&lt; \u200b\u5fc3\u8df3\u200b\u5305\u200b  (heart)\n\nlet ffi = require('ffi-napi')\nconst ref = require('ref-napi');\n\nlet tianzuo_ZhuiriLib = ffi.Library(\"tianzuo.Zhuiri.dll\", {\n    'tianzuo_ZhuiriInterface_initialize': ['pointer', []],\n    'tianzuo_ZhuiriInterface_terminate':['void',['pointer']],\n    'tianzuo_ZhuiriInt_initialize':['int',['pointer','pointer','int','pointer','pointer','int', 'bool','pointer']],\n    'tianzuo_ZhuiriInt_set_param':['int',['pointer','int','int','int','int','int','int','int']],\n    'tianzuo_ZhuiriInt_send':['int',['pointer','int','int','int','int','int','string','int']],\n    'tianzuo_DataQueueInterface_initialize': ['pointer', []],\n    'tianzuo_DataQueueInterface_terminate':['void',['pointer']],\n})\n\nfunction ipToInt(ip) {\n    let parts = ip.split('.').map(Number);\n    return (parts[0] &lt;&lt; 24) + (parts[1] &lt;&lt; 16) + (parts[2] &lt;&lt; 8) + parts[3];\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve =&gt; setTimeout(resolve, ms));\n}\n\nasync function main() {\n\n    // \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n    console.log(\"initialize the interface\\n\");\n\n    // \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n    let data_queue_recv = tianzuo_ZhuiriLib.tianzuo_DataQueueInterface_initialize();\n\n    const callback = ffi.Callback('void', ['pointer', 'pointer'], function(context, pData) {\n        const data = pData.readCString(4*7);\n        console.log(`recv data: ${data}`);\n    });\n\n    let port = 5555;\n    let zhuiri = tianzuo_ZhuiriLib.tianzuo_ZhuiriInterface_initialize();\n    let error_code = tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_initialize(zhuiri, null, port, callback, data_queue_recv, 6000, false, null);\n    if (error_code !== Zhuiri_error_code_success) {\n        console.log(\"tianzuo_ZhuiriInt_initialize error: %d\\n\", error_code);\n        return;\n    }\n\n    // \u200b\u8bbe\u7f6e\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b set default parameters\n    tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_set_param(zhuiri, 0, 5168, 1024, 2280, 3, 5, 600);\n\n    // \u200b\u5f00\u59cb\u200b\u53d1\u9001\u6570\u636e\u200b start sending data\n    const ipString = '127.0.0.1';\n    const ip = ipToInt(ipString);\n    let sport = 6666;\n\n    for (let i = 0; i &lt; 10; i++) {\n        const data = `send data ${i}`;\n        const data_len = data.length;\n        error_code = tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_send(zhuiri, 0, ip, sport, Zhuiri_data_sign_reliable, 7788, data, data_len);\n        if (error_code !== Zhuiri_error_code_success) {\n            console.log(\"tianzuo_ZhuiriInt_send error: %d\\n\", error_code);\n            return;\n        }\n    }\n    await sleep(20000);\n}\n\nmain();\n\nconsole.log(\"test done\\n\");\n\n\n</code></pre> php <pre><code>&lt;?php\n\n// \u200b\u68c0\u67e5\u200b\u662f\u5426\u200b\u52a0\u8f7d\u200b\u4e86\u200b FFI \u200b\u6269\u5c55\u200b\nif (extension_loaded('ffi')) {\n    echo(\"\u200b\u5df2\u200b\u542f\u7528\u200b FFI \u200b\u6269\u5c55\u200b\\n\");\n} else {\n    die(\"\u200b\u672a\u200b\u542f\u52a8\u200b FFI \u200b\u6269\u5c55\u200b\\n\");\n}\n\nenum Zhuiri_error_code\n{\nconst Zhuiri_error_code_success       = 0x00000001;                                     ///&lt; \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b (success)\nconst Zhuiri_error_code_no_rights     = 0x00000002;                                     ///&lt; \u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (no rights)\nconst Zhuiri_error_code_socket        = 0x0000000D;                                     ///&lt; \u200b\u5957\u200b\u63a5\u5b57\u200b\u9519\u8bef\u200b (socket error)\nconst Zhuiri_error_code_thread_error  = 0x00000021;                                     ///&lt; \u200b\u7ebf\u7a0b\u200b\u5931\u8d25\u200b (thread error)\nconst Zhuiri_error_code_handle        = 0x00000022;                                     ///&lt; \u200b\u521b\u5efa\u200b\u53e5\u67c4\u200b\u5931\u8d25\u200b (handle error)\nconst Zhuiri_error_code_out_of_cache  = 0x00000023;                                     ///&lt; \u200b\u8d85\u51fa\u200b\u7f13\u51b2\u200b\u6700\u5927\u503c\u200b (out f cache)\nconst Zhuiri_error_code_out_of_memory = 0x00000024;                                     ///&lt; \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (out of memory)\nconst Zhuiri_error_code_time_out      = 0x00000025;                                     ///&lt; \u200b\u64cd\u4f5c\u200b\u8d85\u65f6\u200b (time out)\nconst Zhuiri_error_code_user_reject   = 0x00000098;                                     ///&lt; \u200b\u5bf9\u65b9\u200b\u51b3\u7edd\u200b (user reject)\nconst Zhuiri_error_code_user_exit     = 0x00000099;                                     ///&lt; \u200b\u81ea\u884c\u200b\u9000\u51fa\u200b (user exit)\n};\n\nenum Zhuiri_data_sign\n{\nconst Zhuiri_data_sign_none           = 0x00000000;                                     ///&lt; \u200b\u65e0\u200b\u6807\u8bc6\u200b  (no sign)\nconst Zhuiri_data_sign_reliable       = 0x00000001;                                     ///&lt; \u200b\u53ef\u9760\u200b    (reliable)\nconst Zhuiri_data_sign_processing     = 0x00000002;                                     ///&lt; \u200b\u5904\u7406\u200b\u4e2d\u200b  (processing)\nconst Zhuiri_data_sign_response       = 0x00000003;                                     ///&lt; \u200b\u56de\u5e94\u200b\u6d88\u606f\u200b (response)\nconst Zhuiri_data_sign_heart          = 0x00000004;                                     ///&lt; \u200b\u5fc3\u8df3\u200b\u5305\u200b  (heart)\n};\n\n$ffi = FFI::cdef(\"\n    void* tianzuo_ZhuiriInterface_initialize();\n    void tianzuo_ZhuiriInterface_terminate(void* *ZhuiriInt_pointer);\n    int tianzuo_ZhuiriInt_initialize(void* ZhuiriInt_pointer, const char* ip_addr, int port, const void* callback, const void* context, int const heart_check_time, bool log_trace, void* iocp);\n    int tianzuo_ZhuiriInt_set_param(void* ZhuiriInt_pointer, int sender_index, int init_server_port, int msg_init_size, int recv_ex_data_max, int retry_max, int retry_all_number, int init_retry_time);\n    int tianzuo_ZhuiriInt_send(void* ZhuiriInt_pointer, int sender_index, int ip, int port, int sign, int function, char* send_data, int send_size);\n    void* tianzuo_DataQueueInterface_initialize();\n    void tianzuo_DataQueueInterface_terminate(void* *DataQueue_pointer);\n    typedef unsigned(*Zhuiri_callback)(const void *context, const void *pData);\n\", \"tianzuo.Zhuiri.dll\");\n\n# \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\necho \"initialize the interface\" . \"\\n\";\n\n# \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n$data_queue_recv = $ffi-&gt;tianzuo_DataQueueInterface_initialize();\n\n\n//function myCallback($context, $pData) {\n//    echo \"phpCallback\" . \"\\n\";\n//}\n//\n//// Define the callback function signature\n//$callback = function($context, $pData) {\n//    myCallback($context, $pData);\n//};\n//\n//$callableCallback = FFI::addr($callback);\n\n\n//$phpCallback = function($context, $pData): void {\n//    echo \"phpCallback\" . \"\\n\";\n//};\n//$callback= FFI::new(\"Zhuiri_callback\", $phpCallback);\n\n\n$callback = $ffi-&gt;callback(\"void(const char*)\", function($message) {\n    echo \"Callback message: $message\\n\";\n});\n\n\n\n$port = 6666;\n$zhuiri = $ffi-&gt;tianzuo_ZhuiriInterface_initialize();\n$error_code = $ffi-&gt;tianzuo_ZhuiriInt_initialize($zhuiri, null, $port, $callback, $data_queue_recv, 6000, False, null);\nif ($error_code != Zhuiri_error_code::Zhuiri_error_code_success) {\n    echo \"initialize error: \" . $error_code . \"\\n\";\n    return;\n}\n\n# \u200b\u8bbe\u7f6e\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b set default parameters\n$ffi-&gt;tianzuo_ZhuiriInt_set_param($zhuiri, 0, 5168, 1024, 2280, 3, 5, 600);\n\n# \u200b\u5f00\u59cb\u200b\u53d1\u9001\u6570\u636e\u200b start sending data\n$ip = ip2long(\"127.0.0.1\");\nfor ($i = 0; $i &lt; 10; $i++) {\n    $data = sprintf(\"send data %d\", $i);\n    $data_len = strlen($data);\n    echo \"ip: \" . $ip . \"\\n\";\n    echo \"port: \" . $port . \"\\n\";\n    echo \"send data: \" . $data . \"\\n\";\n    echo \"data_len: \" . $data_len . \"\\n\";\n    $error_code = $ffi-&gt;tianzuo_ZhuiriInt_send($zhuiri, 0, $ip, $port, Zhuiri_data_sign::Zhuiri_data_sign_reliable, 7788, $data, $data_len);\n    if ($error_code != Zhuiri_error_code::Zhuiri_error_code_success) {\n        echo \"send error: \" . $error_code . \"\\n\";\n        return;\n    }\n}\n\necho \"test done\" . \"\\n\";\n\n\n?&gt;\n</code></pre> vb <pre><code>\nImports System.IO\nImports System.Net\nImports System.Runtime.InteropServices\nImports System.Runtime.InteropServices.JavaScript.JSType\nImports System.Text\n\nEnum Zhuiri_error_code\n    Zhuiri_error_code_success = 1                                            ' \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b (success)\n    Zhuiri_error_code_no_rights = 2                                          ' \u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (no rights)\n    Zhuiri_error_code_socket = 13                                            ' \u200b\u5957\u200b\u63a5\u5b57\u200b\u9519\u8bef\u200b (socket Error)\n    Zhuiri_error_code_thread_error = 21                                      ' \u200b\u7ebf\u7a0b\u200b\u5931\u8d25\u200b (thread Error)\n    Zhuiri_error_code_handle = 22                                            ' \u200b\u521b\u5efa\u200b\u53e5\u67c4\u200b\u5931\u8d25\u200b (handle Error)\n    Zhuiri_error_code_out_of_cache = 23                                      ' \u200b\u8d85\u51fa\u200b\u7f13\u51b2\u200b\u6700\u5927\u503c\u200b (out f cache)\n    Zhuiri_error_code_out_of_memory = 24                                     ' \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (out Of memory)\n    Zhuiri_error_code_time_out = 25                                          ' \u200b\u64cd\u4f5c\u200b\u8d85\u65f6\u200b (time out)\n    Zhuiri_error_code_user_reject = 98                                       ' \u200b\u5bf9\u65b9\u200b\u51b3\u7edd\u200b (user reject)\n    Zhuiri_error_code_user_exit = 99                                         ' \u200b\u81ea\u884c\u200b\u9000\u51fa\u200b (user Exit)\nEnd Enum\n\nEnum Zhuiri_data_sign\n    Zhuiri_data_sign_none = 0                                               ' \u200b\u65e0\u200b\u6807\u8bc6\u200b  (no sign)\n    Zhuiri_data_sign_reliable = 1                                           ' \u200b\u53ef\u9760\u200b    (reliable)\n    Zhuiri_data_sign_processing = 2                                         ' \u200b\u5904\u7406\u200b\u4e2d\u200b  (processing)\n    Zhuiri_data_sign_response = 3                                           ' \u200b\u56de\u5e94\u200b\u6d88\u606f\u200b (response)\n    Zhuiri_data_sign_heart = 4                                              ' \u200b\u5fc3\u8df3\u200b\u5305\u200b  (heart)\nEnd Enum\n\nStructure Zhuiri_data_struct\n    Public m_ip_adrs As Integer\n    Public m_port As Integer\n    Public m_function As Integer\n    Public m_sign As Integer\n    Public m_index As Integer\n    Public m_send_time As Integer\n    Public m_send_size As Integer\n    &lt;MarshalAs(UnmanagedType.ByValArray, SizeConst:=492)&gt;\n    Public m_data As Byte()\nEnd Structure\n\nStructure Zhuiri_data_pkg_struct\n    Public m_data As Zhuiri_data_struct\n    Public m_send_data As IntPtr\n    Public m_Zhuiri As IntPtr\n    Public m_user_data As IntPtr\nEnd Structure\n\nModule Program\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_ZhuiriInterface_initialize() As IntPtr\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_ZhuiriInterface_terminate(ByRef ZhuiriInt_pointer As IntPtr)\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_ZhuiriInt_initialize(ZhuiriInt_pointer As IntPtr, ip_addr As String, port As Integer,\n        callback As IntPtr, context As IntPtr, heart_check_time As Integer, log_trace As Boolean, iocp As IntPtr) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_ZhuiriInt_set_param(ZhuiriInt_pointer As IntPtr,\n        sender_index As Integer, init_server_port As Integer, msg_init_size As Integer,\n        recv_ex_data_max As Integer, retry_max As Integer, retry_all_number As Integer,\n        init_retry_time As Integer) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_ZhuiriInt_send(ZhuiriInt_pointer As IntPtr,\n        sender_index As Integer, ip As Integer, port As Integer, sign As Integer, func As Integer, send_data As String, send_size As Integer) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_DataQueueInterface_initialize() As IntPtr\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_DataQueueInterface_terminate(ByRef DataQueue_pointer As IntPtr)\n    End Function\n\n    Public Delegate Sub CallbackFunc(context As IntPtr, pData As IntPtr)\n\n    Public Sub msg_recv_callback(context As IntPtr, pData As IntPtr)\n        Dim data As Zhuiri_data_pkg_struct = Marshal.PtrToStructure(Of Zhuiri_data_pkg_struct)(pData)\n        Dim Str As String = Encoding.ASCII.GetString(data.m_data.m_data)\n        Console.WriteLine(\"recv data:\" + Str)\n    End Sub\n\n    Sub Main(args As String())\n\n        ' \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n        Console.WriteLine(\"initialize the interface\")\n\n        ' \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n        Dim data_queue_recv As IntPtr = tianzuo_DataQueueInterface_initialize()\n        Dim callbackDelegate As CallbackFunc = AddressOf msg_recv_callback\n        Dim callbackPtr As IntPtr = Marshal.GetFunctionPointerForDelegate(callbackDelegate)\n\n        Dim port As Integer = 6666\n        Dim Zhuiri As IntPtr = tianzuo_ZhuiriInterface_initialize()\n        Dim error_code As Integer = tianzuo_ZhuiriInt_initialize(Zhuiri, IntPtr.Zero, port, callbackPtr, data_queue_recv, 6000, False, IntPtr.Zero)\n        If (error_code &lt;&gt; Zhuiri_error_code.Zhuiri_error_code_success) Then\n            Console.WriteLine(\"tianzuo_ZhuiriInt_initialize error:\" + error_code.ToString)\n            Return\n        End If\n\n        ' \u200b\u8bbe\u7f6e\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b Set Default parameters\n        tianzuo_ZhuiriInt_set_param(Zhuiri, 0, 5168, 1024, 2280, 3, 5, 600)\n\n        ' \u200b\u5f00\u59cb\u200b\u53d1\u9001\u6570\u636e\u200b start sending data\n        Dim ipAddressString As String = \"127.0.1.1\"\n        Dim ipAddress As IPAddress = IPAddress.Parse(ipAddressString)\n        Dim bytes As Byte() = ipAddress.GetAddressBytes()\n        If (BitConverter.IsLittleEndian) Then\n            Array.Reverse(bytes)\n        End If\n        Dim ip As Integer = BitConverter.ToInt32(bytes, 0)\n        Dim sport As Integer = 6666\n        For i As Integer = 0 To 99\n            Dim data As String = String.Format(\"send data {0}\", i)\n            Dim data_len As Integer = data.Length\n            error_code = tianzuo_ZhuiriInt_send(Zhuiri, 0, ip, sport, Zhuiri_data_sign.Zhuiri_data_sign_reliable, 7788, data, data_len)\n            If (error_code &lt;&gt; Zhuiri_error_code.Zhuiri_error_code_success) Then\n                Console.WriteLine(\"tianzuo_ZhuiriInt_send error:\" + error_code.ToString)\n                Return\n            End If\n        Next\n\n        Console.WriteLine(\"test done -------------------\")\n\n    End Sub\nEnd Module\n\n</code></pre> go <pre><code>package main\n\n/*\n#include \"tianzuo.ZhuiriInterface.h\"\nvoid msg_recv_callback_cgo(const void *context, const void *pData);\n*/\nimport \"C\"\nimport (\n    \"fmt\"\n    \"net\"\n    \"syscall\"\n    \"unsafe\"\n)\n\nconst (\n    Zhuiri_error_code_success       = 1  // \u200b\u6b63\u786e\u200b\u7684\u200b\u503c\u200b (success)\n    Zhuiri_error_code_no_rights     = 2  // \u200b\u6548\u9a8c\u200b\u672a\u200b\u901a\u8fc7\u200b (no rights)\n    Zhuiri_error_code_socket        = 13 // \u200b\u5957\u200b\u63a5\u5b57\u200b\u9519\u8bef\u200b (socket error)\n    Zhuiri_error_code_thread_error  = 21 // \u200b\u7ebf\u7a0b\u200b\u5931\u8d25\u200b (thread error)\n    Zhuiri_error_code_handle        = 22 // \u200b\u521b\u5efa\u200b\u53e5\u67c4\u200b\u5931\u8d25\u200b (handle error)\n    Zhuiri_error_code_out_of_cache  = 23 // \u200b\u8d85\u51fa\u200b\u7f13\u51b2\u200b\u6700\u5927\u503c\u200b (out f cache)\n    Zhuiri_error_code_out_of_memory = 24 // \u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b (out of memory)\n    Zhuiri_error_code_time_out      = 25 // \u200b\u64cd\u4f5c\u200b\u8d85\u65f6\u200b (time out)\n    Zhuiri_error_code_user_reject   = 98 // \u200b\u5bf9\u65b9\u200b\u51b3\u7edd\u200b (user reject)\n    Zhuiri_error_code_user_exit     = 99 // \u200b\u81ea\u884c\u200b\u9000\u51fa\u200b (user exit)\n)\n\nconst (\n    Zhuiri_data_sign_none       = 0 // \u200b\u65e0\u200b\u6807\u8bc6\u200b  (no sign)\n    Zhuiri_data_sign_reliable   = 1 // \u200b\u53ef\u9760\u200b    (reliable)\n    Zhuiri_data_sign_processing = 2 // \u200b\u5904\u7406\u200b\u4e2d\u200b  (processing)\n    Zhuiri_data_sign_response   = 3 // \u200b\u56de\u5e94\u200b\u6d88\u606f\u200b (response)\n    Zhuiri_data_sign_heart      = 4 // \u200b\u5fc3\u8df3\u200b\u5305\u200b  (heart)\n)\n\nfunc ipToInt(ip net.IP) uint32 {\n    ip = ip.To4()\n    if ip == nil {\n        return 0\n    }\n\n    ipInt := uint32(ip[0])&lt;&lt;24 | uint32(ip[1])&lt;&lt;16 | uint32(ip[2])&lt;&lt;8 | uint32(ip[3])\n    return ipInt\n}\n\ntype Zhuiri_data_pkg_struct C.Zhuiri_data_pkg_struct\n\n//export msg_recv_callback\nfunc msg_recv_callback(context unsafe.Pointer, pData unsafe.Pointer) {\n    data := *(*Zhuiri_data_pkg_struct)(unsafe.Pointer(pData))\n    charArray := data.m_data.m_data\n    goStr := C.GoString((*C.char)(unsafe.Pointer(&amp;charArray[0])))\n    fmt.Println(\"recv data:\", goStr)\n}\n\nfunc main() {\n    // \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n    dll := syscall.MustLoadDLL(\"tianzuo.Zhuiri.dll\")\n\n    // \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n    tianzuo_DataQueueInterface_initialize := dll.MustFindProc(\"tianzuo_DataQueueInterface_initialize\")\n    data_queue_recv, _, _ := tianzuo_DataQueueInterface_initialize.Call()\n\n    tianzuo_ZhuiriInterface_initialize := dll.MustFindProc(\"tianzuo_ZhuiriInterface_initialize\")\n    Zhuiri, _, _ := tianzuo_ZhuiriInterface_initialize.Call()\n\n    var ip uintptr\n    port := 6666\n    var iocp uintptr\n    tianzuo_ZhuiriInt_initialize := dll.MustFindProc(\"tianzuo_ZhuiriInt_initialize\")\n    msg_recv_callback_ptr := uintptr(unsafe.Pointer(C.msg_recv_callback_cgo))\n    error_code, _, _ := tianzuo_ZhuiriInt_initialize.Call(Zhuiri, ip, uintptr(C.int(port)), msg_recv_callback_ptr, data_queue_recv, 6000, uintptr(C.int(0)), iocp)\n    if error_code != Zhuiri_error_code_success {\n        fmt.Println(\"tianzuo_ZhuiriInt_initialize error: \", error_code)\n    }\n\n    // \u200b\u8bbe\u7f6e\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b set default parameters\n    tianzuo_ZhuiriInt_set_param := dll.MustFindProc(\"tianzuo_ZhuiriInt_set_param\")\n    tianzuo_ZhuiriInt_set_param.Call(Zhuiri, 0, 5168, 1024, 2280, 3, 5, 600)\n\n    // \u200b\u5f00\u59cb\u200b\u53d1\u9001\u6570\u636e\u200b start sending data\n    ipStr := \"127.0.0.1\"\n    ipint := net.ParseIP(ipStr)\n    nip := ipToInt(ipint)\n    tianzuo_ZhuiriInt_send := dll.MustFindProc(\"tianzuo_ZhuiriInt_send\")\n    for i := 0; i &lt; 100; i++ {\n        data := \"send data %d\"\n        gdata := fmt.Sprintf(data, i)\n        cdata := C.CString(gdata)\n        gdata_len := len(gdata)\n        data_len := C.int(gdata_len)\n        error_code, _, _ = tianzuo_ZhuiriInt_send.Call(Zhuiri, 0, uintptr(C.int(nip)), uintptr(C.int(port)), Zhuiri_data_sign_reliable, 7788, uintptr(unsafe.Pointer(cdata)), uintptr(data_len))\n        if error_code != Zhuiri_error_code_success {\n            fmt.Println(\"tianzuo_ZhuiriInt_send error: \", error_code)\n            return\n        }\n    }\n\n    fmt.Println(\"test done -------------------\")\n}\n\n</code></pre> rust <pre><code>\nuse std::os::raw::c_char;\nuse std::ffi::{c_int};\nuse std::ffi::CString;\nuse std::ptr::null;\nuse std::mem;\n\ntype CallbackFunc = extern \"C\" fn(context: *mut std::ffi::c_void, pData: *mut std::ffi::c_void);\n\nstruct Zhuiri_data_struct {\n    m_ip_adrs: i32,\n    m_port: i32,\n    m_function: i32,\n    m_sign: i32,\n    m_index: i32,\n    m_send_time: i32,\n    m_send_size: i32,\n    m_data: [u8; 492],\n}\n\nstruct Zhuiri_data_pkg_struct {\n    m_data: Zhuiri_data_struct,\n    m_send_data: *const c_char,\n    m_Zhuiri: *mut std::ffi::c_void,\n    m_user_data: *mut std::ffi::c_void,\n}\n\n#[link(name = \"tianzuo.Zhuiri\")]\nextern {\n    fn tianzuo_ZhuiriInterface_initialize() -&gt; *mut std::ffi::c_void;\n    fn tianzuo_ZhuiriInterface_terminate(obj: *mut std::ffi::c_void);\n    fn tianzuo_ZhuiriInt_initialize(obj: *mut std::ffi::c_void, ip_addr: *const c_char, port: c_int, callback: *mut std::ffi::c_void, context: *mut std::ffi::c_void, heart_check_time: c_int, log_trace: c_int, iocp: *const std::ffi::c_void) -&gt; c_int;\n    fn tianzuo_ZhuiriInt_set_param(obj: *mut std::ffi::c_void, sender_index: c_int, init_server_port: c_int, msg_init_size: c_int, recv_ex_data_max: c_int, retry_max: c_int, retry_all_number: c_int, init_retry_time: c_int);\n    fn tianzuo_ZhuiriInt_send(obj: *mut std::ffi::c_void, sender_index: c_int, ip: c_int, port: c_int, sign: c_int, function: c_int, send_data: *const c_char, send_size: c_int) -&gt; c_int;\n    fn tianzuo_DataQueueInterface_initialize() -&gt; *mut std::ffi::c_void;\n    fn tianzuo_DataQueueInterface_terminate(obj: *mut std::ffi::c_void);\n    fn tianzuo_DataQueueInt_initializee(obj: *mut std::ffi::c_void);\n}\n\nextern \"C\" fn msg_recv_callback(context: *mut std::ffi::c_void, pData: *mut std::ffi::c_void) {\n    unsafe {\n        //println!(\"Rust callback function called\");\n        let data: &amp;mut Zhuiri_data_pkg_struct = unsafe { mem::transmute(pData) };\n        let string = std::str::from_utf8(&amp;data.m_data.m_data).unwrap();\n        println!(\"recv data: {}\", string);\n    }\n}\n\nfn ip_to_int(ip: &amp;str) -&gt; i32 {\n    let parts: Vec&lt;i32&gt; = ip.split('.').map(|part| part.parse().unwrap()).collect();\n    (parts[0] &lt;&lt; 24) + (parts[1] &lt;&lt; 16) + (parts[2] &lt;&lt; 8) + parts[3]\n}\n\nfn main() {\n    unsafe {\n        // \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\n        println!(\"initialize the interface\");\n\n        // \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\n        let data_queue_recv = tianzuo_DataQueueInterface_initialize();\n\n        let pdata_queue_recv= data_queue_recv as *mut std::ffi::c_void;\n\n        let pmsg_recv_callback = msg_recv_callback as *mut std::ffi::c_void;\n\n        let zhuiri = tianzuo_ZhuiriInterface_initialize();\n        let port = 6666;\n        let error_code = tianzuo_ZhuiriInt_initialize(zhuiri, null(), port, pmsg_recv_callback, pdata_queue_recv, 6000, 0, null());\n        if 1 != error_code {\n            println!(\"tianzuo_ZhuiriInt_initialize error: {:?}\", error_code);\n        }\n\n        // \u200b\u8bbe\u7f6e\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b set default parameters\n        tianzuo_ZhuiriInt_set_param(zhuiri,0, 5168, 1024, 2280, 3, 5, 600);\n\n        // \u200b\u5f00\u59cb\u200b\u53d1\u9001\u6570\u636e\u200b start sending data\n        let ip = ip_to_int(\"127.0.0.1\");\n        for i in 0..=99 {\n            let data = format!(\"send data {}\", i);\n            let data_str = CString::new(String::from(data.clone())).expect(\"Failed to create CString\");\n            let data_len = data.len() as i32;\n            let error_code = tianzuo_ZhuiriInt_send(zhuiri, 0, ip, port, 1, 7788, data_str.as_ptr(), data_len);\n            if 1 != error_code {\n                println!(\"tianzuo_ZhuiriInt_send error: {:?}\", error_code);\n            }\n        }\n\n        println!(\"test done -------------------\")\n    }\n}\n\n</code></pre> ruby <pre><code>require 'fiddle'\nrequire 'ipaddr'\n\nlib = Fiddle::dlopen('C:/Users/zhengtianzuo/RubymineProjects/tianzuo.ZhuiriTest/tianzuo.Zhuiri.dll')\ntianzuo_ZhuiriInterface_initialize = Fiddle::Function.new(lib['tianzuo_ZhuiriInterface_initialize'], [], Fiddle::TYPE_VOIDP)\ntianzuo_ZhuiriInterface_terminate = Fiddle::Function.new(lib['tianzuo_ZhuiriInterface_terminate'], [Fiddle::TYPE_VOIDP], Fiddle::TYPE_VOID)\ntianzuo_ZhuiriInt_initialize = Fiddle::Function.new(lib['tianzuo_ZhuiriInt_initialize'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\ntianzuo_ZhuiriInt_set_param = Fiddle::Function.new(lib['tianzuo_ZhuiriInt_set_param'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT], Fiddle::TYPE_INT)\ntianzuo_ZhuiriInt_send = Fiddle::Function.new(lib['tianzuo_ZhuiriInt_send'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT], Fiddle::TYPE_INT)\ntianzuo_DataQueueInterface_initialize = Fiddle::Function.new(lib['tianzuo_DataQueueInterface_initialize'], [], Fiddle::TYPE_VOIDP)\ntianzuo_DataQueueInterface_terminate = Fiddle::Function.new(lib['tianzuo_DataQueueInterface_terminate'], [Fiddle::TYPE_VOIDP], Fiddle::TYPE_VOID)\n\ndef string_to_char_pointer(str)\n  ptr = Fiddle::Pointer[str]\n  ptr.to_s\nend\n\n# \u200b\u521d\u59cb\u5316\u200b\u63a5\u53e3\u200b initialize the interface\nprint(\"initialize the interface\\n\")\n\n# \u200b\u521b\u5efa\u200b\u5b9e\u4f8b\u200b create an instance\ndata_queue_recv = tianzuo_DataQueueInterface_initialize.call()\n\ncallback = Fiddle::Closure::BlockCaller.new(Fiddle::TYPE_INT, [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]) do |context, pData|\n  puts \"callback function called\"\nend\n\nport = 6666\nzhuiri = tianzuo_ZhuiriInterface_initialize.call()\nerror_code = tianzuo_ZhuiriInt_initialize.call(zhuiri, nil, port, callback.to_i, data_queue_recv, 6000, 0, nil)\nif error_code != 1\n  print(\"initialize error:\", error_code, \"\\n\")\n  return\nend\n\n# \u200b\u8bbe\u7f6e\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b set default parameters\ntianzuo_ZhuiriInt_set_param.call(zhuiri, 0, 5168, 1024, 2280, 3, 5, 600)\n\n# \u200b\u5f00\u59cb\u200b\u53d1\u9001\u6570\u636e\u200b start sending data\nip = IPAddr.new(\"127.0.0.1\").to_i\nfor i in 1..10\n  data = \"send data %d\" % [i]\n  data_len = data.length\n  error_code = tianzuo_ZhuiriInt_send.call(zhuiri, 0, ip, port, 1, 7788, data, data_len)\n  if error_code != 1\n    print(\"tianzuo_ZhuiriInt_send error:\", error_code, \"\\n\")\n    return\n  end\nend\n\n</code></pre>"},{"location":"en/component/tianzuo.Zhuiri/#download","title":"download","text":""},{"location":"en/other/","title":"other","text":""},{"location":"en/product/tianzuo.Fuxi/","title":"tianzuo.Fuxi","text":""},{"location":"en/product/tianzuo.Fuxi/#tianzuofuxi_1","title":"tianzuo.Fuxi","text":"operating system compiler programming language"},{"location":"en/product/tianzuo.Fuxi/#introduction","title":"introduction","text":"<p>tianzuo.Fuxi </p> <p>legend: The instrument made by Fuxi with jade and tencel has a gentle white light, and its sound can make people feel peaceful and peaceful. It is said to have a mysterious power that can dominate the hearts of all things.</p>"},{"location":"en/product/tianzuo.Fuxi/#motivation","title":"motivation","text":""},{"location":"en/product/tianzuo.Fuxi/#features","title":"features","text":""},{"location":"en/product/tianzuo.Fuxi/#screenshot","title":"screenshot","text":""},{"location":"en/product/tianzuo.Fuxi/#download","title":"download","text":""},{"location":"en/product/tianzuo.Kunlun/","title":"tianzuo.Kunlun","text":""},{"location":"en/product/tianzuo.Kunlun/#tianzuokunlun_1","title":"tianzuo.Kunlun","text":"operating system compiler programming language"},{"location":"en/product/tianzuo.Kunlun/#introduction","title":"introduction","text":"<p>tianzuo.Kunlun powerful local construction tools, provides all-round static detection, dynamic detection, code tools and various convenient plug-in tools for the project. Scan the program code through lexical analysis, syntax analysis, control flow, data flow analysis, memory detection, code coverage, hot function detection and other technologies to verify whether the code meets the standardization Safety, reliability, maintainability and other indicators. Deeply optimize the code according to the analysis results, improve the code quality and enhance the robustness of the product.</p> <p>legend: In the Kunlun Sky Palace in the Kunlun Mountain, the hometown of immortals, there is a legend that there is a god mirror, which has the power to travel freely through time and space. However, in a fairy pageant, the mirror was stolen by someone, and has been missing ever since.</p>"},{"location":"en/product/tianzuo.Kunlun/#motivation","title":"motivation","text":"<p>Build a local build tool that is easy to run and integrates various code inspections.</p> <p></p>"},{"location":"en/product/tianzuo.Kunlun/#features","title":"features","text":"<ul> <li>Workbench project indicators Collect various indicators of the project as part of the standard to measure the complexity of the project</li> <li>Workbench compilation run can compile projects manually or automatically</li> <li>Workbench Static detection scans the program code through lexical analysis, syntax analysis, control flow, data flow analysis and other technologies to check the consistency of code and design, code compliance with standards, readability, the correctness of the logical expression of the code, the rationality of the code structure and other aspects</li> <li>Workbench Dynamic detection By memory detection, code coverage, hot spot function detection and other technologies according to the analysis results of the code is deeply optimized. Improve code quality and product robustness</li> <li>Workbench Code tool automates code formatting and generates project documentation</li> <li>Toolkit covers all aspects of communication/graphics/design/conversion/generation/miscellaneous gadgets</li> <li>Data bag can record usually used code to the data bag, at any time to browse and copy</li> </ul>"},{"location":"en/product/tianzuo.Kunlun/#screenshot","title":"screenshot","text":""},{"location":"en/product/tianzuo.Kunlun/#support","title":"support","text":""},{"location":"en/product/tianzuo.Kunlun/#support-content","title":"support content","text":"name support developing operating system programming language project type"},{"location":"en/product/tianzuo.Kunlun/#download","title":"download","text":""},{"location":"en/product/tianzuo.Pangu/","title":"tianzuo.Pangu","text":""},{"location":"en/product/tianzuo.Pangu/#tianzuopangu_1","title":"tianzuo.Pangu","text":"operating system compiler programming language"},{"location":"en/product/tianzuo.Pangu/#introduction","title":"introduction","text":"<p>tianzuo.Pangu Instant messaging platform, using self-developed distributed storage and UDP reliable P2P network transmission technology, self-developed IM communication protocol, covering mainstream platforms, plug-in high scalability, OpenGL rendering high smooth UI, supporting integrated web applications, can be deployed privately or in the public cloud.</p> <p>legend: According to legend, at the beginning of the chaos of heaven and earth, Pangu woke up from his sleep and saw the darkness of heaven and earth, so he reached out and took out a huge axe to split the earth and earth, and since then there is our world. This axe has the power to separate heaven and earth and shuttle too empty, and the power is not the Xuanyuan sword. Rumor has it that whoever controls the Pangu axe controls the Law of power.</p>"},{"location":"en/product/tianzuo.Pangu/#motivation","title":"motivation","text":"<p>Build CS architecture IM communication system, support text/expression/picture/voice/video/remote desktop/remote control/whiteboard and other functions.</p>"},{"location":"en/product/tianzuo.Pangu/#features","title":"features","text":"<ul> <li>\ud83e\udde9 simple integration</li> <li>\ud83d\udce6 private deployment is supported</li> <li>\ud83e\udea2 chat data point-to-point encryption, independently developed IM protocol, network library using 'Tenzo. Day Boot 'software development kit</li> <li>\ud83d\udcd2 save chat logs locally, use 'Tenzo' database. Qiankun Bag 'software development kit</li> </ul>"},{"location":"en/product/tianzuo.Pangu/#screenshot","title":"screenshot","text":"<p>tianzuo.Pangu Demo:</p> <p> </p>"},{"location":"en/product/tianzuo.Pangu/#download","title":"download","text":""},{"location":"en/technology/C%2B%2B/#introduction","title":"introduction","text":"<p>C++ is an object-oriented computer programming language invented and implemented in the early 80s of the 20th century by Dr. Benjani Strausstrup of AT&amp;T Bell Laboratories in the United States (originally this language was called \"C with Classes\"). It is a general-purpose programming language that supports multiple programming paradigms with static data type checking. It supports a variety of programming styles such as procedural programming, data abstraction, object-oriented programming, and generic programming. C++ is the inheritance of the C language, which further expands and improves the C language and becomes an object-oriented programming language. The word C++ is usually pronounced as \"C plus plus\" in Chinese mainland programmer circles, while Western programmers usually pronounce it as \"C plus plus\", \"CPP\".</p> Chinese name C++ language Founder BjarneStroustrup Foreign name The C++ Programming Language Founding Company Bell Labs Category Computer Programming Languages Basic Contents Classes, Encapsulation, Overloading, Inheritance, Templates First use December 1983 Founder Benjani Strausstrup"},{"location":"en/technology/C%2B%2B/#roadmap","title":"roadmap:","text":""},{"location":"en/technology/CSharp/#introduction","title":"introduction","text":"<p>CSharp is an object-oriented, user-oriented, and . A high-level programming language on top of the .NET Framework. It is scheduled to appear on the Microsoft Professional Developer Forum (PDC). CSharp is the latest work of Microsoft researcher Anders Hejlsberg. CSharp looks strikingly similar to Java; It includes things like single inheritance, interfaces, almost the same syntax as Java, and the process of compiling into intermediate code and running it. But CSharp is distinctly different from Java in that it borrows from Delphi in that it integrates directly with COM (Component Object Model) and is the protagonist of Microsoft's .NET windows web framework.</p> Foreign name CSharp aliases CSHARP Category Object-Oriented Programming Languages Release time June 2000 Publisher Microsoft Developer Anders Halesberg"},{"location":"en/technology/CSharp/#roadmap","title":"roadmap:","text":""},{"location":"en/technology/DevelopmentTools/","title":"DevelopmentTools","text":""},{"location":"en/technology/Go/#introduction","title":"introduction","text":"<p>The Go language is a statically typed, compiled, and concurrent programming language developed by Google, featuring garbage collection. It critically assimilates the strengths of languages such as C and Java, embodying simplicity and efficiency to the fullest extent.</p> <p>The Go language originated in 2007 when Google's technical experts were increasingly troubled by the growing bloat of C++. They resolved to develop a new language to replace C++. They believed that rather than continually adding new features to a bloated language, it would be better to simplify programming languages. Thus, the new language Golang was born.</p>"},{"location":"en/technology/Go/#roadmap","title":"roadmap:","text":""},{"location":"en/technology/Java/#introduction","title":"introduction","text":"<p>Java is an object-oriented programming language that not only incorporates various advantages of C++ but also discards concepts such as complex multiple inheritance and pointers found in C++. As a result, the Java language possesses two key characteristics: powerful functionality and ease of use. Representing static object-oriented programming languages, Java effectively realizes object-oriented theory, allowing programmers to engage in complex programming with an elegant mindset. Java is characterized by simplicity, object orientation, distribution, robustness, security, platform independence and portability, multithreading, and dynamism. Java can be used to develop desktop applications, web applications, distributed systems, and embedded system applications.</p>"},{"location":"en/technology/Java/#roadmap","title":"roadmap:","text":""},{"location":"en/technology/JavaScript/#introduction","title":"introduction","text":"<p>JavaScript is a dynamic programming language that is widely used in web development, primarily to enhance the interactivity and dynamism of web pages. As one of the core technologies of web development, it collaborates with HTML and CSS, where HTML defines the content structure of web pages, CSS handles styling and layout, and JavaScript controls the behavior and interaction of web pages. Users can utilize JavaScript for various functions such as event handling, form validation, and animation creation. Furthermore, the application of JavaScript has expanded to server-side (such as Node.js), mobile application development, and game development, making it an indispensable part of modern programming environments. Its cross-platform and high adaptability characteristics have made JavaScript one of the most popular and widely used scripting languages globally.</p>"},{"location":"en/technology/JavaScript/#roadmap","title":"roadmap:","text":""},{"location":"en/technology/NetWork/","title":"NetWork","text":""},{"location":"en/technology/OperatingSystem/","title":"OperatingSystem","text":""},{"location":"en/technology/PHP/#introduction","title":"introduction","text":"<p>PHP (PHP: Hypertext Preprocessor, Chinese: Hypertext Preprocessor) is a general-purpose open-source scripting language. The syntax absorbs the characteristics of C language, Java and Perl, which is easy to learn and widely used, mainly applicable to the field of web development. PHP's unique syntax is a mix of C, Java, Perl, and PHP's own syntax. It can execute dynamic web pages much faster than CGI or Perl. Compared with other programming languages, PHP embeds the program into HTML (an application under the standard Universal Markup Language) document to execute, which is much more efficient than CGI that fully generates HTML markup. PHP can also execute compiled code, which can be encrypted and optimized to run, making the code run faster.</p> Chinese name hypertext preprocessor Foreign name Hyper Text Preprocessor Programming paradigms object-oriented, imperative programming Designer Rasmus Lerdorf Maintenance The PHP Group Foreign language abbreviation PHP"},{"location":"en/technology/PHP/#roadmap","title":"roadmap:","text":""},{"location":"en/technology/Python/#introduction","title":"introduction","text":"<p>Python, pronounced /\u02c8pa\u026a\u03b8\u0259n/ in British English and /\u02c8pa\u026a\u03b8\u0251\u02d0n/ in American English, is a computer programming language developed by Dutch scientist Guido van Rossum during the year 1989. In the Python language, everything is an object, including functions, which also possess their own attributes. Python is an interpreted programming language, and when running Python programs, it is necessary to have the interpreter translate the Python code.</p> <p>Python is an unrestricted, cross-platform open-source programming language known for its fast data processing speed, powerful features, and ease of learning, making it widely used in data analysis and processing. Furthermore, Python operates in an interpreted manner, allowing code to be executed directly through the interpreter without the need for compilation, which is characteristic of dynamic languages and results in high programming efficiency. Python is a fully object-oriented language, where numbers, modules, strings, and data structures are all objects, and it supports common class concepts such as inheritance, overloading, derivation, and multiple inheritance.</p> <p>On July 20, 2017, IEEE released the 2017 programming language rankings, with Python ranking first. In March 2018, the language's author announced on a mailing list that support for Python 2.7 would end on January 1, 2020. Users wishing to continue receiving support related to Python 2.7 after this date would need to pay commercial vendors for assistance.</p>"},{"location":"en/technology/Python/#roadmap","title":"roadmap:","text":""},{"location":"en/technology/Ruby/#introduction","title":"introduction","text":"<p>Ruby, a scripting language created for simple and efficient object-oriented programming, was developed in the 1990s by Yukihiro Matsumoto in Japan, adhering to the GPL and Ruby License. Ruby is a programming language that is fully object-oriented with syntax similar to Smalltalk, script execution capabilities, and powerful text processing features akin to Perl. Its inspiration and characteristics are derived from Perl, Smalltalk, Eiffel, Ada, and Lisp languages. The Ruby language itself has also led to the development of alternatives such as JRuby (for the Java platform) and IronRuby (for the .NET platform). Ruby began development on February 24, 1993, and was officially released to the public in December 1995 on fj (newsgroup). The name Ruby was chosen because the pronunciation of Perl is similar to that of the birthstone for June, pearl, while Ruby is named after the birthstone for July, ruby.</p>"},{"location":"en/technology/Ruby/#roadmap","title":"roadmap:","text":""},{"location":"en/technology/Rust/#introduction","title":"introduction","text":"<p>Rust is a systems programming language that emphasizes high performance, reliability, and productivity, supporting various programming paradigms such as structured programming, functional programming, and object-oriented programming. </p> <p>Rust is a compiled language that does not have a runtime or garbage collector. It employs an ownership mechanism to achieve automatic memory management, thereby ensuring memory safety. Rust is an open-source project currently hosted on GitHub, and both Rust and all other official projects are dual-licensed under the Apache License 2.0 and the MIT License. The official package manager for Rust is Cargo.</p>"},{"location":"en/technology/Rust/#roadmap","title":"roadmap:","text":""},{"location":"en/technology/VisualBasic/#introduction","title":"introduction","text":"<p>Visual Basic (abbreviated as VB) is a general-purpose object-based programming language developed by Microsoft, designed for structured, modular, object-oriented programming, featuring an event-driven mechanism with an integrated development environment. It is a language that can be used for the development of Microsoft's own products. \"Visual\" refers to the method of developing graphical user interfaces (GUIs) without the need to write extensive code to describe the appearance and position of interface elements, but rather by simply adding pre-established objects to a point on the screen. \"Basic\" refers to the BASIC (Beginners All-Purpose Symbolic Instruction Code) language, which is one of the most widely used languages in the history of computing technology development. Visual Basic is derived from the BASIC programming language. VB features a graphical user interface (GUI) and a rapid application development (RAD) system, allowing for easy use of DAO, RDO, and ADO to connect to databases, or to effortlessly create ActiveX controls for efficiently generating type-safe and object-oriented applications. Programmers can quickly build an application using the components provided by VB.</p>"},{"location":"en/technology/VisualBasic/#roadmap","title":"roadmap:","text":""},{"location":"en/technology/Cpp/Building/","title":"Building","text":""},{"location":"en/technology/Cpp/CodeSmell/","title":"Code Smell","text":""},{"location":"en/technology/Cpp/Debugging/","title":"Debugging","text":""},{"location":"en/technology/Cpp/DynamicAnalysis/","title":"Dynamic Analysis","text":""},{"location":"en/technology/Cpp/Performance/","title":"Performance","text":""},{"location":"en/technology/Cpp/StaticAnalysis/","title":"Static Analysis","text":""}]}