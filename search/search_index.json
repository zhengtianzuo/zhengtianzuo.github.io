{"config":{"lang":["en","zh"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u4e3b\u9875","text":"\u6211\u662f\u90d1\u5929\u4f50\uff0c\u76ee\u524d\u4e13\u6ce8\u4e8e\u8fdc\u7a0b\u684c\u9762\u7684\u5f00\u53d1\uff0c\u4e3b\u8981\u4f7f\u7528C++\uff0c\u559c\u6b22\u7814\u7a76\u9ad8\u6027\u80fd\u4e0e\u4ee3\u7801\u67b6\u6784\u3002      \u613f\u666f: \u6280\u672f\u5206\u4eab\uff0c\u5171\u521b\u8f89\u714c \u4f7f\u547d: \u521b\u9020\u4ef7\u503c\uff0c\u6210\u5c31\u5ba2\u6237\uff0c\u670d\u52a1\u884c\u4e1a \u4ef7\u503c\u89c2: \u6316\u6398\u529f\u80fd\uff0c\u96c6\u5927\u6210\u8005\uff0c\u7cbe\u51c6\u670d\u52a1 \u4e2a\u4eba\u4ea7\u54c1\uff1a Logo \u4ea7\u54c1 Github Gitee \u7b80\u8ff0 \u6280\u672f \u5929\u4f50.\u76d8\u53e4\u65a7 \u5373\u65f6\u901a\u8baf\u5e73\u53f0 \u5929\u4f50.\u6606\u4ed1\u955c \u672c\u5730\u6784\u5efa\u5de5\u5177 \u5929\u4f50.\u4f0f\u7fb2\u7434 \u5f00\u53d1\u4e2d \u4e2a\u4eba\u6a21\u5757\uff1a Logo \u6a21\u5757 Github Gitee \u7b80\u8ff0 \u6280\u672f \u5929\u4f50.\u5d06\u5cd2\u5370 \u5d29\u6e83\u68c0\u6d4b\u5206\u6790 \u5929\u4f50.\u4e7e\u5764\u888b NoSql\u6570\u636e\u5e93 \u5929\u4f50.\u8ffd\u65e5\u9774 UDP\u53ef\u9760\u6570\u636e\u4f20\u8f93 \u5929\u4f50.\u6df7\u6c8c\u949f \u8f6f\u4ef6\u8bb8\u53ef\u6388\u6743 \u5929\u4f50.\u70bc\u5996\u58f6 \u5185\u5b58\u6c60 \u5929\u4f50.\u795e\u519c\u9f0e \u5f00\u53d1\u4e2d \u5929\u4f50.\u73b2\u73d1\u5854 \u5f00\u53d1\u4e2d \u5929\u4f50.\u5c01\u5929\u5370 \u5f00\u53d1\u4e2d        \u52a0QQ\u597d\u53cb             \u52a0\u5fae\u4fe1\u597d\u53cb             \u5173\u6ce8\u5fae\u4fe1\u516c\u4f17\u53f7             \u652f\u4ed8\u5b9d\u8d5e\u52a9             \u5fae\u4fe1\u8d5e\u52a9"},{"location":"component/tianzuo.Hundun/","title":"\u5929\u4f50.\u6df7\u6c8c\u949f","text":""},{"location":"component/tianzuo.Hundun/#_2","title":"\u5929\u4f50.\u6df7\u6c8c\u949f","text":"\u64cd\u4f5c\u7cfb\u7edf \u7f16\u8bd1\u5668 \u7f16\u7a0b\u8bed\u8a00"},{"location":"component/tianzuo.Hundun/#_3","title":"\u7b80\u4ecb","text":"<p>\u5929\u4f50.\u6df7\u6c8c\u949f \u4fdd\u62a4\u4f60\u5f00\u53d1\u7684\u8f6f\u4ef6\u4e0d\u53d7\u672a\u7ecf\u6388\u6743\u7684\u62f7\u8d1d\uff0c\u53ca\u65f6\u9650\u5236\u4f7f\u7528\uff0c\u53ea\u5728\u7279\u5b9a\u7684\u673a\u5668\u4e0a\u4f7f\u7528\u3002</p> <p>\u4f20\u8bf4: \u4e43\u662f\u4e0a\u53e4\u5341\u5927\u795e\u5668\u4e4b\u9996\uff0c\u88ab\u8a89\u4e3a\u529b\u91cf\u6700\u5f3a\u5927\u7684\u795e\u5668\u3002 \u4e1c\u7687\u949f\u4e4b\u6240\u88ab\u79f0\u4e4b\u4e3a\u4e1c\u7687\u949f\uff0c\u5176\u62e5\u6709\u8005\u4fbf\u662f\u4e1c\u7687\u592a\u4e00\uff0c\u4e1c\u7687\u592a\u4e00\u662f\u4e0a\u53e4\u795e\u8bdd\u4e2d\uff0c\u540d\u5217\u524d\u4e94\u7684\u5927\u795e\uff0c\u4f5c\u4e3a\u5176\u6cd5\u5b9d\u7684\u4e1c\u7687\u949f\uff0c\u5b9e\u529b\u4e5f\u4e0d\u8d56\u3002\u76f8\u4f20\u4e1c\u7687\u949f\u662f\u5929\u754c\u4e4b\u95e8\uff0c\u53ef\u63a7\u65e5\u6708\uff0c\u80fd\u53d8\u9634\u9633\uff0c\u4e1c\u7687\u949f\u662f\u4e00\u79cd\u9632\u5fa1\u6027\u5f88\u5f3a\uff0c\u653b\u51fb\u529b\u8f83\u5f31\uff0c\u4f46\u662f\u7206\u53d1\u529b\u60ca\u4eba\u7684\u6cd5\u5668\uff0c\u4e00\u65e6\u7206\u53d1\u771f\u6b63\u5b9e\u529b\uff0c\u57fa\u672c\u4e0a\u80fd\u591f\u6bc1\u5929\u706d\u5730\uff0c\u541e\u566c\u8bf8\u5929\u3002</p>"},{"location":"component/tianzuo.Hundun/#_4","title":"\u76ee\u6807","text":"<p>\u4fdd\u62a4\u4f60\u5f00\u53d1\u7684\u8f6f\u4ef6\u4e0d\u53d7\u672a\u7ecf\u6388\u6743\u7684\u62f7\u8d1d\uff0c\u53ca\u65f6\u9650\u5236\u4f7f\u7528\uff0c\u53ea\u5728\u7279\u5b9a\u7684\u673a\u5668\u4e0a\u4f7f\u7528\u3002</p> <p></p>"},{"location":"component/tianzuo.Hundun/#_5","title":"\u529f\u80fd","text":"<ul> <li>\ud83e\udde9 \u96c6\u6210\u7b80\u5355</li> <li>\ud83e\udea2 \u6570\u636e\u7ecf\u8fc7\u7b97\u6cd5\u52a0\u5bc6</li> <li>\ud83d\udd12 \u53ef\u6309\u65f6\u95f4\u9650\u5236, \u53ef\u6309\u8bbe\u5907ID\u9650\u5236, \u4e5f\u53ef\u540c\u65f6\u9650\u5236</li> </ul>"},{"location":"component/tianzuo.Hundun/#_6","title":"\u6d41\u7a0b","text":"<p>\u5ba2\u6237\u7aef\u8f6f\u4ef6\u4e2d\u8c03\u7528get_machineid\u63a5\u53e3\u53ef\u4ee5\u83b7\u53d6\u5230\u673a\u5668\u7801(\u6ce8\u518c\u7801), \u7136\u540e\u901a\u8fc7maker\u7a0b\u5e8f\u8f93\u5165\u6ce8\u518c\u7801/\u622a\u6b62\u65f6\u95f4\u6765\u521b\u5efa\u8bb8\u53ef\u8bc1\u6587\u4ef6, maker\u751f\u6210\u8bb8\u53ef\u8bc1\u6587\u4ef6\u65f6\u9700\u8981\u8bfb\u53d6\u79c1\u94a5\u6587\u4ef6, \u5bf9\u5e94\u7684\u516c\u94a5\u4fe1\u606f\u5728\u5ba2\u6237\u7aef\u8f6f\u4ef6\u4e2d\u8fdb\u884c\u8f93\u5165. \u5f53\u8bb8\u53ef\u8bc1\u53d1\u5e03\u5230\u5ba2\u6237\u7aef\u672c\u5730\u540e, \u5ba2\u6237\u7aef\u542f\u52a8\u8c03\u7528check\u63a5\u53e3\u8fdb\u884c\u9a8c\u8bc1. </p> <ol> <li>\u751f\u6210\u516c\u94a5\u79c1\u94a5\u914d\u5bf9\u7684\u4fe1\u606f\u6587\u4ef6.</li> </ol> <pre><code>// \u521b\u5efa\u79c1\u94a5\u6587\u4ef6\n(1) openssl genrsa -out privatekey.pem 2048                 \n\n// \u6839\u636e\u79c1\u94a5\u6587\u4ef6\u521b\u5efa\u5bf9\u5e94\u7684\u516c\u94a5\u6587\u4ef6          \n(2) openssl rsa -in privatekey.pem -pubout -out publickey.pem         \n</code></pre> <ol> <li>\u901a\u8fc7maker\u547d\u4ee4\u884c\u521b\u5efa\u8bb8\u53ef\u8bc1\u6587\u4ef6:</li> </ol> <pre><code>// \u4ec5\u751f\u6210\u65f6\u95f4\u9650\u5236\u7684\u8bb8\u53ef\u8bc1\u6587\u4ef6\nmaker.exe --type=1 --date=\"2024-04-30\" --keyfile=\"privatekey.pem\"\n\n// \u4ec5\u751f\u6210\u673a\u5668\u7801\u9650\u5236\u7684\u8bb8\u53ef\u8bc1\u6587\u4ef6\nmaker.exe --type=2 --id=\"9ea03801651cd3d93add9d42a07d3c4b\" --keyfile=\"privatekey.pem\"\n\n// \u751f\u6210\u540c\u65f6\u62e5\u6709\u65f6\u95f4\u9650\u5236\u548c\u673a\u5668\u7801\u9650\u5236\u7684\u8bb8\u53ef\u8bc1\u6587\u4ef6\nmaker.exe --type=3 --date=\"2024-04-30\" --id=\"9ea03801651cd3d93add9d42a07d3c4b\" --keyfile=\"privatekey.pem\"\n</code></pre>"},{"location":"component/tianzuo.Hundun/#_7","title":"\u4f8b\u5b50","text":"cpp <pre><code>#include &lt;iostream&gt;\n#include \"../../include/tianzuo.HundunInterface.h\" // \u63a5\u53e3\u5934\u6587\u4ef6 interface heaher file\n\n#define Get_Machineid 0\n\nint main() {\n    std::string public_key = \"-----BEGIN PUBLIC KEY-----\\n\"\n        \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\"\n        \"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\"\n        \"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\"\n        \"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\"\n        \"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\"\n        \"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\"\n        \"lQIDAQAB\\n\"\n        \"-----END PUBLIC KEY-----\\n\";\n\n    tianzuo_HundunInt hundun;\n#if Get_Machineid\n    const char* id = hundun.get_machineid();\n    if (id == nullptr) {\n        std::cerr &lt;&lt; \"hundun.get_machineid error\" &lt;&lt; std::endl;\n        return -1;\n    }\n    std::cout &lt;&lt; \"id: \" &lt;&lt; id &lt;&lt; std::endl;\n#else\n    int days = 0;\n    int error_code = tianzuo_Hundun_check(public_key.c_str(), \"license.dat\", &amp;days);\n    if (error_code != Hundun_error_code_success) {\n        std::cout &lt;&lt; \"hundun.check error_code: \" &lt;&lt; error_code &lt;&lt; \" error_string: \" &lt;&lt; Hundun_error_code_strings_cn[error_code] &lt;&lt; std::endl;\n        return -1;\n    }\n    std::cout &lt;&lt; \"hundun.check days: \" &lt;&lt; days &lt;&lt; std::endl;\n#endif\n    return 0;\n}\n\n</code></pre> python <pre><code>from ctypes import *\nfrom enum import Enum\nimport ctypes\n\n\ntianzuo_HundunLib = cdll.LoadLibrary('./tianzuo.Hundun.dll')\n\n\nclass Hundun_error_code(Enum):\n    Hundun_error_code_success       = 0 # \u6210\u529f\n    Hundun_error_code_parameter     = 1 # \u53c2\u6570\u9519\u8bef\n    Hundun_error_code_parse         = 2 # \u89e3\u6790\u9519\u8bef\n    Hundun_error_code_licensefile   = 3 # \u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\n    Hundun_error_code_outofdate     = 4 # \u65e5\u671f\u5df2\u8fc7\n    Hundun_error_code_unmatched     = 5 # \u673a\u5668\u7801\u4e0d\u5339\u914d\n\n\ndef tianzuo_Hundun_check(public_key_string, license_file, days):\n    tianzuo_HundunLib.tianzuo_Hundun_check.argtypes = [c_char_p, c_char_p, ctypes.POINTER(ctypes.c_int)]\n    return tianzuo_HundunLib.tianzuo_Hundun_check(public_key_string, license_file, days)\n\n\ndef main():\n    public_key = (b\"-----BEGIN PUBLIC KEY-----\\n\"\n                  b\"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\"\n                  b\"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\"\n                  b\"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\"\n                  b\"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\"\n                  b\"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\"\n                  b\"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\"\n                  b\"lQIDAQAB\\n\"\n                  b\"-----END PUBLIC KEY-----\\n\")\n\n    Hundun_error_code_strings_cn = (\n        \"\u6210\u529f\",\n        \"\u53c2\u6570\u9519\u8bef\",\n        \"\u89e3\u6790\u9519\u8bef\",\n        \"\u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\",\n        \"\u65e5\u671f\u5df2\u8fc7\",\n        \"\u673a\u5668\u7801\u4e0d\u5339\u914d\")\n\n    Hundun_error_code_strings = (\n        \"success\",\n        \"parameter error\",\n        \"parse error\",\n        \"license filename error\",\n        \"out of date\",\n        \"machine id unmatched\")\n\n    days = ctypes.c_int()\n    license_file = b\"license.dat\"\n    error_code = tianzuo_Hundun_check(public_key, license_file, days)\n    if error_code != Hundun_error_code.Hundun_error_code_success.value:\n        print(\"hundun.check error_code: {} error_string: {}\".format(error_code, Hundun_error_code_strings_cn[error_code]))\n        return\n\n    int_days = days.value\n    print(\"hundun.check days: {}\".format(int_days))\n\n\nif __name__ == '__main__':\n    main()\n\n</code></pre> java <pre><code>package cn.camelsoft;\n\nimport com.sun.jna.Library;\nimport com.sun.jna.Native;\n\nenum Hundun_error_code {\n    Hundun_error_code_success       (0),            ///&lt;  \u6210\u529f\n    Hundun_error_code_parameter     (1),            ///&lt;  \u53c2\u6570\u9519\u8bef\n    Hundun_error_code_parse         (2),            ///&lt;  \u89e3\u6790\u9519\u8bef\n    Hundun_error_code_licensefile   (3),            ///&lt;  \u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\n    Hundun_error_code_outofdate     (4),            ///&lt;  \u65e5\u671f\u5df2\u8fc7\n    Hundun_error_code_unmatched     (5);            ///&lt;  \u673a\u5668\u7801\u4e0d\u5339\u914d\n\n    private int value;\n\n    Hundun_error_code(int value) {\n        this.value = value;\n    }\n\n    public int getValue() {\n        return value;\n    }\n}\n\npublic class Main {\n    public interface tianzuo_HundunLib extends Library {\n        tianzuo_HundunLib instance = (tianzuo_HundunLib) Native.load(\"./tianzuo.Hundun.dll\", tianzuo_HundunLib.class);\n        int tianzuo_Hundun_check(String public_key_string, String license_file, int[] days);\n    }\n\n    public static void main(String[] args) {\n        System.setProperty(\"jna.encoding\",\"UTF-8\");\n\n        String public_key = \"-----BEGIN PUBLIC KEY-----\\n\" +\n        \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\" +\n        \"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\" +\n        \"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\" +\n        \"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\" +\n        \"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\" +\n        \"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\" +\n        \"lQIDAQAB\\n\" +\n        \"-----END PUBLIC KEY-----\\n\";\n\n        String[] Hundun_error_code_strings_cn = {\"\u6210\u529f\",\n                \"\u53c2\u6570\u9519\u8bef\",\n                \"\u89e3\u6790\u9519\u8bef\",\n                \"\u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\",\n                \"\u65e5\u671f\u5df2\u8fc7\",\n                \"\u673a\u5668\u7801\u4e0d\u5339\u914d\"};\n\n        String[] Hundun_error_code_strings = {\n                \"success\",\n                \"parameter error\",\n                \"parse error\",\n                \"license filename error\",\n                \"out of date\",\n                \"machine id unmatched\"\n        };\n\n        int[] days = {0};\n        int error_code = tianzuo_HundunLib.instance.tianzuo_Hundun_check(public_key, \"license.dat\", days);\n        if (error_code != Hundun_error_code.Hundun_error_code_success.getValue()) {\n            System.out.printf(\"hundun.check error_code: %d error_string: %s\\n\", error_code, Hundun_error_code_strings_cn[error_code]);\n            return;\n        }\n        System.out.printf(\"hundun.check days: : %d\\n\", days[0]);\n    }\n}\n\n</code></pre> csharp <pre><code>\n\nusing System.Runtime.InteropServices;\n\nclass Program {\n    [DllImport(\"tianzuo.Hundun.dll\")]\n    public static extern int tianzuo_Hundun_check(string public_key_string, string license_file, ref int days);\n\n    public enum Hundun_error_code\n    {\n        Hundun_error_code_success,                ///&lt;  \u6210\u529f\n        Hundun_error_code_parameter,              ///&lt;  \u53c2\u6570\u9519\u8bef\n        Hundun_error_code_parse,                  ///&lt;  \u89e3\u6790\u9519\u8bef\n        Hundun_error_code_licensefile,            ///&lt;  \u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\n        Hundun_error_code_outofdate,              ///&lt;  \u65e5\u671f\u5df2\u8fc7\n        Hundun_error_code_unmatched               ///&lt;  \u673a\u5668\u7801\u4e0d\u5339\u914d\n    }\n\n    public string[] Hundun_error_code_strings_cn = {\n        \"\u6210\u529f\",\n        \"\u53c2\u6570\u9519\u8bef\",\n        \"\u89e3\u6790\u9519\u8bef\",\n        \"\u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\",\n        \"\u65e5\u671f\u5df2\u8fc7\",\n        \"\u673a\u5668\u7801\u4e0d\u5339\u914d\"\n    };\n\n    public string[] Hundun_error_code_strings = {\n        \"success\",\n        \"parameter error\",\n        \"parse error\",\n        \"license filename error\",\n        \"out of date\",\n        \"machine id unmatched\"\n    };\n\n    static void Main(string[] args) {\n        string public_key = \"-----BEGIN PUBLIC KEY-----\\n\" +\n            \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\" +\n            \"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\" +\n            \"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\" +\n            \"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\" +\n            \"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\" +\n            \"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\" +\n            \"lQIDAQAB\\n\" +\n            \"-----END PUBLIC KEY-----\\n\";\n\n        int days = 0;\n        int error_code = tianzuo_Hundun_check(public_key, \"license.dat\", ref days);\n        if (error_code != (int)Hundun_error_code.Hundun_error_code_success)\n        {\n            Program myProgram = new Program();\n            Console.WriteLine(\"hundun.check error_code: \" + error_code + \" error_string: \" + myProgram.Hundun_error_code_strings_cn[error_code]);\n            return;\n        }\n        Console.WriteLine(\"hundun.check days: \" + days);\n\n    }\n\n}\n</code></pre> javascript <pre><code>\nHundun_error_code_success     = 0 //  \u6210\u529f\nHundun_error_code_parameter   = 1 //  \u53c2\u6570\u9519\u8bef\nHundun_error_code_parse       = 2 //  \u89e3\u6790\u9519\u8bef\nHundun_error_code_licensefile = 3 //  \u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\nHundun_error_code_outofdate   = 4 //  \u65e5\u671f\u5df2\u8fc7\nHundun_error_code_unmatched   = 5 //  \u673a\u5668\u7801\u4e0d\u5339\u914d\n\nlet ffi = require('ffi-napi')\nconst ref = require('ref-napi');\n\nlet tianzuo_HundunLib = ffi.Library(\"tianzuo.Hundun.dll\", {\n    'tianzuo_Hundun_check':['int',['string','string','pointer']],\n})\n\nlet public_key = \"-----BEGIN PUBLIC KEY-----\\n\" +\n\"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\" +\n\"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\" +\n\"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\" +\n\"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\" +\n\"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\" +\n\"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\" +\n\"lQIDAQAB\\n\" +\n\"-----END PUBLIC KEY-----\\n\";\n\nconst Hundun_error_code_strings_cn = [\n    \"\u6210\u529f\",\n    \"\u53c2\u6570\u9519\u8bef\",\n    \"\u89e3\u6790\u9519\u8bef\",\n    \"\u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\",\n    \"\u65e5\u671f\u5df2\u8fc7\",\n    \"\u673a\u5668\u7801\u4e0d\u5339\u914d\"];\n\nconst Hundun_error_code_strings = [\n    \"success\",\n    \"parameter error\",\n    \"parse error\",\n    \"license filename error\",\n    \"out of date\",\n    \"machine id unmatched\"];\n\ndays = Buffer.alloc(1 * ref.sizeof.int);\nlet error_code = tianzuo_HundunLib.tianzuo_Hundun_check(public_key, \"license.dat\", days);\nif (error_code !== Hundun_error_code_success) {\n    console.log(\"hundun.check error_code: %d error_string: %s\\n\", error_code, Hundun_error_code_strings_cn[error_code]);\n    return -1;\n}\ndays_data = ref.get(days, 0, ref.types.int);\nconsole.log(\"hundun.check days: %d\\n\", days_data);\n\n</code></pre> php <pre><code>&lt;?php\n\n// \u68c0\u67e5\u662f\u5426\u52a0\u8f7d\u4e86 FFI \u6269\u5c55\nif (extension_loaded('ffi')) {\n    echo(\"\u5df2\u542f\u7528 FFI \u6269\u5c55\\n\");\n} else {\n    die(\"\u672a\u542f\u52a8 FFI \u6269\u5c55\\n\");\n}\n\nenum Hundun_error_code\n{\n    const Hundun_error_code_success = 0;        //  \u6210\u529f\n    const Hundun_error_code_parameter = 1;      //  \u53c2\u6570\u9519\u8bef\n    const Hundun_error_code_parse = 2;          //  \u89e3\u6790\u9519\u8bef\n    const Hundun_error_code_licensefile = 3;    //  \u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\n    const Hundun_error_code_outofdate = 4;      //  \u65e5\u671f\u5df2\u8fc7\n    const Hundun_error_code_unmatched = 5;      //  \u673a\u5668\u7801\u4e0d\u5339\u914d\n}\n\n$ffi = FFI::cdef(\"\n    int tianzuo_Hundun_check(const char* public_key_string, const char* license_file, int* days);\n\", \"tianzuo.Hundun.dll\");\n\n$public_key = \"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\np1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\nLrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\nENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\nz1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\nouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\nlQIDAQAB\n-----END PUBLIC KEY-----\\n\";\n\ndefine('Hundun_error_code_strings_cn', [\n    \"\u6210\u529f\",\n    \"\u53c2\u6570\u9519\u8bef\",\n    \"\u89e3\u6790\u9519\u8bef\",\n    \"\u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\",\n    \"\u65e5\u671f\u5df2\u8fc7\",\n    \"\u673a\u5668\u7801\u4e0d\u5339\u914d\"]);\n\ndefine('Hundun_error_code_strings', [\n    \"success\",\n    \"parameter error\",\n    \"parse error\",\n    \"license filename error\",\n    \"out of date\",\n    \"machine id unmatched\"\n]);\n\n$days = FFI::new(\"int\");\n$error_code = $ffi-&gt;tianzuo_Hundun_check($public_key, \"license.dat\", FFI::addr($days));\nif ($error_code != Hundun_error_code::Hundun_error_code_success) {\n    echo \"hundun.check error_code: \" . $error_code . \" error_string: \" . Hundun_error_code_strings_cn[$error_code] . \"\\n\";\n    return;\n}\necho \"hundun.check days: \" . $days-&gt;cdata . \"\\n\";\n\n?&gt;\n</code></pre> vb <pre><code>\nImports System.Runtime.InteropServices\n\nEnum Hundun_error_code\n    Hundun_error_code_success = 0 '  \u6210\u529f\n    Hundun_error_code_parameter = 1 '  \u53c2\u6570\u9519\u8bef\n    Hundun_error_code_parse = 2 '  \u89e3\u6790\u9519\u8bef\n    Hundun_error_code_licensefile = 3 '  \u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\n    Hundun_error_code_outofdate = 4 '  \u65e5\u671f\u5df2\u8fc7\n    Hundun_error_code_unmatched = 5 '  \u673a\u5668\u7801\u4e0d\u5339\u914d\nEnd Enum\n\nModule Program\n    &lt;DllImport(\"tianzuo.Hundun.dll\")&gt;\n    Public Function tianzuo_Hundun_check(public_key_string As String, license_file As String, ByRef days As Integer) As Integer\n    End Function\n\n    ReadOnly Hundun_error_code_strings_cn() As String = {\n        \"\u6210\u529f\",\n        \"\u53c2\u6570\u9519\u8bef\",\n        \"\u89e3\u6790\u9519\u8bef\",\n        \"\u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\",\n        \"\u65e5\u671f\u5df2\u8fc7\",\n        \"\u673a\u5668\u7801\u4e0d\u5339\u914d\"}\n\n    ReadOnly Hundun_error_code_strings() As String = {\n        \"success\",\n        \"parameter error\",\n        \"parse error\",\n        \"license filename error\",\n        \"out of date\",\n        \"machine id unmatched\"}\n\n    Sub Main(args As String())\n        Dim public_key As String = \"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\np1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\nLrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\nENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\nz1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\nouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\nlQIDAQAB\n-----END PUBLIC KEY-----\"\n\n        Dim license_file As String = \"license.dat\"\n        Dim days As Integer = 0\n        Dim error_code As Integer = tianzuo_Hundun_check(public_key, license_file, days)\n        If (error_code &lt;&gt; Hundun_error_code.Hundun_error_code_success) Then\n            Console.WriteLine(\"hundun.check error_code: \" + error_code.ToString + \" error_string: \" + Hundun_error_code_strings_cn(error_code))\n            Return\n        End If\n\n        Console.WriteLine(\"hundun.check days:\" + days.ToString)\n    End Sub\nEnd Module\n\n</code></pre> go <pre><code>package main\n\n/*\n#include \"tianzuo.HundunInterface.h\"\n*/\nimport \"C\"\nimport (\n    \"fmt\"\n    \"syscall\"\n    \"unsafe\"\n)\n\nconst (\n    Hundun_error_code_success     = 0 //  \u6210\u529f\n    Hundun_error_code_parameter   = 1 //  \u53c2\u6570\u9519\u8bef\n    Hundun_error_code_parse       = 2 //  \u89e3\u6790\u9519\u8bef\n    Hundun_error_code_licensefile = 3 //  \u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\n    Hundun_error_code_outofdate   = 4 //  \u65e5\u671f\u5df2\u8fc7\n    Hundun_error_code_unmatched   = 5 //  \u673a\u5668\u7801\u4e0d\u5339\u914d\n)\n\nfunc main() {\n    const public_key string = \"-----BEGIN PUBLIC KEY-----\\n\" +\n        \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\" +\n        \"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\" +\n        \"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\" +\n        \"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\" +\n        \"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\" +\n        \"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\" +\n        \"lQIDAQAB\\n\" +\n        \"-----END PUBLIC KEY-----\\n\"\n\n    Hundun_error_code_strings_cn := [6]string{\n        \"\u6210\u529f\",\n        \"\u53c2\u6570\u9519\u8bef\",\n        \"\u89e3\u6790\u9519\u8bef\",\n        \"\u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\",\n        \"\u65e5\u671f\u5df2\u8fc7\",\n        \"\u673a\u5668\u7801\u4e0d\u5339\u914d\"}\n\n    //Hundun_error_code_strings := [6]string{\n    //  \"success\",\n    //  \"parameter error\",\n    //  \"parse error\",\n    //  \"license filename error\",\n    //  \"out of date\",\n    //  \"machine id unmatched\"}\n\n    dll := syscall.MustLoadDLL(\"tianzuo.Hundun.dll\")\n    tianzuo_Hundun_check := dll.MustFindProc(\"tianzuo_Hundun_check\")\n    days := C.int(0)\n    pub_key := C.CString(public_key)\n    license_file := C.CString(\"license.dat\")\n    error_code, _, _ := tianzuo_Hundun_check.Call(uintptr(unsafe.Pointer(pub_key)), uintptr(unsafe.Pointer(license_file)), uintptr(unsafe.Pointer(&amp;days)))\n    if error_code != Hundun_error_code_success {\n        fmt.Println(\"hundun.check error_code: \", error_code, \" error_string: \", Hundun_error_code_strings_cn[error_code])\n        return\n    }\n    fmt.Println(\"hundun.check days: \", days)\n}\n\n</code></pre> rust <pre><code>\nuse std::os::raw::c_char;\nuse std::ffi::{c_int};\nuse std::ffi::CString;\n\n#[link(name = \"tianzuo.Hundun\")]\nextern {\n    fn tianzuo_Hundun_check(public_key_string: *const c_char, license_file: *const c_char, days: *const c_int) -&gt; c_int;\n}\n\nconst Hundun_error_code_strings_cn: [&amp;str; 6] = [\n    \"\u6210\u529f\",\n    \"\u53c2\u6570\u9519\u8bef\",\n    \"\u89e3\u6790\u9519\u8bef\",\n    \"\u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\",\n    \"\u65e5\u671f\u5df2\u8fc7\",\n    \"\u673a\u5668\u7801\u4e0d\u5339\u914d\"];\n\nconst Hundun_error_code_strings: [&amp;str; 6] = [\n    \"success\",\n    \"parameter error\",\n    \"parse error\",\n    \"license filename error\",\n    \"out of date\",\n    \"machine id unmatched\"];\n\nfn main() {\n    unsafe {\n        let public_key = CString::new(String::from(\"-----BEGIN PUBLIC KEY-----\\n\\\n        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\\\n        p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\\\n        LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\\\n        ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\\\n        z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\\\n        ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\\\n        lQIDAQAB\\n\\\n        -----END PUBLIC KEY-----\\n\")).expect(\"Failed to create CString\");\n\n\n\n        let license_file = CString::new(String::from(\"license.dat\")).expect(\"Failed to create CString\");\n        let mut days: c_int = 0;\n        let error_code = tianzuo_Hundun_check(public_key.as_ptr(), license_file.as_ptr(), &amp;mut days);\n        if 0 != error_code {\n            let errorc: usize =  error_code as usize;\n            println!(\"hundun.check error_code: {:?} error_string: {:?}\", error_code, Hundun_error_code_strings_cn[errorc]);\n        }\n\n        println!(\"hundun.check days: {:?}\", days);\n    }\n}\n\n</code></pre> ruby <pre><code>require 'fiddle'\n\nlib = Fiddle::dlopen('C:/Users/zhengtianzuo/RubymineProjects/tianzuo.HundunTest/tianzuo.Hundun.dll')\ntianzuo_Hundun_check = Fiddle::Function.new(lib['tianzuo_Hundun_check'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\n\npublic_key = \"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\np1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\nLrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\nENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\nz1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\nouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\nlQIDAQAB\n-----END PUBLIC KEY-----\"\n\nHundun_error_code_strings_cn = [\n  \"\u6210\u529f\",\n  \"\u53c2\u6570\u9519\u8bef\",\n  \"\u89e3\u6790\u9519\u8bef\",\n  \"\u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\",\n  \"\u65e5\u671f\u5df2\u8fc7\",\n  \"\u673a\u5668\u7801\u4e0d\u5339\u914d\"]\n\nHundun_error_code_strings = [\n  \"success\",\n  \"parameter error\",\n  \"parse error\",\n  \"license filename error\",\n  \"out of date\",\n  \"machine id unmatched\"]\n\nlicense_file = \"license.dat\"\ndays = Fiddle::Pointer.malloc(Fiddle::SIZEOF_INT)\nerror_code = tianzuo_Hundun_check.call(public_key, license_file, days)\nif error_code != 0\n  print(\"hundun.check error_code: \", error_code, \" error_string:\", Hundun_error_code_strings_cn[error_code] ,\" \\n\")\n  return\nend\n\nint_days = days[0, Fiddle::SIZEOF_INT].unpack('I')[0]\nprint(\"hundun.check days: \", int_days, \"\\n\")\n\n</code></pre>"},{"location":"component/tianzuo.Hundun/#_8","title":"\u4e0b\u8f7d","text":""},{"location":"component/tianzuo.Kongtong/","title":"\u5929\u4f50.\u5d06\u5cd2\u5370","text":""},{"location":"component/tianzuo.Kongtong/#_2","title":"\u5929\u4f50.\u5d06\u5cd2\u5370","text":"\u64cd\u4f5c\u7cfb\u7edf \u7f16\u8bd1\u5668 \u7f16\u7a0b\u8bed\u8a00"},{"location":"component/tianzuo.Kongtong/#_3","title":"\u7b80\u4ecb","text":"<p>\u5929\u4f50.\u5d06\u5cd2\u5370 Windows\u5e73\u53f0\u4e0b\u5e94\u7528\u7a0b\u5e8f\u53d1\u751f\u5d29\u6e83\u65f6, \u751f\u6210\u5d29\u6e83\u8f6c\u50a8\u6587\u4ef6\u7528\u4e8e\u5206\u6790\u5b9a\u4f4d\u5230\u5d29\u6e83\u4ee3\u7801\u884c\uff0c\u540c\u65f6\u751f\u6210\u7cfb\u7edf\u73af\u5883\u76f8\u5173\u4fe1\u606f\u3002</p> <p>\u4f20\u8bf4: \u5d06\u5cd2\u6d77\u4e0a\u4e0d\u6b7b\u9f99\u65cf\u7684\u62a4\u5b88\u795e\u5668\uff0c\u5176\u4e0a\u523b\u5851\u6709\u4e94\u65b9\u5929\u5e1d\u5f62\u8c8c\uff0c\u5e76\u6709\u7389\u9f99\u76d8\u7ed5\u3002\u81ea\u53e4\u76f8\u4f20\u5f97\u5230\u5b83\u7684\u4eba\uff0c\u5c31\u80fd\u62e5\u6709\u5929\u4e0b\uff0c\u4e5f\u6709\u4eba\u4f20\u8bf4\u5b83\u80fd\u8ba9\u4eba\u4e0d\u8001\u4e0d\u6b7b\u3002</p>"},{"location":"component/tianzuo.Kongtong/#_4","title":"\u76ee\u6807","text":"<p>\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u5076\u5c14\u9047\u5230\u7a0b\u5e8f\u5d29\u6e83\u7684\u60c5\u51b5\uff0c\u9700\u8981\u5206\u6790\u5d29\u6e83\u539f\u56e0\u548c\u5b9a\u4f4d\u5230\u4ee3\u7801\u884c\uff0c\u540c\u65f6\u9700\u8981\u5206\u6790\u73af\u5883\u56e0\u7d20\u7b49\u3002</p> <p></p>"},{"location":"component/tianzuo.Kongtong/#_5","title":"\u529f\u80fd","text":"<ul> <li>\ud83e\udde9 \u96c6\u6210\u7b80\u5355</li> <li>\ud83d\udcdd \u53ef\u9009\u62e9\u751f\u6210dmp\u4e0e\u65e5\u5fd7</li> <li>\ud83e\ude90 \u65e5\u5fd7\u591a\u8bed\u8a00(\u7b80\u4f53\u4e2d\u6587/English)</li> <li>\u26d3 \u652f\u6301\u7ebf\u7a0b\u5185\u68c0\u6d4b</li> </ul>"},{"location":"component/tianzuo.Kongtong/#_6","title":"\u622a\u56fe","text":"<p>\u901a\u8fc7dmp\u6587\u4ef6\u5206\u6790\u5b9a\u4f4d\u5d29\u6e83\u4ee3\u7801\u884c:</p> <p>Visual Studio \u5206\u6790dmp\u6587\u4ef6</p> <p></p> <p>WinDbg \u5206\u6790dmp\u6587\u4ef6</p> <p></p> <p>\u73af\u5883\u65e5\u5fd7:</p> <p></p>"},{"location":"component/tianzuo.Kongtong/#_7","title":"\u5b89\u88c5","text":"<p>\u9879\u76ee\u4e2d\u542f\u7528\u5f02\u5e38\u68c0\u6d4b</p>"},{"location":"component/tianzuo.Kongtong/#visual-studio","title":"Visual Studio","text":"<p>Visual Studio\u4e2d\u5f00\u542fC++\u5f02\u5e38\u68c0\u6d4b</p> <p></p> <p>Visual Studio\u4e2d\u5f00\u542f\u751f\u6210pdb\u6587\u4ef6</p>"},{"location":"component/tianzuo.Kongtong/#qt-creator","title":"Qt Creator","text":"<p>Qt Creator\u4e2d\u5f00\u542f\u751f\u6210pdb\u6587\u4ef6</p> <pre><code>CONFIG += force_debug_info\nCONFIG += senarate_debug_info\n</code></pre>"},{"location":"component/tianzuo.Kongtong/#_8","title":"\u4f8b\u5b50","text":"<pre><code>#include \"tianzuo.KongtongTest.h\"\n#include \"../../include/tianzuo.Kongtong.h\"\n#include &lt;Windows.h&gt;\n\nvoid init(int argc, char* argv[]) {\n    tianzuo_KongtongTest test;\n    test.doSomething();\n}\n\nint main(int argc, char* argv[]) {\n    HINSTANCE hKongtong = LoadLibrary(L\"tianzuo.Kongtong.dll\");\n    if (!hKongtong) {\n        init(argc, argv);\n        return(0);\n    }\n\n    tianzuo_Kongtong_get_exception getException = (tianzuo_Kongtong_get_exception)GetProcAddress(hKongtong, \"Kongtong_get_exception\");\n    if (!getException) return -1;\n    __try {\n        init(argc, argv);\n    }\n    __except (getException(GetExceptionInformation(), Kongtong_create_normal, 0)) {\n    }\n\n    if (hKongtong != nullptr) {\n        getException = nullptr;\n        FreeLibrary(hKongtong);\n        hKongtong = nullptr;\n    }\n    return(0);\n}\n</code></pre>"},{"location":"component/tianzuo.Kongtong/#_9","title":"\u4e0b\u8f7d","text":""},{"location":"component/tianzuo.LianYao/","title":"\u5929\u4f50.\u70bc\u5996\u58f6","text":""},{"location":"component/tianzuo.LianYao/#_2","title":"\u5929\u4f50.\u70bc\u5996\u58f6","text":"\u64cd\u4f5c\u7cfb\u7edf \u7f16\u8bd1\u5668 \u7f16\u7a0b\u8bed\u8a00"},{"location":"component/tianzuo.LianYao/#_3","title":"\u7b80\u4ecb","text":"<p>\u5929\u4f50.\u70bc\u5996\u58f6 \u4e00\u79cd\u7b80\u5355\u7684\u5185\u5b58\u6c60\uff0c\u521d\u59cb\u5316\u7533\u8bf7\u4e00\u4e9b\u5185\u5b58\u5faa\u73af\u4f7f\u7528\uff0c\u4e0d\u591f\u65f6\u52a8\u6001\u8fdb\u884c\u6269\u5bb9\uff0c\u5e76\u4e14\u5e26\u5185\u5b58\u6cc4\u6f0f\u68c0\u6d4b\u529f\u80fd\u3002</p> <p>\u4f20\u8bf4: \u5b83\u4ee3\u8868\u7740\u878d\u5408\u548c\u8fdb\u5316\u3002\u70bc\u5996\u58f6\u53ef\u4ee5\u6536\u7eb3\u4e07\u7269\uff0c\u5c06\u5996\u517d\u3001\u7075\u517d\u7b49\u751f\u7269\u70bc\u5316\u4e3a\u58f6\u4e2d\u5143\u6c14\u3002\u8fd9\u79cd\u529b\u91cf\u8c61\u5f81\u7740\u878d\u5408\u4e0e\u8fdb\u5316\uff0c\u5bd3\u610f\u7740\u9053\u5bb6\u6587\u5316\u7684\u5305\u5bb9\u4e0e\u548c\u8c10\u3002</p>"},{"location":"component/tianzuo.LianYao/#_4","title":"\u76ee\u6807","text":"<p>\u8bbe\u8ba1\u4e00\u79cd\u5185\u5b58\u6c60\uff0c\u5faa\u73af\u8fdb\u884c\u5185\u5b58\u4f7f\u7528\uff0c\u63d0\u9ad8\u5185\u5b58\u4f7f\u7528\u6548\u7387\uff0c\u540c\u65f6\u63d0\u4f9b\u5185\u5b58\u6cc4\u6f0f\u68c0\u6d4b\u529f\u80fd\u3002</p> <p></p>"},{"location":"component/tianzuo.LianYao/#_5","title":"\u529f\u80fd","text":"<ul> <li>\ud83e\udde9 \u96c6\u6210\u7b80\u5355</li> <li>\ud83d\udcdd \u53ef\u9009\u62e9\u751f\u6210\u5185\u5b58\u6cc4\u6f0f\u65e5\u5fd7</li> <li>\ud83e\ude90 \u65e5\u5fd7\u591a\u8bed\u8a00(\u7b80\u4f53\u4e2d\u6587/English)</li> </ul>"},{"location":"component/tianzuo.LianYao/#_6","title":"\u622a\u56fe","text":"<p>\u901a\u8fc7\u65e5\u5fd7\u5206\u6790\u5b9a\u4f4d\u5185\u5b58\u6cc4\u6f0f\u4ee3\u7801\u884c:</p> <p></p>"},{"location":"component/tianzuo.LianYao/#_7","title":"\u4f8b\u5b50","text":"<pre><code>\n#include &lt;iostream&gt;\n#include \"../../include/tianzuo.LianYaoInterface.h\"\n\nvoid* operator new(size_t size) {\n    return tianzuo_LianYaoInt::mem_get(size);\n}\nvoid* operator new[](size_t size) {\n    return operator new(size);\n}\n\nvoid operator delete(void* ptr) noexcept {\n    tianzuo_LianYaoInt::mem_del(ptr);\n}\nvoid operator delete[](void* ptr) noexcept {\n    operator delete(ptr);\n}\n\nclass cpp {\n public:\n    cpp() {}\n    ~cpp() {}\n private:\n     int m_a;\n     long m_l;\n     float m_f;\n};\n\nint main(int argc, char* argv[]) {\n    std::cout &lt;&lt; \"start tianzuo.LianYaoTest ...\\n\";\n#ifdef WIN32\n    tianzuo_LianYaoInt::initialize(3, \"memory_leaks.log\", nullptr, 0);\n#else\n    tianzuo_LianYaoInt::initialize(3, \"memory_leaks.log\", \"./tianzuo.LianYaoTest\", 0);\n#endif\n\n    int* new_int = new int(10); // leak 4\n    int* new_int2 = new int(10);\n    *new_int2 = 12;\n\n    for (size_t i = 0; i &lt; 10; i++) {\n        int* new_int3 = new int(10);\n        *new_int3 = 12;\n        delete new_int3;\n    }\n\n    char* new_buf = new char[1555]; // leak 1555\n    char* new_buf2 = new char[123];\n\n    cpp* new_class = new cpp(); // leak 12\n    cpp* new_class2 = new cpp();\n\n    class1* cls1 = new class1();\n    delete cls1;\n\n    delete new_class2;\n    delete new_int2;\n    delete[] new_buf2;\n\n    tianzuo_LianYaoInt::terminate();\n\n    return 0;\n}\n\n</code></pre>"},{"location":"component/tianzuo.LianYao/#_8","title":"\u4e0b\u8f7d","text":""},{"location":"component/tianzuo.Qiankun/","title":"\u5929\u4f50.\u4e7e\u5764\u888b","text":""},{"location":"component/tianzuo.Qiankun/#_2","title":"\u5929\u4f50.\u4e7e\u5764\u888b","text":"\u64cd\u4f5c\u7cfb\u7edf \u7f16\u8bd1\u5668 \u7f16\u7a0b\u8bed\u8a00"},{"location":"component/tianzuo.Qiankun/#_3","title":"\u7b80\u4ecb","text":"<p>\u5929\u4f50.\u4e7e\u5764\u888b \u57fa\u4e8e\u62bd\u5c49\u5f0f\u6587\u4ef6\u5b58\u50a8\u7684NoSql\u6570\u636e\u5e93\uff0c\u53ef\u7528\u4e8e\u6587\u4ef6\u6253\u5305\uff0c\u6570\u636e\u6574\u5408\uff0c\u52a0\u5bc6\u5b58\u653e\u7b49\u591a\u79cd\u7528\u9014\u3002\u53ef\u4ee5\u65b9\u4fbf\u5feb\u6377\u7684\u642d\u5efa\u548c\u90e8\u7f72\u5b58\u50a8\u5e94\u7528\u7684\u7cfb\u7edf\u3002</p> <p>\u4f20\u8bf4: \u5f25\u52d2\u6240\u6709\uff0c\u4e13\u505a\u50a8\u7269\u4e4b\u7528\u3002\u62e5\u6709\u4e0d\u53ef\u601d\u8bae\u4e4b\u529b\uff0c\u5185\u90e8\u6709\u8457\u5947\u5f02\u4e4b\u7a7a\u95f4\uff0c\u7a7a\u95f4\u4e4b\u5927\u4f3c\u80fd\u5c06\u5929\u5730\u6536\u7eb3\u4e8e\u5185\u3002\u888b\u4e2d\u53e6\u6709\u4e7e\u5764\uff0c\u5e94\u6709\u5c3d\u6709\uff0c\u53d6\u4e4b\u4e0d\u5c3d\u3002</p>"},{"location":"component/tianzuo.Qiankun/#_4","title":"\u76ee\u6807","text":"<p>\u6784\u5efa\u4e00\u79cd\u4f7f\u7528\u7b80\u5355\u63a5\u53e3\u8c03\u7528\u5c31\u53ef\u4ee5\u5b8c\u6210\u6570\u636e\u7ba1\u7406\u7684NoSql\u6570\u636e\u5e93\u3002</p> <p></p>"},{"location":"component/tianzuo.Qiankun/#_5","title":"\u529f\u80fd","text":"<ul> <li>\ud83e\udde9 \u96c6\u6210\u7b80\u5355</li> <li>\ud83d\udce6 \u5b58\u653e\u6587\u4ef6\u53ef\u81ea\u7531\u9009\u62e9\u538b\u7f29</li> <li>\ud83e\udea2 \u6570\u636e\u7ecf\u8fc7256\u4f4dAES\u7b97\u6cd5\u52a0\u5bc6</li> <li>\ud83d\udcd2 \u652f\u6301\u6570\u636e\u6279\u91cf\u589e\u52a0/\u5220\u9664/\u4fee\u6539/\u67e5\u8be2</li> <li>\ud83d\udcc3 \u652f\u6301\u76f4\u63a5\u83b7\u53d6\u539f\u59cb\u6570\u636e\u6d41</li> </ul>"},{"location":"component/tianzuo.Qiankun/#_6","title":"\u622a\u56fe","text":"<p>\u5929\u4f50.\u4e7e\u5764\u888b\u6d4b\u8bd5\u7a0b\u5e8f:</p> <p></p>"},{"location":"component/tianzuo.Qiankun/#_7","title":"\u4f8b\u5b50","text":"cpp <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\n#include \"tianzuo.QiankunInterface.h\" // \u63a5\u53e3\u5934\u6587\u4ef6 interface heaher file\n\nint main() {\n    // \u51c6\u5907\u6570\u636e prepare data\n    Qiankun_db_verify_struct db_verify(\"qiankunDataBase.Ztz\", \"password\");\n    int integer = 12345678;\n    Qiankun_data_type_struct data_type(Qiankun_data_type_integer, -1, \"integer\");\n    Qiankun_user_data_struct user_data(&amp;integer, 0);\n    int data_size = 0;\n    Qiankun_get_user_data_struct get_user_data(reinterpret_cast&lt;void*&amp;&gt;(integer), &amp;data_size);\n\n    // \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n    std::unique_ptr&lt;tianzuo_QiankunInterface&gt; qiankun_interface(new tianzuo_QiankunInterface());\n\n    // \u521b\u5efa\u5b9e\u4f8b create an instance\n    tianzuo_QiankunInt* qiankun = qiankun_interface-&gt;initialize();\n\n    // \u521d\u59cb\u5316\u5b9e\u4f8b initialize the instance\n    int error_code = qiankun-&gt;initialize();\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"initialize error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\n    // \u521b\u5efa\u6570\u636e\u5e93 create database\n    error_code = qiankun-&gt;db_create_database(&amp;db_verify, \"qiankunDataBase\", true);\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"db_create_database error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\n    // \u6253\u5f00\u6570\u636e\u5e93 open database\n    error_code = qiankun-&gt;db_open_database(&amp;db_verify);\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"db_open_database error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\n    // \u5411\u6570\u636e\u5e93\u5199\u5165\u4e00\u4e2a\u6574\u578b\u6570\u636e writes an integer to the database\n    error_code = qiankun-&gt;data_combine(&amp;db_verify, &amp;data_type, nullptr, &amp;user_data, false, -1);\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"data_combine error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\n\n    // \u8bfb\u53d6\u521a\u5199\u5165\u7684\u6570\u636e read the data just written\n    integer = -1;\n    error_code = qiankun-&gt;data_extract(&amp;db_verify, &amp;data_type, nullptr, &amp;get_user_data);\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"data_extract error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\n    std::cout &lt;&lt; \"get integer data: \" &lt;&lt; integer;\n\n    // \u5173\u95ed\u6570\u636e\u5e93 close database\n    error_code = qiankun-&gt;db_close_database(&amp;db_verify);\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"db_close_database error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\nreturn_error:\n\n    // \u91ca\u653e\u63a5\u53e3 terminate the interface\n    if (qiankun_interface != nullptr &amp;&amp; qiankun != nullptr) {\n        qiankun_interface-&gt;terminate(&amp;qiankun);\n    }\n\n    std::cout &lt;&lt; \"test done -------------------\";\n\n    return 0;\n}\n</code></pre> python <pre><code>from ctypes import *\nfrom enum import Enum\nimport ctypes\n\ntianzuo_QiankunLib = cdll.LoadLibrary('./tianzuo.Qiankun.dll')\n\nclass Qiankun_error_code(Enum):\n    Qiankun_errorcode_success           = 1 # \u6b63\u786e\u7684\u503c\n    Qiankun_errorcode_normal            = 2 # \u9519\u8bef\u7684\u503c\n    Qiankun_errorcode_differ            = 3 # \u6570\u636e\u5e93\u6587\u4ef6\u6570\u6548\u9a8c\u672a\u901a\u8fc7 (The number of database files fails to be verified)\n    Qiankun_errorcode_no_rights         = 4 # \u6570\u636e\u5e93\u5bc6\u7801\u6548\u9a8c\u672a\u901a\u8fc7 (The database password verification failed)\n    Qiankun_errorcode_db_not_exist      = 5 # \u6570\u636e\u5e93\u6587\u4ef6\u4e0d\u5b58\u5728 (The database file does not exist)\n    Qiankun_errorcode_exist             = 6 # \u6570\u636e\u5df2\u5b58\u5728 (Data already exists)\n    Qiankun_errorcode_not_exist         = 7 # \u6570\u636e\u4e0d\u5b58\u5728 (Data does not exist)\n    Qiankun_errorcode_out_of_range      = 8 # \u8d85\u51fa\u8303\u56f4 (out of range)\n    Qiankun_errorcode_type              = 9 # \u7c7b\u578b\u4e0d\u7b26 (wrong type)\n    Qiankun_errorcode_param             = 10 # \u53c2\u6570\u9519\u8bef (parameter error)\n    Qiankun_errorcode_compress          = 11 # \u538b\u7f29\u9519\u8bef (compression error)\n    Qiankun_errorcode_get_array         = 12 # \u6570\u7ec4\u9519\u8bef (arrary error)\n    Qiankun_errorcode_out_of_memory     = 13 # \u5185\u5b58\u6ea2\u51fa (memory overflow)\n    Qiankun_errorcode_handle            = 14 # \u53e5\u67c4\u9519\u8bef (error handle)\n    Qiankun_errorcode_io                = 15 # IO\u9519\u8bef (io error)\n\nclass tianzuo_QiankunInt:\n    def __init__(self):\n        tianzuo_QiankunLib.tianzuo_QiankunInterface_initialize.restype = c_void_p\n        self.obj = tianzuo_QiankunLib.tianzuo_QiankunInterface_initialize()\n\n    def __del__(self):\n        tianzuo_QiankunLib.tianzuo_QiankunInterface_terminate.argtypes = [c_void_p]\n        tianzuo_QiankunLib.tianzuo_QiankunInterface_terminate(self.obj)\n\n    def initialize(self):\n        tianzuo_QiankunLib.tianzuo_QiankunInterface_initialize.restype = c_int\n        tianzuo_QiankunLib.tianzuo_QiankunInt_initialize.argtypes = [c_void_p]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_initialize(self.obj)\n\n    def db_create_database(self, db_file_name, db_password, db_name, over_write):\n        tianzuo_QiankunLib.tianzuo_QiankunInt_db_create_database.argtypes = [c_void_p, c_char_p, c_char_p, c_char_p, c_int]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_db_create_database(self.obj, db_file_name, db_password, db_name, over_write)\n\n    def db_open_database(self, db_file_name, db_password):\n        tianzuo_QiankunLib.tianzuo_QiankunInt_db_open_database.argtypes = [c_void_p, c_char_p, c_char_p]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_db_open_database(self.obj, db_file_name, db_password)\n\n    def db_close_database(self, db_file_name, db_password):\n        tianzuo_QiankunLib.tianzuo_QiankunInt_db_close_database.argtypes = [c_void_p, c_char_p, c_char_p]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_db_close_database(self.obj, db_file_name, db_password)\n\n    def data_int_combine(self, db_file_name, db_password, data_name, remark, data):\n        tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_combine.argtypes = [c_void_p, c_char_p, c_char_p, c_char_p, c_char_p, c_int]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_combine(self.obj, db_file_name, db_password, data_name, remark, data)\n\n    def data_int_extract(self, db_file_name, db_password, data_name, data):\n        tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_extract.argtypes = [c_void_p, c_char_p, c_char_p, c_char_p, ctypes.POINTER(ctypes.c_int)]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_extract(self.obj, db_file_name, db_password, data_name, data)\n\ndef main():\n\n    # \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n    print(\"initialize the interface\")\n\n    # \u521b\u5efa\u5b9e\u4f8b create an instance\n    qiankun = tianzuo_QiankunInt()\n    error_code = qiankun.initialize()\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"initialize error:\", error_code)\n        return\n\n    # \u521b\u5efa\u6570\u636e\u5e93 create database\n    db_file_name = b\"qiankunDataBase.Ztz\"\n    db_password = b\"password\"\n    error_code = qiankun.db_create_database(db_file_name, db_password, b\"qiankunDataBase\", True)\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"db_create_database error:\", error_code)\n        return\n\n    # \u6253\u5f00\u6570\u636e\u5e93 open database\n    error_code = qiankun.db_open_database(db_file_name, db_password)\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"db_open_database error:\", error_code)\n        return\n\n    # \u5411\u6570\u636e\u5e93\u5199\u5165\u4e00\u4e2a\u6574\u578b\u6570\u636e writes an integer to the database\n    intInt = 12345678\n    error_code = qiankun.data_int_combine(db_file_name, db_password, b\"integer\", None, intInt)\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"data_combine error:\", error_code)\n        return\n\n    # \u8bfb\u53d6\u521a\u5199\u5165\u7684\u6570\u636e read the data just written\n    return_data = ctypes.c_int()\n    error_code = qiankun.data_int_extract(db_file_name, db_password, b\"integer\", ctypes.byref(return_data))\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"data_extract error:\", error_code)\n        return\n\n    integer = return_data.value\n    print(\"get integer data: {}\".format(integer))\n\n    # \u5173\u95ed\u6570\u636e\u5e93 close database\n    error_code = qiankun.db_close_database(db_file_name, db_password)\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"db_close_database error:\", error_code)\n        return\n\n    print(\"test done -------------------\")\n\nif __name__ == '__main__':\n    main()\n\n</code></pre> java <pre><code>package cn.camelsoft;\n\nimport com.sun.jna.Library;\nimport com.sun.jna.Native;\nimport com.sun.jna.Pointer;\n\nenum Qiankun_error_code {\n    Qiankun_errorcode_success           (0x00000001),   ///&lt;  \u6b63\u786e\u7684\u503c\n    Qiankun_errorcode_normal            (0x00000002),   ///&lt;  \u9519\u8bef\u7684\u503c\n    Qiankun_errorcode_differ            (0x00000003),   ///&lt;  \u6570\u636e\u5e93\u6587\u4ef6\u6570\u6548\u9a8c\u672a\u901a\u8fc7 (The number of database files fails to be verified)\n    Qiankun_errorcode_no_rights         (0x00000004),   ///&lt;  \u6570\u636e\u5e93\u5bc6\u7801\u6548\u9a8c\u672a\u901a\u8fc7 (The database password verification failed)\n    Qiankun_errorcode_db_not_exist      (0x00000005),   ///&lt;  \u6570\u636e\u5e93\u6587\u4ef6\u4e0d\u5b58\u5728 (The database file does not exist)\n    Qiankun_errorcode_exist             (0x00000006),   ///&lt;  \u6570\u636e\u5df2\u5b58\u5728 (Data already exists)\n    Qiankun_errorcode_not_exist         (0x00000007),   ///&lt;  \u6570\u636e\u4e0d\u5b58\u5728 (Data does not exist)\n    Qiankun_errorcode_out_of_range      (0x00000008),   ///&lt;  \u8d85\u51fa\u8303\u56f4 (out of range)\n    Qiankun_errorcode_type              (0x00000009),   ///&lt;  \u7c7b\u578b\u4e0d\u7b26 (wrong type)\n    Qiankun_errorcode_param             (0x0000000A),   ///&lt;  \u53c2\u6570\u9519\u8bef (parameter error)\n    Qiankun_errorcode_compress          (0x0000000B),   ///&lt;  \u538b\u7f29\u9519\u8bef (compression error)\n    Qiankun_errorcode_get_array         (0x0000000C),   ///&lt;  \u6570\u7ec4\u9519\u8bef (arrary error)\n    Qiankun_errorcode_out_of_memory     (0x0000000D),   ///&lt;  \u5185\u5b58\u6ea2\u51fa (memory overflow)\n    Qiankun_errorcode_handle            (0x0000000E),   ///&lt;  \u53e5\u67c4\u9519\u8bef (error handle)\n    Qiankun_errorcode_io                (0x0000000F);   ///&lt;  IO\u9519\u8bef (io error)\n\n    private int value;\n\n    Qiankun_error_code(int value) {\n        this.value = value;\n    }\n\n    public int getValue() {\n        return value;\n    }\n}\n\npublic class Main {\n\n    public interface tianzuo_QiankunLib extends Library {\n        tianzuo_QiankunLib instance = (tianzuo_QiankunLib) Native.load(\"./tianzuo.Qiankun.dll\", tianzuo_QiankunLib.class);\n        Pointer tianzuo_QiankunInterface_initialize();\n        void tianzuo_QiankunInterface_terminate(Pointer qiankun);\n        int tianzuo_QiankunInt_initialize(Pointer qiankun);\n\n        int tianzuo_QiankunInt_db_create_database(Pointer qiankun, String db_file_name, String db_password, String db_name, Boolean over_write);\n        int tianzuo_QiankunInt_db_open_database(Pointer qiankun, String db_file_name, String db_password);\n        int tianzuo_QiankunInt_db_close_database(Pointer qiankun, String db_file_name, String db_password);\n        int tianzuo_QiankunInt_data_int_combine(Pointer qiankun, String db_file_name, String db_password, String data_name, String remark, int data);\n        int tianzuo_QiankunInt_data_int_extract(Pointer qiankun, String db_file_name, String db_password, String data_name, int[] data);\n    }\n\n    public static void main(String[] args) {\n        System.setProperty(\"jna.encoding\",\"UTF-8\");\n\n        // \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n        System.out.printf(\"initialize the interface\\n\");\n\n        // \u521b\u5efa\u5b9e\u4f8b create an instance\n        Pointer qiankun = tianzuo_QiankunLib.instance.tianzuo_QiankunInterface_initialize();\n        int error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_initialize(qiankun);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_initialize error: %d\\n\", error_code);\n            return;\n        }\n\n        // \u521b\u5efa\u6570\u636e\u5e93 create database\n        String db_file_name = \"qiankunDataBase.Ztz\";\n        String db_password = \"password\";\n        error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_db_create_database(qiankun, db_file_name, db_password, \"qiankunDataBase\", true);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_db_create_database error: %d\\n\", error_code);\n            return;\n        }\n\n        // \u6253\u5f00\u6570\u636e\u5e93 open database\n        error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_db_open_database(qiankun, db_file_name, db_password);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_db_open_database error: %d\\n\", error_code);\n            return;\n        }\n\n        // \u5411\u6570\u636e\u5e93\u5199\u5165\u4e00\u4e2a\u6574\u578b\u6570\u636e writes an integer to the database\n        int intInt = 12345678;\n        error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_data_int_combine(qiankun, db_file_name, db_password, \"integer\", \"\", intInt);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_data_int_combine error: %d\\n\", error_code);\n            return;\n        }\n\n        // \u8bfb\u53d6\u521a\u5199\u5165\u7684\u6570\u636e read the data just written\n        int[] return_data = {0};\n        error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_data_int_extract(qiankun, db_file_name, db_password, \"integer\", return_data);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_data_int_extract error: %d\\n\", error_code);\n            return;\n        }\n\n        System.out.printf(\"get int: %d\\n\", return_data[0]);\n\n        // \u5173\u95ed\u6570\u636e\u5e93 close database\n        error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_db_close_database(qiankun, db_file_name, db_password);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_db_close_database error: %d\\n\", error_code);\n            return;\n        }\n\n        System.out.printf(\"test done -------------------\\n\");\n\n        tianzuo_QiankunLib.instance.tianzuo_QiankunInterface_terminate(qiankun);\n    }\n}\n</code></pre> csharp <pre><code>\n\nusing System.Runtime.InteropServices;\n\npublic enum Qiankun_error_code\n{\n    Qiankun_errorcode_success       = 0x00000001,              ///&lt;  \u6b63\u786e\u7684\u503c\n    Qiankun_errorcode_normal        = 0x00000002,              ///&lt;  \u9519\u8bef\u7684\u503c\n    Qiankun_errorcode_differ        = 0x00000003,              ///&lt;  \u6570\u636e\u5e93\u6587\u4ef6\u6570\u6548\u9a8c\u672a\u901a\u8fc7 (The number of database files fails to be verified)\n    Qiankun_errorcode_no_rights     = 0x00000004,              ///&lt;  \u6570\u636e\u5e93\u5bc6\u7801\u6548\u9a8c\u672a\u901a\u8fc7 (The database password verification failed)\n    Qiankun_errorcode_db_not_exist  = 0x00000005,              ///&lt;  \u6570\u636e\u5e93\u6587\u4ef6\u4e0d\u5b58\u5728 (The database file does not exist)\n    Qiankun_errorcode_exist         = 0x00000006,              ///&lt;  \u6570\u636e\u5df2\u5b58\u5728 (Data already exists)\n    Qiankun_errorcode_not_exist     = 0x00000007,              ///&lt;  \u6570\u636e\u4e0d\u5b58\u5728 (Data does not exist)\n    Qiankun_errorcode_out_of_range  = 0x00000008,              ///&lt;  \u8d85\u51fa\u8303\u56f4 (out of range)\n    Qiankun_errorcode_type          = 0x00000009,              ///&lt;  \u7c7b\u578b\u4e0d\u7b26 (wrong type)\n    Qiankun_errorcode_param         = 0x0000000A,              ///&lt;  \u53c2\u6570\u9519\u8bef (parameter error)\n    Qiankun_errorcode_compress      = 0x0000000B,              ///&lt;  \u538b\u7f29\u9519\u8bef (compression error)\n    Qiankun_errorcode_get_array     = 0x0000000C,              ///&lt;  \u6570\u7ec4\u9519\u8bef (arrary error)\n    Qiankun_errorcode_out_of_memory = 0x0000000D,              ///&lt;  \u5185\u5b58\u6ea2\u51fa (memory overflow)\n    Qiankun_errorcode_handle        = 0x0000000E,              ///&lt;  \u53e5\u67c4\u9519\u8bef (error handle)\n    Qiankun_errorcode_io            = 0x0000000F,              ///&lt;  IO\u9519\u8bef (io error)\n}\n\nclass Program {\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern IntPtr tianzuo_QiankunInterface_initialize();\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern void tianzuo_QiankunInterface_terminate(IntPtr qiankun);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_initialize(IntPtr qiankun);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_db_create_database(IntPtr qiankun, string db_file_name, string db_password, string db_name, bool over_write);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_db_open_database(IntPtr qiankun, string db_file_name, string db_password);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_db_close_database(IntPtr qiankun, string db_file_name, string db_password);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_data_int_combine(IntPtr qiankun, string db_file_name, string db_password, string data_name, string remark, int data);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_data_int_extract(IntPtr qiankun, string db_file_name, string db_password, string data_name, ref int data);\n\n    static void Main(string[] args) {\n        // \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n        Console.WriteLine(\"initialize the interface\\n\");\n\n        // \u521b\u5efa\u5b9e\u4f8b create an instance\n        IntPtr qiankun = tianzuo_QiankunInterface_initialize();\n        int error_code = tianzuo_QiankunInt_initialize(qiankun);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success))\n        {\n            Console.WriteLine(\"tianzuo_QiankunInt_initialize error:\" + error_code);\n            return;\n        }\n\n        // \u521b\u5efa\u6570\u636e\u5e93 create database\n        string db_file_name = \"qiankunDataBase.Ztz\";\n        string db_password = \"password\";\n        error_code = tianzuo_QiankunInt_db_create_database(qiankun, db_file_name, db_password, \"qiankunDataBase\", true);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success))\n        {\n            Console.WriteLine(\"tianzuo_QiankunInt_db_create_database error:\" + error_code);\n            return;\n        }\n\n        // \u6253\u5f00\u6570\u636e\u5e93 open database\n        error_code = tianzuo_QiankunInt_db_open_database(qiankun, db_file_name, db_password);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success)) {\n            Console.WriteLine(\"tianzuo_QiankunInt_db_open_database error:\" + error_code);\n            return;\n        }\n\n        // \u5411\u6570\u636e\u5e93\u5199\u5165\u4e00\u4e2a\u6574\u578b\u6570\u636e writes an integer to the database\n        int intInt = 12345678;\n        error_code = tianzuo_QiankunInt_data_int_combine(qiankun, db_file_name, db_password, \"integer\", \"\", intInt);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success))\n        {\n            Console.WriteLine(\"tianzuo_QiankunInt_data_int_combine error:\" + error_code);\n            return;\n        }\n\n        // \u8bfb\u53d6\u521a\u5199\u5165\u7684\u6570\u636e read the data just written\n        int return_data = 0;\n        error_code = tianzuo_QiankunInt_data_int_extract(qiankun, db_file_name, db_password, \"integer\", ref return_data);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success))\n        {\n            Console.WriteLine(\"tianzuo_QiankunInt_data_int_extract error:\" + error_code);\n            return;\n        }\n\n        Console.WriteLine(\"get int: \" + return_data);\n\n        // \u5173\u95ed\u6570\u636e\u5e93 close database\n        error_code = tianzuo_QiankunInt_db_close_database(qiankun, db_file_name, db_password);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success))\n        {\n            Console.WriteLine(\"tianzuo_QiankunInt_db_close_database error:\" + error_code);\n            return;\n        }\n\n        Console.WriteLine(\"test done -------------------\\n\");\n\n        tianzuo_QiankunInterface_terminate(qiankun);\n\n    }\n\n}\n</code></pre> javascript <pre><code>\nQiankun_errorcode_success           = 0x00000001;   ///&lt;  \u6b63\u786e\u7684\u503c\nQiankun_errorcode_normal            = 0x00000002;   ///&lt;  \u9519\u8bef\u7684\u503c\nQiankun_errorcode_differ            = 0x00000003;   ///&lt;  \u6570\u636e\u5e93\u6587\u4ef6\u6570\u6548\u9a8c\u672a\u901a\u8fc7 (The number of database files fails to be verified)\nQiankun_errorcode_no_rights         = 0x00000004;   ///&lt;  \u6570\u636e\u5e93\u5bc6\u7801\u6548\u9a8c\u672a\u901a\u8fc7 (The database password verification failed)\nQiankun_errorcode_db_not_exist      = 0x00000005;   ///&lt;  \u6570\u636e\u5e93\u6587\u4ef6\u4e0d\u5b58\u5728 (The database file does not exist)\nQiankun_errorcode_exist             = 0x00000006;   ///&lt;  \u6570\u636e\u5df2\u5b58\u5728 (Data already exists)\nQiankun_errorcode_not_exist         = 0x00000007;   ///&lt;  \u6570\u636e\u4e0d\u5b58\u5728 (Data does not exist)\nQiankun_errorcode_out_of_range      = 0x00000008;   ///&lt;  \u8d85\u51fa\u8303\u56f4 (out of range)\nQiankun_errorcode_type              = 0x00000009;   ///&lt;  \u7c7b\u578b\u4e0d\u7b26 (wrong type)\nQiankun_errorcode_param             = 0x0000000A;   ///&lt;  \u53c2\u6570\u9519\u8bef (parameter error)\nQiankun_errorcode_compress          = 0x0000000B;   ///&lt;  \u538b\u7f29\u9519\u8bef (compression error)\nQiankun_errorcode_get_array         = 0x0000000C;   ///&lt;  \u6570\u7ec4\u9519\u8bef (arrary error)\nQiankun_errorcode_out_of_memory     = 0x0000000D;   ///&lt;  \u5185\u5b58\u6ea2\u51fa (memory overflow)\nQiankun_errorcode_handle            = 0x0000000E;   ///&lt;  \u53e5\u67c4\u9519\u8bef (error handle)\nQiankun_errorcode_io                = 0x0000000F;   ///&lt;  IO\u9519\u8bef (io error)\n\nlet ffi = require('ffi-napi')\nconst ref = require('ref-napi');\n\nlet tianzuo_QiankunLib = ffi.Library(\"tianzuo.Qiankun.dll\", {\n    'tianzuo_QiankunInterface_initialize': ['pointer', []],\n    'tianzuo_QiankunInterface_terminate':['void',['pointer']],\n    'tianzuo_QiankunInt_initialize':['int',['pointer']],\n    'tianzuo_QiankunInt_db_create_database':['int',['pointer','string','string','string', 'bool']],\n    'tianzuo_QiankunInt_db_open_database':['int',['pointer', 'string', 'string']],\n    'tianzuo_QiankunInt_db_close_database':['int',['pointer', 'string', 'string']],\n    'tianzuo_QiankunInt_data_int_combine':['int',['pointer','string','string','string', 'string', 'int']],\n    'tianzuo_QiankunInt_data_int_extract':['int',['pointer','string','string','string', 'pointer']],\n})\n\n\n// \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\nconsole.log(\"initialize the interface\\n\");\n\n// \u521b\u5efa\u5b9e\u4f8b create an instance\nlet qiankun = tianzuo_QiankunLib.tianzuo_QiankunInterface_initialize();\nlet error_code = tianzuo_QiankunLib.tianzuo_QiankunInt_initialize(qiankun);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_initialize error: %d\\n\", error_code);\n    return;\n}\n\n// \u521b\u5efa\u6570\u636e\u5e93 create database\nlet db_file_name = \"qiankunDataBase.Ztz\";\nlet db_password = \"password\";\nerror_code = tianzuo_QiankunLib.tianzuo_QiankunInt_db_create_database(qiankun, db_file_name, db_password, \"qiankunDataBase\", true);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_db_create_database error: %d\\n\", error_code);\n    return;\n}\n\n// \u6253\u5f00\u6570\u636e\u5e93 open database\nerror_code = tianzuo_QiankunLib.tianzuo_QiankunInt_db_open_database(qiankun, db_file_name, db_password);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_db_open_database error: %d\\n\", error_code);\n    return;\n}\n\n// \u5411\u6570\u636e\u5e93\u5199\u5165\u4e00\u4e2a\u6574\u578b\u6570\u636e writes an integer to the database\nlet intInt = 12345678;\nerror_code = tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_combine(qiankun, db_file_name, db_password, \"integer\", \"\", intInt);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_data_int_combine error: %d\\n\", error_code);\n    return;\n}\n\n// \u8bfb\u53d6\u521a\u5199\u5165\u7684\u6570\u636e read the data just written\nreturn_buf = Buffer.alloc(1 * ref.sizeof.int);\nerror_code = tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_extract(qiankun, db_file_name, db_password, \"integer\", return_buf);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_data_int_extract error: %d\\n\", error_code);\n    return;\n}\n\nreturn_data = ref.get(return_buf, 0, ref.types.int);\nconsole.log(\"get int: %d\\n\", return_data);\n\n// \u5173\u95ed\u6570\u636e\u5e93 close database\nerror_code = tianzuo_QiankunLib.tianzuo_QiankunInt_db_close_database(qiankun, db_file_name, db_password);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_db_close_database error: %d\\n\", error_code);\n   return;\n}\n\nconsole.log(\"test done -------------------\\n\");\n\ntianzuo_QiankunLib.tianzuo_QiankunInterface_terminate(qiankun);\n\n</code></pre> php <pre><code>&lt;?php\n\n// \u68c0\u67e5\u662f\u5426\u52a0\u8f7d\u4e86 FFI \u6269\u5c55\nif (extension_loaded('ffi')) {\n    echo(\"\u5df2\u542f\u7528 FFI \u6269\u5c55\\n\");\n} else {\n    die(\"\u672a\u542f\u52a8 FFI \u6269\u5c55\\n\");\n}\n\nenum Qiankun_error_code\n{\nconst Qiankun_errorcode_success       = 0x00000001;            ///&lt;  \u6b63\u786e\u7684\u503c\nconst Qiankun_errorcode_normal        = 0x00000002;            ///&lt;  \u9519\u8bef\u7684\u503c\nconst Qiankun_errorcode_differ        = 0x00000003;            ///&lt;  \u6570\u636e\u5e93\u6587\u4ef6\u6570\u6548\u9a8c\u672a\u901a\u8fc7 (The number of database files fails to be verified)\nconst Qiankun_errorcode_no_rights     = 0x00000004;            ///&lt;  \u6570\u636e\u5e93\u5bc6\u7801\u6548\u9a8c\u672a\u901a\u8fc7 (The database password verification failed)\nconst Qiankun_errorcode_db_not_exist  = 0x00000005;            ///&lt;  \u6570\u636e\u5e93\u6587\u4ef6\u4e0d\u5b58\u5728 (The database file does not exist)\nconst Qiankun_errorcode_exist         = 0x00000006;            ///&lt;  \u6570\u636e\u5df2\u5b58\u5728 (Data already exists)\nconst Qiankun_errorcode_not_exist     = 0x00000007;            ///&lt;  \u6570\u636e\u4e0d\u5b58\u5728 (Data does not exist)\nconst Qiankun_errorcode_out_of_range  = 0x00000008;            ///&lt;  \u8d85\u51fa\u8303\u56f4 (out of range)\nconst Qiankun_errorcode_type          = 0x00000009;            ///&lt;  \u7c7b\u578b\u4e0d\u7b26 (wrong type)\nconst Qiankun_errorcode_param         = 0x0000000A;            ///&lt;  \u53c2\u6570\u9519\u8bef (parameter error)\nconst Qiankun_errorcode_compress      = 0x0000000B;            ///&lt;  \u538b\u7f29\u9519\u8bef (compression error)\nconst Qiankun_errorcode_get_array     = 0x0000000C;            ///&lt;  \u6570\u7ec4\u9519\u8bef (arrary error)\nconst Qiankun_errorcode_out_of_memory = 0x0000000D;            ///&lt;  \u5185\u5b58\u6ea2\u51fa (memory overflow)\nconst Qiankun_errorcode_handle        = 0x0000000E;            ///&lt;  \u53e5\u67c4\u9519\u8bef (error handle)\nconst Qiankun_errorcode_io            = 0x0000000F;            ///&lt;  IO\u9519\u8bef (io error)\n}\n\n$ffi = FFI::cdef(\"\n    void* tianzuo_QiankunInterface_initialize();\n    void tianzuo_QiankunInterface_terminate(void* *QiankunInt_pointer);\n    int tianzuo_QiankunInt_initialize(void* QiankunInt_pointer);\n    int tianzuo_QiankunInt_db_create_database(void* QiankunInt_pointer, const char* db_file_name, const char* db_password, const char* db_name, bool const over_write);\n    int tianzuo_QiankunInt_db_open_database(void* QiankunInt_pointer, const char* db_file_name, const char* db_password);\n    int tianzuo_QiankunInt_db_close_database(void* QiankunInt_pointer, const char* db_file_name, const char* db_password);\n    int tianzuo_QiankunInt_data_int_combine(void* QiankunInt_pointer, const char* db_file_name, const char* db_password, const char* data_name, const char* remark, int data);\n    int tianzuo_QiankunInt_data_int_extract(void* QiankunInt_pointer, const char* db_file_name, const char* db_password, const char* data_name, int* data);\n\", \"tianzuo.Qiankun.dll\");\n\n# \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\necho \"initialize the interface\" . \"\\n\";\n\n# \u521b\u5efa\u5b9e\u4f8b create an instance\n$qiankun = $ffi-&gt;tianzuo_QiankunInterface_initialize();\n\n$error_code = $ffi-&gt;tianzuo_QiankunInt_initialize($qiankun);\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"initialize error: \" . $error_code . \"\\n\";\n    return;\n}\n\n# \u521b\u5efa\u6570\u636e\u5e93 create database\n$db_file_name = \"qiankunDataBase.Ztz\";\n$db_password = \"password\";\n$error_code = $ffi-&gt;tianzuo_QiankunInt_db_create_database($qiankun, $db_file_name, $db_password, \"qiankunDataBase\", true);\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"tianzuo_QiankunInt_db_create_database error: \" . $error_code . \"\\n\";\n    return;\n}\n\n# \u6253\u5f00\u6570\u636e\u5e93 open database\n$error_code = $ffi-&gt;tianzuo_QiankunInt_db_open_database($qiankun, $db_file_name, $db_password);\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"tianzuo_QiankunInt_db_open_database error: \" . $error_code . \"\\n\";\n    return;\n}\n\n# \u5411\u6570\u636e\u5e93\u5199\u5165\u4e00\u4e2a\u6574\u578b\u6570\u636e writes an integer to the database\n$intInt = 12345678;\n$error_code = $ffi-&gt;tianzuo_QiankunInt_data_int_combine($qiankun, $db_file_name, $db_password, \"integer\", \"\", $intInt);\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"tianzuo_QiankunInt_data_int_combine error: \" . $error_code . \"\\n\";\n    return;\n}\n\n# \u8bfb\u53d6\u521a\u5199\u5165\u7684\u6570\u636e read the data just written\n$return_data = FFI::new(\"int\");\n$error_code = $ffi-&gt;tianzuo_QiankunInt_data_int_extract($qiankun, $db_file_name, $db_password, \"integer\", FFI::addr($return_data));\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"tianzuo_QiankunInt_data_int_extract error: \" . $error_code . \"\\n\";\n    return;\n}\n\necho \"get integer data: \" . $return_data-&gt;cdata . \"\\n\";\n\n# \u5173\u95ed\u6570\u636e\u5e93 close database\n$error_code = $ffi-&gt;tianzuo_QiankunInt_db_close_database($qiankun, $db_file_name, $db_password);\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"tianzuo_QiankunInt_db_close_database error: \" . $error_code . \"\\n\";\n    return;\n}\n\necho \"test done -------------------\" . \"\\n\";\n\n?&gt;\n</code></pre> vb <pre><code>\nImports System.Runtime.InteropServices\n\nEnum Qiankun_error_code\n    Qiankun_errorcode_success = 1                     '  \u6b63\u786e\u7684\u503c\n    Qiankun_errorcode_normal = 2                      '  \u9519\u8bef\u7684\u503c\n    Qiankun_errorcode_differ = 3                      '  \u6570\u636e\u5e93\u6587\u4ef6\u6570\u6548\u9a8c\u672a\u901a\u8fc7 (The number Of database files fails To be verified)\n    Qiankun_errorcode_no_rights = 4                   '  \u6570\u636e\u5e93\u5bc6\u7801\u6548\u9a8c\u672a\u901a\u8fc7 (The database password verification failed)\n    Qiankun_errorcode_db_not_exist = 5                '  \u6570\u636e\u5e93\u6587\u4ef6\u4e0d\u5b58\u5728 (The database file does Not exist)\n    Qiankun_errorcode_exist = 6                       '  \u6570\u636e\u5df2\u5b58\u5728 (Data already exists)\n    Qiankun_errorcode_not_exist = 7                   '  \u6570\u636e\u4e0d\u5b58\u5728 (Data does Not exist)\n    Qiankun_errorcode_out_of_range = 8                '  \u8d85\u51fa\u8303\u56f4 (out Of range)\n    Qiankun_errorcode_type = 9                        '  \u7c7b\u578b\u4e0d\u7b26 (wrong type)\n    Qiankun_errorcode_param = 10                      '  \u53c2\u6570\u9519\u8bef (parameter Error)\n    Qiankun_errorcode_compress = 11                   '  \u538b\u7f29\u9519\u8bef (compression Error)\n    Qiankun_errorcode_get_array = 12                  '  \u6570\u7ec4\u9519\u8bef (arrary Error)\n    Qiankun_errorcode_out_of_memory = 13              '  \u5185\u5b58\u6ea2\u51fa (memory overflow)\n    Qiankun_errorcode_handle = 14                     '  \u53e5\u67c4\u9519\u8bef (Error handle)\n    Qiankun_errorcode_io = 15                         '  IO\u9519\u8bef (io Error)\nEnd Enum\n\nModule Program\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInterface_initialize() As IntPtr\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInterface_terminate(ByRef QiankunInt_pointer As IntPtr)\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_initialize(QiankunInt_pointer As IntPtr) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_db_create_database(QiankunInt_pointer As IntPtr, db_file_name As String, db_password As String, db_name As String, over_write As Boolean) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_db_open_database(QiankunInt_pointer As IntPtr, db_file_name As String, db_password As String) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_db_close_database(QiankunInt_pointer As IntPtr, db_file_name As String, db_password As String) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_data_int_combine(QiankunInt_pointer As IntPtr, db_file_name As String, db_password As String, data_name As String, remark As String, data As Integer) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_data_int_extract(QiankunInt_pointer As IntPtr, db_file_name As String, db_password As String, data_name As String, ByRef data As Integer) As Integer\n    End Function\n\n    Sub Main(args As String())\n        ' \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n        Console.WriteLine(\"initialize the interface\")\n\n        ' \u521b\u5efa\u5b9e\u4f8b create an instance\n        Dim qiankun As IntPtr = tianzuo_QiankunInterface_initialize()\n        Dim error_code As Integer = tianzuo_QiankunInt_initialize(qiankun)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_initialize error:\" + error_code.ToString)\n            Return\n        End If\n\n        ' \u521b\u5efa\u6570\u636e\u5e93 create database\n        Dim db_file_name As String = \"qiankunDataBase.Ztz\"\n        Dim db_password As String = \"password\"\n        error_code = tianzuo_QiankunInt_db_create_database(qiankun, db_file_name, db_password, \"qiankunDataBase\", True)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_db_create_database error:\" + error_code.ToString)\n            Return\n        End If\n\n        ' \u6253\u5f00\u6570\u636e\u5e93 open database\n        error_code = tianzuo_QiankunInt_db_open_database(qiankun, db_file_name, db_password)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_db_open_database error:\" + error_code.ToString)\n            Return\n        End If\n\n        ' \u5411\u6570\u636e\u5e93\u5199\u5165\u4e00\u4e2a\u6574\u578b\u6570\u636e writes an integer to the database\n        Dim intInt As Integer = 12345678\n        error_code = tianzuo_QiankunInt_data_int_combine(qiankun, db_file_name, db_password, \"integer\", \"\", intInt)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_data_int_combine error:\" + error_code.ToString)\n            Return\n        End If\n\n        ' \u8bfb\u53d6\u521a\u5199\u5165\u7684\u6570\u636e read the data just written\n        Dim return_data As Integer = 0\n        error_code = tianzuo_QiankunInt_data_int_extract(qiankun, db_file_name, db_password, \"integer\", return_data)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_data_int_extract error:\" + error_code.ToString)\n            Return\n        End If\n\n        Console.WriteLine(\"get int: \" + return_data.ToString)\n\n        ' \u5173\u95ed\u6570\u636e\u5e93 close database\n        error_code = tianzuo_QiankunInt_db_close_database(qiankun, db_file_name, db_password)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_db_close_database error:\" + error_code.ToString)\n            Return\n        End If\n\n        Console.WriteLine(\"test done -------------------\")\n\n    End Sub\nEnd Module\n\n</code></pre> go <pre><code>package main\n\n/*\n#include \"tianzuo.QiankunInterface.h\"\n*/\nimport \"C\"\nimport (\n    \"fmt\"\n    \"syscall\"\n    \"unsafe\"\n)\n\nconst (\n    Qiankun_errorcode_success       = 1  //  \u6b63\u786e\u7684\u503c\n    Qiankun_errorcode_normal        = 2  //  \u9519\u8bef\u7684\u503c\n    Qiankun_errorcode_differ        = 3  //  \u6570\u636e\u5e93\u6587\u4ef6\u6570\u6548\u9a8c\u672a\u901a\u8fc7 (The number Of database files fails To be verified)\n    Qiankun_errorcode_no_rights     = 4  //  \u6570\u636e\u5e93\u5bc6\u7801\u6548\u9a8c\u672a\u901a\u8fc7 (The database password verification failed)\n    Qiankun_errorcode_db_not_exist  = 5  //  \u6570\u636e\u5e93\u6587\u4ef6\u4e0d\u5b58\u5728 (The database file does Not exist)\n    Qiankun_errorcode_exist         = 6  //  \u6570\u636e\u5df2\u5b58\u5728 (Data already exists)\n    Qiankun_errorcode_not_exist     = 7  //  \u6570\u636e\u4e0d\u5b58\u5728 (Data does Not exist)\n    Qiankun_errorcode_out_of_range  = 8  //  \u8d85\u51fa\u8303\u56f4 (out Of range)\n    Qiankun_errorcode_type          = 9  //  \u7c7b\u578b\u4e0d\u7b26 (wrong type)\n    Qiankun_errorcode_param         = 10 //  \u53c2\u6570\u9519\u8bef (parameter Error)\n    Qiankun_errorcode_compress      = 11 //  \u538b\u7f29\u9519\u8bef (compression Error)\n    Qiankun_errorcode_get_array     = 12 //  \u6570\u7ec4\u9519\u8bef (arrary Error)\n    Qiankun_errorcode_out_of_memory = 13 //  \u5185\u5b58\u6ea2\u51fa (memory overflow)\n    Qiankun_errorcode_handle        = 14 //  \u53e5\u67c4\u9519\u8bef (Error handle)\n    Qiankun_errorcode_io            = 15 //  IO\u9519\u8bef (io Error)\n)\n\nfunc main() {\n    // \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n    dll := syscall.MustLoadDLL(\"tianzuo.Qiankun.dll\")\n\n    // \u521b\u5efa\u5b9e\u4f8b create an instance\n    tianzuo_QiankunInterface_initialize := dll.MustFindProc(\"tianzuo_QiankunInterface_initialize\")\n    qiankun, _, _ := tianzuo_QiankunInterface_initialize.Call()\n\n    tianzuo_QiankunInt_initialize := dll.MustFindProc(\"tianzuo_QiankunInt_initialize\")\n    error_code, _, _ := tianzuo_QiankunInt_initialize.Call(qiankun)\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_initialize error: \", error_code)\n    }\n\n    // \u521b\u5efa\u6570\u636e\u5e93 create database\n    db_file_name := C.CString(\"qiankunDataBase.Ztz\")\n    db_password := C.CString(\"password\")\n    tianzuo_QiankunInt_db_create_database := dll.MustFindProc(\"tianzuo_QiankunInt_db_create_database\")\n    error_code, _, _ = tianzuo_QiankunInt_db_create_database.Call(qiankun, uintptr(unsafe.Pointer(db_file_name)), uintptr(unsafe.Pointer(db_password)), uintptr(unsafe.Pointer(C.CString(\"qiankunDataBase\"))), 1)\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_db_create_database error: \", error_code)\n    }\n\n    // \u6253\u5f00\u6570\u636e\u5e93 open database\n    tianzuo_QiankunInt_db_open_database := dll.MustFindProc(\"tianzuo_QiankunInt_db_open_database\")\n    error_code, _, _ = tianzuo_QiankunInt_db_open_database.Call(qiankun, uintptr(unsafe.Pointer(db_file_name)), uintptr(unsafe.Pointer(db_password)))\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_db_open_database error: \", error_code)\n    }\n\n    // \u5411\u6570\u636e\u5e93\u5199\u5165\u4e00\u4e2a\u6574\u578b\u6570\u636e writes an integer to the database\n    intInt := C.int(12345678)\n    tianzuo_QiankunInt_data_int_combine := dll.MustFindProc(\"tianzuo_QiankunInt_data_int_combine\")\n    error_code, _, _ = tianzuo_QiankunInt_data_int_combine.Call(qiankun, uintptr(unsafe.Pointer(db_file_name)), uintptr(unsafe.Pointer(db_password)), uintptr(unsafe.Pointer(C.CString(\"integer\"))), uintptr(unsafe.Pointer(C.CString(\"\"))), uintptr(intInt))\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_data_int_combine error: \", error_code)\n    }\n\n    // \u8bfb\u53d6\u521a\u5199\u5165\u7684\u6570\u636e read the data just written\n    return_int := C.int(0)\n    tianzuo_QiankunInt_data_int_extract := dll.MustFindProc(\"tianzuo_QiankunInt_data_int_extract\")\n    error_code, _, _ = tianzuo_QiankunInt_data_int_extract.Call(qiankun, uintptr(unsafe.Pointer(db_file_name)), uintptr(unsafe.Pointer(db_password)), uintptr(unsafe.Pointer(C.CString(\"integer\"))), uintptr(unsafe.Pointer(&amp;return_int)))\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_data_int_extract error: \", error_code)\n    }\n\n    fmt.Println(\"get integer data: \", return_int)\n\n    // \u5173\u95ed\u6570\u636e\u5e93 close database\n    tianzuo_QiankunInt_db_close_database := dll.MustFindProc(\"tianzuo_QiankunInt_db_close_database\")\n    error_code, _, _ = tianzuo_QiankunInt_db_close_database.Call(qiankun, uintptr(unsafe.Pointer(db_file_name)), uintptr(unsafe.Pointer(db_password)))\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_db_close_database error: \", error_code)\n    }\n\n    fmt.Println(\"test done -------------------\")\n}\n\n</code></pre> rust <pre><code>\nuse std::os::raw::c_char;\nuse std::ffi::{c_int};\nuse std::ffi::CString;\nuse std::ptr::null;\n\n#[link(name = \"tianzuo.Qiankun\")]\nextern {\n    fn tianzuo_QiankunInterface_initialize() -&gt; *mut std::ffi::c_void;\n    fn tianzuo_QiankunInterface_terminate(obj: *mut std::ffi::c_void);\n    fn tianzuo_QiankunInt_initialize(obj: *mut std::ffi::c_void) -&gt; c_int;\n    fn tianzuo_QiankunInt_db_create_database(obj: *mut std::ffi::c_void, db_file_name: *const c_char, db_password: *const c_char, db_name: *const c_char, over_write: c_int) -&gt; c_int;\n    fn tianzuo_QiankunInt_db_open_database(obj: *mut std::ffi::c_void, db_file_name: *const c_char, db_password: *const c_char) -&gt; c_int;\n    fn tianzuo_QiankunInt_db_close_database(obj: *mut std::ffi::c_void, db_file_name: *const c_char, db_password: *const c_char) -&gt; c_int;\n    fn tianzuo_QiankunInt_data_int_combine(obj: *mut std::ffi::c_void, db_file_name: *const c_char, db_password: *const c_char, data_name: *const c_char, remark: *const c_char, data: c_int) -&gt; c_int;\n    fn tianzuo_QiankunInt_data_int_extract(obj: *mut std::ffi::c_void, db_file_name: *const c_char, db_password: *const c_char, data_name: *const c_char, data: *const c_int) -&gt; c_int;\n}\n\nfn main() {\n    unsafe {\n        // \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n        println!(\"initialize the interface\");\n\n        // \u521b\u5efa\u5b9e\u4f8b create an instance\n        let qiankun = tianzuo_QiankunInterface_initialize();\n        let error_code = tianzuo_QiankunInt_initialize(qiankun);\n        if 1 != error_code {\n            println!(\"initialize error: {:?}\", error_code);\n        }\n\n        // \u521b\u5efa\u6570\u636e\u5e93 create database\n        let db_file_name = CString::new(String::from(\"qiankunDataBase.Ztz\")).expect(\"Failed to create CString\");\n        let db_password = CString::new(String::from(\"password\")).expect(\"Failed to create CString\");\n        let db_name = CString::new(String::from(\"qiankunDataBase\")).expect(\"Failed to create CString\");\n        let error_code = tianzuo_QiankunInt_db_create_database(qiankun, db_file_name.as_ptr(), db_password.as_ptr(), db_name.as_ptr(), 1);\n        if 1 != error_code {\n            println!(\"db_create_database error: {:?}\", error_code);\n        }\n\n        // \u6253\u5f00\u6570\u636e\u5e93 open database\n        let error_code = tianzuo_QiankunInt_db_open_database(qiankun, db_file_name.as_ptr(), db_password.as_ptr());\n        if 1 != error_code {\n            println!(\"db_open_database error: {:?}\", error_code);\n        }\n\n        // \u5411\u6570\u636e\u5e93\u5199\u5165\u4e00\u4e2a\u6574\u578b\u6570\u636e writes an integer to the database\n        let int = 12345678;\n        let data_name = CString::new(String::from(\"integer\")).expect(\"Failed to create CString\");\n        let error_code = tianzuo_QiankunInt_data_int_combine(qiankun, db_file_name.as_ptr(), db_password.as_ptr(), data_name.as_ptr(), null(), int);\n        if 1 != error_code {\n            println!(\"data_combine error: {:?}\", error_code);\n        }\n\n        // \u8bfb\u53d6\u521a\u5199\u5165\u7684\u6570\u636e read the data just written\n        let mut return_data: c_int = 0;\n        let error_code = tianzuo_QiankunInt_data_int_extract(qiankun, db_file_name.as_ptr(), db_password.as_ptr(), data_name.as_ptr(), &amp;mut return_data);\n        if 1 != error_code {\n            println!(\"data_extract error: {:?}\", error_code);\n        }\n\n        println!(\"get integer data: {:?}\", return_data);\n\n        // \u5173\u95ed\u6570\u636e\u5e93 close database\n        let error_code = tianzuo_QiankunInt_db_close_database(qiankun, db_file_name.as_ptr(), db_password.as_ptr());\n        if 1 != error_code {\n            println!(\"db_close_database error: {:?}\", error_code);\n        }\n\n        println!(\"test done -------------------\")\n    }\n}\n\n</code></pre> ruby <pre><code>require 'fiddle'\n\nlib = Fiddle::dlopen('C:/Users/zhengtianzuo/RubymineProjects/tianzuo.QiankunTest/tianzuo.Qiankun.dll')\ntianzuo_QiankunInterface_initialize = Fiddle::Function.new(lib['tianzuo_QiankunInterface_initialize'], [], Fiddle::TYPE_VOIDP)\ntianzuo_QiankunInterface_terminate = Fiddle::Function.new(lib['tianzuo_QiankunInterface_terminate'], [Fiddle::TYPE_VOIDP], Fiddle::TYPE_VOID)\ntianzuo_QiankunInt_initialize = Fiddle::Function.new(lib['tianzuo_QiankunInt_initialize'], [Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\ntianzuo_QiankunInt_db_create_database = Fiddle::Function.new(lib['tianzuo_QiankunInt_db_create_database'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT], Fiddle::TYPE_INT)\ntianzuo_QiankunInt_db_open_database = Fiddle::Function.new(lib['tianzuo_QiankunInt_db_open_database'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\ntianzuo_QiankunInt_data_int_combine = Fiddle::Function.new(lib['tianzuo_QiankunInt_data_int_combine'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT], Fiddle::TYPE_INT)\ntianzuo_QiankunInt_data_int_extract = Fiddle::Function.new(lib['tianzuo_QiankunInt_data_int_extract'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\ntianzuo_QiankunInt_db_close_database = Fiddle::Function.new(lib['tianzuo_QiankunInt_db_close_database'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\n\n# \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\nprint(\"initialize the interface\\n\")\n\n# \u521b\u5efa\u5b9e\u4f8b create an instance\nqiankun = tianzuo_QiankunInterface_initialize.call()\nerror_code = tianzuo_QiankunInt_initialize.call(qiankun)\nif error_code != 1\n  print(\"initialize error:\", error_code, \"\\n\")\n  return\nend\n\n# \u521b\u5efa\u6570\u636e\u5e93 create database\ndb_file_name = \"qiankunDataBase.Ztz\"\ndb_password = \"password\"\nerror_code = tianzuo_QiankunInt_db_create_database.call(qiankun, db_file_name, db_password, \"qiankunDataBase\", 1)\nif error_code != 1\n  print(\"db_create_database error:\", error_code, \"\\n\")\n  return\nend\n\n# \u6253\u5f00\u6570\u636e\u5e93 open database\nerror_code = tianzuo_QiankunInt_db_open_database.call(qiankun, db_file_name, db_password)\nif error_code != 1\n  print(\"db_open_database error:\", error_code, \"\\n\")\nreturn\nend\n\n# \u5411\u6570\u636e\u5e93\u5199\u5165\u4e00\u4e2a\u6574\u578b\u6570\u636e writes an integer to the database\nintInt = 12345678\nerror_code = tianzuo_QiankunInt_data_int_combine.call(qiankun, db_file_name, db_password, \"integer\", \"\", intInt)\nif error_code != 1\n  print(\"data_combine error:\", error_code, \"\\n\")\nreturn\nend\n\n# \u8bfb\u53d6\u521a\u5199\u5165\u7684\u6570\u636e read the data just written\nreturn_data = Fiddle::Pointer.malloc(Fiddle::SIZEOF_INT)\nerror_code = tianzuo_QiankunInt_data_int_extract.call(qiankun, db_file_name, db_password, \"integer\", return_data)\nif error_code != 1\n  print(\"data_extract error:\", error_code, \"\\n\")\nreturn\nend\n\ninteger = return_data[0, Fiddle::SIZEOF_INT].unpack('I')[0]\nprint(\"get integer data: \", integer, \"\\n\")\n\n# \u5173\u95ed\u6570\u636e\u5e93 close database\nerror_code = tianzuo_QiankunInt_db_close_database.call(qiankun, db_file_name, db_password)\nif error_code != 1\n  print(\"db_close_database error:\", error_code)\nreturn\nend\n\nprint(\"test done -------------------\")\n\n</code></pre>"},{"location":"component/tianzuo.Qiankun/#_8","title":"\u4e0b\u8f7d","text":""},{"location":"component/tianzuo.Zhuiri/","title":"\u5929\u4f50.\u8ffd\u65e5\u9774","text":""},{"location":"component/tianzuo.Zhuiri/#_2","title":"\u5929\u4f50.\u8ffd\u65e5\u9774","text":"\u64cd\u4f5c\u7cfb\u7edf \u7f16\u8bd1\u5668 \u7f16\u7a0b\u8bed\u8a00"},{"location":"component/tianzuo.Zhuiri/#_3","title":"\u7b80\u4ecb","text":"<p>\u5929\u4f50.\u8ffd\u65e5\u9774 \u9ad8\u6027\u80fd\u53ef\u9760UDP\u6570\u636e\u4f20\u8f93P2P\u901a\u8baf\u6846\u67b6\uff0c\u53ef\u7528\u4e8e\u5efa\u7acbP2P\u73af\u5883\uff0c\u6587\u4ef6\u4f20\u8f93\uff0c\u6570\u636e\u901a\u8baf\u3002\u57fa\u4e8eUDP\u534f\u8bae\u7684\u5185\u7f51\u7a7f\u900f\u89e3\u51b3\u65b9\u6848\uff0c\u8f7b\u677e\u5b9e\u73b0\u97f3\u89c6\u9891\u4f1a\u8bae\u4e2d\u5fc3\uff0c\u76f4\u64ad\uff0c\u8fdc\u7a0b\u684c\u9762/\u6587\u6863\u6f14\u793a\u7b49\u529f\u80fd\u3002</p> <p>\u4f20\u8bf4: \u51ed\u6b64\u9774\u53ef\u4ee5\u65e5\u884c\u5343\u91cc\u3001\u591c\u8d70\u516b\u767e\uff0c\u5982\u751f\u7fbd\u7ffc\u3002\u6e34\u6b32\u5f97\u996e\uff0c\u996e\u4e8e\u6cb3\u6e2d\uff0c\u6cb3\u6e2d\u4e0d\u8db3\uff0c\u5317\u996e\u5927\u6cfd\u3002\u672a\u81f3\uff0c\u9053\u6e34\u800c\u6b7b\u3002\u5f03\u5176\u6756\uff0c\u5316\u4e3a\u9093\u6797\u3002</p>"},{"location":"component/tianzuo.Zhuiri/#_4","title":"\u76ee\u6807","text":"<p>\u6784\u5efaUDP\u53ef\u9760\u6570\u636e\u4f20\u8f93\uff0c\u6309\u7b56\u7565\u52a8\u6001\u8c03\u6574\u4e22\u5305\u7387\u548c\u4f20\u8f93\u6027\u80fd\uff0c\u53ef\u65b9\u4fbf\u642d\u5efaP2P\u901a\u8baf\u3002</p> <p></p>"},{"location":"component/tianzuo.Zhuiri/#_5","title":"\u529f\u80fd","text":"<ul> <li>\ud83e\udde9 \u96c6\u6210\u7b80\u5355</li> <li>\ud83d\udcca \u9ad8\u5c42\u534f\u8bae\u5b9e\u73b0\u6570\u636e\u901a\u8baf\u7684\u7a33\u5b9a\u53ef\u9760, \u53ef\u52a8\u6001\u4fee\u6539\u53c2\u6570\u8c03\u6574\u901a\u8baf\u7b56\u7565.</li> <li>\ud83e\udea1 \u53ef\u4f7f\u7528\u540c\u4e00\u5957\u63a5\u5b57\u521d\u59cb\u5316\u591a\u4e2a\u7ec4\u4ef6\u8fdb\u884c\u591a\u7ebf\u7a0b\u6570\u636e\u901a\u8baf.</li> <li>\ud83d\udd22 \u89e3\u51b3\u4e22\u5305: \u91c7\u7528\u81ea\u884c\u7814\u53d1\u7684\u5e76\u884c\u6ed1\u52a8\u7a97\u53e3\u534f\u8bae, \u4fdd\u8bc1\u6570\u636e\u7684\u7a33\u5b9a\u53ef\u9760\u4f20\u8f93.</li> <li>\ud83e\ude9f \u52a8\u6001\u8c03\u6574: \u6570\u636e\u901a\u8baf\u53ef\u884c\u6548\u7387\u52a8\u6001\u8bc4\u4f30\u548c\u8ba1\u7b97\u83b7\u5f97\u5f53\u524d\u73af\u5883\u4e0b\u7684\u6700\u4f73\u901a\u8baf\u8868\u73b0.</li> <li>\ud83d\udc5c \u6570\u636e\u7ec4\u5e27: \u901a\u8baf\u6570\u636e\u5305\u53d1\u9001\u5206\u5305, \u63a5\u6536\u7ec4\u5305, \u4fdd\u8bc1\u6570\u636e\u987a\u5e8f\u5b8c\u6574.</li> </ul>"},{"location":"component/tianzuo.Zhuiri/#_6","title":"\u622a\u56fe","text":"<p>\u5929\u4f50.\u8ffd\u65e5\u9774\u6d4b\u8bd5\u7a0b\u5e8f:</p> <p></p>"},{"location":"component/tianzuo.Zhuiri/#_7","title":"\u4f8b\u5b50","text":"cpp <pre><code>#include &lt;iostream&gt;\n#include &lt;thread&gt;\n#include \"tianzuo.ZhuiriInterface.h\" // \u63a5\u53e3\u5934\u6587\u4ef6 interface heaher file\n\n#include &lt;winsock.h&gt;\n#pragma comment(lib, \"ws2_32.lib\")\n\n// \u6570\u636e\u56de\u8c03\u51fd\u6570\nvoid msg_recv_callback(void* context, Zhuiri_data_pkg_pointer data_pkg) {\n    Zhuiri_data_pkg_struct data_new;\n    memcpy(&amp;data_new, data_pkg, sizeof(Zhuiri_data_pkg_struct));\n    int send_size = data_pkg-&gt;m_data.get_send_size();\n    if (send_size &gt; Zhuiri_content_size) {\n        char* send_data = new char[static_cast&lt;unsigned int&gt;(send_size)];\n        memcpy(send_data, data_pkg-&gt;get_send_data(), static_cast&lt;unsigned int&gt;(send_size));\n        data_new.set_send_data(send_data);\n    } else {\n        data_new.set_send_data(data_new.m_data.m_data);\n    }\n    tianzuo_DataQueue* const dataQueue = reinterpret_cast&lt;tianzuo_DataQueue*&gt;(context);\n    dataQueue-&gt;push_back(&amp;data_new);\n}\n\n// \u63a5\u6536\u7ebf\u7a0b\nvoid recv_thread(tianzuo_DataQueue* data_queue_recv) {\n    while (1) {\n        Zhuiri_data_pkg_struct recv_msg;\n        if (data_queue_recv-&gt;pop_up(&amp;recv_msg) != Zhuiri_queue_error_code_success) {\n            //std::cout &lt;&lt; \"pop_up no data\" &lt;&lt; std::endl;\n            std::this_thread::sleep_for(std::chrono::milliseconds(200));\n            continue;\n        }\n\n        std::cout &lt;&lt; \"recv data: \" &lt;&lt; recv_msg.m_data.m_data &lt;&lt; std::endl;\n        if (strcmp(recv_msg.m_data.m_data, \"send data 99\") == 0) {\n            std::cout &lt;&lt; \"recv done\" &lt;&lt; std::endl;\n            return;\n        }\n    }\n}\n\nint main() {\n\n    // \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n    std::unique_ptr&lt;tianzuo_ZhuiriInterface&gt; zhuiri_interface(new tianzuo_ZhuiriInterface());\n\n    // \u521b\u5efa\u5b9e\u4f8b create an instance\n    tianzuo_ZhuiriInt* zhuiri = zhuiri_interface-&gt;initialize();\n\n    // \u521d\u59cb\u5316\u6570\u636e\u961f\u5217\u63a5\u53e3 initialize the data queue interface\n    std::unique_ptr&lt;tianzuo_DataQueueInterface&gt; data_queue_interface(new tianzuo_DataQueueInterface());\n\n    // \u521b\u5efa\u6570\u636e\u961f\u5217\u5b9e\u4f8b create an data queue instance\n    tianzuo_DataQueue* data_queue_recv = data_queue_interface-&gt;initialize();\n\n    // \u521d\u59cb\u5316\u5b9e\u4f8b initialize the instance\n    int port = 6666;\n    int error_code = zhuiri-&gt;initialize(\n        nullptr, port, reinterpret_cast&lt;void*&gt;(msg_recv_callback),\n        data_queue_recv, 6000, false);\n    if (error_code != Zhuiri_error_code_success) {\n        std::cout &lt;&lt; \"initialize error: \" &lt;&lt; error_code;\n\n        // \u91ca\u653e\u63a5\u53e3 terminate the interface\n        if (data_queue_interface != nullptr &amp;&amp; data_queue_recv != nullptr) {\n            data_queue_interface-&gt;terminate(&amp;data_queue_recv);\n        }\n        if (zhuiri_interface != nullptr &amp;&amp; zhuiri != nullptr) {\n            zhuiri_interface-&gt;terminate(&amp;zhuiri);\n        }\n        return -1;\n    }\n\n    // \u8bbe\u7f6e\u9ed8\u8ba4\u53c2\u6570 set default parameters\n    Zhuiri_param_struct param(0, 5168, 1024, 2280, 3, 5, 600);\n    zhuiri-&gt;set_param(&amp;param);\n\n    // \u542f\u52a8\u63a5\u6536\u7ebf\u7a0b start receiving thread\n    std::thread recv_th(recv_thread, data_queue_recv);\n\n    // \u5f00\u59cb\u53d1\u9001\u6570\u636e start sending data\n    int data_size = 1024;\n    char data[1024];\n    memset(data, 0, data_size);\n    int ip = ntohl(inet_addr(\"127.0.0.1\"));\n    for (size_t i = 0; i &lt; 100; i++) {\n        //std::cout &lt;&lt; \"start send index: \" &lt;&lt; i &lt;&lt; std::endl;\n        sprintf_s(data, data_size, \"send data %d\", i);\n        int data_len = strlen(data);\n        Zhuiri_send_param_struct send_param(0, ip, port, Zhuiri_data_sign_reliable, 7788, data, data_len);\n        error_code = zhuiri-&gt;send(&amp;send_param);\n        if (error_code != Zhuiri_error_code_success) {\n            std::cout &lt;&lt; \"send error: \" &lt;&lt; error_code;\n\n            // \u91ca\u653e\u63a5\u53e3 terminate the interface\n            if (data_queue_interface != nullptr &amp;&amp; data_queue_recv != nullptr) {\n                data_queue_interface-&gt;terminate(&amp;data_queue_recv);\n            }\n            if (zhuiri_interface != nullptr &amp;&amp; zhuiri != nullptr) {\n                zhuiri_interface-&gt;terminate(&amp;zhuiri);\n            }\n            return -1;\n        }\n        //std::this_thread::sleep_for(std::chrono::milliseconds(10));\n    }\n    std::cout &lt;&lt; \"send done\" &lt;&lt; std::endl;\n    recv_th.join();\n\n    // \u91ca\u653e\u63a5\u53e3 terminate the interface\n    if (data_queue_interface != nullptr &amp;&amp; data_queue_recv != nullptr) {\n        data_queue_interface-&gt;terminate(&amp;data_queue_recv);\n    }\n    if (zhuiri_interface != nullptr &amp;&amp; zhuiri != nullptr) {\n        zhuiri_interface-&gt;terminate(&amp;zhuiri);\n    }\n\n    return 0;\n}\n</code></pre> python <pre><code>from ctypes import *\nfrom enum import Enum\nimport ctypes\nimport ipaddress\n\ntianzuo_ZhuiriLib = cdll.LoadLibrary('./tianzuo.Zhuiri.dll')\n\n\nclass Zhuiri_error_code(Enum):\n    Zhuiri_error_code_success       = 0x00000001                                     # \u6b63\u786e\u7684\u503c (success)\n    Zhuiri_error_code_no_rights     = 0x00000002                                     # \u6548\u9a8c\u672a\u901a\u8fc7 (no rights)\n    Zhuiri_error_code_socket        = 0x0000000D                                     # \u5957\u63a5\u5b57\u9519\u8bef (socket error)\n    Zhuiri_error_code_thread_error  = 0x00000021                                     # \u7ebf\u7a0b\u5931\u8d25 (thread error)\n    Zhuiri_error_code_handle        = 0x00000022                                     # \u521b\u5efa\u53e5\u67c4\u5931\u8d25 (handle error)\n    Zhuiri_error_code_out_of_cache  = 0x00000023                                     # \u8d85\u51fa\u7f13\u51b2\u6700\u5927\u503c (out f cache)\n    Zhuiri_error_code_out_of_memory = 0x00000024                                     # \u5185\u5b58\u6ea2\u51fa (out of memory)\n    Zhuiri_error_code_time_out      = 0x00000025                                     # \u64cd\u4f5c\u8d85\u65f6 (time out)\n    Zhuiri_error_code_user_reject   = 0x00000098                                     # \u5bf9\u65b9\u51b3\u7edd (user reject)\n    Zhuiri_error_code_user_exit     = 0x00000099                                     # \u81ea\u884c\u9000\u51fa (user exit)\n\n\nclass Zhuiri_queue_error_code(Enum):\n    Zhuiri_queue_error_code_success       = 0x00000001                               # \u6b63\u786e\u7684\u503c (success)\n    Zhuiri_queue_error_code_invalid_value = 0x00000002                               # \u65e0\u6548\u7684\u503c (invalid value)\n    Zhuiri_queue_error_code_out_of_cache  = 0x00000003                               # \u8d85\u51fa\u7f13\u51b2 (out f cache)\n    Zhuiri_queue_error_code_out_of_memory = 0x00000004                               # \u5185\u5b58\u6ea2\u51fa (out of memory)\n    Zhuiri_queue_error_code_no_data       = 0x00000005                               # \u65e0\u6570\u636e (no data)\n\n\nclass Zhuiri_data_sign(Enum):\n    Zhuiri_data_sign_none       = 0x00000000                                         # \u65e0\u6807\u8bc6  (no sign)\n    Zhuiri_data_sign_reliable   = 0x00000001                                         # \u53ef\u9760    (reliable)\n    Zhuiri_data_sign_processing = 0x00000002                                         # \u5904\u7406\u4e2d  (processing)\n    Zhuiri_data_sign_response   = 0x00000003                                         # \u56de\u5e94\u6d88\u606f (response)\n    Zhuiri_data_sign_heart      = 0x00000004                                         # \u5fc3\u8df3\u5305  (heart)\n\n\nclass tianzuo_ZhuiriInt:\n    def __init__(self):\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInterface_initialize.restype = c_void_p\n        self.obj = tianzuo_ZhuiriLib.tianzuo_ZhuiriInterface_initialize()\n\n    def __del__(self):\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInterface_terminate.argtypes = [c_void_p]\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInterface_terminate(self.obj)\n\n    def initialize(self, ip_addr, port, callback, context, heart_check_time, log_trace, iocp):\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_initialize.restype = c_int\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_initialize.argtypes = [c_void_p, c_char_p, ctypes.c_int, c_void_p, c_void_p, ctypes.c_int, ctypes.c_int, c_void_p]\n        return tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_initialize(self.obj, ip_addr, port, callback, context, heart_check_time, log_trace, iocp)\n\n    def set_param(self, sender_index, init_server_port, msg_init_size, recv_ex_data_max, retry_max, retry_all_number, init_retry_time):\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_set_param.restype = c_int\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_set_param.argtypes = [c_void_p, c_int, c_int, c_int, c_int, c_int, c_int, c_int]\n        return tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_set_param(self.obj, sender_index, init_server_port, msg_init_size, recv_ex_data_max, retry_max, retry_all_number, init_retry_time)\n\n    def send(self, sender_index, ip, port, sign, function, send_data, send_size):\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_send.restype = c_int\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_send.argtypes = [c_void_p, c_int, c_int, c_int, c_int, c_int, c_char_p, c_int]\n        return tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_send(self.obj, sender_index, ip, port, sign, function, send_data, send_size)\n\n\nclass tianzuo_DataQueueInt:\n    def __init__(self):\n        tianzuo_ZhuiriLib.tianzuo_DataQueueInterface_initialize.restype = c_void_p\n        self.obj = tianzuo_ZhuiriLib.tianzuo_DataQueueInterface_initialize()\n\n    def __del__(self):\n        tianzuo_ZhuiriLib.tianzuo_DataQueueInterface_terminate.argtypes = [c_void_p]\n        tianzuo_ZhuiriLib.tianzuo_DataQueueInterface_terminate(self.obj)\n\n    def initialize(self):\n        tianzuo_ZhuiriLib.tianzuo_DataQueueInt_initialize.restype = c_void_p\n        tianzuo_ZhuiriLib.tianzuo_DataQueueInt_initialize.argtypes = [c_void_p]\n        return tianzuo_ZhuiriLib.tianzuo_DataQueueInt_initialize(self.obj)\n\n\ncallback_type = ctypes.CFUNCTYPE(c_void_p, c_void_p, c_void_p)\n\n\nclass Zhuiri_data_struct(ctypes.Structure):\n    _fields_ = [(\"m_ip_adrs\", ctypes.c_int),\n                (\"m_port\", ctypes.c_int),\n                (\"m_function\", ctypes.c_int),\n                (\"m_sign\", ctypes.c_int),\n                (\"m_index\", ctypes.c_int),\n                (\"m_send_time\", ctypes.c_int),\n                (\"m_send_size\", ctypes.c_int),\n                (\"m_data\", ctypes.c_char * 492)]\n\n\nclass Zhuiri_data_pkg_struct(ctypes.Structure):\n    _fields_ = [(\"m_data\", Zhuiri_data_struct),\n                (\"m_send_data\", ctypes.c_char_p),\n                (\"m_Zhuiri\", ctypes.c_void_p),\n                (\"m_user_data\", ctypes.c_void_p)]\n\n\ndef msg_recv_callback(context, pData):\n    data = ctypes.cast(pData, ctypes.POINTER(Zhuiri_data_pkg_struct)).contents\n    print(\"recv data:\", data.m_data.m_data)\n\n\ndef main():\n    # \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n    print(\"initialize the interface\")\n\n    # \u521b\u5efa\u5b9e\u4f8b create an instance\n    data_queue_recv = tianzuo_DataQueueInt()\n    pdata_queue_recv = ctypes.pointer(ctypes.py_object(data_queue_recv))\n\n    pmsg_recv_callback = callback_type(msg_recv_callback)\n\n    Zhuiri = tianzuo_ZhuiriInt()\n    port = 6666\n    error_code = Zhuiri.initialize(None, port, pmsg_recv_callback, pdata_queue_recv, 6000, False, None)\n    if error_code != Zhuiri_error_code.Zhuiri_error_code_success.value:\n        print(\"initialize error:\", error_code)\n        return\n\n    # \u8bbe\u7f6e\u9ed8\u8ba4\u53c2\u6570 set default parameters\n    Zhuiri.set_param(0, 5168, 1024, 2280, 3, 5, 600)\n\n    # \u5f00\u59cb\u53d1\u9001\u6570\u636e start sending data\n    ip = int(ipaddress.IPv4Address(\"127.0.0.1\"))\n    for i in range(100):\n        data = \"send data {}\".format(i)\n        data_len = len(data)\n        bytes_string = data.encode('utf-8')\n        error_code = Zhuiri.send(0, ip, port, Zhuiri_data_sign.Zhuiri_data_sign_reliable.value, 7788, bytes_string, data_len)\n        if error_code != Zhuiri_error_code.Zhuiri_error_code_success.value:\n            print(\"send error:\", error_code)\n            return\n\n    print(\"test done\")\n\n\nif __name__ == '__main__':\n    main()\n\n</code></pre> java <pre><code>package cn.camelsoft;\n\nimport com.sun.jna.Library;\nimport com.sun.jna.Native;\nimport com.sun.jna.Pointer;\nimport com.sun.jna.Callback;\nimport com.sun.jna.CallbackReference;\nimport com.sun.jna.ptr.IntByReference;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\n\nenum Zhuiri_error_code {\n    Zhuiri_error_code_success       (0x00000001),                                     ///&lt; \u6b63\u786e\u7684\u503c (success)\n    Zhuiri_error_code_no_rights     (0x00000002),                                     ///&lt; \u6548\u9a8c\u672a\u901a\u8fc7 (no rights)\n    Zhuiri_error_code_socket        (0x0000000D),                                     ///&lt; \u5957\u63a5\u5b57\u9519\u8bef (socket error)\n    Zhuiri_error_code_thread_error  (0x00000021),                                     ///&lt; \u7ebf\u7a0b\u5931\u8d25 (thread error)\n    Zhuiri_error_code_handle        (0x00000022),                                     ///&lt; \u521b\u5efa\u53e5\u67c4\u5931\u8d25 (handle error)\n    Zhuiri_error_code_out_of_cache  (0x00000023),                                     ///&lt; \u8d85\u51fa\u7f13\u51b2\u6700\u5927\u503c (out f cache)\n    Zhuiri_error_code_out_of_memory (0x00000024),                                     ///&lt; \u5185\u5b58\u6ea2\u51fa (out of memory)\n    Zhuiri_error_code_time_out      (0x00000025),                                     ///&lt; \u64cd\u4f5c\u8d85\u65f6 (time out)\n    Zhuiri_error_code_user_reject   (0x00000098),                                     ///&lt; \u5bf9\u65b9\u51b3\u7edd (user reject)\n    Zhuiri_error_code_user_exit     (0x00000099);                                     ///&lt; \u81ea\u884c\u9000\u51fa (user exit)\n    private int value;\n    Zhuiri_error_code(int value) {\n        this.value = value;\n    }\n    public int getValue() {\n        return value;\n    }\n};\n\nenum Zhuiri_data_sign {\n    Zhuiri_data_sign_none       (0x00000000),                                         ///&lt; \u65e0\u6807\u8bc6  (no sign)\n    Zhuiri_data_sign_reliable   (0x00000001),                                         ///&lt; \u53ef\u9760    (reliable)\n    Zhuiri_data_sign_processing (0x00000002),                                         ///&lt; \u5904\u7406\u4e2d  (processing)\n    Zhuiri_data_sign_response   (0x00000003),                                         ///&lt; \u56de\u5e94\u6d88\u606f (response)\n    Zhuiri_data_sign_heart      (0x00000004);                                         ///&lt; \u5fc3\u8df3\u5305  (heart)\n    private int value;\n    Zhuiri_data_sign(int value) {\n        this.value = value;\n    }\n    public int getValue() {\n        return value;\n    }\n};\n\ninterface tianzuo_ZhuiriLib extends Library {\n    tianzuo_ZhuiriLib instance = (tianzuo_ZhuiriLib) Native.load(\"./tianzuo.Zhuiri.dll\", tianzuo_ZhuiriLib.class);\n    Pointer tianzuo_ZhuiriInterface_initialize();\n    void tianzuo_ZhuiriInterface_terminate(Pointer zhuiri);\n    int tianzuo_ZhuiriInt_initialize(Pointer zhuiri, String ip_addr, int port, Pointer callback, Pointer context, int heart_check_time, Boolean log_trace, Pointer iocp);\n    int tianzuo_ZhuiriInt_set_param(Pointer zhuiri, int sender_index, int init_server_port, int msg_init_size, int recv_ex_data_max, int retry_max, int retry_all_number, int init_retry_time);\n    int tianzuo_ZhuiriInt_send(Pointer zhuiri, int sender_index, int ip, int port, int sign, int function, String send_data, int send_size);\n}\n\ninterface tianzuo_DataQueueLib extends Library {\n    tianzuo_DataQueueLib instance = (tianzuo_DataQueueLib) Native.load(\"./tianzuo.Zhuiri.dll\", tianzuo_DataQueueLib.class);\n    Pointer tianzuo_DataQueueInterface_initialize();\n    void tianzuo_DataQueueInterface_terminate(Pointer DataQueue);\n    int tianzuo_DataQueueInt_initialize(Pointer DataQueue);\n}\n\ninterface MyCallback extends Callback {\n    void callbackFunction(Pointer context, Pointer pData);\n}\nclass MyCallbackImpl implements MyCallback {\n\n    @Override\n    public void callbackFunction(Pointer context, Pointer pData) {\n        Zhuiri_data_pkg_struct data_pkg = new Zhuiri_data_pkg_struct(pData);\n        String str = new String(data_pkg.m_data.m_data).trim();\n        System.out.printf(\"recv data: %s\\n\", str);\n    }\n}\n\npublic class Main {\n    public static int ipToInt(String ipAddress) {\n        try {\n            InetAddress inetAddress = InetAddress.getByName(ipAddress);\n            byte[] bytes = inetAddress.getAddress();\n\n            int result = 0;\n            for (byte b : bytes) {\n                result = result &lt;&lt; 8 | (b &amp; 0xFF);\n            }\n\n            return result;\n        } catch (UnknownHostException e) {\n            System.err.println(\"Invalid IP address: \" + ipAddress);\n            return 0;\n        }\n    }\n\n    public static void main(String[] args) {\n\n        System.setProperty(\"jna.encoding\",\"UTF-8\");\n\n        // \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n        System.out.printf(\"initialize the interface\\n\");\n\n        // \u521b\u5efa\u5b9e\u4f8b create an instance\n        Pointer data_queue_recv = tianzuo_DataQueueLib.instance.tianzuo_DataQueueInterface_initialize();\n\n        MyCallback callback = new MyCallbackImpl();\n        Pointer pcallback = CallbackReference.getFunctionPointer(callback);\n\n        Pointer zhuiri = tianzuo_ZhuiriLib.instance.tianzuo_ZhuiriInterface_initialize();\n        int port = 6666;\n        int error_code = tianzuo_ZhuiriLib.instance.tianzuo_ZhuiriInt_initialize(zhuiri, null, port, pcallback, data_queue_recv, 6000, false, null);\n        if (error_code != Zhuiri_error_code.Zhuiri_error_code_success.getValue()) {\n            System.out.printf(\"tianzuo_ZhuiriInt_initialize error: %d\\n\", error_code);\n            return;\n        }\n\n        // \u8bbe\u7f6e\u9ed8\u8ba4\u53c2\u6570 set default parameters\n        tianzuo_ZhuiriLib.instance.tianzuo_ZhuiriInt_set_param(zhuiri, 0, 5168, 1024, 2280, 3, 5, 600);\n\n        // \u5f00\u59cb\u53d1\u9001\u6570\u636e start sending data\n        String ipAddress = \"127.0.0.1\";\n        int ip = ipToInt(ipAddress);\n        int sport = 6666;\n        for (int i = 0; i &lt; 100; i++) {\n            String data = String.format(\"send data %d \", i);\n            int data_len = data.length();\n            int error_code2 = tianzuo_ZhuiriLib.instance.tianzuo_ZhuiriInt_send(zhuiri, 0, ip, sport, Zhuiri_data_sign.Zhuiri_data_sign_reliable.getValue(), 7788, data, data_len);\n            if (error_code2 != Zhuiri_error_code.Zhuiri_error_code_success.getValue()) {\n                System.out.printf(\"tianzuo_ZhuiriInt_send error: %d\\n\", error_code2);\n                return;\n            }\n        }\n\n        System.out.printf(\"test done\\n\");\n    }\n}\n</code></pre> csharp <pre><code>\n\nusing System.Collections;\nusing System.Net;\nusing System.Runtime.InteropServices;\nusing System.Text;\n\npublic enum Zhuiri_error_code\n{\n    Zhuiri_error_code_success       = 0x00000001,                                     ///&lt; \u6b63\u786e\u7684\u503c (success)\n    Zhuiri_error_code_no_rights     = 0x00000002,                                     ///&lt; \u6548\u9a8c\u672a\u901a\u8fc7 (no rights)\n    Zhuiri_error_code_socket        = 0x0000000D,                                     ///&lt; \u5957\u63a5\u5b57\u9519\u8bef (socket error)\n    Zhuiri_error_code_thread_error  = 0x00000021,                                     ///&lt; \u7ebf\u7a0b\u5931\u8d25 (thread error)\n    Zhuiri_error_code_handle        = 0x00000022,                                     ///&lt; \u521b\u5efa\u53e5\u67c4\u5931\u8d25 (handle error)\n    Zhuiri_error_code_out_of_cache  = 0x00000023,                                     ///&lt; \u8d85\u51fa\u7f13\u51b2\u6700\u5927\u503c (out f cache)\n    Zhuiri_error_code_out_of_memory = 0x00000024,                                     ///&lt; \u5185\u5b58\u6ea2\u51fa (out of memory)\n    Zhuiri_error_code_time_out      = 0x00000025,                                     ///&lt; \u64cd\u4f5c\u8d85\u65f6 (time out)\n    Zhuiri_error_code_user_reject   = 0x00000098,                                     ///&lt; \u5bf9\u65b9\u51b3\u7edd (user reject)\n    Zhuiri_error_code_user_exit     = 0x00000099,                                     ///&lt; \u81ea\u884c\u9000\u51fa (user exit)\n}\n\npublic enum Zhuiri_data_sign\n{\n    Zhuiri_data_sign_none       = 0x00000000,                                         ///&lt; \u65e0\u6807\u8bc6  (no sign)\n    Zhuiri_data_sign_reliable   = 0x00000001,                                         ///&lt; \u53ef\u9760    (reliable)\n    Zhuiri_data_sign_processing = 0x00000002,                                         ///&lt; \u5904\u7406\u4e2d  (processing)\n    Zhuiri_data_sign_response   = 0x00000003,                                         ///&lt; \u56de\u5e94\u6d88\u606f (response)\n    Zhuiri_data_sign_heart      = 0x00000004,                                         ///&lt; \u5fc3\u8df3\u5305  (heart)\n};\n\npublic struct Zhuiri_data_struct\n{\n    public Zhuiri_data_struct()\n    {\n    }\n    public int m_ip_adrs;\n    public int m_port;\n    public int m_function;\n    public int m_sign;\n    public int m_index;\n    public int m_send_time;\n    public int m_send_size;\n    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 492)]\n    public byte[] m_data;\n}\n\npublic struct Zhuiri_data_pkg_struct\n{\n    public Zhuiri_data_pkg_struct()\n    {\n    }\n    public Zhuiri_data_struct m_data;\n    public IntPtr m_send_data;\n    public IntPtr m_Zhuiri;\n    public IntPtr m_user_data;\n}\n\npublic delegate void CallbackDelegate(IntPtr context, IntPtr pData);\n\nclass Program\n{\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern IntPtr tianzuo_ZhuiriInterface_initialize();\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern void tianzuo_ZhuiriInterface_terminate(IntPtr Zhuiri);\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern int tianzuo_ZhuiriInt_initialize(IntPtr Zhuiri, string ip_addr, int port, IntPtr callback, IntPtr context, int heart_check_time, bool log_trace, IntPtr iocp);\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern IntPtr tianzuo_DataQueueInterface_initialize();\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern int tianzuo_ZhuiriInt_set_param(IntPtr Zhuiri, int sender_index, int init_server_port, int msg_init_size, int recv_ex_data_max, int retry_max, int retry_all_number, int init_retry_time);\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern int tianzuo_ZhuiriInt_send(IntPtr Zhuiri, int sender_index, int ip, int port, int sign, int function, string send_data, int send_size);\n\n    static void MyCallback(IntPtr context, IntPtr pData)\n    {\n        Zhuiri_data_pkg_struct data = Marshal.PtrToStructure&lt;Zhuiri_data_pkg_struct&gt;(pData);\n        string str = Encoding.ASCII.GetString(data.m_data.m_data);\n        Console.WriteLine(\"recv data:\" + str);\n    }\n\n    static void Main(string[] args)\n    {\n        // \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n        Console.WriteLine(\"initialize the interface\\n\");\n\n        // \u521b\u5efa\u5b9e\u4f8b create an instance\n        IntPtr data_queue_recv = tianzuo_DataQueueInterface_initialize();\n\n        CallbackDelegate callback = new CallbackDelegate(MyCallback);\n        IntPtr callbackPtr = Marshal.GetFunctionPointerForDelegate(callback);\n\n        IntPtr zhuiri = tianzuo_ZhuiriInterface_initialize();\n        int port = 6666;\n        int error_code = tianzuo_ZhuiriInt_initialize(zhuiri, null, port, callbackPtr, data_queue_recv, 6000, false, 0);\n        if (error_code != ((int)Zhuiri_error_code.Zhuiri_error_code_success))\n        {\n            Console.WriteLine(\"tianzuo_ZhuiriInt_initialize error:\" + error_code);\n            return;\n        }\n\n        // \u8bbe\u7f6e\u9ed8\u8ba4\u53c2\u6570 set default parameters\n        tianzuo_ZhuiriInt_set_param(zhuiri, 0, 5168, 1024, 2280, 3, 5, 600);\n\n        // \u5f00\u59cb\u53d1\u9001\u6570\u636e start sending data\n        string ipAddressString = \"127.0.1.1\";\n        IPAddress ipAddress = IPAddress.Parse(ipAddressString);\n        byte[] bytes = ipAddress.GetAddressBytes();\n        if (BitConverter.IsLittleEndian)\n        {\n            Array.Reverse(bytes);\n        }\n        int ip = BitConverter.ToInt32(bytes, 0);\n        int sport = 6666;\n        for (int i = 0; i &lt; 100; i++)\n        {\n            string data = String.Format(\"send data {0}\", i);\n            int data_len = data.Length;\n            error_code = tianzuo_ZhuiriInt_send(zhuiri, 0, ip, sport, (int)Zhuiri_data_sign.Zhuiri_data_sign_reliable, 7788, data, data_len);\n            if (error_code != ((int)Zhuiri_error_code.Zhuiri_error_code_success))\n            {\n                Console.WriteLine(\"tianzuo_ZhuiriInt_send error:\" + error_code);\n                return;\n            }\n        }\n\n        Console.WriteLine(\"test done\");\n    }\n}\n\n</code></pre> javascript <pre><code>\n\nZhuiri_error_code_success       = 0x00000001;                                     ///&lt; \u6b63\u786e\u7684\u503c (success)\nZhuiri_error_code_no_rights     = 0x00000002;                                     ///&lt; \u6548\u9a8c\u672a\u901a\u8fc7 (no rights)\nZhuiri_error_code_socket        = 0x0000000D;                                     ///&lt; \u5957\u63a5\u5b57\u9519\u8bef (socket error)\nZhuiri_error_code_thread_error  = 0x00000021;                                     ///&lt; \u7ebf\u7a0b\u5931\u8d25 (thread error)\nZhuiri_error_code_handle        = 0x00000022;                                     ///&lt; \u521b\u5efa\u53e5\u67c4\u5931\u8d25 (handle error)\nZhuiri_error_code_out_of_cache  = 0x00000023;                                     ///&lt; \u8d85\u51fa\u7f13\u51b2\u6700\u5927\u503c (out f cache)\nZhuiri_error_code_out_of_memory = 0x00000024;                                     ///&lt; \u5185\u5b58\u6ea2\u51fa (out of memory)\nZhuiri_error_code_time_out      = 0x00000025;                                     ///&lt; \u64cd\u4f5c\u8d85\u65f6 (time out)\nZhuiri_error_code_user_reject   = 0x00000098;                                     ///&lt; \u5bf9\u65b9\u51b3\u7edd (user reject)\nZhuiri_error_code_user_exit     = 0x00000099;                                     ///&lt; \u81ea\u884c\u9000\u51fa (user exit)\n\nZhuiri_data_sign_none           = 0x00000000;                                     ///&lt; \u65e0\u6807\u8bc6  (no sign)\nZhuiri_data_sign_reliable       = 0x00000001;                                     ///&lt; \u53ef\u9760    (reliable)\nZhuiri_data_sign_processing     = 0x00000002;                                     ///&lt; \u5904\u7406\u4e2d  (processing)\nZhuiri_data_sign_response       = 0x00000003;                                     ///&lt; \u56de\u5e94\u6d88\u606f (response)\nZhuiri_data_sign_heart          = 0x00000004;                                     ///&lt; \u5fc3\u8df3\u5305  (heart)\n\nlet ffi = require('ffi-napi')\nconst ref = require('ref-napi');\n\nlet tianzuo_ZhuiriLib = ffi.Library(\"tianzuo.Zhuiri.dll\", {\n    'tianzuo_ZhuiriInterface_initialize': ['pointer', []],\n    'tianzuo_ZhuiriInterface_terminate':['void',['pointer']],\n    'tianzuo_ZhuiriInt_initialize':['int',['pointer','pointer','int','pointer','pointer','int', 'bool','pointer']],\n    'tianzuo_ZhuiriInt_set_param':['int',['pointer','int','int','int','int','int','int','int']],\n    'tianzuo_ZhuiriInt_send':['int',['pointer','int','int','int','int','int','string','int']],\n    'tianzuo_DataQueueInterface_initialize': ['pointer', []],\n    'tianzuo_DataQueueInterface_terminate':['void',['pointer']],\n})\n\nfunction ipToInt(ip) {\n    let parts = ip.split('.').map(Number);\n    return (parts[0] &lt;&lt; 24) + (parts[1] &lt;&lt; 16) + (parts[2] &lt;&lt; 8) + parts[3];\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve =&gt; setTimeout(resolve, ms));\n}\n\nasync function main() {\n\n    // \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n    console.log(\"initialize the interface\\n\");\n\n    // \u521b\u5efa\u5b9e\u4f8b create an instance\n    let data_queue_recv = tianzuo_ZhuiriLib.tianzuo_DataQueueInterface_initialize();\n\n    const callback = ffi.Callback('void', ['pointer', 'pointer'], function(context, pData) {\n        const data = pData.readCString(4*7);\n        console.log(`recv data: ${data}`);\n    });\n\n    let port = 5555;\n    let zhuiri = tianzuo_ZhuiriLib.tianzuo_ZhuiriInterface_initialize();\n    let error_code = tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_initialize(zhuiri, null, port, callback, data_queue_recv, 6000, false, null);\n    if (error_code !== Zhuiri_error_code_success) {\n        console.log(\"tianzuo_ZhuiriInt_initialize error: %d\\n\", error_code);\n        return;\n    }\n\n    // \u8bbe\u7f6e\u9ed8\u8ba4\u53c2\u6570 set default parameters\n    tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_set_param(zhuiri, 0, 5168, 1024, 2280, 3, 5, 600);\n\n    // \u5f00\u59cb\u53d1\u9001\u6570\u636e start sending data\n    const ipString = '127.0.0.1';\n    const ip = ipToInt(ipString);\n    let sport = 6666;\n\n    for (let i = 0; i &lt; 10; i++) {\n        const data = `send data ${i}`;\n        const data_len = data.length;\n        error_code = tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_send(zhuiri, 0, ip, sport, Zhuiri_data_sign_reliable, 7788, data, data_len);\n        if (error_code !== Zhuiri_error_code_success) {\n            console.log(\"tianzuo_ZhuiriInt_send error: %d\\n\", error_code);\n            return;\n        }\n    }\n    await sleep(20000);\n}\n\nmain();\n\nconsole.log(\"test done\\n\");\n\n\n</code></pre> php <pre><code>&lt;?php\n\n// \u68c0\u67e5\u662f\u5426\u52a0\u8f7d\u4e86 FFI \u6269\u5c55\nif (extension_loaded('ffi')) {\n    echo(\"\u5df2\u542f\u7528 FFI \u6269\u5c55\\n\");\n} else {\n    die(\"\u672a\u542f\u52a8 FFI \u6269\u5c55\\n\");\n}\n\nenum Zhuiri_error_code\n{\nconst Zhuiri_error_code_success       = 0x00000001;                                     ///&lt; \u6b63\u786e\u7684\u503c (success)\nconst Zhuiri_error_code_no_rights     = 0x00000002;                                     ///&lt; \u6548\u9a8c\u672a\u901a\u8fc7 (no rights)\nconst Zhuiri_error_code_socket        = 0x0000000D;                                     ///&lt; \u5957\u63a5\u5b57\u9519\u8bef (socket error)\nconst Zhuiri_error_code_thread_error  = 0x00000021;                                     ///&lt; \u7ebf\u7a0b\u5931\u8d25 (thread error)\nconst Zhuiri_error_code_handle        = 0x00000022;                                     ///&lt; \u521b\u5efa\u53e5\u67c4\u5931\u8d25 (handle error)\nconst Zhuiri_error_code_out_of_cache  = 0x00000023;                                     ///&lt; \u8d85\u51fa\u7f13\u51b2\u6700\u5927\u503c (out f cache)\nconst Zhuiri_error_code_out_of_memory = 0x00000024;                                     ///&lt; \u5185\u5b58\u6ea2\u51fa (out of memory)\nconst Zhuiri_error_code_time_out      = 0x00000025;                                     ///&lt; \u64cd\u4f5c\u8d85\u65f6 (time out)\nconst Zhuiri_error_code_user_reject   = 0x00000098;                                     ///&lt; \u5bf9\u65b9\u51b3\u7edd (user reject)\nconst Zhuiri_error_code_user_exit     = 0x00000099;                                     ///&lt; \u81ea\u884c\u9000\u51fa (user exit)\n};\n\nenum Zhuiri_data_sign\n{\nconst Zhuiri_data_sign_none           = 0x00000000;                                     ///&lt; \u65e0\u6807\u8bc6  (no sign)\nconst Zhuiri_data_sign_reliable       = 0x00000001;                                     ///&lt; \u53ef\u9760    (reliable)\nconst Zhuiri_data_sign_processing     = 0x00000002;                                     ///&lt; \u5904\u7406\u4e2d  (processing)\nconst Zhuiri_data_sign_response       = 0x00000003;                                     ///&lt; \u56de\u5e94\u6d88\u606f (response)\nconst Zhuiri_data_sign_heart          = 0x00000004;                                     ///&lt; \u5fc3\u8df3\u5305  (heart)\n};\n\n$ffi = FFI::cdef(\"\n    void* tianzuo_ZhuiriInterface_initialize();\n    void tianzuo_ZhuiriInterface_terminate(void* *ZhuiriInt_pointer);\n    int tianzuo_ZhuiriInt_initialize(void* ZhuiriInt_pointer, const char* ip_addr, int port, const void* callback, const void* context, int const heart_check_time, bool log_trace, void* iocp);\n    int tianzuo_ZhuiriInt_set_param(void* ZhuiriInt_pointer, int sender_index, int init_server_port, int msg_init_size, int recv_ex_data_max, int retry_max, int retry_all_number, int init_retry_time);\n    int tianzuo_ZhuiriInt_send(void* ZhuiriInt_pointer, int sender_index, int ip, int port, int sign, int function, char* send_data, int send_size);\n    void* tianzuo_DataQueueInterface_initialize();\n    void tianzuo_DataQueueInterface_terminate(void* *DataQueue_pointer);\n    typedef unsigned(*Zhuiri_callback)(const void *context, const void *pData);\n\", \"tianzuo.Zhuiri.dll\");\n\n# \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\necho \"initialize the interface\" . \"\\n\";\n\n# \u521b\u5efa\u5b9e\u4f8b create an instance\n$data_queue_recv = $ffi-&gt;tianzuo_DataQueueInterface_initialize();\n\n\n//function myCallback($context, $pData) {\n//    echo \"phpCallback\" . \"\\n\";\n//}\n//\n//// Define the callback function signature\n//$callback = function($context, $pData) {\n//    myCallback($context, $pData);\n//};\n//\n//$callableCallback = FFI::addr($callback);\n\n\n//$phpCallback = function($context, $pData): void {\n//    echo \"phpCallback\" . \"\\n\";\n//};\n//$callback= FFI::new(\"Zhuiri_callback\", $phpCallback);\n\n\n$callback = $ffi-&gt;callback(\"void(const char*)\", function($message) {\n    echo \"Callback message: $message\\n\";\n});\n\n\n\n$port = 6666;\n$zhuiri = $ffi-&gt;tianzuo_ZhuiriInterface_initialize();\n$error_code = $ffi-&gt;tianzuo_ZhuiriInt_initialize($zhuiri, null, $port, $callback, $data_queue_recv, 6000, False, null);\nif ($error_code != Zhuiri_error_code::Zhuiri_error_code_success) {\n    echo \"initialize error: \" . $error_code . \"\\n\";\n    return;\n}\n\n# \u8bbe\u7f6e\u9ed8\u8ba4\u53c2\u6570 set default parameters\n$ffi-&gt;tianzuo_ZhuiriInt_set_param($zhuiri, 0, 5168, 1024, 2280, 3, 5, 600);\n\n# \u5f00\u59cb\u53d1\u9001\u6570\u636e start sending data\n$ip = ip2long(\"127.0.0.1\");\nfor ($i = 0; $i &lt; 10; $i++) {\n    $data = sprintf(\"send data %d\", $i);\n    $data_len = strlen($data);\n    echo \"ip: \" . $ip . \"\\n\";\n    echo \"port: \" . $port . \"\\n\";\n    echo \"send data: \" . $data . \"\\n\";\n    echo \"data_len: \" . $data_len . \"\\n\";\n    $error_code = $ffi-&gt;tianzuo_ZhuiriInt_send($zhuiri, 0, $ip, $port, Zhuiri_data_sign::Zhuiri_data_sign_reliable, 7788, $data, $data_len);\n    if ($error_code != Zhuiri_error_code::Zhuiri_error_code_success) {\n        echo \"send error: \" . $error_code . \"\\n\";\n        return;\n    }\n}\n\necho \"test done\" . \"\\n\";\n\n\n?&gt;\n</code></pre> vb <pre><code>\nImports System.IO\nImports System.Net\nImports System.Runtime.InteropServices\nImports System.Runtime.InteropServices.JavaScript.JSType\nImports System.Text\n\nEnum Zhuiri_error_code\n    Zhuiri_error_code_success = 1                                            ' \u6b63\u786e\u7684\u503c (success)\n    Zhuiri_error_code_no_rights = 2                                          ' \u6548\u9a8c\u672a\u901a\u8fc7 (no rights)\n    Zhuiri_error_code_socket = 13                                            ' \u5957\u63a5\u5b57\u9519\u8bef (socket Error)\n    Zhuiri_error_code_thread_error = 21                                      ' \u7ebf\u7a0b\u5931\u8d25 (thread Error)\n    Zhuiri_error_code_handle = 22                                            ' \u521b\u5efa\u53e5\u67c4\u5931\u8d25 (handle Error)\n    Zhuiri_error_code_out_of_cache = 23                                      ' \u8d85\u51fa\u7f13\u51b2\u6700\u5927\u503c (out f cache)\n    Zhuiri_error_code_out_of_memory = 24                                     ' \u5185\u5b58\u6ea2\u51fa (out Of memory)\n    Zhuiri_error_code_time_out = 25                                          ' \u64cd\u4f5c\u8d85\u65f6 (time out)\n    Zhuiri_error_code_user_reject = 98                                       ' \u5bf9\u65b9\u51b3\u7edd (user reject)\n    Zhuiri_error_code_user_exit = 99                                         ' \u81ea\u884c\u9000\u51fa (user Exit)\nEnd Enum\n\nEnum Zhuiri_data_sign\n    Zhuiri_data_sign_none = 0                                               ' \u65e0\u6807\u8bc6  (no sign)\n    Zhuiri_data_sign_reliable = 1                                           ' \u53ef\u9760    (reliable)\n    Zhuiri_data_sign_processing = 2                                         ' \u5904\u7406\u4e2d  (processing)\n    Zhuiri_data_sign_response = 3                                           ' \u56de\u5e94\u6d88\u606f (response)\n    Zhuiri_data_sign_heart = 4                                              ' \u5fc3\u8df3\u5305  (heart)\nEnd Enum\n\nStructure Zhuiri_data_struct\n    Public m_ip_adrs As Integer\n    Public m_port As Integer\n    Public m_function As Integer\n    Public m_sign As Integer\n    Public m_index As Integer\n    Public m_send_time As Integer\n    Public m_send_size As Integer\n    &lt;MarshalAs(UnmanagedType.ByValArray, SizeConst:=492)&gt;\n    Public m_data As Byte()\nEnd Structure\n\nStructure Zhuiri_data_pkg_struct\n    Public m_data As Zhuiri_data_struct\n    Public m_send_data As IntPtr\n    Public m_Zhuiri As IntPtr\n    Public m_user_data As IntPtr\nEnd Structure\n\nModule Program\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_ZhuiriInterface_initialize() As IntPtr\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_ZhuiriInterface_terminate(ByRef ZhuiriInt_pointer As IntPtr)\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_ZhuiriInt_initialize(ZhuiriInt_pointer As IntPtr, ip_addr As String, port As Integer,\n        callback As IntPtr, context As IntPtr, heart_check_time As Integer, log_trace As Boolean, iocp As IntPtr) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_ZhuiriInt_set_param(ZhuiriInt_pointer As IntPtr,\n        sender_index As Integer, init_server_port As Integer, msg_init_size As Integer,\n        recv_ex_data_max As Integer, retry_max As Integer, retry_all_number As Integer,\n        init_retry_time As Integer) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_ZhuiriInt_send(ZhuiriInt_pointer As IntPtr,\n        sender_index As Integer, ip As Integer, port As Integer, sign As Integer, func As Integer, send_data As String, send_size As Integer) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_DataQueueInterface_initialize() As IntPtr\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_DataQueueInterface_terminate(ByRef DataQueue_pointer As IntPtr)\n    End Function\n\n    Public Delegate Sub CallbackFunc(context As IntPtr, pData As IntPtr)\n\n    Public Sub msg_recv_callback(context As IntPtr, pData As IntPtr)\n        Dim data As Zhuiri_data_pkg_struct = Marshal.PtrToStructure(Of Zhuiri_data_pkg_struct)(pData)\n        Dim Str As String = Encoding.ASCII.GetString(data.m_data.m_data)\n        Console.WriteLine(\"recv data:\" + Str)\n    End Sub\n\n    Sub Main(args As String())\n\n        ' \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n        Console.WriteLine(\"initialize the interface\")\n\n        ' \u521b\u5efa\u5b9e\u4f8b create an instance\n        Dim data_queue_recv As IntPtr = tianzuo_DataQueueInterface_initialize()\n        Dim callbackDelegate As CallbackFunc = AddressOf msg_recv_callback\n        Dim callbackPtr As IntPtr = Marshal.GetFunctionPointerForDelegate(callbackDelegate)\n\n        Dim port As Integer = 6666\n        Dim Zhuiri As IntPtr = tianzuo_ZhuiriInterface_initialize()\n        Dim error_code As Integer = tianzuo_ZhuiriInt_initialize(Zhuiri, IntPtr.Zero, port, callbackPtr, data_queue_recv, 6000, False, IntPtr.Zero)\n        If (error_code &lt;&gt; Zhuiri_error_code.Zhuiri_error_code_success) Then\n            Console.WriteLine(\"tianzuo_ZhuiriInt_initialize error:\" + error_code.ToString)\n            Return\n        End If\n\n        ' \u8bbe\u7f6e\u9ed8\u8ba4\u53c2\u6570 Set Default parameters\n        tianzuo_ZhuiriInt_set_param(Zhuiri, 0, 5168, 1024, 2280, 3, 5, 600)\n\n        ' \u5f00\u59cb\u53d1\u9001\u6570\u636e start sending data\n        Dim ipAddressString As String = \"127.0.1.1\"\n        Dim ipAddress As IPAddress = IPAddress.Parse(ipAddressString)\n        Dim bytes As Byte() = ipAddress.GetAddressBytes()\n        If (BitConverter.IsLittleEndian) Then\n            Array.Reverse(bytes)\n        End If\n        Dim ip As Integer = BitConverter.ToInt32(bytes, 0)\n        Dim sport As Integer = 6666\n        For i As Integer = 0 To 99\n            Dim data As String = String.Format(\"send data {0}\", i)\n            Dim data_len As Integer = data.Length\n            error_code = tianzuo_ZhuiriInt_send(Zhuiri, 0, ip, sport, Zhuiri_data_sign.Zhuiri_data_sign_reliable, 7788, data, data_len)\n            If (error_code &lt;&gt; Zhuiri_error_code.Zhuiri_error_code_success) Then\n                Console.WriteLine(\"tianzuo_ZhuiriInt_send error:\" + error_code.ToString)\n                Return\n            End If\n        Next\n\n        Console.WriteLine(\"test done -------------------\")\n\n    End Sub\nEnd Module\n\n</code></pre> go <pre><code>package main\n\n/*\n#include \"tianzuo.ZhuiriInterface.h\"\nvoid msg_recv_callback_cgo(const void *context, const void *pData);\n*/\nimport \"C\"\nimport (\n    \"fmt\"\n    \"net\"\n    \"syscall\"\n    \"unsafe\"\n)\n\nconst (\n    Zhuiri_error_code_success       = 1  // \u6b63\u786e\u7684\u503c (success)\n    Zhuiri_error_code_no_rights     = 2  // \u6548\u9a8c\u672a\u901a\u8fc7 (no rights)\n    Zhuiri_error_code_socket        = 13 // \u5957\u63a5\u5b57\u9519\u8bef (socket error)\n    Zhuiri_error_code_thread_error  = 21 // \u7ebf\u7a0b\u5931\u8d25 (thread error)\n    Zhuiri_error_code_handle        = 22 // \u521b\u5efa\u53e5\u67c4\u5931\u8d25 (handle error)\n    Zhuiri_error_code_out_of_cache  = 23 // \u8d85\u51fa\u7f13\u51b2\u6700\u5927\u503c (out f cache)\n    Zhuiri_error_code_out_of_memory = 24 // \u5185\u5b58\u6ea2\u51fa (out of memory)\n    Zhuiri_error_code_time_out      = 25 // \u64cd\u4f5c\u8d85\u65f6 (time out)\n    Zhuiri_error_code_user_reject   = 98 // \u5bf9\u65b9\u51b3\u7edd (user reject)\n    Zhuiri_error_code_user_exit     = 99 // \u81ea\u884c\u9000\u51fa (user exit)\n)\n\nconst (\n    Zhuiri_data_sign_none       = 0 // \u65e0\u6807\u8bc6  (no sign)\n    Zhuiri_data_sign_reliable   = 1 // \u53ef\u9760    (reliable)\n    Zhuiri_data_sign_processing = 2 // \u5904\u7406\u4e2d  (processing)\n    Zhuiri_data_sign_response   = 3 // \u56de\u5e94\u6d88\u606f (response)\n    Zhuiri_data_sign_heart      = 4 // \u5fc3\u8df3\u5305  (heart)\n)\n\nfunc ipToInt(ip net.IP) uint32 {\n    ip = ip.To4()\n    if ip == nil {\n        return 0\n    }\n\n    ipInt := uint32(ip[0])&lt;&lt;24 | uint32(ip[1])&lt;&lt;16 | uint32(ip[2])&lt;&lt;8 | uint32(ip[3])\n    return ipInt\n}\n\ntype Zhuiri_data_pkg_struct C.Zhuiri_data_pkg_struct\n\n//export msg_recv_callback\nfunc msg_recv_callback(context unsafe.Pointer, pData unsafe.Pointer) {\n    data := *(*Zhuiri_data_pkg_struct)(unsafe.Pointer(pData))\n    charArray := data.m_data.m_data\n    goStr := C.GoString((*C.char)(unsafe.Pointer(&amp;charArray[0])))\n    fmt.Println(\"recv data:\", goStr)\n}\n\nfunc main() {\n    // \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n    dll := syscall.MustLoadDLL(\"tianzuo.Zhuiri.dll\")\n\n    // \u521b\u5efa\u5b9e\u4f8b create an instance\n    tianzuo_DataQueueInterface_initialize := dll.MustFindProc(\"tianzuo_DataQueueInterface_initialize\")\n    data_queue_recv, _, _ := tianzuo_DataQueueInterface_initialize.Call()\n\n    tianzuo_ZhuiriInterface_initialize := dll.MustFindProc(\"tianzuo_ZhuiriInterface_initialize\")\n    Zhuiri, _, _ := tianzuo_ZhuiriInterface_initialize.Call()\n\n    var ip uintptr\n    port := 6666\n    var iocp uintptr\n    tianzuo_ZhuiriInt_initialize := dll.MustFindProc(\"tianzuo_ZhuiriInt_initialize\")\n    msg_recv_callback_ptr := uintptr(unsafe.Pointer(C.msg_recv_callback_cgo))\n    error_code, _, _ := tianzuo_ZhuiriInt_initialize.Call(Zhuiri, ip, uintptr(C.int(port)), msg_recv_callback_ptr, data_queue_recv, 6000, uintptr(C.int(0)), iocp)\n    if error_code != Zhuiri_error_code_success {\n        fmt.Println(\"tianzuo_ZhuiriInt_initialize error: \", error_code)\n    }\n\n    // \u8bbe\u7f6e\u9ed8\u8ba4\u53c2\u6570 set default parameters\n    tianzuo_ZhuiriInt_set_param := dll.MustFindProc(\"tianzuo_ZhuiriInt_set_param\")\n    tianzuo_ZhuiriInt_set_param.Call(Zhuiri, 0, 5168, 1024, 2280, 3, 5, 600)\n\n    // \u5f00\u59cb\u53d1\u9001\u6570\u636e start sending data\n    ipStr := \"127.0.0.1\"\n    ipint := net.ParseIP(ipStr)\n    nip := ipToInt(ipint)\n    tianzuo_ZhuiriInt_send := dll.MustFindProc(\"tianzuo_ZhuiriInt_send\")\n    for i := 0; i &lt; 100; i++ {\n        data := \"send data %d\"\n        gdata := fmt.Sprintf(data, i)\n        cdata := C.CString(gdata)\n        gdata_len := len(gdata)\n        data_len := C.int(gdata_len)\n        error_code, _, _ = tianzuo_ZhuiriInt_send.Call(Zhuiri, 0, uintptr(C.int(nip)), uintptr(C.int(port)), Zhuiri_data_sign_reliable, 7788, uintptr(unsafe.Pointer(cdata)), uintptr(data_len))\n        if error_code != Zhuiri_error_code_success {\n            fmt.Println(\"tianzuo_ZhuiriInt_send error: \", error_code)\n            return\n        }\n    }\n\n    fmt.Println(\"test done -------------------\")\n}\n\n</code></pre> rust <pre><code>\nuse std::os::raw::c_char;\nuse std::ffi::{c_int};\nuse std::ffi::CString;\nuse std::ptr::null;\nuse std::mem;\n\ntype CallbackFunc = extern \"C\" fn(context: *mut std::ffi::c_void, pData: *mut std::ffi::c_void);\n\nstruct Zhuiri_data_struct {\n    m_ip_adrs: i32,\n    m_port: i32,\n    m_function: i32,\n    m_sign: i32,\n    m_index: i32,\n    m_send_time: i32,\n    m_send_size: i32,\n    m_data: [u8; 492],\n}\n\nstruct Zhuiri_data_pkg_struct {\n    m_data: Zhuiri_data_struct,\n    m_send_data: *const c_char,\n    m_Zhuiri: *mut std::ffi::c_void,\n    m_user_data: *mut std::ffi::c_void,\n}\n\n#[link(name = \"tianzuo.Zhuiri\")]\nextern {\n    fn tianzuo_ZhuiriInterface_initialize() -&gt; *mut std::ffi::c_void;\n    fn tianzuo_ZhuiriInterface_terminate(obj: *mut std::ffi::c_void);\n    fn tianzuo_ZhuiriInt_initialize(obj: *mut std::ffi::c_void, ip_addr: *const c_char, port: c_int, callback: *mut std::ffi::c_void, context: *mut std::ffi::c_void, heart_check_time: c_int, log_trace: c_int, iocp: *const std::ffi::c_void) -&gt; c_int;\n    fn tianzuo_ZhuiriInt_set_param(obj: *mut std::ffi::c_void, sender_index: c_int, init_server_port: c_int, msg_init_size: c_int, recv_ex_data_max: c_int, retry_max: c_int, retry_all_number: c_int, init_retry_time: c_int);\n    fn tianzuo_ZhuiriInt_send(obj: *mut std::ffi::c_void, sender_index: c_int, ip: c_int, port: c_int, sign: c_int, function: c_int, send_data: *const c_char, send_size: c_int) -&gt; c_int;\n    fn tianzuo_DataQueueInterface_initialize() -&gt; *mut std::ffi::c_void;\n    fn tianzuo_DataQueueInterface_terminate(obj: *mut std::ffi::c_void);\n    fn tianzuo_DataQueueInt_initializee(obj: *mut std::ffi::c_void);\n}\n\nextern \"C\" fn msg_recv_callback(context: *mut std::ffi::c_void, pData: *mut std::ffi::c_void) {\n    unsafe {\n        //println!(\"Rust callback function called\");\n        let data: &amp;mut Zhuiri_data_pkg_struct = unsafe { mem::transmute(pData) };\n        let string = std::str::from_utf8(&amp;data.m_data.m_data).unwrap();\n        println!(\"recv data: {}\", string);\n    }\n}\n\nfn ip_to_int(ip: &amp;str) -&gt; i32 {\n    let parts: Vec&lt;i32&gt; = ip.split('.').map(|part| part.parse().unwrap()).collect();\n    (parts[0] &lt;&lt; 24) + (parts[1] &lt;&lt; 16) + (parts[2] &lt;&lt; 8) + parts[3]\n}\n\nfn main() {\n    unsafe {\n        // \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n        println!(\"initialize the interface\");\n\n        // \u521b\u5efa\u5b9e\u4f8b create an instance\n        let data_queue_recv = tianzuo_DataQueueInterface_initialize();\n\n        let pdata_queue_recv= data_queue_recv as *mut std::ffi::c_void;\n\n        let pmsg_recv_callback = msg_recv_callback as *mut std::ffi::c_void;\n\n        let zhuiri = tianzuo_ZhuiriInterface_initialize();\n        let port = 6666;\n        let error_code = tianzuo_ZhuiriInt_initialize(zhuiri, null(), port, pmsg_recv_callback, pdata_queue_recv, 6000, 0, null());\n        if 1 != error_code {\n            println!(\"tianzuo_ZhuiriInt_initialize error: {:?}\", error_code);\n        }\n\n        // \u8bbe\u7f6e\u9ed8\u8ba4\u53c2\u6570 set default parameters\n        tianzuo_ZhuiriInt_set_param(zhuiri,0, 5168, 1024, 2280, 3, 5, 600);\n\n        // \u5f00\u59cb\u53d1\u9001\u6570\u636e start sending data\n        let ip = ip_to_int(\"127.0.0.1\");\n        for i in 0..=99 {\n            let data = format!(\"send data {}\", i);\n            let data_str = CString::new(String::from(data.clone())).expect(\"Failed to create CString\");\n            let data_len = data.len() as i32;\n            let error_code = tianzuo_ZhuiriInt_send(zhuiri, 0, ip, port, 1, 7788, data_str.as_ptr(), data_len);\n            if 1 != error_code {\n                println!(\"tianzuo_ZhuiriInt_send error: {:?}\", error_code);\n            }\n        }\n\n        println!(\"test done -------------------\")\n    }\n}\n\n</code></pre> ruby <pre><code>require 'fiddle'\nrequire 'ipaddr'\n\nlib = Fiddle::dlopen('C:/Users/zhengtianzuo/RubymineProjects/tianzuo.ZhuiriTest/tianzuo.Zhuiri.dll')\ntianzuo_ZhuiriInterface_initialize = Fiddle::Function.new(lib['tianzuo_ZhuiriInterface_initialize'], [], Fiddle::TYPE_VOIDP)\ntianzuo_ZhuiriInterface_terminate = Fiddle::Function.new(lib['tianzuo_ZhuiriInterface_terminate'], [Fiddle::TYPE_VOIDP], Fiddle::TYPE_VOID)\ntianzuo_ZhuiriInt_initialize = Fiddle::Function.new(lib['tianzuo_ZhuiriInt_initialize'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\ntianzuo_ZhuiriInt_set_param = Fiddle::Function.new(lib['tianzuo_ZhuiriInt_set_param'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT], Fiddle::TYPE_INT)\ntianzuo_ZhuiriInt_send = Fiddle::Function.new(lib['tianzuo_ZhuiriInt_send'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT], Fiddle::TYPE_INT)\ntianzuo_DataQueueInterface_initialize = Fiddle::Function.new(lib['tianzuo_DataQueueInterface_initialize'], [], Fiddle::TYPE_VOIDP)\ntianzuo_DataQueueInterface_terminate = Fiddle::Function.new(lib['tianzuo_DataQueueInterface_terminate'], [Fiddle::TYPE_VOIDP], Fiddle::TYPE_VOID)\n\ndef string_to_char_pointer(str)\n  ptr = Fiddle::Pointer[str]\n  ptr.to_s\nend\n\n# \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\nprint(\"initialize the interface\\n\")\n\n# \u521b\u5efa\u5b9e\u4f8b create an instance\ndata_queue_recv = tianzuo_DataQueueInterface_initialize.call()\n\ncallback = Fiddle::Closure::BlockCaller.new(Fiddle::TYPE_INT, [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]) do |context, pData|\n  puts \"callback function called\"\nend\n\nport = 6666\nzhuiri = tianzuo_ZhuiriInterface_initialize.call()\nerror_code = tianzuo_ZhuiriInt_initialize.call(zhuiri, nil, port, callback.to_i, data_queue_recv, 6000, 0, nil)\nif error_code != 1\n  print(\"initialize error:\", error_code, \"\\n\")\n  return\nend\n\n# \u8bbe\u7f6e\u9ed8\u8ba4\u53c2\u6570 set default parameters\ntianzuo_ZhuiriInt_set_param.call(zhuiri, 0, 5168, 1024, 2280, 3, 5, 600)\n\n# \u5f00\u59cb\u53d1\u9001\u6570\u636e start sending data\nip = IPAddr.new(\"127.0.0.1\").to_i\nfor i in 1..10\n  data = \"send data %d\" % [i]\n  data_len = data.length\n  error_code = tianzuo_ZhuiriInt_send.call(zhuiri, 0, ip, port, 1, 7788, data, data_len)\n  if error_code != 1\n    print(\"tianzuo_ZhuiriInt_send error:\", error_code, \"\\n\")\n    return\n  end\nend\n\n</code></pre>"},{"location":"component/tianzuo.Zhuiri/#_8","title":"\u4e0b\u8f7d","text":""},{"location":"other/","title":"\u5176\u4ed6","text":""},{"location":"other/AllArticles/","title":"\u5168\u90e8\u6587\u7ae0\u5217\u8868","text":"<p>048-\u4ee3\u7801\u5473\u9053-\u626d\u66f2\u7684\u5c42\u6b21 2025/09/18</p> <p>047-\u4ee3\u7801\u5473\u9053-\u6570\u636e\u6a21\u5757 2025/08/14</p> <p>046-Windows\u6293\u5c4f-WGC 2025/06/24</p> <p>045-\u4ee3\u7801\u5473\u9053-\u6570\u636e\u6ce5\u56e2 2025/06/05</p> <p>044-\u4ee3\u7801\u5473\u9053-\u6570\u636e\u7c7b 2025/05/15</p> <p>043-\u4ee3\u7801\u5473\u9053-\u5faa\u73af\u4f9d\u8d56 2025/04/29</p> <p>042-Windows\u6293\u5c4f-DXGI 2025/04/24</p> <p>041-\u4ee3\u7801\u5473\u9053-\u5927\u6ce5\u56e2\u6a21\u5757 2025/04/21</p> <p>040-\u4ee3\u7801\u5473\u9053-\u5de8\u578b\u7c7b 2025/04/18</p> <p>039-\u4ee3\u7801\u5473\u9053-\u4f9d\u604b\u60c5\u7ed3 2025/04/15</p> <p>038-flatbuffers 2025/04/13</p> <p>037-\u4ee3\u7801\u5473\u9053-\u8fc7\u5ea6\u8026\u5408\u7684\u6d88\u606f\u94fe 2025/04/10</p> <p>036-\u4ee3\u7801\u5473\u9053-\u4e0a\u5e1d\u7c7b 2025/04/08</p> <p>035-Windows\u6293\u5c4f-GDI 2025/04/04</p> <p>034-QSharedMemory 2025/04/03</p> <p>033-QtShadowDialog 2025/04/02</p> <p>032-overlayYUV.md 2025/04/01</p> <p>031-valgrind 2025/03/31</p> <p>030-gprof 2025/03/30</p> <p>029-gperftools 2025/03/29</p> <p>028-ImageCompress 2025/03/28</p> <p>027-7zsfx 2025/03/27</p> <p>026-zstd 2025/03/26</p> <p>025-lz4 2025/03/25</p> <p>024-epoll 2025/03/24</p> <p>023-sha256 2025/03/23</p> <p>022-spdlog 2025/03/22</p> <p>021-TCMalloc 2025/03/21</p> <p>020-\u73af\u5f62\u961f\u5217 2025/03/20</p> <p>019-RSA 2025/03/17</p> <p>018-IOCP 2025/03/16</p> <p>017-HttpServer 2025/03/15</p> <p>016-condition_variable 2025/03/14</p> <p>015-SingleApplication 2025/03/13</p> <p>014-log4cpp 2025/03/13</p> <p>013-Detours 2025/03/13</p> <p>012-Benchmark 2025/03/12</p> <p>011-base64 2025/03/12</p> <p>010-Catch2 2025/03/11</p> <p>009-\u9ad8\u7cbe\u5ea6\u8ba1\u65f6\u5668 2025/03/10</p> <p>008-\u751f\u6210\u4e0d\u91cd\u590d9\u4f4d\u968f\u673a\u6570 2025/03/10</p> <p>007-Property\u5728C++\u4e2d\u7684\u5b9e\u73b0\u4e0e\u5e94\u7528 2025/03/09</p> <p>006-\u83b7\u53d6\u786c\u4ef6\u5e8f\u5217\u53f7 2025/03/09</p> <p>005-\u83b7\u53d6\u5185\u5b58\u5360\u7528\u7387 2025/03/08</p> <p>004-\u83b7\u53d6CPU\u5360\u7528\u7387 2025/03/08</p> <p>003-Boost\u6587\u4ef6\u9501 2025/03/07</p> <p>002-Boost\u5171\u4eab\u5185\u5b58 2025/03/06</p> <p>001-Boost\u6d88\u606f\u961f\u5217 2025/03/06</p> <p>\u5929\u4f50.\u6606\u4ed1\u955c 2025/03/04</p> <p>\u5929\u4f50.\u76d8\u53e4\u65a7 2025/03/04</p> <p>\u5929\u4f50.\u70bc\u5996\u58f6 2025/03/04</p> <p>\u5929\u4f50.\u6df7\u6c8c\u949f 2025/03/03</p> <p>\u5929\u4f50.\u8ffd\u65e5\u9774 2025/03/01</p> <p>\u5929\u4f50.\u4e7e\u5764\u888b 2025/02/28</p> <p>\u5929\u4f50.\u5d06\u5cd2\u5370 2025/02/28</p>"},{"location":"product/tianzuo.Fuxi/","title":"\u5929\u4f50.\u4f0f\u7fb2\u7434","text":""},{"location":"product/tianzuo.Fuxi/#_2","title":"\u5929\u4f50.\u4f0f\u7fb2\u7434","text":"\u64cd\u4f5c\u7cfb\u7edf \u7f16\u8bd1\u5668 \u7f16\u7a0b\u8bed\u8a00"},{"location":"product/tianzuo.Fuxi/#_3","title":"\u7b80\u4ecb","text":"<p>\u5929\u4f50.\u4f0f\u7fb2\u7434 </p> <p>\u4f20\u8bf4: \u4f0f\u7fb2\u4ee5\u7389\u77f3\u52a0\u5929\u4e1d\u6240\u5236\u51fa\u4e4b\u4e50\u5668\uff0c\u6cdb\u8457\u6e29\u67d4\u7684\u767d\u8272\u5149\u8292\uff0c\u5176\u7434\u97f3\u80fd\u4f7f\u4eba\u5fc3\u611f\u5230\u5b81\u9759\u7965\u548c\uff0c\u636e\u8bf4\u62e5\u6709\u80fd\u652f\u914d\u4e07\u7269\u5fc3\u7075\u4e4b\u795e\u79d8\u529b\u91cf\u3002</p>"},{"location":"product/tianzuo.Fuxi/#_4","title":"\u76ee\u6807","text":""},{"location":"product/tianzuo.Fuxi/#_5","title":"\u529f\u80fd","text":""},{"location":"product/tianzuo.Fuxi/#_6","title":"\u622a\u56fe","text":""},{"location":"product/tianzuo.Fuxi/#_7","title":"\u4e0b\u8f7d","text":""},{"location":"product/tianzuo.Kunlun/","title":"\u5929\u4f50.\u6606\u4ed1\u955c","text":""},{"location":"product/tianzuo.Kunlun/#_2","title":"\u5929\u4f50.\u6606\u4ed1\u955c","text":"\u64cd\u4f5c\u7cfb\u7edf \u7f16\u8bd1\u5668 \u7f16\u7a0b\u8bed\u8a00"},{"location":"product/tianzuo.Kunlun/#_3","title":"\u7b80\u4ecb","text":"<p>\u5929\u4f50.\u6606\u4ed1\u955c \u5f3a\u5927\u7684\u672c\u5730\u6784\u5efa\u5de5\u5177, \u63d0\u4f9b\u7ed9\u9879\u76ee\u5168\u65b9\u4f4d\u7684\u9759\u6001\u68c0\u6d4b, \u52a8\u6001\u68c0\u6d4b, \u4ee3\u7801\u5de5\u5177\u4ee5\u53ca\u5404\u79cd\u4fbf\u5229\u7684\u63d2\u4ef6\u5de5\u5177, \u901a\u8fc7\u8bcd\u6cd5\u5206\u6790\u3001\u8bed\u6cd5\u5206\u6790\u3001\u63a7\u5236\u6d41\u3001\u6570\u636e\u6d41\u5206\u6790\u3001\u5185\u5b58\u68c0\u6d4b\u3001\u4ee3\u7801\u8986\u76d6\u7387\u3001\u70ed\u70b9\u51fd\u6570\u68c0\u6d4b\u7b49\u6280\u672f\u5bf9\u7a0b\u5e8f\u4ee3\u7801\u8fdb\u884c\u626b\u63cf\uff0c\u9a8c\u8bc1\u4ee3\u7801\u662f\u5426\u6ee1\u8db3\u89c4\u8303\u6027\u3001\u5b89\u5168\u6027\u3001\u53ef\u9760\u6027\u3001\u53ef\u7ef4\u62a4\u6027\u7b49\u6307\u6807. \u6839\u636e\u5206\u6790\u7ed3\u679c\u5bf9\u4ee3\u7801\u8fdb\u884c\u6df1\u5ea6\u4f18\u5316. \u63d0\u5347\u4ee3\u7801\u8d28\u91cf, \u589e\u5f3a\u4ea7\u54c1\u5065\u58ee\u6027.</p> <p>\u4f20\u8bf4: \u4ed9\u4eba\u6545\u4e61\u6606\u4ed1\u5c71\u4e2d\u7684\u6606\u4ed1\u5929\u5bab\u4e2d\uff0c\u4f20\u8bf4\u6709\u4e00\u9762\u795e\u955c\uff0c\u662f\u62e5\u6709\u81ea\u7531\u7a7f\u68ad\u65f6\u7a7a\u4e4b\u529b\u3002\u4f46\u5728\u4e00\u6b21\u4ed9\u4eba\u7684\u76db\u4f1a\u4e2d\uff0c\u795e\u955c\u88ab\u4eba\u6240\u5077\uff0c\u81f3\u4eca\u4e00\u76f4\u4e0b\u843d\u4e0d\u660e\u3002</p>"},{"location":"product/tianzuo.Kunlun/#_4","title":"\u76ee\u6807","text":"<p>\u642d\u5efa\u4e00\u79cd\u65b9\u4fbf\u8fd0\u884c\u7684\u672c\u5730\u6784\u5efa\u5de5\u5177, \u96c6\u6210\u5404\u79cd\u4ee3\u7801\u68c0\u6d4b\u3002</p> <p></p>"},{"location":"product/tianzuo.Kunlun/#_5","title":"\u529f\u80fd","text":"<ul> <li>\u5de5\u4f5c\u53f0 \u9879\u76ee\u6307\u6807 \u7edf\u8ba1\u51fa\u9879\u76ee\u7684\u5404\u79cd\u6307\u6807, \u4f5c\u4e3a\u8861\u91cf\u9879\u76ee\u590d\u6742\u5ea6\u7684\u90e8\u5206\u6807\u51c6</li> <li>\u5de5\u4f5c\u53f0 \u7f16\u8bd1\u8fd0\u884c \u53ef\u4ee5\u624b\u52a8\u6216\u81ea\u52a8\u5316\u7f16\u8bd1\u9879\u76ee</li> <li>\u5de5\u4f5c\u53f0 \u9759\u6001\u68c0\u6d4b \u901a\u8fc7\u8bcd\u6cd5\u5206\u6790\u3001\u8bed\u6cd5\u5206\u6790\u3001\u63a7\u5236\u6d41\u3001\u6570\u636e\u6d41\u5206\u6790\u7b49\u6280\u672f\u5bf9\u7a0b\u5e8f\u4ee3\u7801\u8fdb\u884c\u626b\u63cf\uff0c\u68c0\u67e5\u4ee3\u7801\u548c\u8bbe\u8ba1\u7684\u4e00\u81f4\u6027\uff0c\u4ee3\u7801\u5bf9\u6807\u51c6\u7684\u9075\u5faa\u3001\u53ef\u8bfb\u6027\uff0c\u4ee3\u7801\u7684\u903b\u8f91\u8868\u8fbe\u7684\u6b63\u786e\u6027\uff0c\u4ee3\u7801\u7ed3\u6784\u7684\u5408\u7406\u6027\u7b49\u65b9\u9762</li> <li>\u5de5\u4f5c\u53f0 \u52a8\u6001\u68c0\u6d4b \u901a\u8fc7\u5185\u5b58\u68c0\u6d4b\u3001\u4ee3\u7801\u8986\u76d6\u7387\u3001\u70ed\u70b9\u51fd\u6570\u68c0\u6d4b\u7b49\u6280\u672f\u6839\u636e\u5206\u6790\u7ed3\u679c\u5bf9\u4ee3\u7801\u8fdb\u884c\u6df1\u5ea6\u4f18\u5316. \u63d0\u5347\u4ee3\u7801\u8d28\u91cf, \u589e\u5f3a\u4ea7\u54c1\u5065\u58ee\u6027</li> <li>\u5de5\u4f5c\u53f0 \u4ee3\u7801\u5de5\u5177 \u81ea\u52a8\u5316\u4ee3\u7801\u683c\u5f0f\u5316, \u751f\u6210\u9879\u76ee\u6587\u6863</li> <li>\u5de5\u5177\u7bb1 \u6db5\u76d6\u901a\u8baf/\u56fe\u5f62/\u8bbe\u8ba1/\u8f6c\u6362/\u751f\u6210/\u6742\u9879\u7b49\u5404\u65b9\u9762\u7684\u5c0f\u5de5\u5177</li> <li>\u8d44\u6599\u888b \u53ef\u8bb0\u5f55\u5e73\u65f6\u5e38\u7528\u7684\u4ee3\u7801\u5230\u8d44\u6599\u888b, \u968f\u65f6\u67e5\u9605\u6d4f\u89c8\u62f7\u8d1d</li> </ul>"},{"location":"product/tianzuo.Kunlun/#_6","title":"\u622a\u56fe","text":""},{"location":"product/tianzuo.Kunlun/#_7","title":"\u652f\u6301","text":""},{"location":"product/tianzuo.Kunlun/#_8","title":"\u652f\u6301\u5185\u5bb9","text":"\u540d\u79f0 \u652f\u6301 \u5f00\u53d1\u4e2d \u64cd\u4f5c\u7cfb\u7edf \u7f16\u7a0b\u8bed\u8a00 \u9879\u76ee\u7c7b\u578b"},{"location":"product/tianzuo.Kunlun/#_9","title":"\u4e0b\u8f7d","text":""},{"location":"product/tianzuo.Pangu/","title":"\u5929\u4f50.\u76d8\u53e4\u65a7","text":""},{"location":"product/tianzuo.Pangu/#_2","title":"\u5929\u4f50.\u76d8\u53e4\u65a7","text":"\u64cd\u4f5c\u7cfb\u7edf \u7f16\u8bd1\u5668 \u7f16\u7a0b\u8bed\u8a00"},{"location":"product/tianzuo.Pangu/#_3","title":"\u7b80\u4ecb","text":"<p>\u5929\u4f50.\u76d8\u53e4\u65a7 \u5373\u65f6\u901a\u8baf\u5e73\u53f0, \u91c7\u7528\u81ea\u4e3b\u7814\u53d1\u7684\u5206\u5e03\u5f0f\u5b58\u50a8\u4e0eUDP\u53ef\u9760P2P\u7f51\u7edc\u4f20\u8f93\u6280\u672f, \u81ea\u4e3b\u7814\u53d1\u7684IM\u901a\u8baf\u534f\u8bae, \u8986\u76d6\u4e3b\u6d41\u5e73\u53f0, \u63d2\u4ef6\u5f0f\u9ad8\u6269\u5c55\u6027, OpenGL\u6e32\u67d3\u9ad8\u6d41\u7545UI, \u652f\u6301\u96c6\u6210Web\u5e94\u7528, \u53ef\u4ee5\u79c1\u6709\u5316\u90e8\u7f72, \u516c\u6709\u4e91\u90e8\u7f72.</p> <p>\u4f20\u8bf4: \u4f20\u8bf4\u5929\u5730\u6df7\u6c8c\u4e4b\u521d\uff0c\u76d8\u53e4\u7531\u7761\u68a6\u9192\u6765\uff0c\u89c1\u5929\u5730\u6666\u6697\uff0c\u4e8e\u662f\u4f38\u624b\u4e00\u6325\u62ff\u51fa\u4e00\u628a\u5de8\u5927\u7684\u65a7\u5b50\u5288\u5f00\u5929\u5730\uff0c\u81ea\u6b64\u624d\u6709\u6211\u4eec\u7684\u4e16\u754c\u3002\u6b64\u65a7\u62e5\u6709\u5206\u5929\u5730\u3001\u7a7f\u68ad\u592a\u865a\u4e4b\u529b\uff0c\u5a01\u529b\u4e0d\u4e0b\u8f69\u8f95\u5251\u3002\u4f20\u8a00\u638c\u63a7\u76d8\u53e4\u65a7\u8005\uff0c\u53ef\u638c\u63a7\u529b\u91cf\u6cd5\u5219\u3002</p>"},{"location":"product/tianzuo.Pangu/#_4","title":"\u76ee\u6807","text":"<p>\u642d\u5efaCS\u67b6\u6784\u7684IM\u901a\u8baf\u7cfb\u7edf\uff0c\u652f\u6301\u6587\u5b57/\u8868\u60c5/\u56fe\u7247/\u8bed\u97f3/\u89c6\u9891/\u8fdc\u7a0b\u684c\u9762/\u8fdc\u7a0b\u63a7\u5236/\u767d\u677f\u7b49\u529f\u80fd\u3002</p>"},{"location":"product/tianzuo.Pangu/#_5","title":"\u529f\u80fd","text":"<ul> <li>\ud83e\udde9 \u96c6\u6210\u7b80\u5355</li> <li>\ud83d\udce6 \u652f\u6301\u79c1\u6709\u90e8\u7f72</li> <li>\ud83e\udea2 \u804a\u5929\u6570\u636e\u70b9\u5bf9\u70b9\u52a0\u5bc6\uff0c\u81ea\u4e3b\u7814\u53d1IM\u534f\u8bae\uff0c\u7f51\u7edc\u5e93\u4f7f\u7528'\u5929\u4f50.\u8ffd\u65e5\u9774'\u8f6f\u4ef6\u5f00\u53d1\u5de5\u5177\u5305</li> <li>\ud83d\udcd2 \u804a\u5929\u8bb0\u5f55\u672c\u5730\u4fdd\u5b58\uff0c\u6570\u636e\u5e93\u4f7f\u7528'\u5929\u4f50.\u4e7e\u5764\u888b'\u8f6f\u4ef6\u5f00\u53d1\u5de5\u5177\u5305</li> </ul>"},{"location":"product/tianzuo.Pangu/#_6","title":"\u622a\u56fe","text":"<p>\u5929\u4f50.\u76d8\u53e4\u65a7demo:</p> <p> </p>"},{"location":"product/tianzuo.Pangu/#_7","title":"\u4e0b\u8f7d","text":""},{"location":"remotedesktop/032-overlayYUV/","title":"overlayYUV","text":"<p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u652f\u6301\u5c06\u5c0f\u5c3a\u5bf8YUV420\u6587\u4ef6\u8986\u76d6\u5230\u66f4\u5927\u5c3a\u5bf8YUV420\u6587\u4ef6\u6307\u5b9a\u4f4d\u7f6e\u7684C++\u5b8c\u6574\u5b9e\u73b0\uff0c\u652f\u6301\u5750\u6807\u8bbe\u7f6e\u548c\u8fb9\u754c\u5904\u7406\uff1a</p>"},{"location":"remotedesktop/032-overlayYUV/#_1","title":"\u793a\u4f8b\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nstruct YUVConfig {\n    int width;      // \u5927\u6587\u4ef6\u5bbd\u5ea6\n    int height;     // \u5927\u6587\u4ef6\u9ad8\u5ea6\n    int small_width;\n    int small_height;\n    int pos_x;      // \u8986\u76d6\u8d77\u59cbX\u5750\u6807\n    int pos_y;      // \u8986\u76d6\u8d77\u59cbY\u5750\u6807\n    std::string format = \"I420\"; // \u652f\u6301I420/NV12\u683c\u5f0f\n};\n\nbool overlayYUV(const std::string&amp; dst_file, \n                const std::string&amp; src_file,\n                const YUVConfig&amp; config) \n{\n    // \u8ba1\u7b97\u5404\u5206\u91cf\u5c3a\u5bf8\n    const int y_size = config.width  * config.height; \n    const int uv_size = y_size / 4;\n    const int total_size = y_size + 2 * uv_size;\n\n    // \u8bfb\u53d6\u5927\u6587\u4ef6\n    std::ifstream fin_dst(dst_file, std::ios::binary);\n    if (!fin_dst) return false;\n    std::vector&lt;uint8_t&gt; dst_data(total_size);\n    fin_dst.read(reinterpret_cast&lt;char*&gt;(dst_data.data()),  total_size);\n\n    // \u8bfb\u53d6\u5c0f\u6587\u4ef6\n    std::ifstream fin_src(src_file, std::ios::binary);\n    if (!fin_src) return false;\n    std::vector&lt;uint8_t&gt; src_data(y_size + 2*(config.small_width*config.small_height)/4); \n    fin_src.read(reinterpret_cast&lt;char*&gt;(src_data.data()),  src_data.size()); \n\n    // Y\u5206\u91cf\u8986\u76d6\u5904\u7406\n    const int copy_width = std::min(config.small_width,  \n                                  config.width  - config.pos_x); \n    const int copy_height = std::min(config.small_height,  \n                                   config.height  - config.pos_y); \n\n    // \u5904\u7406Y\u5e73\u9762\n    for (int row = 0; row &lt; copy_height; ++row) {\n        auto* dst_start = dst_data.data()  + \n                         (config.pos_y  + row) * config.width  + config.pos_x; \n        auto* src_start = src_data.data()  + row * config.small_width; \n        std::copy_n(src_start, copy_width, dst_start);\n    }\n\n    // UV\u5206\u91cf\u5904\u7406\uff08I420\u683c\u5f0f\uff09\n    if (config.format  == \"I420\") {\n        // U\u5206\u91cf\u504f\u79fb\u8ba1\u7b97\n        const int uv_offset = y_size;\n        const int uv_pos_x = config.pos_x  / 2;\n        const int uv_pos_y = config.pos_y  / 2;\n        const int uv_src_width = config.small_width  / 2;\n        const int uv_src_height = config.small_height  / 2;\n\n        // \u5904\u7406U\u5e73\u9762\n        for (int row = 0; row &lt; uv_src_height; ++row) {\n            auto* dst_u = dst_data.data()  + uv_offset + \n                         (uv_pos_y + row) * (config.width/2)  + uv_pos_x;\n            auto* src_u = src_data.data()  + y_size + row * uv_src_width;\n            std::copy_n(src_u, uv_src_width, dst_u);\n        }\n\n        // \u5904\u7406V\u5e73\u9762\n        const int v_offset = y_size + uv_size;\n        for (int row = 0; row &lt; uv_src_height; ++row) {\n            auto* dst_v = dst_data.data()  + v_offset + \n                         (uv_pos_y + row) * (config.width/2)  + uv_pos_x;\n            auto* src_v = src_data.data()  + y_size + uv_src_width*uv_src_height + \n                         row * uv_src_width;\n            std::copy_n(src_v, uv_src_width, dst_v);\n        }\n    }\n    // NV12\u683c\u5f0f\u5904\u7406\uff08UV\u4ea4\u7ec7\uff09\n    else if (config.format  == \"NV12\") {\n        const int uv_offset = y_size;\n        const int uv_pos_x = config.pos_x  / 2;\n        const int uv_pos_y = config.pos_y  / 2;\n        const int uv_stride = config.width; \n\n        for (int row = 0; row &lt; config.small_height/2;  ++row) {\n            auto* dst_uv = dst_data.data()  + uv_offset + \n                          (uv_pos_y + row) * uv_stride + uv_pos_x*2;\n            auto* src_uv = src_data.data()  + y_size + row * config.small_width; \n            std::copy_n(src_uv, config.small_width,  dst_uv);\n        }\n    }\n\n    // \u5199\u5165\u7ed3\u679c\u6587\u4ef6\n    std::ofstream fout(\"output.yuv\",  std::ios::binary);\n    fout.write(reinterpret_cast&lt;char*&gt;(dst_data.data()),  dst_data.size()); \n    return true;\n}\n\nint main() {\n    YUVConfig config;\n    config.width  = 1920;\n    config.height  = 1080;\n    config.small_width  = 640;\n    config.small_height  = 480;\n    config.pos_x  = 100;\n    config.pos_y  = 200;\n    config.format  = \"I420\"; // \u6216\"NV12\"\n\n    if (overlayYUV(\"big.yuv\",  \"small.yuv\",  config)) {\n        std::cout &lt;&lt; \"Overlay completed. Saved to output.yuv\"  &lt;&lt; std::endl;\n    } else {\n        std::cerr &lt;&lt; \"Error processing files\" &lt;&lt; std::endl;\n    }\n    return 0;\n}\n</code></pre> <p>\u5173\u952e\u7279\u6027\u8bf4\u660e \uff1a * \u683c\u5f0f\u517c\u5bb9\u6027\uff1a\u652f\u6301YUV420\u7684I420\u548cNV12\u683c\u5f0f\uff0c\u901a\u8fc7format\u53c2\u6570\u5207\u6362\uff1a</p> <ul> <li>I420\uff1aY\u5e73\u9762 + U\u5e73\u9762 + V\u5e73\u9762</li> <li>NV12\uff1aY\u5e73\u9762 + \u4ea4\u7ec7\u7684UV\u5e73\u9762</li> </ul> <p>\u5750\u6807\u7cfb\u7edf\uff1a</p> <pre><code>pos_x, pos_y  // \u8986\u76d6\u8d77\u59cb\u5750\u6807\uff08\u4ee5Y\u5206\u91cf\u5750\u6807\u7cfb\u4e3a\u57fa\u51c6\uff09\nuv_pos_x = pos_x / 2  // UV\u5206\u91cf\u5750\u6807\u81ea\u52a8\u6298\u534a\u8ba1\u7b97\n</code></pre> <p>\u8fb9\u754c\u5904\u7406\uff1a</p> <pre><code>copy_width = min(\u5c0f\u56fe\u5bbd\u5ea6, \u5927\u56fe\u5bbd\u5ea6 - x\u5750\u6807)  // \u81ea\u52a8\u88c1\u526a\u8d8a\u754c\u90e8\u5206\n</code></pre> <p>\u5185\u5b58\u4f18\u5316\uff1a\u4f7f\u7528std::vector\u5b58\u50a8\u6570\u636e\uff0c\u907f\u514d\u52a8\u6001\u5185\u5b58\u5206\u914d\u95ee\u9898"},{"location":"remotedesktop/032-overlayYUV/#_2","title":"\u4f7f\u7528\u5efa\u8bae\uff1a","text":"<p>\u53c2\u6570\u8bbe\u7f6e\u9700\u6ee1\u8db3\uff1a</p> <pre><code>small_width &lt;= (width - pos_x) * 2    // \u8272\u5ea6\u5206\u91cf\u5bf9\u9f50\u8981\u6c42\n</code></pre> <p>\u9a8c\u8bc1\u8f93\u51fa\u6587\u4ef6\uff1a</p> <pre><code>ffplay -video_size 1920x1080 -pixel_format nv12 output.yuv \n</code></pre> <p>\u6027\u80fd\u4f18\u5316\u65b9\u5411\uff1a</p> <ul> <li>\u4f7f\u7528\u5185\u5b58\u6620\u5c04\u6587\u4ef6\u5904\u7406\u5927\u5c3a\u5bf8\u6587\u4ef6</li> <li>\u591a\u7ebf\u7a0b\u5904\u7406Y/UV\u5206\u91cf</li> <li>SIMD\u6307\u4ee4\u4f18\u5316\u6570\u636e\u62f7\u8d1d</li> </ul> <p>\u5b8c\u6574\u5b9e\u73b0\u8003\u8651\u4e86YUV420\u683c\u5f0f\u7684\u8272\u5ea6\u91c7\u6837\u7279\u6027\uff0c\u901a\u8fc7\u5750\u6807\u6298\u534a\u8ba1\u7b97\u5b9e\u73b0\u51c6\u786e\u7684\u8272\u5ea6\u5206\u91cf\u5b9a\u4f4d\uff0c\u540c\u65f6\u5305\u542b\u4e86\u5bf9\u4e0d\u540c\u5b58\u50a8\u683c\u5f0f\u7684\u9002\u914d\u903b\u8f91\u3002\u8fb9\u754c\u5904\u7406\u673a\u5236\u786e\u4fdd\u8986\u76d6\u64cd\u4f5c\u4e0d\u4f1a\u5bfc\u81f4\u5185\u5b58\u8d8a\u754c\u3002</p>"},{"location":"remotedesktop/032-overlayYUV/#_3","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"remotedesktop/035-GDIGrab/","title":"Windows\u6293\u5c4f-GDI","text":""},{"location":"remotedesktop/035-GDIGrab/#_1","title":"\u4e00\u3001\u6280\u672f\u539f\u7406","text":"<p>GDI\uff08Graphics Device Interface\uff09\u6293\u5c4f\u57fa\u4e8eWindows\u7cfb\u7edf\u63d0\u4f9b\u7684\u56fe\u5f62\u8bbe\u5907\u63a5\u53e3\uff0c\u901a\u8fc7\u8bbe\u5907\u4e0a\u4e0b\u6587\uff08DC\uff09</p> <p>\u5b9e\u73b0\u5c4f\u5e55\u5185\u5bb9\u6355\u83b7\u3002\u6838\u5fc3\u6d41\u7a0b\u5982\u4e0b\uff1a</p>"},{"location":"remotedesktop/035-GDIGrab/#_2","title":"\u83b7\u53d6\u684c\u9762\u7a97\u53e3\u53e5\u67c4\uff1a\u901a\u8fc7","text":"<pre><code>//\u83b7\u53d6\u6574\u4e2a\u5c4f\u5e55\u7684\u53e5\u67c4\nGetDesktopWindow()\n</code></pre>"},{"location":"remotedesktop/035-GDIGrab/#_3","title":"\u83b7\u53d6\u8bbe\u5907\u4e0a\u4e0b\u6587\uff1a\u4f7f\u7528","text":"<pre><code>//\u83b7\u53d6\u5c4f\u5e55DC\nGetDC()\n</code></pre>"},{"location":"remotedesktop/035-GDIGrab/#dc","title":"\u521b\u5efa\u517c\u5bb9DC\u548c\u4f4d\u56fe\uff1a\u901a\u8fc7","text":"<pre><code>//\u521b\u5efa\u4e0e\u5c4f\u5e55DC\u517c\u5bb9\u7684\u7ed8\u56fe\u73af\u5883\nCreateCompatibleDC()\nCreateCompatibleBitmap()\n</code></pre>"},{"location":"remotedesktop/035-GDIGrab/#dc_1","title":"\u4f4d\u56fe\u9009\u5165\u517c\u5bb9DC\uff1a\u4f7f\u7528","text":"<pre><code>//\u5c06\u4f4d\u56fe\u7ed1\u5b9a\u5230\u517c\u5bb9DC\nSelectObject()\n</code></pre>"},{"location":"remotedesktop/035-GDIGrab/#_4","title":"\u590d\u5236\u5c4f\u5e55\u5185\u5bb9\uff1a\u901a\u8fc7","text":"<pre><code>//\u5c06\u5c4f\u5e55DC\u5185\u5bb9\u590d\u5236\u5230\u517c\u5bb9\u4f4d\u56fe\nBitBlt()\n</code></pre>"},{"location":"remotedesktop/035-GDIGrab/#_5","title":"\u91ca\u653e\u8d44\u6e90\uff1a\u4f7f\u7528","text":"<pre><code>//\u91ca\u653e\u8d44\u6e90\nDeleteDC()\nReleaseDC()\n</code></pre> <p>\u6d41\u7a0b\u56fe</p> <pre><code>graph TD\nA[\u83b7\u53d6\u684c\u9762\u7a97\u53e3\u53e5\u67c4] --&gt; B[\u83b7\u53d6\u8bbe\u5907\u4e0a\u4e0b\u6587DC]\nB --&gt; C[\u521b\u5efa\u517c\u5bb9DC\u548c\u4f4d\u56fe]\nC --&gt; D[\u590d\u5236\u5c4f\u5e55\u6570\u636e\u5230\u517c\u5bb9\u4f4d\u56fe]\nD --&gt; E[\u4fdd\u5b58\u6216\u5904\u7406\u4f4d\u56fe\u6570\u636e]\nE --&gt; F[\u91ca\u653e\u8d44\u6e90]\n</code></pre> <p>\u5173\u952e\u7ec4\u4ef6</p> <ul> <li>\u7a97\u53e3\u53e5\u67c4\uff08HWND\uff09\uff1a\u901a\u8fc7GetDesktopWindow()\u83b7\u53d6\u6574\u4e2a\u5c4f\u5e55\u7684\u53e5\u67c4\u3002</li> <li>\u8bbe\u5907\u4e0a\u4e0b\u6587\uff08DC\uff09\uff1aGetDC()\u83b7\u53d6\u684c\u9762DC\uff0c\u7528\u4e8e\u56fe\u5f62\u64cd\u4f5c\u3002</li> <li>\u517c\u5bb9\u4f4d\u56fe\uff08Bitmap\uff09\uff1aCreateCompatibleBitmap()\u521b\u5efa\u4e0e\u5c4f\u5e55\u5206\u8fa8\u7387\u5339\u914d\u7684\u4f4d\u56fe\u3002</li> <li>\u6570\u636e\u590d\u5236\uff1aBitBlt()\u51fd\u6570\u5c06\u5c4f\u5e55\u50cf\u7d20\u6570\u636e\u590d\u5236\u5230\u5185\u5b58\u4f4d\u56fe\u3002</li> </ul>"},{"location":"remotedesktop/035-GDIGrab/#_6","title":"\u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"remotedesktop/035-GDIGrab/#_7","title":"\u5168\u5c4f\u6293\u53d6\u4ee3\u7801","text":"<pre><code>#include &lt;windows.h&gt;\n#include &lt;gdiplus.h&gt;\n\n// \u5168\u5c4f\u6293\u53d6\u51fd\u6570\nbool CaptureScreen(HWND hWnd, HBITMAP&amp; hBitmap) {\n    HDC hScreenDC = GetDC(hWnd);\n    HDC hMemoryDC = CreateCompatibleDC(hScreenDC);\n\n    // \u83b7\u53d6\u5c4f\u5e55\u5206\u8fa8\u7387\n    int width = GetSystemMetrics(SM_CXSCREEN);\n    int height = GetSystemMetrics(SM_CYSCREEN);\n\n    hBitmap = CreateCompatibleBitmap(hScreenDC, width, height);\n    HGDIOBJ hOldBitmap = SelectObject(hMemoryDC, hBitmap);\n\n    // \u590d\u5236\u5c4f\u5e55\u5185\u5bb9\n    if (!BitBlt(hMemoryDC, 0, 0, width, height, hScreenDC, 0, 0, SRCCOPY)) {\n        DeleteObject(hBitmap);\n        return false;\n    }\n\n    SelectObject(hMemoryDC, hOldBitmap);\n    DeleteDC(hMemoryDC);\n    ReleaseDC(hWnd, hScreenDC);\n    return true;\n}\n</code></pre>"},{"location":"remotedesktop/035-GDIGrab/#_8","title":"\u5c40\u90e8\u6293\u53d6\u4ee3\u7801","text":"<pre><code>// \u5c40\u90e8\u533a\u57df\u6293\u53d6\uff08\u901a\u8fc7\u7a97\u53e3\u53e5\u67c4\uff09\nbool CaptureWindow(HWND hWnd, HBITMAP&amp; hBitmap) {\n    if (!hWnd) return false;\n\n    HDC hWindowDC = GetDC(hWnd);\n    RECT rect;\n    GetWindowRect(hWnd, &amp;rect);\n    int width = rect.right  - rect.left; \n    int height = rect.bottom  - rect.top; \n\n    HDC hMemoryDC = CreateCompatibleDC(hWindowDC);\n    hBitmap = CreateCompatibleBitmap(hWindowDC, width, height);\n    HGDIOBJ hOldBitmap = SelectObject(hMemoryDC, hBitmap);\n\n    // \u8f6c\u6362\u7a97\u53e3\u5750\u6807\u5230\u5c4f\u5e55\u5750\u6807\n    POINT pt = {0, 0};\n    ScreenToClient(hWnd, &amp;pt);\n    if (!BitBlt(hMemoryDC, 0, 0, width, height, hWindowDC, pt.x, pt.y, SRCCOPY)) {\n        DeleteObject(hBitmap);\n        return false;\n    }\n\n    SelectObject(hMemoryDC, hOldBitmap);\n    DeleteDC(hMemoryDC);\n    ReleaseDC(hWnd, hWindowDC);\n    return true;\n}\n</code></pre>"},{"location":"remotedesktop/035-GDIGrab/#_9","title":"\u4e09\u3001\u5b8c\u6574\u5b9e\u73b0\u793a\u4f8b","text":"<p>\u4fdd\u5b58\u4e3aBMP\u6587\u4ef6</p> <pre><code>void SaveBitmapToFile(HBITMAP hBitmap, const char* filename) {\n    BITMAPINFOHEADER bmiHeader;\n    BITMAP bmp;\n    GetObject(hBitmap, sizeof(bmp), &amp;bmp);\n\n    // \u521d\u59cb\u5316BITMAPINFOHEADER\n    bmiHeader.biSize  = sizeof(BITMAPINFOHEADER);\n    bmiHeader.biWidth  = bmp.bmWidth; \n    bmiHeader.biHeight  = -bmp.bmHeight;  // \u5012\u8f6c\u56fe\u50cf\n    bmiHeader.biPlanes  = 1;\n    bmiHeader.biBitCount  = 32;\n    bmiHeader.biCompression  = BI_RGB;\n    bmiHeader.biSizeImage  = 0;\n    bmiHeader.biXPelsPerMeter  = 0;\n    bmiHeader.biYPelsPerMeter  = 0;\n    bmiHeader.biClrUsed  = 0;\n    bmiHeader.biClrImportant  = 0;\n\n    // \u5199\u5165\u6587\u4ef6\n    HANDLE hFile = CreateFileA(filename, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);\n    if (hFile == INVALID_HANDLE_VALUE) return;\n\n    DWORD dwWritten;\n    BITMAPFILEHEADER bmfHeader;\n    bmfHeader.bfType  = 0x4D42; // 'BM'\n    bmfHeader.bfSize  = sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER) + bmiHeader.biSizeImage; \n    bmfHeader.bfReserved1  = 0;\n    bmfHeader.bfReserved2  = 0;\n    bmfHeader.bfOffBits  = sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);\n\n    WriteFile(hFile, &amp;bmfHeader, sizeof(BITMAPFILEHEADER), &amp;dwWritten, NULL);\n    WriteFile(hFile, &amp;bmiHeader, sizeof(BITMAPINFOHEADER), &amp;dwWritten, NULL);\n\n    // \u83b7\u53d6\u4f4d\u56fe\u6570\u636e\n    DWORD dwSize = ((bmp.bmWidth  * bmiHeader.biBitCount  + 31) / 32) * 4 * bmp.bmHeight; \n    LPVOID pBits = nullptr;\n    GetDIBits(GetDC(NULL), hBitmap, 0, bmp.bmHeight,  nullptr, (BITMAPINFO*)&amp;bmiHeader, DIB_RGB_COLORS);\n    GetDIBits(GetDC(NULL), hBitmap, 0, bmp.bmHeight,  pBits, (BITMAPINFO*)&amp;bmiHeader, DIB_RGB_COLORS);\n    WriteFile(hFile, pBits, dwSize, &amp;dwWritten, NULL);\n\n    CloseHandle(hFile);\n}\n</code></pre>"},{"location":"remotedesktop/035-GDIGrab/#_10","title":"\u56db\u3001\u7ed3\u6784\u56fe\u4e0e\u6d41\u7a0b\u56fe","text":""},{"location":"remotedesktop/035-GDIGrab/#_11","title":"\u7cfb\u7edf\u67b6\u6784\u56fe","text":"<pre><code>+-------------------+\n|     \u5e94\u7528\u7a0b\u5e8f       |\n+-------------------+\n          |\n          v\n+-------------------+\n|     GDI\u63a5\u53e3       |\n+-------------------+\n          |\n          v\n+-------------------+\n|     \u8bbe\u5907\u9a71\u52a8       |\n+-------------------+\n</code></pre>"},{"location":"remotedesktop/035-GDIGrab/#_12","title":"\u6293\u5c4f\u6d41\u7a0b\u56fe","text":"<pre><code>\u5f00\u59cb\n  |\n  v\n\u83b7\u53d6\u7a97\u53e3\u53e5\u67c4\n  |\n  v\n\u521b\u5efa\u8bbe\u5907\u4e0a\u4e0b\u6587\n  |\n  v\n\u521b\u5efa\u517c\u5bb9DC\u548c\u4f4d\u56fe\n  |\n  v\n\u590d\u5236\u5c4f\u5e55\u5185\u5bb9\n  |\n  v\n\u4fdd\u5b58/\u91ca\u653e\u8d44\u6e90\n  |\n  v\n\u7ed3\u675f\n</code></pre>"},{"location":"remotedesktop/035-GDIGrab/#_13","title":"\u4e94\u3001\u4f18\u5316\u53c2\u6570\u4e0e\u6027\u80fd\u63d0\u5347","text":""},{"location":"remotedesktop/035-GDIGrab/#_14","title":"\u6027\u80fd\u74f6\u9888\u5206\u6790","text":"<ul> <li>Aero\u7279\u6548\u5f71\u54cd\uff1a\u542f\u7528Aero\u65f6\uff0c<code>BitBlt</code>\u901f\u5ea6\u4e0b\u964d\u81f3300-500ms/\u5e27\u3002</li> <li>DC\u9891\u7e41\u521b\u5efa\uff1a\u91cd\u590d\u521b\u5efa/\u9500\u6bc1DC\u4f1a\u589e\u52a0\u5f00\u9500\uff0c\u5efa\u8bae\u590d\u7528\u8d44\u6e90\u3002</li> <li>\u5185\u5b58\u5360\u7528\uff1a\u9ad8\u5206\u8fa8\u7387\u5c4f\u5e55\uff08\u59824K\uff09\u9700\u4f18\u5316\u5185\u5b58\u5206\u914d\u3002</li> </ul>"},{"location":"remotedesktop/035-GDIGrab/#_15","title":"\u4f18\u5316\u65b9\u6848","text":"\u53c2\u6570 \u4f18\u5316\u65b9\u6cd5 \u6548\u679c \u53cc\u7f13\u51b2\u6280\u672f \u4f7f\u7528\u5185\u5b58DC\u51cf\u5c11\u5c4f\u5e55\u5237\u65b0\u6b21\u6570 \u964d\u4f4e\u95ea\u70c1 \u5f02\u6b65\u590d\u5236 \u5c06<code>BitBlt</code>\u64cd\u4f5c\u653e\u5165\u72ec\u7acb\u7ebf\u7a0b \u63d0\u5347\u4e3b\u7a0b\u5e8f\u54cd\u5e94 \u4f4d\u6df1\u8c03\u6574 \u4f7f\u7528<code>SetDeviceCaps</code>\u8bbe\u7f6e16\u4f4d\u8272\u5f69 \u51cf\u5c11\u5185\u5b58\u5360\u7528 \u786c\u4ef6\u52a0\u901f \u8c03\u7528<code>EnableMenuItem</code>\u7981\u7528Aero\u7279\u6548 \u63d0\u5347\u901f\u5ea6\u81f35-8ms/\u5e27"},{"location":"remotedesktop/035-GDIGrab/#_16","title":"\u516d\u3001\u6027\u80fd\u4f18\u5316\u53c2\u6570","text":""},{"location":"remotedesktop/035-GDIGrab/#dc_2","title":"\u517c\u5bb9DC\u4f18\u5316","text":"<ul> <li>\u4f4d\u56fe\u683c\u5f0f\uff1a\u4f7f\u752832\u4f4d\u8272\u6df1\uff08BI_RGB\uff09\u907f\u514d\u989c\u8272\u8f6c\u6362\u5f00\u9500\u3002</li> <li>\u53cc\u7f13\u51b2\u6280\u672f\uff1a\u901a\u8fc7\u5185\u5b58DC\u51cf\u5c11\u76f4\u63a5\u64cd\u4f5c\u5c4f\u5e55DC\u7684\u95ea\u70c1\u95ee\u9898\u3002</li> </ul>"},{"location":"remotedesktop/035-GDIGrab/#_17","title":"\u6355\u83b7\u9891\u7387\u63a7\u5236","text":"<ul> <li>\u5b9a\u65f6\u5668\u95f4\u9694\uff1a\u901a\u8fc7SetTimer()\u63a7\u5236\u6293\u5e27\u9891\u7387\uff08\u598230Hz\u9700\u95f4\u969433ms\uff09\u3002</li> <li>\u533a\u57df\u66f4\u65b0\u68c0\u6d4b\uff1a\u4ec5\u5f53\u5c4f\u5e55\u53d8\u5316\u65f6\u89e6\u53d1\u6355\u83b7\uff08\u9700\u7ed3\u5408\u5dee\u5f02\u6bd4\u8f83\u7b97\u6cd5\uff09\u3002</li> </ul>"},{"location":"remotedesktop/035-GDIGrab/#_18","title":"\u8d44\u6e90\u7ba1\u7406","text":"<ul> <li>\u53ca\u65f6\u91ca\u653e\uff1aDeleteObject()\u91ca\u653e\u4f4d\u56fe\uff0cReleaseDC()\u91ca\u653e\u8bbe\u5907\u4e0a\u4e0b\u6587\u3002</li> <li>\u5185\u5b58\u590d\u7528\uff1a\u590d\u7528\u5df2\u5206\u914d\u7684DC\u548c\u4f4d\u56fe\u5bf9\u8c61\uff0c\u51cf\u5c11\u91cd\u590d\u521b\u5efa\u5f00\u9500\u3002</li> </ul>"},{"location":"remotedesktop/035-GDIGrab/#_19","title":"\u4e03\u3001\u6269\u5c55\u529f\u80fd\u5b9e\u73b0","text":""},{"location":"remotedesktop/035-GDIGrab/#_20","title":"\u9f20\u6807\u5149\u6807\u53e0\u52a0","text":"<pre><code>CURSORINFO cursorInfo = { sizeof(cursorInfo) };\nGetCursorInfo(&amp;cursorInfo);\nDrawIcon(hdcMem, cursorInfo.ptScreenPos.x,  cursorInfo.ptScreenPos.y,  cursorInfo.hCursor);\n</code></pre>"},{"location":"remotedesktop/035-GDIGrab/#_21","title":"\u56fe\u50cf\u4fdd\u5b58","text":"<p>\u4f7f\u7528GDI+\u5e93\u5c06HBITMAP\u4fdd\u5b58\u4e3aPNG\u6216JPEG\uff1a</p> <pre><code>Gdiplus::Bitmap bitmap(hBitmap, NULL);\nCLSID pngClsid;\nGetEncoderClsid(L\"image/png\", &amp;pngClsid);\nbitmap.Save(L\"screenshot.png\",  &amp;pngClsid);\n</code></pre>"},{"location":"remotedesktop/035-GDIGrab/#_22","title":"\u516b\u3001\u6280\u672f\u5bf9\u6bd4\u4e0e\u5c40\u9650\u6027","text":"\u6280\u672f\u6307\u6807 GDI\u6293\u5c4f DXGI\u6293\u5c4f\uff08\u63a8\u8350\u66ff\u4ee3\u65b9\u6848\uff09 \u517c\u5bb9\u6027 \u652f\u6301\u6240\u6709Windows\u7248\u672c Win8+\uff0c\u9700DirectX 11\u652f\u6301 \u6548\u7387 1080P\u7ea65-8ms\uff08\u65e0Aero\uff09 1080P\u7ea61-3ms \u529f\u80fd\u9650\u5236 \u65e0\u6cd5\u6355\u83b7\u786c\u4ef6\u52a0\u901f\u5185\u5bb9\uff08\u5982\u6e38\u620f\uff09 \u652f\u6301DirectX/D3D\u5185\u5bb9\u6355\u83b7 \u5f00\u53d1\u590d\u6742\u5ea6 \u7b80\u5355\uff08\u7eafWin32 API\uff09 \u590d\u6742\uff08\u9700DXGI\u63a5\u53e3\u77e5\u8bc6\uff09"},{"location":"remotedesktop/035-GDIGrab/#_23","title":"\u4e5d\u3001\u6d41\u7a0b\u56fe\u4e0e\u7ed3\u6784\u56fe","text":""},{"location":"remotedesktop/035-GDIGrab/#gdi","title":"GDI\u6293\u5c4f\u67b6\u6784","text":"<pre><code>graph LR\nUserApp --&gt; GDI_API\nGDI_API --&gt; Win32K.sys \nWin32K.sys  --&gt; DisplayDriver\nDisplayDriver --&gt; FrameBuffer\n</code></pre>"},{"location":"remotedesktop/035-GDIGrab/#_24","title":"\u6027\u80fd\u4f18\u5316\u8def\u5f84","text":"<pre><code>graph TB\nA[\u9ad8CPU\u5360\u7528] --&gt; B[\u964d\u4f4e\u6355\u83b7\u9891\u7387]\nA --&gt; C[\u51cf\u5c11\u4f4d\u56fe\u6df1\u5ea6]\nA --&gt; D[\u590d\u7528\u8d44\u6e90\u5bf9\u8c61]\nB --&gt; E[\u52a8\u6001\u8c03\u6574\u5e27\u7387]\nC --&gt; F[\u4f7f\u752816/24\u4f4d\u8272]\nD --&gt; G[\u5168\u5c40DC\u6c60\u7ba1\u7406]\n</code></pre>"},{"location":"remotedesktop/035-GDIGrab/#_25","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"remotedesktop/042-DXGI/","title":"Windows\u6293\u5c4f-DXGI","text":"<p>\u4ee5\u4e0b\u4e3a\u57fa\u4e8eDXGI\u7684\u5c4f\u5e55\u6355\u83b7\u6280\u672f\u8c03\u7814\u4e0e\u5b9e\u73b0\u65b9\u6848\uff0c\u7ed3\u5408\u6d41\u7a0b\u56fe\u3001\u4ee3\u7801\u6846\u67b6\u53ca\u4f18\u5316\u53c2\u6570\u5206\u6790\uff1a</p>"},{"location":"remotedesktop/042-DXGI/#_1","title":"\u4e00\u3001\u6280\u672f\u539f\u7406\u4e0e\u67b6\u6784","text":"<ol> <li>DXGI\u6293\u5c4f\u6838\u5fc3\u673a\u5236</li> </ol> <p>\uff08\u6d41\u7a0b\u56fe\u793a\u610f\uff1a\u521d\u59cb\u5316DXGI\u5de5\u5382\u2192\u679a\u4e3e\u9002\u914d\u5668\u2192\u83b7\u53d6\u8f93\u51fa\u590d\u5236\u63a5\u53e3\u2192\u5faa\u73af\u6355\u83b7\u5e27\u2192\u5904\u7406\u6570\u636e\uff09</p> <p>DXGI\u901a\u8fc7Desktop Duplication API\u76f4\u63a5\u8bbf\u95ee\u663e\u5b58\u4e2d\u7684\u684c\u9762\u5e27\u7f13\u51b2\uff0c\u907f\u514d\u4f20\u7edfGDI\u591a\u6b21\u5185\u5b58\u62f7\u8d1d\u3002\u5176\u6838\u5fc3\u63a5\u53e3\u4e3a</p> <pre><code>IDXGIOutputDuplication\n</code></pre> <p>\uff0c\u901a\u8fc7</p> <pre><code>AcquireNextFrame\n</code></pre> <p>\u83b7\u53d6\u53d8\u5316\u533a\u57df\u6570\u636e\u3002</p> <pre><code>graph LR\nD3D\u8bbe\u5907\u521d\u59cb\u5316 --&gt; \u83b7\u53d6\u8f93\u51fa\u63a5\u53e3\n\u83b7\u53d6\u8f93\u51fa\u63a5\u53e3 ---&gt; \u5e27\u6570\u636e\u6355\u83b7\n\u5e27\u6570\u636e\u6355\u83b7 ---&gt; \u5185\u5b58\u6620\u5c04\n\u5185\u5b58\u6620\u5c04 ---&gt; \u6570\u636e\u62f7\u8d1d\n</code></pre> <ul> <li>\u63a5\u53e3\u5c42\u7ea7\uff1a</li> </ul> <pre><code>graph LR\nIDXGIDevice --&gt; IDXGIAdapter\nIDXGIAdapter ---&gt; IDXGIOutput\nIDXGIOutput ---&gt; IDXGIOutput1\nIDXGIOutput1 ---&gt; IDXGIOutputDuplication\n</code></pre> <p>\u9700\u901a\u8fc7COM\u63a5\u53e3\u7684QueryInterface\u9010\u7ea7\u83b7\u53d6</p> <ul> <li>\u6570\u636e\u6d41\u7279\u70b9\uff1a</li> </ul> <p>\u4ec5\u5f53\u5c4f\u5e55\u5185\u5bb9\u53d8\u5316\u65f6\u89e6\u53d1\u6355\u83b7\uff08Win10+\u7279\u6027\uff09\uff0c\u51cf\u5c11\u5197\u4f59\u6570\u636e\u5904\u7406 \u5f3a\u5236\u8f93\u51fa32\u4f4dRGBA\u683c\u5f0f\uff0c\u907f\u514d\u8272\u5f69\u7a7a\u95f4\u8f6c\u6362</p> <p>\u5c40\u90e8\u622a\u53d6\u539f\u7406 * \u901a\u8fc7\u684c\u9762\u5750\u6807\u7cfb\u8ba1\u7b97\u5b9e\u73b0\u5c40\u90e8\u6293\u53d6\uff1a</p> <pre><code>RECT targetRect = {left, top, right, bottom}; \n// \u8ba1\u7b97\u76f8\u5bf9\u4e8e\u5c4f\u5e55\u539f\u70b9\u7684\u504f\u79fb\u91cf\nmemcpy(pDestBuffer, pSrcData + (targetRect.top  * pitch) + targetRect.left  * 4, ...)\n</code></pre> <p>\u9700\u6ce8\u610f\u5185\u5b58\u5bf9\u9f50\u95ee\u9898\uff08RowPitch\u4e0eWidth*4\u53ef\u80fd\u4e0d\u7b49\uff09\uff0c\u9700\u9010\u884c\u62f7\u8d1d</p> <p>\u67b6\u6784\u793a\u610f\u56fe</p> <pre><code>graph TD \n    A[D3D11\u8bbe\u5907\u521d\u59cb\u5316] --&gt; B[\u679a\u4e3e\u663e\u793a\u8f93\u51fa]\n    B --&gt; C{\u662f\u5426\u4e3b\u663e\u793a\u5668?}\n    C --&gt;|\u662f| D[\u521b\u5efaOutputDuplication]\n    C --&gt;|\u5426| E[\u8df3\u8fc7\u526f\u5c4f\u5904\u7406]\n    D --&gt; F[\u542f\u52a8\u6355\u83b7\u7ebf\u7a0b]\n    F --&gt; G[AcquireNextFrame]\n    G --&gt; H{\u662f\u5426\u6709\u65b0\u5e27?}\n    H --&gt;|\u662f| I[\u6620\u5c04\u663e\u5b58\u6570\u636e]\n    H --&gt;|\u5426| G \n    I --&gt; J[\u62f7\u8d1d\u5230\u7528\u6237\u7f13\u51b2\u533a]\n    J --&gt; K[\u89e6\u53d1\u56de\u8c03\u51fd\u6570]\n    K --&gt; L[\u89c6\u9891\u7f16\u7801/\u7f51\u7edc\u4f20\u8f93]\n</code></pre> <ol> <li>\u6027\u80fd\u4f18\u52bf\u5bf9\u6bd4</li> </ol> \u6280\u672f \u5e27\u7387(FPS) CPU\u5360\u7528\u7387 \u652f\u6301\u7cfb\u7edf GDI 10-15 15-25% WinXP+ DXGI 60-120 1-3% Win8+ Mirror\u9a71\u52a8 30-60 5-10% Win7\u53ca\u4ee5\u4e0b"},{"location":"remotedesktop/042-DXGI/#_2","title":"\u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\u6846\u67b6","text":"<ol> <li>\u521d\u59cb\u5316\u9636\u6bb5</li> </ol> <pre><code>// \u521b\u5efaD3D\u8bbe\u5907\u4e0eDXGI\u5de5\u5382 \nD3D11CreateDevice(nullptr, D3D_DRIVER_TYPE_HARDWARE, nullptr, 0, \n                   nullptr, 0, D3D11_SDK_VERSION, &amp;d3dDevice, nullptr, nullptr);\n\nIDXGIDevice* dxgiDevice = nullptr;\nd3dDevice-&gt;QueryInterface(__uuidof(IDXGIDevice), (void**)&amp;dxgiDevice);\n\nIDXGIAdapter* adapter = nullptr;\ndxgiDevice-&gt;GetAdapter(&amp;adapter);\n\nIDXGIOutput* output = nullptr;\nadapter-&gt;EnumOutputs(0, &amp;output); // \u591a\u5c4f\u9700\u904d\u5386\u8f93\u51fa \n</code></pre> <ol> <li>\u5e27\u6355\u83b7\u5faa\u73af</li> </ol> <pre><code>IDXGIOutputDuplication* duplication = nullptr;\noutput-&gt;DuplicateOutput(d3dDevice, &amp;duplication);\n\nwhile (true) {\n    DXGI_OUTDUPL_FRAME_INFO frameInfo;\n    IDXGIResource* screenResource = nullptr;\n\n    HRESULT hr = duplication-&gt;AcquireNextFrame(500, &amp;frameInfo, &amp;screenResource);\n    if (hr == DXGI_ERROR_WAIT_TIMEOUT) continue; // \u65e0\u53d8\u5316 \n\n    // \u5904\u7406\u9f20\u6807\u6307\u9488 \n    if (frameInfo.PointerPosition.Visible)\n        ProcessMouseCursor(frameInfo.PointerPosition, frameInfo.PointerShapeBuffer);\n\n    // \u83b7\u53d6\u7eb9\u7406\u6570\u636e \n    ID3D11Texture2D* screenTexture = nullptr;\n    screenResource-&gt;QueryInterface(__uuidof(ID3D11Texture2D), (void**)&amp;screenTexture);\n\n    // \u6620\u5c04\u5230CPU\u53ef\u8bfb\u5185\u5b58 \n    D3D11_TEXTURE2D_DESC desc;\n    screenTexture-&gt;GetDesc(&amp;desc);\n\n    ID3D11Texture2D* stagingTexture;\n    CreateStagingTexture(desc, &amp;stagingTexture);\n\n    d3dDeviceContext-&gt;CopyResource(stagingTexture, screenTexture);\n\n    // \u5904\u7406\u6570\u636e\uff08\u9700\u5904\u7406RowPitch\u5bf9\u9f50\uff09\n    ProcessFrameData(stagingTexture);\n\n    duplication-&gt;ReleaseFrame();\n}\n</code></pre>"},{"location":"remotedesktop/042-DXGI/#_3","title":"\u4e09\u3001\u9ad8\u7ea7\u4f18\u5316\u65b9\u6848","text":"<ol> <li>\u5c40\u90e8\u6355\u83b7\u4f18\u5316</li> </ol> <pre><code>// \u8bbe\u7f6e\u6355\u83b7\u533a\u57df \nRECT captureRect = { left, top, right, bottom }; \n\n// \u521b\u5efa\u88c1\u526a\u7eb9\u7406 \nD3D11_BOX box = { \n    captureRect.left,  captureRect.top,  0,\n    captureRect.right,  captureRect.bottom,  1 \n};\n\nd3dDeviceContext-&gt;CopySubresourceRegion(\n    stagingTexture, 0, 0, 0, 0, \n    screenTexture, 0, &amp;box);\n</code></pre> <ol> <li>\u6027\u80fd\u8c03\u4f18\u53c2\u6570</li> </ol> \u53c2\u6570 \u63a8\u8350\u503c \u8bf4\u660e AcquireTimeout 33ms (30FPS) \u8d85\u65f6\u9632\u6b62\u963b\u585e StagingTexture\u683c\u5f0f DXGI_FORMAT_B8G8R8A8_UNORM \u517c\u5bb9\u591a\u6570\u573a\u666f FrameRetention 3\u5e27\u7f13\u51b2 \u907f\u514d\u4e22\u5e27 \u591a\u7ebf\u7a0b\u5904\u7406 \u542f\u7528 \u5206\u79bb\u6355\u83b7\u4e0e\u7f16\u7801\u7ebf\u7a0b <p>3 \u6027\u80fd\u4f18\u5316\u53c2\u6570 |\u53c2\u6570\u7c7b\u578b|  \u63a8\u8350\u503c/\u65b9\u6cd5| \u4f5c\u7528\u8bf4\u660e| |-|-|-| |AcquireTimeout |30-100ms|  \u907f\u514d\u957f\u65f6\u95f4\u963b\u585e| |\u6570\u636e\u62f7\u8d1d|  \u591a\u7ebf\u7a0b\u5206\u6bb5\u62f7\u8d1d|    \u5229\u7528CPU\u591a\u6838\u4f18\u52bf| |\u5185\u5b58\u7ba1\u7406|  \u9884\u5206\u914d\u73af\u5f62\u7f13\u51b2\u533a|   \u51cf\u5c11\u52a8\u6001\u5185\u5b58\u5206\u914d\u5f00\u9500| |GPU\u6620\u5c04\u6a21\u5f0f    |D3D11_MAP_READ_NO_OVERWRITE|   \u907f\u514d\u663e\u5b58\u8bbf\u95ee\u51b2\u7a81|</p> <p>4 \u9ad8\u7ea7\u529f\u80fd\u6269\u5c55 * \u9f20\u6807\u5149\u6807\u96c6\u6210 \u901a\u8fc7DXGI_OUTDUPL_FRAME_INFO.PointerPosition\u83b7\u53d6\u4f4d\u7f6e\uff0c\u53e0\u52a0\u7ed8\u5236\u7cfb\u7edf\u5149\u6807\u56fe\u6807</p> <ul> <li> <p>\u591a\u663e\u793a\u5668\u652f\u6301 \u904d\u5386\u6240\u6709IDXGIOutput\uff0c\u4e3a\u6bcf\u4e2a\u663e\u793a\u5668\u521b\u5efa\u72ec\u7acbDuplication\u5b9e\u4f8b</p> </li> <li> <p>\u786c\u4ef6\u7f16\u7801\u96c6\u6210 \u7ed3\u5408NVIDIA NVENC\u6216Intel QSV\uff0c\u5b9e\u73b0RGB\u2192YUV\u8f6c\u6362\u53caH264\u786c\u7f16\u7801\uff1a</p> </li> </ul> <pre><code>libyuv::ARGBToNV12(src_rgb, dst_y, dst_uv, width, height); \navcodec_send_frame(enc_ctx, yuv_frame);\n</code></pre>"},{"location":"remotedesktop/042-DXGI/#_4","title":"\u56db\u3001\u9519\u8bef\u5904\u7406\u5173\u952e\u70b9","text":"<pre><code>switch (hr) {\ncase DXGI_ERROR_DEVICE_REMOVED:\n    HandleDeviceLost(); // \u91cd\u65b0\u521d\u59cb\u5316\u8bbe\u5907 \n    break;\ncase DXGI_ERROR_ACCESS_LOST: \n    duplication-&gt;Release();\n    output-&gt;DuplicateOutput(...); // \u91cd\u65b0\u83b7\u53d6\u590d\u5236\u63a5\u53e3 \n    break;\ncase E_INVALIDARG:\n    AdjustCaptureRect(); // \u68c0\u67e5\u533a\u57df\u8d8a\u754c \n    break;\n}\n</code></pre>"},{"location":"remotedesktop/042-DXGI/#_5","title":"\u4e94\u3001\u4ee3\u7801\u793a\u4f8b","text":"<p>\u53c2\u89c1GitHub\u4ed3\u5e93\uff08\u57fa\u4e8e\u4e0a\u8ff0\u539f\u7406\u5b9e\u73b0\uff09\uff1a</p> <ol> <li>DXGI\u521d\u59cb\u5316\u4e0e\u9002\u914d\u5668\u679a\u4e3e </li> <li>\u591a\u663e\u793a\u5668\u652f\u6301\u5b9e\u73b0 </li> <li>\u9f20\u6807\u6307\u9488\u5408\u6210\u5904\u7406 </li> <li>\u5c40\u90e8\u533a\u57df\u6355\u83b7\u4f18\u5316 </li> <li>\u5e27\u6570\u636e\u5bf9\u9f50\u4e0e\u683c\u5f0f\u8f6c\u6362 </li> <li>\u9519\u8bef\u91cd\u8bd5\u4e0e\u8d44\u6e90\u91ca\u653e </li> </ol>"},{"location":"remotedesktop/042-DXGI/#_6","title":"\u516d\u3001\u6269\u5c55\u5e94\u7528\u573a\u666f","text":"<ul> <li>\u6e38\u620f\u76f4\u64ad\uff1a\u7ed3\u5408NVENC\u786c\u7f16\u5b9e\u73b0&lt;5ms\u5ef6\u8fdf</li> <li>\u8fdc\u7a0b\u684c\u9762\uff1a\u5dee\u5f02\u533a\u57df\u68c0\u6d4b\u964d\u4f4e\u5e26\u5bbd</li> <li>\u5de5\u4e1a\u68c0\u6d4b\uff1aROI\u533a\u57df+OpenCV\u5b9e\u65f6\u5206\u6790</li> <li>\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\uff08.ini\uff09\u53ef\u52a8\u6001\u8c03\u6574\uff1a</li> </ul> <pre><code>[Capture]\nWidth=1920\nHeight=1080\nFPS=60 \nRegion=0,0,800,600 \nMouse=1 ; \u662f\u5426\u6355\u83b7\u9f20\u6807 \n</code></pre>"},{"location":"remotedesktop/042-DXGI/#_7","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"remotedesktop/046-WGC/","title":"Windows\u6293\u5c4f-WGC","text":"<p>Windows.Graphics.Capture\u6293\u5c4f\u6280\u672f\u8c03\u7814</p>"},{"location":"remotedesktop/046-WGC/#1","title":"1. \u539f\u7406\u6982\u8ff0","text":"<p>Windows.Graphics.Capture\uff08WGC\uff09\u662f\u5fae\u8f6f\u4e3b\u63a8\u7684\u4e00\u79cd\u684c\u9762/\u7a97\u53e3\u91c7\u96c6\u6280\u672f\uff0c\u4eceWindows 10\u7248\u672c1803\u5f00\u59cb\u63d0\u4f9b\u7528\u4e8e\u4ece\u5c4f\u5e55\u6216\u5e94\u7528\u7a0b\u5e8f\u7a97\u53e3\u83b7\u53d6\u5e27\u7684API\u3002\u5b83\u4e3b\u8981\u5229\u7528DirectX11\u7684\u7279\u6027\u6765\u5b9e\u73b0\uff0c\u901a\u8fc7\u7cfb\u7edf\u9009\u53d6\u5668UI\u8ba9\u7528\u6237\u9009\u62e9\u8981\u6355\u83b7\u7684\u5c4f\u5e55\u6216\u5e94\u7528\u7a0b\u5e8f\u7a97\u53e3\uff0c\u7136\u540e\u5c06\u6355\u83b7\u7684\u5185\u5bb9\u4ee5\u5e27\u7684\u5f62\u5f0f\u63d0\u4f9b\u7ed9\u5e94\u7528\u7a0b\u5e8f1368\u3002</p> <p>\u539f\u7406\u6b65\u9aa4\uff1a * \u6743\u9650\u58f0\u660e\uff1a\u5728\u5e94\u7528\u7a0b\u5e8f\u6e05\u5355\u4e2d\u58f0\u660e\u56fe\u5f62\u6355\u83b7\u529f\u80fd\uff0c\u4ee5\u83b7\u5f97\u4f7f\u7528\u5c4f\u5e55\u6355\u83b7API\u7684\u6743\u9650\u3002 * \u7528\u6237\u9009\u62e9\uff1a\u8c03\u7528\u7cfb\u7edf\u9009\u53d6\u5668UI\uff0c\u8ba9\u7528\u6237\u9009\u62e9\u8981\u6355\u83b7\u7684\u5c4f\u5e55\u6216\u5e94\u7528\u7a0b\u5e8f\u7a97\u53e3\uff0c\u8fd4\u56deGraphicsCaptureItem\u5bf9\u8c61\u3002 * \u521b\u5efa\u5e27\u6c60\u548c\u4f1a\u8bdd\uff1a\u4f7f\u7528GraphicsCaptureItem\u3001D3D\u8bbe\u5907\u3001\u50cf\u7d20\u683c\u5f0f\u3001\u5e27\u6570\u91cf\u548c\u5e27\u5927\u5c0f\u521b\u5efaDirect3D11CaptureFramePool\uff0c\u5e76\u901a\u8fc7\u8be5\u5e27\u6c60\u521b\u5efaGraphicsCaptureSession\u3002 * \u5f00\u59cb\u6355\u83b7\uff1a\u8c03\u7528GraphicsCaptureSession\u7684StartCapture\u65b9\u6cd5\uff0c\u901a\u77e5\u7cfb\u7edf\u5f00\u59cb\u5411\u5e94\u7528\u53d1\u9001\u6355\u83b7\u5e27\u3002 * \u83b7\u53d6\u5e27\u6570\u636e\uff1a\u53ef\u4ee5\u901a\u8fc7\u76d1\u542cFrameArrived\u4e8b\u4ef6\u6216\u624b\u52a8\u8c03\u7528Direct3D11CaptureFramePool.TryGetNextFrame\u65b9\u6cd5\u83b7\u53d6\u6355\u83b7\u7684\u5e27\u6570\u636e8\u3002</p>"},{"location":"remotedesktop/046-WGC/#2","title":"2. \u4ee3\u7801\u5b9e\u73b0","text":"<p>2.1 \u73af\u5883\u51c6\u5907 \u5f00\u53d1\u73af\u5883\uff1aVisual Studio 2017\u53ca\u4ee5\u4e0a\u7248\u672c\uff0c\u652f\u6301C++17\u3002 \u4f9d\u8d56\u5e93\uff1aWindows SDK\uff0c\u5305\u542bC++/WinRT\u5e93\u3002 2.2 \u5b8c\u6574C++\u4ee3\u7801\u793a\u4f8b</p> <pre><code>#include &lt;windows.graphics.capture.h&gt;  \n#include &lt;d3d11.h&gt; \n#include &lt;dxgi1_2.h&gt; \n#include &lt;winrt/Windows.Foundation.h&gt; \n#include &lt;winrt/Windows.Graphics.Capture.h&gt; \n#include &lt;winrt/Windows.UI.Composition.h&gt; \n#include &lt;iostream&gt; \n\n#pragma comment(lib, \"d3d11.lib\")  \n#pragma comment(lib, \"dxgi.lib\")  \n\n// \u521b\u5efaD3D\u8bbe\u5907 \nwinrt::com_ptr&lt;ID3D11Device&gt; CreateD3DDevice() { \n    winrt::com_ptr&lt;ID3D11Device&gt; device; \n    winrt::com_ptr&lt;ID3D11DeviceContext&gt; context; \n    D3D_DRIVER_TYPE driverTypes[] = { \n        D3D_DRIVER_TYPE_HARDWARE, \n        D3D_DRIVER_TYPE_WARP, \n        D3D_DRIVER_TYPE_REFERENCE \n    }; \n    UINT numDriverTypes = ARRAYSIZE(driverTypes); \n    D3D_FEATURE_LEVEL featureLevels[] = { \n        D3D_FEATURE_LEVEL_11_0, \n        D3D_FEATURE_LEVEL_10_1, \n        D3D_FEATURE_LEVEL_10_0, \n        D3D_FEATURE_LEVEL_9_3 \n    }; \n    UINT numFeatureLevels = ARRAYSIZE(featureLevels); \n    UINT createDeviceFlags = 0; \n#if defined(_DEBUG) \n    createDeviceFlags |= D3D11_CREATE_DEVICE_DEBUG; \n#endif \n    for (UINT driverTypeIndex = 0; driverTypeIndex &lt; numDriverTypes; driverTypeIndex++) { \n        HRESULT hr = D3D11CreateDevice( \n            nullptr, \n            driverTypes[driverTypeIndex], \n            nullptr, \n            createDeviceFlags, \n            featureLevels, \n            numFeatureLevels, \n            D3D11_SDK_VERSION, \n            device.put(),  \n            nullptr, \n            context.put()  \n        ); \n        if (SUCCEEDED(hr)) { \n            break; \n        } \n    } \n    return device; \n} \n\n// \u5f00\u59cb\u5c4f\u5e55\u6355\u83b7 \nvoid StartCapture() { \n    if (!winrt::Windows::Graphics::Capture::GraphicsCaptureSession::IsSupported()) { \n        std::cout &lt;&lt; \"Screen capture is not supported on this device.\" &lt;&lt; std::endl; \n        return; \n    } \n\n    auto device = CreateD3DDevice(); \n\n    winrt::Windows::Graphics::Capture::GraphicsCapturePicker picker; \n    auto item = picker.PickSingleItemAsync().get(); \n    if (!item) { \n        std::cout &lt;&lt; \"No item selected.\" &lt;&lt; std::endl; \n        return; \n    } \n\n    winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice d3dDevice = \n        winrt::Windows::Graphics::DirectX::Direct3D11::CreateDirect3DDeviceFromDXGIDevice(device.as&lt;IDXGIDevice&gt;().get());  \n\n    winrt::Windows::Graphics::Capture::Direct3D11CaptureFramePool framePool = \n        winrt::Windows::Graphics::Capture::Direct3D11CaptureFramePool::Create( \n            d3dDevice, \n            winrt::Windows::Graphics::DirectX::DirectXPixelFormat::B8G8R8A8UIntNormalized, \n            2, \n            item.Size() \n        ); \n\n    winrt::Windows::Graphics::Capture::GraphicsCaptureSession session = framePool.CreateCaptureSession(item); \n\n    session.StartCapture(); \n\n    // \u5904\u7406\u6355\u83b7\u7684\u5e27 \n    framePool.FrameArrived([&amp;](auto sender, auto args) { \n        auto frame = sender.TryGetNextFrame(); \n        if (frame) { \n            // \u5904\u7406\u5e27\u6570\u636e\uff0c\u4f8b\u5982\u4fdd\u5b58\u6216\u663e\u793a \n            std::cout &lt;&lt; \"Frame captured.\" &lt;&lt; std::endl; \n        } \n    }); \n\n    // \u4fdd\u6301\u7a0b\u5e8f\u8fd0\u884c \n    std::cin.get();  \n} \n\nint main() { \n    winrt::init_apartment(); \n    StartCapture(); \n    return 0; \n} \n</code></pre> <p>2.3 \u4ee3\u7801\u89e3\u91ca * CreateD3DDevice\u51fd\u6570\uff1a\u521b\u5efaD3D11\u8bbe\u5907\uff0c\u7528\u4e8e\u540e\u7eed\u7684\u56fe\u5f62\u5904\u7406\u3002 * StartCapture\u51fd\u6570\uff1a \u68c0\u67e5\u8bbe\u5907\u662f\u5426\u652f\u6301\u5c4f\u5e55\u6355\u83b7\u3002 \u521b\u5efaGraphicsCapturePicker\u5e76\u8ba9\u7528\u6237\u9009\u62e9\u8981\u6355\u83b7\u7684\u9879\u76ee\u3002 \u521b\u5efaDirect3D11CaptureFramePool\u548cGraphicsCaptureSession\u3002 \u5f00\u59cb\u6355\u83b7\u5e76\u5904\u7406\u6355\u83b7\u7684\u5e27\u3002 * main\u51fd\u6570\uff1a\u521d\u59cb\u5316WinRT\u5e76\u8c03\u7528StartCapture\u51fd\u6570\u3002</p>"},{"location":"remotedesktop/046-WGC/#3","title":"3. \u5168\u5c4f\u5230\u5c40\u90e8\u6355\u83b7","text":"<p>3.1 \u5168\u5c4f\u6355\u83b7 \u4e0a\u8ff0\u4ee3\u7801\u793a\u4f8b\u4e2d\u7684\u6355\u83b7\u65b9\u5f0f\u53ef\u4ee5\u5b9e\u73b0\u5168\u5c4f\u6355\u83b7\uff0c\u53ea\u9700\u7528\u6237\u5728\u7cfb\u7edf\u9009\u53d6\u5668UI\u4e2d\u9009\u62e9\u6574\u4e2a\u5c4f\u5e55\u5373\u53ef\u3002</p> <p>3.2 \u5c40\u90e8\u6355\u83b7 \u8981\u5b9e\u73b0\u5c40\u90e8\u6355\u83b7\uff0c\u53ef\u4ee5\u5728\u521b\u5efaDirect3D11CaptureFramePool\u65f6\u6307\u5b9a\u8f83\u5c0f\u7684\u5e27\u5927\u5c0f\uff0c\u6216\u8005\u5728\u83b7\u53d6\u5e27\u6570\u636e\u540e\u5bf9\u5176\u8fdb\u884c\u88c1\u526a\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u88c1\u526a\u793a\u4f8b\uff1a</p> <pre><code>// \u5728FrameArrived\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\u4e2d\u6dfb\u52a0\u88c1\u526a\u903b\u8f91 \nframePool.FrameArrived([&amp;](auto sender, auto args) { \n    auto frame = sender.TryGetNextFrame(); \n    if (frame) { \n        // \u5047\u8bbe\u8981\u88c1\u526a\u7684\u533a\u57df\u4e3a\u5de6\u4e0a\u89d2(100, 100)\uff0c\u5bbd\u9ad8\u4e3a200x200 \n        int x = 100; \n        int y = 100; \n        int width = 200; \n        int height = 200; \n\n        // \u5904\u7406\u5e27\u6570\u636e\uff0c\u4f8b\u5982\u88c1\u526a \n        // \u8fd9\u91cc\u9700\u8981\u6839\u636e\u5177\u4f53\u7684D3D11\u7eb9\u7406\u5904\u7406\u65b9\u6cd5\u8fdb\u884c\u88c1\u526a \n        std::cout &lt;&lt; \"Frame captured and cropped.\" &lt;&lt; std::endl; \n    } \n}); \n</code></pre>"},{"location":"remotedesktop/046-WGC/#4","title":"4. \u8bbe\u7f6e\u5404\u79cd\u4f18\u5316\u53c2\u6570","text":"<p>4.1 \u5e27\u6c60\u53c2\u6570</p> <ul> <li> <p>\u50cf\u7d20\u683c\u5f0f\uff1a\u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u7684\u50cf\u7d20\u683c\u5f0f\uff0c\u5982DXGI_FORMAT_B8G8R8A8_UNORM\u6216DXGI_FORMAT_R16G16B16A16_FLOAT\uff0c\u6839\u636e\u5b9e\u9645\u9700\u6c42\u8fdb\u884c\u9009\u62e9\u3002</p> </li> <li> <p>\u5e27\u6570\u91cf\uff1a\u5728\u521b\u5efaDirect3D11CaptureFramePool\u65f6\u6307\u5b9a\u5e27\u6570\u91cf\uff0c\u9002\u5f53\u589e\u52a0\u5e27\u6570\u91cf\u53ef\u4ee5\u63d0\u9ad8\u6355\u83b7\u7684\u6d41\u7545\u5ea6\uff0c\u4f46\u4f1a\u5360\u7528\u66f4\u591a\u7684\u5185\u5b58\u3002 4.2 \u6027\u80fd\u4f18\u5316</p> </li> <li> <p>\u591a\u7ebf\u7a0b\u5904\u7406\uff1a\u53ef\u4ee5\u4f7f\u7528\u591a\u7ebf\u7a0b\u6765\u5904\u7406\u6355\u83b7\u7684\u5e27\u6570\u636e\uff0c\u907f\u514d\u5728UI\u7ebf\u7a0b\u4e0a\u8fdb\u884c\u8017\u65f6\u64cd\u4f5c\u3002</p> </li> <li>\u786c\u4ef6\u52a0\u901f\uff1a\u786e\u4fdd\u4f7f\u7528\u652f\u6301\u786c\u4ef6\u52a0\u901f\u7684D3D\u8bbe\u5907\uff0c\u4ee5\u63d0\u9ad8\u6355\u83b7\u548c\u5904\u7406\u7684\u6027\u80fd\u3002</li> </ul>"},{"location":"remotedesktop/046-WGC/#5","title":"5. \u6d41\u7a0b\u56fe\u548c\u7ed3\u6784\u56fe","text":"<p>5.1 \u6d41\u7a0b\u56fe</p> <pre><code>graph TD; \n    A[\u5f00\u59cb] --&gt; B[\u68c0\u67e5\u8bbe\u5907\u662f\u5426\u652f\u6301\u6355\u83b7]; \n    B -- \u652f\u6301 --&gt; C[\u521b\u5efaD3D\u8bbe\u5907]; \n    B -- \u4e0d\u652f\u6301 --&gt; D[\u7ed3\u675f]; \n    C --&gt; E[\u521b\u5efaGraphicsCapturePicker]; \n    E --&gt; F[\u7528\u6237\u9009\u62e9\u6355\u83b7\u9879\u76ee]; \n    F -- \u9009\u62e9\u9879\u76ee --&gt; G[\u521b\u5efaDirect3D11CaptureFramePool]; \n    F -- \u672a\u9009\u62e9\u9879\u76ee --&gt; D; \n    G --&gt; H[\u521b\u5efaGraphicsCaptureSession]; \n    H --&gt; I[\u5f00\u59cb\u6355\u83b7]; \n    I --&gt; J[\u76d1\u542cFrameArrived\u4e8b\u4ef6]; \n    J -- \u6709\u65b0\u5e27 --&gt; K[\u5904\u7406\u5e27\u6570\u636e]; \n    K --&gt; J; \n    J -- \u65e0\u65b0\u5e27 --&gt; J; \n</code></pre> <p>5.2 \u7ed3\u6784\u56fe</p> <pre><code>+-------------------+     +---------------------+     +-------------------+\n| GraphicsCaptureItem| \u2192 | Direct3D11CaptureFramePool | \u2192 | CaptureSession     |\n+-------------------+     +---------------------+     +-------------------+\n                                \u2193                               \u2193 \n+-------------------+     +---------------------+     +-------------------+\n| D3D11Texture2D    | \u2190 | Frame Processing     | \u2190 | Dirty Rects Detection|\n+-------------------+     +---------------------+     +-------------------+\n</code></pre> <pre><code>[\u521b\u5efa\u6355\u83b7\u4f1a\u8bdd] \u2192 [\u521d\u59cb\u5316D3D\u8bbe\u5907] \u2192 [\u9009\u62e9\u6355\u83b7\u76ee\u6807\uff08\u7a97\u53e3/\u5c4f\u5e55\uff09]  \n      \u2193                                \u2193  \n[\u83b7\u53d6\u5e27\u6570\u636e\uff08Direct3D\u7eb9\u7406\uff09] \u2192 [\u5904\u7406\u6570\u636e\uff08\u590d\u5236\u5230CPU/GPU\uff09]  \n      \u2193  \n[\u91ca\u653e\u8d44\u6e90] \u2192 [\u5faa\u73af\u6355\u83b7\u6216\u7ed3\u675f]\n</code></pre> <pre><code>+---------------------+ \n|   \u5e94\u7528\u7a0b\u5e8f           | \n+---------------------+ \n|  - \u6743\u9650\u58f0\u660e          | \n|  - \u7528\u6237\u9009\u62e9\u903b\u8f91      | \n|  - \u5e27\u6c60\u548c\u4f1a\u8bdd\u7ba1\u7406    | \n|  - \u5e27\u6570\u636e\u5904\u7406\u903b\u8f91    | \n+---------------------+ \n|   Windows.Graphics.Capture API  | \n+---------------------+ \n|  - GraphicsCapturePicker        | \n|  - GraphicsCaptureItem          | \n|  - Direct3D11CaptureFramePool   | \n|  - GraphicsCaptureSession       | \n+---------------------+ \n|   DirectX11              | \n+---------------------+ \n|  - D3D11\u8bbe\u5907            | \n|  - \u7eb9\u7406\u5904\u7406             | \n+---------------------+ \n</code></pre> <p>\u4ee5\u4e0a\u5c31\u662f\u5173\u4e8eWindows.Graphics.Capture\u6293\u5c4f\u7684\u6280\u672f\u8c03\u7814\u7ed3\u679c\uff0c\u5305\u62ec\u539f\u7406\u3001\u4ee3\u7801\u5b9e\u73b0\u3001\u5168\u5c4f\u5230\u5c40\u90e8\u6355\u83b7\u3001\u4f18\u5316\u53c2\u6570\u8bbe\u7f6e\u4ee5\u53ca\u6d41\u7a0b\u56fe\u548c\u7ed3\u6784\u56fe\u3002</p>"},{"location":"technology/C%2B%2B/","title":"C++","text":""},{"location":"technology/C%2B%2B/#_1","title":"\u7b80\u4ecb","text":"<p>C++\u662f\u4e00\u79cd\u9762\u5411\u5bf9\u8c61\u7684\u8ba1\u7b97\u673a\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\uff0c\u7531\u7f8e\u56fdAT&amp;T\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u7684\u672c\u8d3e\u5c3c\u00b7\u65af\u7279\u52b3\u65af\u7279\u5362\u666e\u535a\u58eb\u572820\u4e16\u7eaa80\u5e74\u4ee3\u521d\u671f\u53d1\u660e\u5e76\u5b9e\u73b0\uff08\u6700\u521d\u8fd9\u79cd\u8bed\u8a00\u88ab\u79f0\u4f5c\u201cC with Classes\u201d\u5e26\u7c7b\u7684C\uff09\u3002\u5b83\u662f\u4e00\u79cd\u9759\u6001\u6570\u636e\u7c7b\u578b\u68c0\u67e5\u7684\u3001\u652f\u6301\u591a\u91cd\u7f16\u7a0b\u8303\u5f0f\u7684\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\u3002\u5b83\u652f\u6301\u8fc7\u7a0b\u5316\u7a0b\u5e8f\u8bbe\u8ba1\u3001\u6570\u636e\u62bd\u8c61\u3001\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u3001\u6cdb\u578b\u7a0b\u5e8f\u8bbe\u8ba1\u7b49\u591a\u79cd\u7a0b\u5e8f\u8bbe\u8ba1\u98ce\u683c\u3002 C++\u662fC\u8bed\u8a00\u7684\u7ee7\u627f\uff0c\u8fdb\u4e00\u6b65\u6269\u5145\u548c\u5b8c\u5584\u4e86C\u8bed\u8a00\uff0c\u6210\u4e3a\u4e00\u79cd\u9762\u5411\u5bf9\u8c61\u7684\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\u3002C++\u8fd9\u4e2a\u8bcd\u5728\u4e2d\u56fd\u5927\u9646\u7684\u7a0b\u5e8f\u5458\u5708\u5b50\u4e2d\u901a\u5e38\u88ab\u8bfb\u505a\u201cC\u52a0\u52a0\u201d\uff0c\u800c\u897f\u65b9\u7684\u7a0b\u5e8f\u5458\u901a\u5e38\u8bfb\u505a\u201cC plus plus\u201d\uff0c\u201cCPP\u201d\u3002</p> \u4e2d\u6587\u540d C++\u8bed\u8a00 \u521b\u59cb\u4eba BjarneStroustrup \u5916\u6587\u540d The C++ Programming Language \u521b\u59cb\u516c\u53f8 \u8d1d\u5c14\u5b9e\u9a8c\u5ba4 \u7c7b\u522b \u8ba1\u7b97\u673a\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00 \u57fa\u672c\u5185\u5bb9 \u7c7b\u3001\u5c01\u88c5\u3001\u91cd\u8f7d\u3001\u7ee7\u627f\u3001\u6a21\u7248 \u9996\u6b21\u4f7f\u7528\u65f6\u95f4 1983\u5e7412\u6708 \u521b\u59cb\u4eba \u672c\u8d3e\u5c3c\u00b7\u65af\u7279\u52b3\u65af\u7279\u5362\u666e <p> </p>"},{"location":"technology/C%2B%2B/#_2","title":"\u8def\u7ebf\u56fe:","text":""},{"location":"technology/CSharp/","title":"CSHARP","text":""},{"location":"technology/CSharp/#_1","title":"\u7b80\u4ecb","text":"<p>CSharp\u662f\u5fae\u8f6f\u516c\u53f8\u53d1\u5e03\u7684\u4e00\u79cd\u9762\u5411\u5bf9\u8c61\u7684\u3001\u8fd0\u884c\u4e8e.NET Framework\u4e4b\u4e0a\u7684\u9ad8\u7ea7\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\u3002\u5e76\u5b9a\u4e8e\u5728\u5fae\u8f6f\u804c\u4e1a\u5f00\u53d1\u8005\u8bba\u575b(PDC)\u4e0a\u767b\u53f0\u4eae\u76f8\u3002CSharp\u662f\u5fae\u8f6f\u516c\u53f8\u7814\u7a76\u5458Anders Hejlsberg\u7684\u6700\u65b0\u6210\u679c\u3002CSharp\u770b\u8d77\u6765\u4e0eJava\u6709\u7740\u60ca\u4eba\u7684\u76f8\u4f3c\uff1b\u5b83\u5305\u62ec\u4e86\u8bf8\u5982\u5355\u4e00\u7ee7\u627f\u3001\u63a5\u53e3\u3001\u4e0eJava\u51e0\u4e4e\u540c\u6837\u7684\u8bed\u6cd5\u548c\u7f16\u8bd1\u6210\u4e2d\u95f4\u4ee3\u7801\u518d\u8fd0\u884c\u7684\u8fc7\u7a0b\u3002\u4f46\u662fCSharp\u4e0eJava\u6709\u7740\u660e\u663e\u7684\u4e0d\u540c\uff0c\u5b83\u501f\u9274\u4e86Delphi\u7684\u4e00\u4e2a\u7279\u70b9\uff0c\u4e0eCOM\uff08\u7ec4\u4ef6\u5bf9\u8c61\u6a21\u578b\uff09\u662f\u76f4\u63a5\u96c6\u6210\u7684\uff0c\u800c\u4e14\u5b83\u662f\u5fae\u8f6f\u516c\u53f8 .NET windows\u7f51\u7edc\u6846\u67b6\u7684\u4e3b\u89d2\u3002</p> \u5916\u6587\u540d CSharp \u522b\u79f0 CSHARP \u7c7b\u522b \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00 \u53d1\u5e03\u65f6\u95f4 2000\u5e746\u6708 \u53d1\u5e03\u5355\u4f4d \u5fae\u8f6f\u516c\u53f8 \u5f00\u53d1\u8005 \u5b89\u5fb7\u65af\u00b7\u6d77\u5c14\u65af\u4f2f\u683c <p></p>"},{"location":"technology/CSharp/#_2","title":"\u8def\u7ebf\u56fe:","text":""},{"location":"technology/DevelopmentTools/","title":"\u5f00\u53d1\u5de5\u5177","text":""},{"location":"technology/Go/","title":"Go","text":""},{"location":"technology/Go/#_1","title":"\u7b80\u4ecb","text":"<p>Go\u8bed\u8a00\u662fGoogle\u5f00\u53d1\u7684\u4e00\u79cd\u9759\u6001\u5f3a\u7c7b\u578b\u3001\u7f16\u8bd1\u578b\u3001\u5e76\u53d1\u578b\uff0c\u5e76\u5177\u6709\u5783\u573e\u56de\u6536\u529f\u80fd\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u5b83\u7528\u6279\u5224\u5438\u6536\u7684\u773c\u5149\uff0c\u878d\u5408C\u8bed\u8a00\u3001Java\u7b49\u4f17\u5bb6\u4e4b\u957f\uff0c\u5c06\u7b80\u6d01\u3001\u9ad8\u6548\u6f14\u7ece\u5f97\u6dcb\u6f13\u5c3d\u81f4\u3002</p> <p>Go\u8bed\u8a00\u8d77\u6e90\u4e8e2007\u5e74\uff0c\u5f53\u65f6Google\u7684\u6280\u672f\u5927\u795e\u4eec\u5907\u53d7C++\u8d8a\u6765\u8d8a\u81c3\u80bf\u7684\u56f0\u6270\uff0c\u51b3\u5fc3\u5f00\u53d1\u4e00\u79cd\u65b0\u7684\u8bed\u8a00\u6765\u53d6\u4ee3C++\u3002\u4ed6\u4eec\u8ba4\u4e3a\uff1a\u4e0e\u5176\u5728\u81c3\u80bf\u7684\u8bed\u8a00\u4e0a\u4e0d\u65ad\u589e\u52a0\u65b0\u7684\u7279\u6027\uff0c\u4e0d\u5982\u7b80\u5316\u7f16\u7a0b\u8bed\u8a00\u3002\u4e8e\u662f\uff0cGolang\u8fd9\u95e8\u65b0\u8bed\u8a00\u5e94\u8fd0\u800c\u751f\u3002</p>"},{"location":"technology/Go/#_2","title":"\u8def\u7ebf\u56fe:","text":""},{"location":"technology/Java/","title":"Java","text":""},{"location":"technology/Java/#_1","title":"\u7b80\u4ecb","text":"<p>Java\u662f\u4e00\u95e8\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e0d\u4ec5\u5438\u6536\u4e86C++\u8bed\u8a00\u7684\u5404\u79cd\u4f18\u70b9\uff0c\u8fd8\u6452\u5f03\u4e86C++\u91cc\u96be\u4ee5\u7406\u89e3\u7684\u591a\u7ee7\u627f\u3001\u6307\u9488\u7b49\u6982\u5ff5\uff0c\u56e0\u6b64Java\u8bed\u8a00\u5177\u6709\u529f\u80fd\u5f3a\u5927\u548c\u7b80\u5355\u6613\u7528\u4e24\u4e2a\u7279\u5f81\u3002Java\u8bed\u8a00\u4f5c\u4e3a\u9759\u6001\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00\u7684\u4ee3\u8868\uff0c\u6781\u597d\u5730\u5b9e\u73b0\u4e86\u9762\u5411\u5bf9\u8c61\u7406\u8bba\uff0c\u5141\u8bb8\u7a0b\u5e8f\u5458\u4ee5\u4f18\u96c5\u7684\u601d\u7ef4\u65b9\u5f0f\u8fdb\u884c\u590d\u6742\u7684\u7f16\u7a0b\u3002 Java\u5177\u6709\u7b80\u5355\u6027\u3001\u9762\u5411\u5bf9\u8c61\u3001\u5206\u5e03\u5f0f\u3001\u5065\u58ee\u6027\u3001\u5b89\u5168\u6027\u3001\u5e73\u53f0\u72ec\u7acb\u4e0e\u53ef\u79fb\u690d\u6027\u3001\u591a\u7ebf\u7a0b\u3001\u52a8\u6001\u6027\u7b49\u7279\u70b9\u3002Java\u53ef\u4ee5\u7f16\u5199\u684c\u9762\u5e94\u7528\u7a0b\u5e8f\u3001Web\u5e94\u7528\u7a0b\u5e8f\u3001\u5206\u5e03\u5f0f\u7cfb\u7edf\u548c\u5d4c\u5165\u5f0f\u7cfb\u7edf\u5e94\u7528\u7a0b\u5e8f\u7b49\u3002</p> <p></p>"},{"location":"technology/Java/#_2","title":"\u8def\u7ebf\u56fe:","text":""},{"location":"technology/JavaScript/","title":"JavaScript","text":""},{"location":"technology/JavaScript/#_1","title":"\u7b80\u4ecb","text":"<p>JavaScript\u662f\u4e00\u79cd\u52a8\u6001\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u5e7f\u6cdb\u5e94\u7528\u4e8e\u7f51\u9875\u5f00\u53d1\u4e2d\uff0c\u4e3b\u8981\u7528\u4e8e\u589e\u5f3a\u7f51\u9875\u7684\u4ea4\u4e92\u6027\u548c\u52a8\u6001\u6027\u3002\u4f5c\u4e3aWeb\u5f00\u53d1\u7684\u6838\u5fc3\u6280\u672f\u4e4b\u4e00\uff0c\u5b83\u4e0eHTML\u548cCSS\u5171\u540c\u534f\u4f5c\uff0cHTML\u8d1f\u8d23\u5b9a\u4e49\u7f51\u9875\u7684\u5185\u5bb9\u7ed3\u6784\uff0cCSS\u5904\u7406\u6837\u5f0f\u548c\u5e03\u5c40\uff0c\u800cJavaScript\u5219\u63a7\u5236\u7f51\u9875\u7684\u884c\u4e3a\u548c\u4ea4\u4e92\u3002\u7528\u6237\u53ef\u4ee5\u5229\u7528JavaScript\u8fdb\u884c\u4e8b\u4ef6\u5904\u7406\u3001\u8868\u5355\u9a8c\u8bc1\u3001\u52a8\u753b\u521b\u5efa\u7b49\u591a\u79cd\u529f\u80fd\u3002\u6b64\u5916\uff0cJavaScript\u7684\u5e94\u7528\u5df2\u7ecf\u6269\u5c55\u5230\u670d\u52a1\u5668\u7aef\uff08\u5982Node.js\uff09\u3001\u79fb\u52a8\u5e94\u7528\u5f00\u53d1\u548c\u6e38\u620f\u5f00\u53d1\u7b49\u9886\u57df\uff0c\u6210\u4e3a\u73b0\u4ee3\u7f16\u7a0b\u73af\u5883\u4e2d\u4e0d\u53ef\u6216\u7f3a\u7684\u4e00\u90e8\u5206\u3002\u5176\u8de8\u5e73\u53f0\u548c\u9ad8\u9002\u5e94\u6027\u7684\u7279\u70b9\uff0c\u4f7f\u5f97JavaScript\u6210\u4e3a\u5168\u7403\u6700\u53d7\u6b22\u8fce\u548c\u5e7f\u6cdb\u4f7f\u7528\u7684\u811a\u672c\u8bed\u8a00\u4e4b\u4e00\u3002</p> <p></p>"},{"location":"technology/JavaScript/#_2","title":"\u8def\u7ebf\u56fe:","text":""},{"location":"technology/NetWork/","title":"\u7f51\u7edc\u5f00\u53d1","text":""},{"location":"technology/OperatingSystem/","title":"\u64cd\u4f5c\u7cfb\u7edf","text":""},{"location":"technology/PHP/","title":"PHP","text":""},{"location":"technology/PHP/#_1","title":"\u7b80\u4ecb","text":"<p>PHP\uff08\u5916\u6587\u540d:PHP: Hypertext Preprocessor\uff0c\u4e2d\u6587\u540d\uff1a\u201c\u8d85\u6587\u672c\u9884\u5904\u7406\u5668\u201d\uff09\u662f\u4e00\u79cd\u901a\u7528\u5f00\u6e90\u811a\u672c\u8bed\u8a00\u3002\u8bed\u6cd5\u5438\u6536\u4e86C\u8bed\u8a00\u3001Java\u548cPerl\u7684\u7279\u70b9\uff0c\u5229\u4e8e\u5b66\u4e60\uff0c\u4f7f\u7528\u5e7f\u6cdb\uff0c\u4e3b\u8981\u9002\u7528\u4e8eWeb\u5f00\u53d1\u9886\u57df\u3002PHP \u72ec\u7279\u7684\u8bed\u6cd5\u6df7\u5408\u4e86C\u3001Java\u3001Perl\u4ee5\u53caPHP\u81ea\u521b\u7684\u8bed\u6cd5\u3002\u5b83\u53ef\u4ee5\u6bd4CGI\u6216\u8005Perl\u66f4\u5feb\u901f\u5730\u6267\u884c\u52a8\u6001\u7f51\u9875\u3002\u7528PHP\u505a\u51fa\u7684\u52a8\u6001\u9875\u9762\u4e0e\u5176\u4ed6\u7684\u7f16\u7a0b\u8bed\u8a00\u76f8\u6bd4\uff0cPHP\u662f\u5c06\u7a0b\u5e8f\u5d4c\u5165\u5230HTML\uff08\u6807\u51c6\u901a\u7528\u6807\u8bb0\u8bed\u8a00\u4e0b\u7684\u4e00\u4e2a\u5e94\u7528\uff09\u6587\u6863\u4e2d\u53bb\u6267\u884c\uff0c\u6267\u884c\u6548\u7387\u6bd4\u5b8c\u5168\u751f\u6210HTML\u6807\u8bb0\u7684CGI\u8981\u9ad8\u8bb8\u591a\uff1bPHP\u8fd8\u53ef\u4ee5\u6267\u884c\u7f16\u8bd1\u540e\u4ee3\u7801\uff0c\u7f16\u8bd1\u53ef\u4ee5\u8fbe\u5230\u52a0\u5bc6\u548c\u4f18\u5316\u4ee3\u7801\u8fd0\u884c\uff0c\u4f7f\u4ee3\u7801\u8fd0\u884c\u66f4\u5feb\u3002</p> \u4e2d\u6587\u540d \u8d85\u6587\u672c\u9884\u5904\u7406\u5668 \u5916\u6587\u540d Hyper Text Preprocessor \u7f16\u7a0b\u8303\u578b \u9762\u5411\u5bf9\u8c61\u3001\u547d\u4ee4\u5f0f\u7f16\u7a0b \u8bbe\u8ba1\u8005 Rasmus Lerdorf \u7ef4\u62a4 The PHP Group \u5916\u8bed\u7f29\u5199 PHP <p></p>"},{"location":"technology/PHP/#_2","title":"\u8def\u7ebf\u56fe:","text":""},{"location":"technology/Python/","title":"Python","text":""},{"location":"technology/Python/#_1","title":"\u7b80\u4ecb","text":"<p>Python\uff08\u82f1\u56fd\u53d1\u97f3\uff1a/\u02c8pa\u026a\u03b8\u0259n/\u7f8e\u56fd\u53d1\u97f3\uff1a/\u02c8pa\u026a\u03b8\u0251\u02d0n/\uff09,\u662f\u8377\u5170\u79d1\u5b66\u5bb6\u5409\u591a\u00b7\u8303\u7f57\u82cf\u59c6\uff08Guido van Rossum\uff09\uff0c\u57281989\u5e74\u671f\u95f4\u5f00\u53d1\u7684\u8ba1\u7b97\u673a\u7f16\u7a0b\u8bed\u8a00\u3002\u5728Python\u8bed\u8a00\u4e2d\uff0c\u4e00\u5207\u7686\u4e3a\u5bf9\u8c61\uff0c\u5373\u4f7f\u51fd\u6570\u4e5f\u662f\u5bf9\u8c61\uff0c\u6709\u81ea\u8eab\u7684\u5c5e\u6027\u3002Python\u662f\u89e3\u91ca\u578b\u7f16\u7a0b\u8bed\u8a00\uff0c\u8fd0\u884cPython\u7a0b\u5e8f\u65f6\uff0c\u9700\u8981\u5c06\u89e3\u91ca\u5668\u7ffb\u8bd1Python\u4ee3\u7801\u3002</p> <p>Python\u662f\u4e00\u79cd\u4e0d\u53d7\u5c40\u9650\u3001\u8de8\u5e73\u53f0\u7684\u5f00\u6e90\u7f16\u7a0b\u8bed\u8a00\uff0c\u5176\u6570\u636e\u5904\u7406\u901f\u5ea6\u5feb\u3001\u529f\u80fd\u5f3a\u5927\u4e14\u7b80\u5355\u6613\u5b66\uff0c\u5728\u6570\u636e\u5206\u6790\u4e0e\u5904\u7406\u4e2d\u88ab\u5e7f\u6cdb\u5e94\u7528\u3002\u800c\u4e14\uff0cPython\u91c7\u7528\u89e3\u91ca\u8fd0\u884c\u7684\u65b9\u5f0f\uff0c\u7f16\u5199\u540e\u65e0\u9700\u8fdb\u884c\u7f16\u8bd1\u5373\u53ef\u76f4\u63a5\u901a\u8fc7\u89e3\u91ca\u5668\u6267\u884c\uff0c\u5177\u6709\u5178\u578b\u7684\u52a8\u6001\u8bed\u8a00\u7279\u70b9\uff0c\u7f16\u7a0b\u6548\u7387\u6781\u9ad8\u3002Python\u662f\u5b8c\u5168\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u8a00\uff0c\u6570\u5b57\u3001\u6a21\u5757\u3001\u5b57\u7b26\u4e32\u3001\u6570\u636e\u7ed3\u6784\u90fd\u662f\u5bf9\u8c61\uff0c\u5e76\u4e14\u652f\u6301\u5e38\u89c1\u7684\u7c7b\u6982\u5ff5\uff0c\u5982\u7ee7\u627f\uff0c\u91cd\u8f7d\uff0c\u6d3e\u751f\uff0c\u591a\u91cd\u7ee7\u627f\u3002</p> <p>2017\u5e747\u670820\u65e5\uff0cIEEE\u53d1\u5e032017\u5e74\u7f16\u7a0b\u8bed\u8a00\u6392\u884c\u699c\uff1aPython\u9ad8\u5c45\u9996\u4f4d\u30022018\u5e743\u6708\uff0c\u8be5\u8bed\u8a00\u4f5c\u8005\u5728\u90ae\u4ef6\u5217\u8868\u4e0a\u5ba3\u5e03Python 2.7\u5c06\u4e8e2020\u5e741\u67081\u65e5\u7ec8\u6b62\u652f\u6301\u3002\u7528\u6237\u5982\u679c\u60f3\u8981\u5728\u8fd9\u4e2a\u65e5\u671f\u4e4b\u540e\u7ee7\u7eed\u5f97\u5230\u4e0ePython 2.7\u6709\u5173\u7684\u652f\u6301\uff0c\u5219\u9700\u8981\u4ed8\u8d39\u7ed9\u5546\u4e1a\u4f9b\u5e94\u5546\u3002</p> <p></p>"},{"location":"technology/Python/#_2","title":"\u8def\u7ebf\u56fe:","text":""},{"location":"technology/Ruby/","title":"Ruby","text":""},{"location":"technology/Ruby/#_1","title":"\u7b80\u4ecb","text":"<p>Ruby\uff0c\u4e00\u79cd\u4e3a\u7b80\u5355\u5feb\u6377\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u800c\u521b\u7684\u811a\u672c\u8bed\u8a00\uff0c\u572820\u4e16\u7eaa90\u5e74\u4ee3\u7531\u65e5\u672c\u4eba\u677e\u672c\u884c\u5f18\uff08\u307e\u3064\u3082\u3068\u3086\u304d\u3072\u308d\uff09\u5f00\u53d1\uff0c\u9075\u5b88GPL\u534f\u8bae\u548cRuby License\u3002Ruby\u662f\u4e00\u4e2a\u8bed\u6cd5\u50cfSmalltalk\u4e00\u6837\u5b8c\u5168\u9762\u5411\u5bf9\u8c61\u3001\u811a\u672c\u6267\u884c\u3001\u53c8\u6709Perl\u5f3a\u5927\u7684\u6587\u5b57\u5904\u7406\u529f\u80fd\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u5b83\u7684\u7075\u611f\u4e0e\u7279\u6027\u6765\u81ea\u4e8ePerl\u3001Smalltalk\u3001Eiffel\u3001Ada\u4ee5\u53caLisp\u8bed\u8a00\u3002\u7531Ruby\u8bed\u8a00\u672c\u8eab\u8fd8\u53d1\u5c55\u51fa\u4e86JRuby\uff08Java\u5e73\u53f0\uff09\u3001IronRuby\uff08.NET\u5e73\u53f0\uff09\u7b49\u5176\u4ed6\u5e73\u53f0\u7684Ruby\u8bed\u8a00\u66ff\u4ee3\u54c1\u3002Ruby\u4e8e1993\u5e742\u670824\u65e5\u5f00\u59cb\u7f16\u5199\u81f31995\u5e7412\u6708\u624d\u6b63\u5f0f\u516c\u5f00\u53d1\u5e03\u4e8efj\uff08\u65b0\u95fb\u7ec4\uff09\u3002\u56e0\u4e3aPerl\u53d1\u97f3\u4e0e6\u6708\u8bde\u751f\u77f3pearl\uff08\u73cd\u73e0\uff09\u76f8\u540c\uff0c\u56e0\u6b64Ruby\u4ee57\u6708\u8bde\u751f\u77f3ruby\uff08\u7ea2\u5b9d\u77f3\uff09\u547d\u540d\u3002</p> <p></p>"},{"location":"technology/Ruby/#_2","title":"\u8def\u7ebf\u56fe:","text":""},{"location":"technology/Rust/","title":"Rust","text":""},{"location":"technology/Rust/#_1","title":"\u7b80\u4ecb","text":"<p>Rust\u662f\u4e00\u79cd\u7cfb\u7edf\u7ea7\u7f16\u7a0b\u8bed\u8a00\uff0c\u6ce8\u91cd\u9ad8\u6027\u80fd\u3001\u53ef\u9760\u6027\u548c\u751f\u4ea7\u529b[1]\uff0c\u652f\u6301\u7ed3\u6784\u5316\u7f16\u7a0b\u3001\u51fd\u6570\u5f0f\u7f16\u7a0b\u3001\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7b49\u591a\u79cd\u7f16\u7a0b\u8303\u5f0f\u3002</p> <p>Rust\u662f\u7f16\u8bd1\u578b\u8bed\u8a00\uff0c\u6ca1\u6709\u8fd0\u884c\u65f6(Runtime)\u548c\u5783\u573e\u56de\u6536(Garbage Collector)\u3002Rust\u4f7f\u7528\u6240\u6709\u6743\u673a\u5236\u6765\u5b9e\u73b0\u81ea\u52a8\u5185\u5b58\u7ba1\u7406\uff0c\u5e76\u4ee5\u6b64\u6765\u4fdd\u8bc1\u5185\u5b58\u5b89\u5168\u3002Rust\u662f\u5f00\u6e90\u9879\u76ee\uff0c\u76ee\u524d\u6258\u7ba1\u5728Github\u4e0a\uff0cRust\u548c\u6240\u6709\u5176\u4ed6\u5b98\u65b9\u9879\u76ee\u90fd\u91c7\u7528Apache\u8bb8\u53ef\u8bc12.0\u548cMIT\u8bb8\u53ef\u8bc1\u53cc\u91cd\u8bb8\u53ef[2]\u3002Rust\u5b98\u65b9\u8f6f\u4ef6\u5305\u7ba1\u7406\u5668\u4e3aCargo\u3002</p>"},{"location":"technology/Rust/#_2","title":"\u8def\u7ebf\u56fe:","text":""},{"location":"technology/VisualBasic/","title":"VisualBasic","text":""},{"location":"technology/VisualBasic/#_1","title":"\u7b80\u4ecb","text":"<p>Visual Basic\uff08\u7b80\u79f0VB\uff09\u662fMicrosoft\u516c\u53f8\u5f00\u53d1\u7684\u4e00\u79cd\u901a\u7528\u7684\u57fa\u4e8e\u5bf9\u8c61\u7684\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\uff0c\u4e3a\u7ed3\u6784\u5316\u7684\u3001\u6a21\u5757\u5316\u7684\u3001\u9762\u5411\u5bf9\u8c61\u7684\u3001\u5305\u542b\u534f\u52a9\u5f00\u53d1\u73af\u5883\u7684\u4e8b\u4ef6\u9a71\u52a8\u4e3a\u673a\u5236\u7684\u53ef\u89c6\u5316\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\u3002\u662f\u4e00\u79cd\u53ef\u7528\u4e8e\u5fae\u8f6f\u81ea\u5bb6\u4ea7\u54c1\u5f00\u53d1\u7684\u8bed\u8a00\u3002 \u201cVisual\u201d \u6307\u7684\u662f\u5f00\u53d1\u56fe\u5f62\u7528\u6237\u754c\u9762 (GUI) \u7684\u65b9\u6cd5\u2014\u2014\u4e0d\u9700\u7f16\u5199\u5927\u91cf\u4ee3\u7801\u53bb\u63cf\u8ff0\u754c\u9762\u5143\u7d20\u7684\u5916\u89c2\u548c\u4f4d\u7f6e\uff0c\u800c\u53ea\u8981\u628a\u9884\u5148\u5efa\u7acb\u7684\u5bf9\u8c61add\u5230\u5c4f\u5e55\u4e0a\u7684\u4e00\u70b9\u5373\u53ef\u3002 \u201cBasic\u201d\u6307\u7684\u662f BASIC (Beginners All-Purpose Symbolic Instruction Code) \u8bed\u8a00\uff0c\u662f\u4e00\u79cd\u5728\u8ba1\u7b97\u6280\u672f\u53d1\u5c55\u5386\u53f2\u4e0a\u5e94\u7528\u5f97\u6700\u4e3a\u5e7f\u6cdb\u7684\u8bed\u8a00\u3002 Visual Basic\u6e90\u81ea\u4e8eBASIC\u7f16\u7a0b\u8bed\u8a00\u3002VB\u62e5\u6709\u56fe\u5f62\u7528\u6237\u754c\u9762\uff08GUI\uff09\u548c\u5feb\u901f\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\uff08RAD\uff09\u7cfb\u7edf\uff0c\u53ef\u4ee5\u8f7b\u6613\u7684\u4f7f\u7528DAO\u3001RDO\u3001ADO\u8fde\u63a5\u6570\u636e\u5e93\uff0c\u6216\u8005\u8f7b\u677e\u7684\u521b\u5efaActiveX\u63a7\u4ef6\uff0c\u7528\u4e8e\u9ad8\u6548\u751f\u6210\u7c7b\u578b\u5b89\u5168\u548c\u9762\u5411\u5bf9\u8c61\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u7a0b\u5e8f\u5458\u53ef\u4ee5\u8f7b\u677e\u7684\u4f7f\u7528VB\u63d0\u4f9b\u7684\u7ec4\u4ef6\u5feb\u901f\u5efa\u7acb\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u3002</p>"},{"location":"technology/VisualBasic/#_2","title":"\u8def\u7ebf\u56fe:","text":""},{"location":"technology/Cpp/001-BoostMessageQueue/","title":"Boost\u6d88\u606f\u961f\u5217","text":""},{"location":"technology/Cpp/001-BoostMessageQueue/#_1","title":"\u57fa\u7840\u5e94\u7528","text":"<p>\u4ee5\u4e0b\u4e3a\u57fa\u4e8eBoost\u5e93\u7684\u6d88\u606f\u961f\u5217\u5b8c\u6574\u4f7f\u7528\u6307\u5357\uff0c\u5305\u542b\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u6a21\u578b\u5b9e\u73b0\u548c\u4ee3\u7801\u89e3\u6790\uff1a</p>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_2","title":"\u4e00\u3001\u73af\u5883\u51c6\u5907","text":"<p>\u5b89\u88c5Boost\u5f00\u53d1\u5e93\uff08Ubuntu\u793a\u4f8b\uff09</p> <pre><code>sudo apt-get install libboost-dev libboost-system-dev \n</code></pre> <p>\u7f16\u8bd1\u65f6\u9700\u94fe\u63a5\u76f8\u5173\u5e93</p> <pre><code>g++ producer.cpp  -o producer -lboost_system -lrt \ng++ consumer.cpp  -o consumer -lboost_system -lrt \n</code></pre>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_3","title":"\u4e8c\u3001\u6838\u5fc3\u7ec4\u4ef6\u8bf4\u660e","text":"<ol> <li>\u6d88\u606f\u961f\u5217\u6784\u9020\u51fd\u6570</li> </ol> <pre><code>// \u521b\u5efa\u65b0\u961f\u5217\uff08\u540c\u540d\u5b58\u5728\u5219\u629b\u5f02\u5e38\uff09\nmessage_queue mq(create_only, \"MyQueue\", 100, sizeof(MyMessage));\n\n// \u6253\u5f00\u6216\u521b\u5efa\u961f\u5217 \nmessage_queue mq(open_or_create, \"MyQueue\", 100, sizeof(MyMessage));\n\n// \u4ec5\u6253\u5f00\u73b0\u6709\u961f\u5217 \nmessage_queue mq(open_only, \"MyQueue\");\n</code></pre> <p>\u25b6 \u53c2\u6570\u8bf4\u660e\uff1a\u961f\u5217\u540d\u79f0\u3001\u6700\u5927\u6d88\u606f\u6570\u91cf\u3001\u5355\u6d88\u606f\u6700\u5927\u5b57\u8282\u3001\u6743\u9650\u6a21\u5f0f\uff08\u9ed8\u8ba40644\uff09</p> <ol> <li>\u6d88\u606f\u53d1\u9001\u6a21\u5f0f</li> </ol> <pre><code>// \u963b\u585e\u53d1\u9001\uff08\u961f\u5217\u6ee1\u65f6\u7b49\u5f85\uff09\nmq.send(buffer,  sizeof(data), 0); \n\n// \u975e\u963b\u585e\u53d1\u9001\uff08\u7acb\u5373\u8fd4\u56de\u72b6\u6001\uff09\nbool sent = mq.try_send(buffer,  sizeof(data), 0);\n\n// \u8d85\u65f6\u53d1\u9001\uff08\u7b49\u5f852\u79d2\uff09\nboost::posix_time::ptime timeout = /* \u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4 */;\nbool sent = mq.timed_send(buffer,  sizeof(data), 0, timeout);\n</code></pre> <p>\u25b6 \u4f18\u5148\u7ea7\u53c2\u6570\uff1a0\u4e3a\u9ed8\u8ba4\uff0c\u6570\u503c\u8d8a\u5927\u4f18\u5148\u7ea7\u8d8a\u9ad8</p> <ol> <li>\u6d88\u606f\u63a5\u6536\u6a21\u5f0f</li> </ol> <pre><code>// \u963b\u585e\u63a5\u6536 \nmq.receive(buffer,  sizeof(buffer), recvd_size, priority);\n\n// \u975e\u963b\u585e\u63a5\u6536 \nbool received = mq.try_receive(buffer,  sizeof(buffer), recvd_size, priority);\n\n// \u8d85\u65f6\u63a5\u6536 \nboost::posix_time::ptime timeout = /* \u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4 */;\nbool received = mq.timed_receive(buffer,  sizeof(buffer), recvd_size, priority, timeout);\n</code></pre>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_4","title":"\u4e09\u3001\u5b8c\u6574\u4ee3\u7801\u5b9e\u73b0","text":"<p>\u751f\u4ea7\u8005\u7a0b\u5e8f\uff08producer.cpp \uff09</p> <pre><code>#include &lt;boost/interprocess/ipc/message_queue.hpp&gt; \n#include &lt;iostream&gt;\n\nusing namespace boost::interprocess;\n\nstruct Message {\n    int id;\n    float value;\n};\n\nint main() {\n    try {\n        // \u521b\u5efa\u6216\u6253\u5f00\u6d88\u606f\u961f\u5217 \n        message_queue mq(open_or_create, \"demo_queue\", 100, sizeof(Message));\n\n        // \u53d1\u9001\u7ed3\u6784\u5316\u6d88\u606f \n        for(int i=0; i&lt;5; ++i) {\n            Message msg = {i, i*1.5f};\n            mq.send(&amp;msg,  sizeof(msg), 0);\n            std::cout &lt;&lt; \"Sent: ID=\" &lt;&lt; msg.id  &lt;&lt; \" Value=\" &lt;&lt; msg.value  &lt;&lt; std::endl;\n        }\n    } \n    catch(interprocess_exception &amp;ex) {\n        std::cerr &lt;&lt; \"Error: \" &lt;&lt; ex.what()  &lt;&lt; std::endl;\n        return 1;\n    }\n    return 0;\n}\n</code></pre> <p>\u6d88\u8d39\u8005\u7a0b\u5e8f\uff08consumer.cpp \uff09</p> <pre><code>#include &lt;boost/interprocess/ipc/message_queue.hpp&gt; \n#include &lt;iostream&gt;\n\nusing namespace boost::interprocess;\n\nstruct Message {\n    int id;\n    float value;\n};\n\nint main() {\n    try {\n        // \u6253\u5f00\u73b0\u6709\u961f\u5217 \n        message_queue mq(open_only, \"demo_queue\");\n\n        Message msg;\n        size_t recvd_size;\n        unsigned int priority;\n\n        // \u6301\u7eed\u63a5\u6536\u6d88\u606f \n        while(true) {\n            mq.receive(&amp;msg,  sizeof(msg), recvd_size, priority);\n            if(recvd_size == sizeof(msg)) {\n                std::cout &lt;&lt; \"Received: ID=\" &lt;&lt; msg.id  \n                          &lt;&lt; \" Value=\" &lt;&lt; msg.value  &lt;&lt; std::endl;\n            }\n        }\n    }\n    catch(interprocess_exception &amp;ex) {\n        message_queue::remove(\"demo_queue\");\n        std::cerr &lt;&lt; ex.what()  &lt;&lt; std::endl;\n        return 1;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_5","title":"\u56db\u3001\u5173\u952e\u7279\u6027\u8bf4\u660e","text":"<p>\u7ebf\u7a0b\u5b89\u5168\u6027 \u5185\u90e8\u4f7f\u7528\u4e92\u65a5\u9501\u4fdd\u8bc1\u539f\u5b50\u64cd\u4f5c \u652f\u6301\u591a\u751f\u4ea7\u8005/\u591a\u6d88\u8d39\u8005\u5e76\u53d1\u8bbf\u95ee \u6027\u80fd\u4f18\u5316\u70b9 \u4f18\u5148\u4f7f\u7528\u56fa\u5b9a\u957f\u5ea6\u6d88\u606f\uff08\u907f\u514d\u5185\u5b58\u788e\u7247\uff09 \u5408\u7406\u8bbe\u7f6emax_num_msg\u9632\u6b62\u5185\u5b58\u6ea2\u51fa \u8d44\u6e90\u7ba1\u7406 // \u7a0b\u5e8f\u9000\u51fa\u65f6\u5220\u9664\u961f\u5217  message_queue::remove(\"demo_queue\"); \u6570\u636e\u7c7b\u578b\u5efa\u8bae \u5efa\u8bae\u4f7f\u7528POD\u7c7b\u578b\uff08\u7eaf\u65e7\u6570\u636e\uff09 \u590d\u6742\u5bf9\u8c61\u9700\u5e8f\u5217\u5316\u5904\u7406</p>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_6","title":"\u4e94\u3001\u8fd0\u884c\u9a8c\u8bc1","text":"<p>\u7ec8\u7aef1\uff1a\u542f\u52a8\u6d88\u8d39\u8005  ./consumer</p> <p>\u7ec8\u7aef2\uff1a\u542f\u52a8\u751f\u4ea7\u8005  ./producer</p> <p>\u8f93\u51fa\u793a\u4f8b </p> <p>Sent: ID=0 Value=0 </p> <p>Received: ID=0 Value=0 </p> <p>Sent: ID=1 Value=1.5 </p> <p>Received: ID=1 Value=1.5 </p> <p>...</p>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_7","title":"\u516d\u3001\u6269\u5c55\u5e94\u7528\u573a\u666f","text":"<p>\u5206\u5e03\u5f0f\u7cfb\u7edf\u72b6\u6001\u540c\u6b65 \u65e5\u5fd7\u6536\u96c6\u7cfb\u7edf \u5b9e\u65f6\u6570\u636e\u5904\u7406\u6d41\u6c34\u7ebf \u8de8\u8fdb\u7a0b\u4efb\u52a1\u8c03\u5ea6 \u5b8c\u6574\u5b9e\u73b0\u53c2\u8003Boost\u5b98\u65b9\u6587\u6863\uff0c\u5efa\u8bae\u7ed3\u5408boost::serialization\u5e93\u5904\u7406\u590d\u6742\u5bf9\u8c61\u7684\u5e8f\u5217\u5316\u9700\u6c42\u3002</p>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_8","title":"\u6027\u80fd\u4f18\u5316\u6280\u5de7","text":"<p>\u4ee5\u4e0b\u662f\u9488\u5bf9Boost\u6d88\u606f\u961f\u5217\u7684\u6027\u80fd\u4f18\u5316\u6280\u5de7\uff0c\u7efc\u5408\u5b9e\u9645\u5f00\u53d1\u7ecf\u9a8c\u548c\u5206\u5e03\u5f0f\u7cfb\u7edf\u8bbe\u8ba1\u539f\u5219\u6574\u7406\u7684\u6838\u5fc3\u65b9\u6848\uff1a</p>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_9","title":"\u4e00\u3001\u6d88\u606f\u7ed3\u6784\u4f18\u5316","text":"<ul> <li>\u56fa\u5b9a\u957f\u5ea6\u6d88\u606f\u8bbe\u8ba1</li> </ul> <p>\u4f18\u5148\u4f7f\u7528POD\uff08Plain Old Data\uff09\u7c7b\u578b\uff0c\u907f\u514d\u52a8\u6001\u5185\u5b58\u5206\u914d</p> <pre><code>// \u4f18\u5316\u540e\u7684\u6d88\u606f\u7ed3\u6784\uff088\u5b57\u8282\u5bf9\u9f50\uff09\n#pragma pack(push, 1)\nstruct OptimizedMsg {\n    uint32_t id;\n    double timestamp;\n    float sensor_data[4]();\n};\n#pragma pack(pop)\n</code></pre> <p>\u7981\u7528\u865a\u51fd\u6570\u548c\u590d\u6742\u7ed3\u6784\u4f53\uff0c\u51cf\u5c11\u5e8f\u5217\u5316\u5f00\u9500</p> <ul> <li>\u6d88\u606f\u538b\u7f29\u7b56\u7565</li> </ul> <p>\u5bf9\u5927\u578b\u6570\u636e\uff08&gt;1KB\uff09\u4f7f\u7528zlib\u538b\u7f29</p> <pre><code>boost::iostreams::filtering_ostream os;\nos.push(boost::iostreams::zlib_compressor()); \nos.push(boost::iostreams::back_inserter(compressed_data)); \n</code></pre>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_10","title":"\u4e8c\u3001\u961f\u5217\u914d\u7f6e\u8c03\u4f18","text":"<ul> <li>\u5bb9\u91cf\u53c2\u6570\u8bbe\u5b9a</li> </ul> <pre><code>// \u6839\u636e\u4e1a\u52a1\u8d1f\u8f7d\u8ba1\u7b97\u961f\u5217\u53c2\u6570\nconstexpr size_t MAX_MSG = 100000;  // \u5386\u53f2\u5cf0\u503c*1.5\nconstexpr size_t MSG_SIZE = sizeof(OptimizedMsg);\nmessage_queue mq(open_or_create, \"HighPerfQueue\", MAX_MSG, MSG_SIZE);\n</code></pre> <p>\u5efa\u8bae\u5185\u5b58\u7528\u91cf\uff1aMAX_MSG * MSG_SIZE \u2264 \u7269\u7406\u5185\u5b58\u768470%</p> <ul> <li>\u5b58\u50a8\u4ecb\u8d28\u4f18\u5316</li> </ul> <p>\u5c06\u5171\u4eab\u5185\u5b58\u6587\u4ef6\u6302\u8f7d\u5230RAM\u78c1\u76d8\uff1a</p> <pre><code>mount -t tmpfs -o size=512M tmpfs /dev/shm/boost_queue\n</code></pre>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_11","title":"\u4e09\u3001\u5e76\u53d1\u5904\u7406\u4f18\u5316","text":"<ul> <li>\u591a\u6d88\u8d39\u8005\u6a21\u5f0f</li> </ul> <pre><code>// \u542f\u52a8\u591a\u4e2a\u6d88\u8d39\u8005\u7ebf\u7a0b\nstd::vector&lt;std::thread&gt; consumers;\nfor(int i=0; i&lt;4; ++i){\n    consumers.emplace_back([]{ \n        message_queue mq(open_only, \"HighPerfQueue\");\n        // \u5904\u7406\u903b\u8f91\n    });\n}\n</code></pre> <p>\u6d88\u8d39\u8005\u6570\u91cf\u5efa\u8bae\uff1aCPU\u6838\u5fc3\u6570\u00d72 * \u6279\u91cf\u5904\u7406\u673a\u5236</p> <pre><code>// \u751f\u4ea7\u8005\u6279\u91cf\u53d1\u9001\uff08\u6bcf\u6279100\u6761\uff09\nstd::vector&lt;OptimizedMsg&gt; batch(100);\nmq.send(batch.data(),  batch.size()*sizeof(OptimizedMsg),  0);\n\n// \u6d88\u8d39\u8005\u6279\u91cf\u63a5\u6536\nOptimizedMsg bulk[50]();\nsize_t received = mq.try_receive(bulk,  sizeof(bulk), recvd_size, prio);\n</code></pre>"},{"location":"technology/Cpp/001-BoostMessageQueue/#io","title":"\u56db\u3001\u7f51\u7edc\u4e0eIO\u4f18\u5316","text":"<ul> <li>\u4f20\u8f93\u5c42\u8c03\u4f18</li> </ul> <p>\u542f\u7528Nagle\u7b97\u6cd5\uff1a</p> <pre><code>setsockopt(fd, IPPROTO_TCP, TCP_NODELAY, &amp;flag, sizeof(int));\n</code></pre> <p>\u8bbe\u7f6eSocket\u7f13\u51b2\u533a\u5927\u5c0f\uff08\u5efa\u8bae4MB\u4ee5\u4e0a\uff09 * \u5f02\u6b65IO\u6a21\u5f0f</p> <pre><code>// \u4f7f\u7528Boost.Asio\u7ed3\u5408\u6d88\u606f\u961f\u5217\nboost::asio::io_service io;\nboost::asio::post(io, [&amp;]{ mq.async_send(...);  });\n</code></pre>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_12","title":"\u4e94\u3001\u76d1\u63a7\u4e0e\u5bb9\u9519","text":"<ul> <li>\u5173\u952e\u6307\u6807\u76d1\u63a7</li> </ul> \u6307\u6807 \u76d1\u63a7\u65b9\u5f0f \u5065\u5eb7\u9608\u503c \u961f\u5217\u586b\u5145\u7387 mq.get_num_msg()/MAX_MSG &lt;80% \u6d88\u8d39\u5ef6\u8fdf \u6d88\u606f\u65f6\u95f4\u6233\u5dee\u503c &lt;100ms \u5931\u8d25\u91cd\u8bd5\u7387 \u9519\u8bef\u8ba1\u6570\u5668\u7edf\u8ba1 &lt;0.1% <ul> <li>\u6545\u969c\u6062\u590d\u673a\u5236</li> </ul> <pre><code>// \u5f02\u5e38\u5904\u7406\u6a21\u677f\ntry {\n    mq.send(...); \n} catch(boost::interprocess::interprocess_exception&amp; e) {\n    if(e.get_error_code()  == timeout) {\n        mq.timed_send(...);  // \u5e26\u8d85\u65f6\u91cd\u8bd5\n    }\n    // \u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\u5e76\u62a5\u8b66\n}\n</code></pre>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_13","title":"\u516d\u3001\u8fdb\u9636\u4f18\u5316\u65b9\u6848","text":"<ul> <li>NUMA\u67b6\u6784\u4f18\u5316</li> </ul> <p>\u901a\u8fc7numactl\u7ed1\u5b9a\u961f\u5217\u5185\u5b58\u533a\u57df\u5230\u7279\u5b9aCPU\u8282\u70b9</p> <pre><code>numactl --cpunodebind=1 --membind=1 ./producer\n</code></pre> <p>RDMA\u52a0\u901f\uff08\u9700InfiniBand\u652f\u6301\uff09</p> <ul> <li>\u4f7f\u7528ibv_post_send\u5b9e\u73b0\u96f6\u62f7\u8d1d\u4f20\u8f93</li> </ul> <p>\u6027\u80fd\u5bf9\u6bd4\u53c2\u8003</p> \u4f18\u5316\u524d \u4f18\u5316\u540e \u63d0\u5347\u5e45\u5ea6 \u5355\u7ebf\u7a0b 2k msg/s \u56db\u7ebf\u7a0b 15k msg/s 650% 100\u03bcs\u5ef6\u8fdf 38\u03bcs\u5ef6\u8fdf 62%\u964d\u4f4e 70% CPU\u5360\u7528 45% CPU\u5360\u7528 \u8d44\u6e90\u6548\u7387\u63d0\u5347 <p>\u5b9e\u9645\u6d4b\u8bd5\u663e\u793a\uff0c\u7efc\u5408\u8fd0\u7528\u4e0a\u8ff0\u6280\u5de7\u53ef\u4f7fBoost\u6d88\u606f\u961f\u5217\u8fbe\u5230 80%\u7684\u786c\u4ef6\u7406\u8bba\u6027\u80fd\u4e0a\u9650\u3002\u5efa\u8bae\u6839\u636e\u5177\u4f53\u4e1a\u52a1\u573a\u666f\u9009\u62e93-5\u4e2a\u91cd\u70b9\u4f18\u5316\u65b9\u5411\u5b9e\u65bd\u3002</p>"},{"location":"technology/Cpp/001-BoostMessageQueue/#_14","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/002-BoostSharedMemory/","title":"Boost\u5171\u4eab\u5185\u5b58","text":"<p>\u4ee5\u4e0b\u662fBoost\u5171\u4eab\u5185\u5b58\u7684\u8be6\u7ec6\u4f7f\u7528\u6307\u5357\uff0c\u5305\u542b\u5b8c\u6574C++\u4ee3\u7801\u548c\u5206\u6b65\u89e3\u6790\uff0c\u6db5\u76d6\u57fa\u7840\u64cd\u4f5c\u548c\u9ad8\u7ea7\u5e94\u7528\u573a\u666f\uff1a</p>"},{"location":"technology/Cpp/002-BoostSharedMemory/#boost_1","title":"\u4e00\u3001Boost\u5171\u4eab\u5185\u5b58\u6838\u5fc3\u7ec4\u4ef6","text":"<ul> <li>shared_memory_object \u7528\u4e8e\u521b\u5efa/\u6253\u5f00\u5171\u4eab\u5185\u5b58\u5bf9\u8c61\uff0c\u9700\u6307\u5b9a\u540d\u79f0\u548c\u8bbf\u95ee\u6a21\u5f0f\u3002</li> </ul> <pre><code>#include &lt;boost/interprocess/shared_memory_object.hpp&gt; \nusing namespace boost::interprocess;\n\nshared_memory_object shm(\n    open_or_create,    // \u6a21\u5f0f\uff1a\u5b58\u5728\u5219\u6253\u5f00\uff0c\u5426\u5219\u521b\u5efa \n    \"MySharedMemory\",  // \u552f\u4e00\u6807\u8bc6\u540d\u79f0 \n    read_write         // \u8bbf\u95ee\u6743\u9650\uff08read_only / read_write\uff09\n);\n</code></pre> <ul> <li>mapped_region \u5c06\u5171\u4eab\u5185\u5b58\u6620\u5c04\u5230\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\uff0c\u652f\u6301\u8bfb\u5199\u64cd\u4f5c\u3002</li> </ul> <pre><code>#include &lt;boost/interprocess/mapped_region.hpp&gt; \nmapped_region region(\n    shm,               // \u5171\u4eab\u5185\u5b58\u5bf9\u8c61 \n    read_write,        // \u6620\u5c04\u6743\u9650 \n    0,                 // \u504f\u79fb\u91cf\uff08\u9ed8\u8ba40\uff09\n    1024               // \u6620\u5c04\u5927\u5c0f\uff08\u9ed8\u8ba4\u5168\u90e8\uff09\n);\n</code></pre>"},{"location":"technology/Cpp/002-BoostSharedMemory/#_1","title":"\u4e8c\u3001\u57fa\u7840\u4f7f\u7528\u4ee3\u7801\u793a\u4f8b","text":"<ul> <li>\u5199\u5165\u8fdb\u7a0b</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;boost/interprocess/shared_memory_object.hpp&gt; \n#include &lt;boost/interprocess/mapped_region.hpp&gt; \n\nint main() {\n    // 1. \u521b\u5efa\u6216\u6253\u5f00\u5171\u4eab\u5185\u5b58 \n    shared_memory_object shm(\n        open_or_create, \n        \"MySharedMemory\", \n        read_write \n    );\n\n    // 2. \u8bbe\u7f6e\u5185\u5b58\u5927\u5c0f\uff08\u5fc5\u987b\u62e5\u6709\u5199\u6743\u9650\uff09\n    shm.truncate(1024);   // \u5206\u914d1024\u5b57\u8282 \n\n    // 3. \u6620\u5c04\u5230\u5f53\u524d\u8fdb\u7a0b \n    mapped_region region(shm, read_write);\n\n    // 4. \u5199\u5165\u6570\u636e \n    char* data = static_cast&lt;char*&gt;(region.get_address()); \n    std::strcpy(data, \"Hello from Process A!\");\n\n    std::cout &lt;&lt; \"Data written to shared memory.\" &lt;&lt; std::endl;\n    // \u6ce8\u610f\uff1a\u5b9e\u9645\u5e94\u7528\u4e2d\u9700\u540c\u6b65\u673a\u5236\uff08\u5982\u4e92\u65a5\u9501\uff09\n    return 0;\n}\n</code></pre> <ul> <li>\u8bfb\u53d6\u8fdb\u7a0b</li> </ul> <pre><code>int main() {\n    // 1. \u6253\u5f00\u5df2\u6709\u5171\u4eab\u5185\u5b58 \n    shared_memory_object shm(open_only, \"MySharedMemory\", read_only);\n\n    // 2. \u6620\u5c04\u5185\u5b58 \n    mapped_region region(shm, read_only);\n\n    // 3. \u8bfb\u53d6\u6570\u636e \n    char* data = static_cast&lt;char*&gt;(region.get_address()); \n    std::cout &lt;&lt; \"Received: \" &lt;&lt; data &lt;&lt; std::endl;\n\n    // 4. \u6e05\u7406\uff08\u901a\u5e38\u7531\u6700\u540e\u4e00\u4e2a\u8fdb\u7a0b\u6267\u884c\uff09\n    shared_memory_object::remove(\"MySharedMemory\");\n    return 0;\n}\n</code></pre>"},{"location":"technology/Cpp/002-BoostSharedMemory/#stl","title":"\u4e09\u3001\u9ad8\u7ea7\u5e94\u7528\uff1a\u5171\u4eab\u5185\u5b58\u4e2d\u4f7f\u7528STL\u5bb9\u5668","text":"<ul> <li>\u4f7f\u7528\u6258\u7ba1\u5185\u5b58\u548c\u81ea\u5b9a\u4e49\u5206\u914d\u5668</li> </ul> <pre><code>#include &lt;boost/interprocess/managed_shared_memory.hpp&gt; \n#include &lt;boost/interprocess/containers/vector.hpp&gt; \n#include &lt;boost/interprocess/allocators/allocator.hpp&gt; \n\ntypedef int ValueType;\ntypedef allocator&lt;ValueType, managed_shared_memory::segment_manager&gt; ShmemAllocator;\ntypedef vector&lt;ValueType, ShmemAllocator&gt; SharedVector;\n\nint main() {\n    // \u521b\u5efa\u6258\u7ba1\u5171\u4eab\u5185\u5b58\uff08\u81ea\u52a8\u7ba1\u7406\u751f\u547d\u5468\u671f\uff09\n    managed_shared_memory segment(open_or_create, \"ManagedSHM\", 65536);\n\n    // \u6784\u9020\u5171\u4eabvector \n    SharedVector* vec = segment.find_or_construct&lt;SharedVector&gt;(\"MyVector\") \n        (segment.get_allocator&lt;ValueType&gt;()); \n\n    // \u6dfb\u52a0\u6570\u636e \n    vec-&gt;push_back(42);\n    vec-&gt;push_back(88);\n\n    // \u5176\u4ed6\u8fdb\u7a0b\u53ef\u901a\u8fc7\u76f8\u540c\u540d\u79f0\u8bbf\u95ee\u8be5vector \n    return 0;\n}\n</code></pre>"},{"location":"technology/Cpp/002-BoostSharedMemory/#_2","title":"\u56db\u3001\u540c\u6b65\u673a\u5236\uff08\u4e92\u65a5\u9501\u793a\u4f8b\uff09","text":"<pre><code>#include &lt;boost/interprocess/sync/interprocess_mutex.hpp&gt; \n\nstruct SharedData {\n    interprocess_mutex mutex;\n    int counter = 0;\n};\n\n// \u5199\u5165\u8fdb\u7a0b \nmanaged_shared_memory segment(open_or_create, \"SyncSHM\", 4096);\nSharedData* data = segment.find_or_construct&lt;SharedData&gt;(\"Data\")(); \n\n{\n    scoped_lock&lt;interprocess_mutex&gt; lock(data-&gt;mutex); // \u81ea\u52a8\u52a0\u9501 \n    data-&gt;counter++;\n}\n\n// \u8bfb\u53d6\u8fdb\u7a0b\u540c\u7406\uff0c\u901a\u8fc7\u4e92\u65a5\u9501\u4fdd\u8bc1\u539f\u5b50\u64cd\u4f5c \n</code></pre>"},{"location":"technology/Cpp/002-BoostSharedMemory/#_3","title":"\u4e94\u3001\u5173\u952e\u6ce8\u610f\u4e8b\u9879","text":"<ul> <li>\u751f\u547d\u5468\u671f\u7ba1\u7406</li> <li>\u4f7f\u7528shared_memory_object::remove()\u663e\u5f0f\u5220\u9664\u5171\u4eab\u5185\u5b58\u3002</li> <li>\u6258\u7ba1\u5185\u5b58\uff08managed_shared_memory\uff09\u81ea\u52a8\u7ba1\u7406\u5bf9\u8c61\u6784\u9020/\u6790\u6784\u3002</li> <li>\u907f\u514d\u76f4\u63a5\u5b58\u50a8\u6307\u9488\uff0c\u4f7f\u7528offset_ptr\u5904\u7406\u5730\u5740\u504f\u79fb\u3002</li> <li>\u9884\u5206\u914d\u8db3\u591f\u5185\u5b58\u907f\u514d\u9891\u7e41\u8c03\u6574\u3002</li> <li>\u51cf\u5c11\u9501\u7c92\u5ea6\u63d0\u5347\u5e76\u53d1\u6027\u80fd\u3002</li> </ul> <p>\u901a\u8fc7\u4e0a\u8ff0\u65b9\u6cd5\uff0c\u53ef\u5b9e\u73b0\u8de8\u8fdb\u7a0b\u9ad8\u6548\u6570\u636e\u4ea4\u6362\uff0c\u9002\u7528\u4e8e\u9ad8\u9891\u901a\u4fe1\u573a\u666f\u5982\u5b9e\u65f6\u6570\u636e\u5904\u7406\u3002</p>"},{"location":"technology/Cpp/002-BoostSharedMemory/#_4","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/003-BoostFileLock/","title":"Boost\u6587\u4ef6\u9501","text":"<p>\u4ee5\u4e0b\u4e3aBoost\u5e93\u4e2d\u6587\u4ef6\u4e92\u65a5\u9501\u4e0e\u5171\u4eab\u9501\u7684\u5b8c\u6574\u4f7f\u7528\u6307\u5357\uff0c\u6db5\u76d6\u9501\u5b57\u8282\u6bb5\u529f\u80fd\u53caC++\u4ee3\u7801\u5b9e\u73b0\uff1a</p>"},{"location":"technology/Cpp/003-BoostFileLock/#_1","title":"\u4e00\u3001\u9501\u7c7b\u578b\u4e0e\u6838\u5fc3\u7c7b\u5e93","text":"<p>Boost\u63d0\u4f9b\u4e24\u7ec4\u9501\u673a\u5236\uff1a\u7ebf\u7a0b\u540c\u6b65\u9501\uff08boost::mutex/boost::shared_mutex\uff09\u548c\u6587\u4ef6\u9501\uff08boost::interprocess::file_lock\uff09\u3002\u524d\u8005\u7528\u4e8e\u591a\u7ebf\u7a0b\u5171\u4eab\u5185\u5b58\uff0c\u540e\u8005\u7528\u4e8e\u8de8\u8fdb\u7a0b\u6587\u4ef6\u8bbf\u95ee\u63a7\u5236\u3002</p>"},{"location":"technology/Cpp/003-BoostFileLock/#_2","title":"\u4e8c\u3001\u6587\u4ef6\u4e92\u65a5\u9501\u5b9e\u73b0","text":"<ol> <li>\u57fa\u7840\u6587\u4ef6\u9501\uff08\u5168\u6587\u4ef6\u9501\u5b9a\uff09</li> </ol> <pre><code>#include &lt;boost/interprocess/sync/file_lock.hpp&gt; \n#include &lt;fstream&gt;\n\nint main() {\n    // \u521b\u5efa\u6216\u6253\u5f00\u6587\u4ef6 \n    std::fstream file(\"test.dat\",  std::ios::out | std::ios::binary);\n\n    // \u521b\u5efa\u6587\u4ef6\u9501\u5bf9\u8c61 \n    boost::interprocess::file_lock fl(\"test.dat\"); \n\n    // \u72ec\u5360\u9501\u5b9a\u6574\u4e2a\u6587\u4ef6\uff08\u4e92\u65a5\u9501\uff09\n    fl.lock();   // \u963b\u585e\u76f4\u5230\u83b7\u53d6\u9501\n    // \u6267\u884c\u5199\u64cd\u4f5c...\n    file &lt;&lt; \"Exclusive write operation\";\n    fl.unlock(); \n\n    // \u5c1d\u8bd5\u975e\u963b\u585e\u9501\u5b9a \n    if(fl.try_lock())  {\n        // \u4e34\u754c\u533a\u64cd\u4f5c...\n        fl.unlock(); \n    }\n}\n</code></pre> <ol> <li>\u5b57\u8282\u6bb5\u9501\u5b9a\uff08\u90e8\u5206\u6587\u4ef6\u9501\u5b9a\uff09</li> </ol> <pre><code>#include &lt;boost/interprocess/sync/file_lock.hpp&gt; \n#include &lt;iostream&gt;\n\nvoid lock_file_segment() {\n    boost::interprocess::file_lock fl(\"segment.dat\"); \n    const int offset = 0;  // \u8d77\u59cb\u504f\u79fb\u91cf\n    const int length = 512;// \u9501\u5b9a\u5b57\u8282\u6570\n\n    // \u9501\u5b9a\u6307\u5b9a\u5b57\u8282\u8303\u56f4 \n    fl.lock_range(offset,  length);\n    std::cout &lt;&lt; \"Locked bytes \" &lt;&lt; offset &lt;&lt; \"-\" &lt;&lt; offset+length &lt;&lt; std::endl;\n\n    // \u64cd\u4f5c\u9501\u5b9a\u533a\u57df...\n\n    // \u89e3\u9501\u6307\u5b9a\u8303\u56f4 \n    fl.unlock_range(offset,  length);\n}\n</code></pre>"},{"location":"technology/Cpp/003-BoostFileLock/#_3","title":"\u4e09\u3001\u5171\u4eab\u9501\uff08\u8bfb\u5199\u9501\uff09\u5b9e\u73b0","text":"<ol> <li>\u7ebf\u7a0b\u7ea7\u5171\u4eab\u9501\uff08\u5185\u5b58\u5171\u4eab\uff09</li> </ol> <pre><code>#include &lt;boost/thread/shared_mutex.hpp&gt; \nboost::shared_mutex rw_mutex;\n\n// \u8bfb\u64cd\u4f5c\uff08\u5171\u4eab\u9501\uff09\nvoid read_data() {\n    boost::shared_lock&lt;boost::shared_mutex&gt; lock(rw_mutex); // \u81ea\u52a8\u52a0\u5171\u4eab\u9501\n    // \u591a\u7ebf\u7a0b\u53ef\u5e76\u53d1\u6267\u884c\u8bfb\u64cd\u4f5c...\n}\n\n// \u5199\u64cd\u4f5c\uff08\u4e92\u65a5\u9501\uff09\nvoid write_data() {\n    boost::unique_lock&lt;boost::shared_mutex&gt; lock(rw_mutex); // \u81ea\u52a8\u52a0\u72ec\u5360\u9501\n    // \u4ec5\u5355\u7ebf\u7a0b\u53ef\u6267\u884c\u5199\u64cd\u4f5c...\n}\n</code></pre> <ol> <li>\u6587\u4ef6\u7ea7\u5171\u4eab\u9501\uff08\u9700\u64cd\u4f5c\u7cfb\u7edf\u652f\u6301\uff09</li> </ol> <pre><code>#include &lt;boost/interprocess/sync/file_lock.hpp&gt; \n\nvoid shared_file_access() {\n    boost::interprocess::file_lock fl(\"shared.dat\"); \n\n    // \u83b7\u53d6\u5171\u4eab\u9501\uff08\u8bfb\u9501\uff09\n    if(fl.try_lock_sharable())  {\n        // \u591a\u8fdb\u7a0b\u53ef\u5e76\u53d1\u8bfb\u53d6...\n        fl.unlock_sharable(); \n    }\n\n    // \u83b7\u53d6\u72ec\u5360\u9501\uff08\u5199\u9501\uff09\n    fl.lock();  \n    // \u5355\u8fdb\u7a0b\u5199\u5165\u64cd\u4f5c...\n    fl.unlock(); \n}\n</code></pre>"},{"location":"technology/Cpp/003-BoostFileLock/#_4","title":"\u56db\u3001\u5173\u952e\u7279\u6027\u5bf9\u6bd4","text":"\u9501\u7c7b\u578b \u9002\u7528\u573a\u666f \u662f\u5426\u652f\u6301\u533a\u57df\u9501 \u7ebf\u7a0b/\u8fdb\u7a0b\u7ea7\u522b mutex \u7ebf\u7a0b\u95f4\u5185\u5b58\u4e92\u65a5 \u5426 \u7ebf\u7a0b shared_mutex \u7ebf\u7a0b\u95f4\u8bfb\u5199\u5206\u79bb \u5426 \u7ebf\u7a0b file_lock \u8fdb\u7a0b\u95f4\u6587\u4ef6\u8bbf\u95ee\u63a7\u5236 \u662f \u8fdb\u7a0b"},{"location":"technology/Cpp/003-BoostFileLock/#_5","title":"\u4e94\u3001\u6700\u4f73\u5b9e\u8df5\u4e0e\u6ce8\u610f\u4e8b\u9879","text":"<ul> <li>RAII\u9501\u7ba1\u7406\uff1a\u4f18\u5148\u4f7f\u7528lock_guard/unique_lock\u7b49RAII\u5305\u88c5\u5668\uff0c\u907f\u514d\u5fd8\u8bb0\u89e3\u9501\u3002</li> </ul> <pre><code>boost::interprocess::file_lock fl(\"file\");\nboost::interprocess::scoped_lock&lt;boost::interprocess::file_lock&gt; guard(fl);\n</code></pre> <ul> <li>\u6b7b\u9501\u9884\u9632\uff1a\u907f\u514d\u5d4c\u5957\u9501\u5b9a\u4e0d\u540c\u987a\u5e8f\u7684\u4e92\u65a5\u91cf\uff0c\u4f7f\u7528try_lock\u7cfb\u5217\u65b9\u6cd5\u8bbe\u7f6e\u8d85\u65f6\u3002</li> <li>\u6027\u80fd\u4f18\u5316\uff1a\u7ec6\u7c92\u5ea6\u9501\uff08\u5982\u5b57\u8282\u6bb5\u9501\uff09\u53ef\u51cf\u5c11\u8d44\u6e90\u4e89\u7528\uff0c\u63d0\u5347\u5e76\u53d1\u6027\u80fd\u3002</li> <li>\u8de8\u5e73\u53f0\u5dee\u5f02\uff1a\u6587\u4ef6\u5171\u4eab\u9501\u5728Windows\u548cLinux\u4e0b\u7684\u884c\u4e3a\u53ef\u80fd\u4e0d\u540c\uff0c\u9700\u6d4b\u8bd5\u9a8c\u8bc1\u3002</li> </ul>"},{"location":"technology/Cpp/003-BoostFileLock/#_6","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/004-Get_CPU_Useage/","title":"\u83b7\u53d6CPU\u5360\u7528\u7387","text":""},{"location":"technology/Cpp/004-Get_CPU_Useage/#windows","title":"windows\u5e73\u53f0","text":"<p>\u5728Windows\u7cfb\u7edf\u4e0b\u4f7f\u7528C++\u83b7\u53d6CPU\u5360\u7528\u7387\uff0c\u5e38\u89c1\u65b9\u6cd5\u53ef\u5206\u4e3a\u7cfb\u7edf\u6574\u4f53\u5360\u7528\u7387\u548c\u7279\u5b9a\u8fdb\u7a0b\u5360\u7528\u7387\u4e24\u7c7b\u3002\u4ee5\u4e0b\u662f\u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\u53ca\u6838\u5fc3\u4ee3\u7801\u793a\u4f8b\uff1a</p>"},{"location":"technology/Cpp/004-Get_CPU_Useage/#cpu_1","title":"\u4e00\u3001\u83b7\u53d6\u7cfb\u7edf\u6574\u4f53CPU\u5360\u7528\u7387","text":""},{"location":"technology/Cpp/004-Get_CPU_Useage/#1getsystemtimes","title":"\u65b9\u6cd51\uff1a\u57fa\u4e8eGetSystemTimes\u51fd\u6570","text":"<p>\u539f\u7406\uff1a\u901a\u8fc7\u8ba1\u7b97\u4e24\u6b21\u91c7\u6837\u7684\u7cfb\u7edf\u7a7a\u95f2\u65f6\u95f4\u3001\u5185\u6838\u65f6\u95f4\u548c\u7528\u6237\u65f6\u95f4\u5dee\u503c\uff0c\u7ed3\u5408\u516c\u5f0f\u5f97\u51fa\u6574\u4f53CPU\u4f7f\u7528\u7387\u3002</p> <pre><code>#include &lt;windows.h&gt;\n#include &lt;iostream&gt;\n\ndouble GetCpuUsage() {\n    FILETIME idleTime, kernelTime, userTime;\n    static FILETIME preIdleTime, preKernelTime, preUserTime;\n\n    GetSystemTimes(&amp;idleTime, &amp;kernelTime, &amp;userTime);\n\n    // \u8f6c\u6362\u4e3a64\u4f4d\u6574\u578b\n    ULONGLONG idle = (*(ULONGLONG*)&amp;idleTime) - (*(ULONGLONG*)&amp;preIdleTime);\n    ULONGLONG kernel = (*(ULONGLONG*)&amp;kernelTime) - (*(ULONGLONG*)&amp;preKernelTime);\n    ULONGLONG user = (*(ULONGLONG*)&amp;userTime) - (*(ULONGLONG*)&amp;preUserTime);\n\n    preIdleTime = idleTime;\n    preKernelTime = kernelTime;\n    preUserTime = userTime;\n\n    if (kernel + user == 0) return 0.0;\n    return ((kernel + user - idle) * 100.0) / (kernel + user);\n}\n\n// \u8c03\u7528\u793a\u4f8b\nint main() {\n    while (true) {\n        Sleep(1000); // \u95f4\u96941\u79d2\u91c7\u6837\n        std::cout &lt;&lt; \"CPU Usage: \" &lt;&lt; GetCpuUsage() &lt;&lt; \"%\" &lt;&lt; std::endl;\n    }\n    return 0;\n}\n</code></pre> <ul> <li>\u5173\u952e\u70b9\uff1a \u9700\u95f4\u9694\u4e00\u5b9a\u65f6\u95f4\uff08\u59821\u79d2\uff09\u91c7\u6837\u4e24\u6b21\u6570\u636e\u3002 \u516c\u5f0f\uff1a(\u5185\u6838\u65f6\u95f4 + \u7528\u6237\u65f6\u95f4 - \u7a7a\u95f2\u65f6\u95f4) / (\u5185\u6838\u65f6\u95f4 + \u7528\u6237\u65f6\u95f4)\u3002</li> </ul>"},{"location":"technology/Cpp/004-Get_CPU_Useage/#2pdh","title":"\u65b9\u6cd52\uff1a\u4f7f\u7528\u6027\u80fd\u8ba1\u6570\u5668\uff08PDH\u5e93\uff09","text":"<p>\u9002\u7528\u573a\u666f\uff1a\u9700\u8981\u9ad8\u7cbe\u5ea6\u6216\u5b9e\u65f6\u76d1\u63a7\u591a\u4e2a\u8ba1\u6570\u5668\u3002</p> <pre><code>#include &lt;windows.h&gt;\n#include &lt;pdh.h&gt;\n#pragma comment(lib, \"pdh.lib\") \n\ndouble GetCpuUsageByPdh() {\n    static PDH_HQUERY query;\n    static PDH_HCOUNTER counter;\n    static bool initialized = false;\n\n    if (!initialized) {\n        PdhOpenQuery(nullptr, 0, &amp;query);\n        PdhAddCounter(query, L\"\\\\Processor(_Total)\\\\% Processor Time\", 0, &amp;counter);\n        initialized = true;\n    }\n\n    PDH_FMT_COUNTERVALUE value;\n    PdhCollectQueryData(query);\n    PdhGetFormattedCounterValue(counter, PDH_FMT_DOUBLE, nullptr, &amp;value);\n    return value.doubleValue; \n}\n</code></pre> <ul> <li>\u4f18\u70b9\uff1a\u4e0e\u4efb\u52a1\u7ba1\u7406\u5668\u6570\u636e\u4e00\u81f4\uff0c\u652f\u6301\u591a\u6838\u7edf\u8ba1\u3002</li> </ul>"},{"location":"technology/Cpp/004-Get_CPU_Useage/#cpu_2","title":"\u4e8c\u3001\u83b7\u53d6\u7279\u5b9a\u8fdb\u7a0bCPU\u5360\u7528\u7387","text":"<p>\u539f\u7406\uff1a\u901a\u8fc7GetProcessTimes\u83b7\u53d6\u8fdb\u7a0b\u7684\u5185\u6838\u548c\u7528\u6237\u65f6\u95f4\uff0c\u8ba1\u7b97\u4e24\u6b21\u91c7\u6837\u7684\u65f6\u95f4\u5dee\u5360\u6bd4\u3002</p> <pre><code>#include &lt;windows.h&gt;\n#include &lt;iostream&gt;\n\nclass ProcessCpuMonitor {\npublic:\n    ProcessCpuMonitor(DWORD pid) : pid_(pid) {\n        hProcess_ = OpenProcess(PROCESS_QUERY_LIMITED_INFORMATION, FALSE, pid_);\n    }\n\n    ~ProcessCpuMonitor() {\n        if (hProcess_) CloseHandle(hProcess_);\n    }\n\n    float GetUsage() {\n        FILETIME createTime, exitTime, kernelTime, userTime;\n        if (!GetProcessTimes(hProcess_, &amp;createTime, &amp;exitTime, &amp;kernelTime, &amp;userTime))\n            return -1;\n\n        ULONGLONG currentKernel = *(ULONGLONG*)&amp;kernelTime;\n        ULONGLONG currentUser = *(ULONGLONG*)&amp;userTime;\n        ULONGLONG delta = (currentKernel + currentUser) - (lastKernel_ + lastUser_);\n\n        // \u8ba1\u7b97\u65f6\u95f4\u5dee\uff08\u5355\u4f4d\uff1a100\u7eb3\u79d2\uff09\n        ULONGLONG timePassed = GetTickCount64() - lastTick_;\n        lastTick_ = GetTickCount64();\n        lastKernel_ = currentKernel;\n        lastUser_ = currentUser;\n\n        if (timePassed == 0) return 0.0f;\n        return (delta / 10000.0f) / timePassed * 100.0f; // \u8f6c\u6362\u4e3a\u767e\u5206\u6bd4\n    }\n\nprivate:\n    DWORD pid_;\n    HANDLE hProcess_ = nullptr;\n    ULONGLONG lastKernel_ = 0, lastUser_ = 0;\n    ULONGLONG lastTick_ = 0;\n};\n\n// \u8c03\u7528\u793a\u4f8b\nint main() {\n    DWORD pid = 1234; // \u76ee\u6807\u8fdb\u7a0bID\n    ProcessCpuMonitor monitor(pid);\n    while (true) {\n        Sleep(1000);\n        std::cout &lt;&lt; \"Process CPU Usage: \" &lt;&lt; monitor.GetUsage() &lt;&lt; \"%\" &lt;&lt; std::endl;\n    }\n    return 0;\n}\n</code></pre> <p>\u6ce8\u610f\u4e8b\u9879\uff1a</p> <p>\u9700\u4ee5PROCESS_QUERY_LIMITED_INFORMATION\u6743\u9650\u6253\u5f00\u8fdb\u7a0b\u3002 \u516c\u5f0f\uff1a(\u8fdb\u7a0b\u65f6\u95f4\u5dee / \u7cfb\u7edf\u65f6\u95f4\u5dee) * 100%\u3002</p>"},{"location":"technology/Cpp/004-Get_CPU_Useage/#_1","title":"\u4e09\u3001\u5e38\u89c1\u95ee\u9898","text":"<ul> <li>\u4e0e\u4efb\u52a1\u7ba1\u7406\u5668\u6570\u636e\u4e0d\u4e00\u81f4\uff1a\u56e0\u91c7\u6837\u95f4\u9694\u548c\u8ba1\u7b97\u65b9\u5f0f\u5dee\u5f02\uff0c\u7ed3\u679c\u53ef\u80fd\u6709\u8f7b\u5fae\u504f\u5dee\u3002</li> <li>\u591a\u6838CPU\uff1a\u4e0a\u8ff0\u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u6574\u4f53\u5229\u7528\u7387\uff0c\u5982\u9700\u5355\u6838\u6570\u636e\uff0c\u9700\u904d\u5386\u6bcf\u4e2a\u903b\u8f91\u5904\u7406\u5668\u3002</li> <li>\u6743\u9650\u95ee\u9898\uff1a\u83b7\u53d6\u7cfb\u7edf\u7ea7\u6570\u636e\u9700\u7ba1\u7406\u5458\u6743\u9650\uff0c\u8fdb\u7a0b\u7ea7\u6570\u636e\u5219\u4e0d\u9700\u8981\u3002</li> </ul>"},{"location":"technology/Cpp/004-Get_CPU_Useage/#linux","title":"linux\u5e73\u53f0","text":"<p>\u5728Linux\u7cfb\u7edf\u4e0b\u4f7f\u7528C++\u83b7\u53d6CPU\u5360\u7528\u7387\uff0c\u4e3b\u8981\u901a\u8fc7\u89e3\u6790/proc/stat\u6587\u4ef6\u5b9e\u73b0\u3002\u4ee5\u4e0b\u662f\u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\u548c\u539f\u7406\u8bf4\u660e\uff1a</p>"},{"location":"technology/Cpp/004-Get_CPU_Useage/#_2","title":"\u4e00\u3001\u6838\u5fc3\u539f\u7406","text":"<p>Linux\u5185\u6838\u901a\u8fc7/proc/stat\u6587\u4ef6\u63d0\u4f9bCPU\u6d3b\u52a8\u7684\u7edf\u8ba1\u4fe1\u606f\u3002\u6587\u4ef6\u4e2d\u8bb0\u5f55\u4e86\u4ece\u7cfb\u7edf\u542f\u52a8\u5230\u5f53\u524d\u65f6\u523b\uff0cCPU\u5728\u4e0d\u540c\u72b6\u6001\u4e0b\u7684\u7d2f\u8ba1\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u65f6\u949f\u5468\u671f\uff09\uff0c\u5305\u62ec\uff1a</p> <p>user\uff1a\u7528\u6237\u6001\u6267\u884c\u65f6\u95f4 nice\uff1a\u4f4e\u4f18\u5148\u7ea7\u7528\u6237\u6001\u65f6\u95f4 system\uff1a\u5185\u6838\u6001\u6267\u884c\u65f6\u95f4 idle\uff1a\u7a7a\u95f2\u65f6\u95f4 iowait\uff1aI/O\u7b49\u5f85\u65f6\u95f4 irq\uff1a\u786c\u4ef6\u4e2d\u65ad\u65f6\u95f4 softirq\uff1a\u8f6f\u4ef6\u4e2d\u65ad\u65f6\u95f4 \u901a\u8fc7\u4e24\u6b21\u91c7\u6837\u8fd9\u4e9b\u6570\u503c\uff0c\u8ba1\u7b97\u65f6\u95f4\u5dee\u5e76\u5206\u6790CPU\u5360\u7528\u7387\u3002</p>"},{"location":"technology/Cpp/004-Get_CPU_Useage/#_3","title":"\u4e8c\u3001\u5b9e\u73b0\u6b65\u9aa4","text":"<ol> <li>\u8bfb\u53d6 /proc/stat \u6587\u4ef6</li> </ol> <pre><code>#include &lt;fstream&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n\nstruct CpuTime {\n    unsigned long user, nice, system, idle, iowait, irq, softirq;\n};\n\nCpuTime readCpuStats() {\n    std::ifstream file(\"/proc/stat\");\n    std::string cpu_label;\n    CpuTime time;\n    file &gt;&gt; cpu_label &gt;&gt; time.user  &gt;&gt; time.nice  &gt;&gt; time.system  &gt;&gt; time.idle  \n         &gt;&gt; time.iowait  &gt;&gt; time.irq  &gt;&gt; time.softirq; \n    return time;\n}\n</code></pre> <ol> <li>\u8ba1\u7b97CPU\u4f7f\u7528\u7387 \u901a\u8fc7\u4e24\u6b21\u91c7\u6837\u65f6\u95f4\u5dee\u8ba1\u7b97CPU\u5229\u7528\u7387\uff1a</li> </ol> <pre><code>double calculateCpuUsage(const CpuTime&amp; prev, const CpuTime&amp; curr) {\n    const unsigned long prev_total = prev.user  + prev.nice  + prev.system  + prev.idle  \n                                   + prev.iowait  + prev.irq  + prev.softirq; \n    const unsigned long curr_total = curr.user  + curr.nice  + curr.system  + curr.idle  \n                                   + curr.iowait  + curr.irq  + curr.softirq; \n    const unsigned long total_diff = curr_total - prev_total;\n\n    const unsigned long idle_diff = curr.idle  - prev.idle; \n    return (total_diff - idle_diff) * 100.0 / total_diff;\n}\n</code></pre> <ol> <li>\u5b8c\u6574\u793a\u4f8b</li> </ol> <pre><code>#include &lt;iostream&gt;\n#include &lt;unistd.h&gt;\n\nint main() {\n    CpuTime prev = readCpuStats();\n    sleep(1); // \u91c7\u6837\u95f4\u96941\u79d2\n    CpuTime curr = readCpuStats();\n\n    double usage = calculateCpuUsage(prev, curr);\n    std::cout &lt;&lt; \"CPU Usage: \" &lt;&lt; usage &lt;&lt; \"%\" &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"technology/Cpp/004-Get_CPU_Useage/#_4","title":"\u4e09\u3001\u6269\u5c55\u8bf4\u660e","text":"<p>\u591a\u6838CPU\u5904\u7406 /proc/stat\u4e2d\u6bcf\u884c\u5bf9\u5e94\u4e00\u4e2aCPU\u6838\u5fc3\uff08\u5982cpu0, cpu1\uff09\uff0c\u9700\u5206\u522b\u89e3\u6790\u3002</p> <p>\u8fdb\u7a0b\u7ea7CPU\u5360\u7528\u7387 \u901a\u8fc7\u8bfb\u53d6/proc/[pid]/stat\u83b7\u53d6\u8fdb\u7a0b\u7684utime\uff08\u7528\u6237\u6001\u65f6\u95f4\uff09\u548cstime\uff08\u5185\u6838\u6001\u65f6\u95f4\uff09\uff0c\u7ed3\u5408\u7cfb\u7edf\u603b\u65f6\u95f4\u8ba1\u7b97\u3002</p> <p>\u6ce8\u610f\u4e8b\u9879 \u91c7\u6837\u95f4\u9694\u5efa\u8bae\u22651\u79d2\uff0c\u907f\u514d\u77ac\u65f6\u6ce2\u52a8\u3002 \u9700\u5904\u7406/proc\u6587\u4ef6\u8bfb\u53d6\u5931\u8d25\u7684\u60c5\u51b5\u3002 \u9ad8\u7cbe\u5ea6\u573a\u666f\u53ef\u4f7f\u7528clock_gettime\u66ff\u4ee3sleep\u3002</p>"},{"location":"technology/Cpp/004-Get_CPU_Useage/#_5","title":"\u56db\u3001\u4f18\u5316\u4e0e\u66ff\u4ee3\u65b9\u6848","text":"<p>\u4f7f\u7528 sysinfo \u7cfb\u7edf\u8c03\u7528 \u83b7\u53d6\u7c97\u7565\u7684\u7cfb\u7edf\u8d1f\u8f7d\u4fe1\u606f\uff0c\u4f46\u7cbe\u5ea6\u8f83\u4f4e\u3002</p> <p>\u8c03\u7528 getrusage \u51fd\u6570 \u9002\u7528\u4e8e\u7edf\u8ba1\u8fdb\u7a0b\u81ea\u8eab\u7684CPU\u4f7f\u7528\u60c5\u51b5\u3002</p> <p>\u7b2c\u4e09\u65b9\u5e93 \u5982libstatgrab\u6216procps-ng\u63d0\u4f9b\u5c01\u88c5\u63a5\u53e3\u3002</p>"},{"location":"technology/Cpp/004-Get_CPU_Useage/#macos","title":"macOS\u5e73\u53f0","text":"<p>\u5728 macOS \u7cfb\u7edf\u4e0b\u901a\u8fc7 C++ \u83b7\u53d6 CPU \u5360\u7528\u7387\uff0c\u9700\u8981\u8c03\u7528 Mach \u5185\u6838 API \u5b9e\u73b0\u3002\u4ee5\u4e0b\u662f\u57fa\u4e8e \u3001\u3001 \u7b49\u8d44\u6599\u7684\u5b9e\u73b0\u65b9\u6848\uff1a</p>"},{"location":"technology/Cpp/004-Get_CPU_Useage/#_6","title":"\u4e00\u3001\u6838\u5fc3\u5b9e\u73b0\u539f\u7406","text":"<p>Mach API \u8c03\u7528 macOS \u57fa\u4e8e Darwin \u5185\u6838\uff0c\u901a\u8fc7  \u63d0\u4f9b\u7684 host_statistics \u51fd\u6570\u83b7\u53d6 CPU \u65f6\u95f4\u7edf\u8ba1\u4fe1\u606f\u3002 CPU \u5360\u7528\u7387\u8ba1\u7b97 \u9700\u4e24\u6b21\u91c7\u6837\u95f4\u9694\u5185\u7684 CPU \u4f7f\u7528\u65f6\u95f4\u5dee\uff0c\u516c\u5f0f\uff1a CPU \u5360\u7528\u7387 = (\u7528\u6237\u6001\u65f6\u95f4 + \u5185\u6838\u6001\u65f6\u95f4) / (\u603b\u65f6\u95f4\u5dee) * 100%"},{"location":"technology/Cpp/004-Get_CPU_Useage/#_7","title":"\u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\u793a\u4f8b","text":"<pre><code>#include &lt;mach/mach_host.h&gt;\n#include &lt;mach/processor_info.h&gt;\n#include &lt;unistd.h&gt;\n\ndouble get_cpu_usage() {\n    host_cpu_load_info_data_t cpuinfo;\n    mach_msg_type_number_t count = HOST_CPU_LOAD_INFO_COUNT;\n    kern_return_t kr = host_statistics(mach_host_self(), \n                                      HOST_CPU_LOAD_INFO,\n                                      (host_info_t)&amp;cpuinfo,\n                                      &amp;count);\n    if (kr != KERN_SUCCESS) return -1.0;\n\n    // \u7b2c\u4e00\u6b21\u91c7\u6837\n    uint64_t total_user_prev = cpuinfo.cpu_ticks[CPU_STATE_USER]; \n    uint64_t total_sys_prev = cpuinfo.cpu_ticks[CPU_STATE_SYSTEM]; \n    uint64_t total_idle_prev = cpuinfo.cpu_ticks[CPU_STATE_IDLE]; \n    uint64_t total_used_prev = total_user_prev + total_sys_prev;\n\n    // \u7b49\u5f85 1 \u79d2\u540e\u518d\u6b21\u91c7\u6837\n    sleep(1);\n    kr = host_statistics(mach_host_self(),\n                        HOST_CPU_LOAD_INFO,\n                        (host_info_t)&amp;cpuinfo,\n                        &amp;count);\n    if (kr != KERN_SUCCESS) return -1.0;\n\n    uint64_t total_user = cpuinfo.cpu_ticks[CPU_STATE_USER]; \n    uint64_t total_sys = cpuinfo.cpu_ticks[CPU_STATE_SYSTEM]; \n    uint64_t total_idle = cpuinfo.cpu_ticks[CPU_STATE_IDLE]; \n    uint64_t total_used = total_user + total_sys;\n\n    // \u8ba1\u7b97\u5dee\u503c\n    uint64_t used_diff = total_used - total_used_prev;\n    uint64_t idle_diff = total_idle - total_idle_prev;\n    uint64_t total_diff = used_diff + idle_diff;\n\n    return (total_diff == 0) ? 0 : (used_diff * 100.0) / total_diff;\n}\n</code></pre>"},{"location":"technology/Cpp/004-Get_CPU_Useage/#_8","title":"\u4e09\u3001\u5173\u952e\u70b9\u8bf4\u660e","text":"<p>\u591a\u6838 CPU \u5904\u7406 \u4e0a\u8ff0\u4ee3\u7801\u8fd4\u56de\u7684\u662f \u6240\u6709 CPU \u6838\u5fc3\u7684\u5e73\u5747\u5360\u7528\u7387\u3002\u82e5\u9700\u83b7\u53d6\u5355\u6838\u6570\u636e\uff0c\u9700\u901a\u8fc7 host_processor_info \u51fd\u6570\u904d\u5386\u6bcf\u4e2a\u6838\u5fc3 \u3002 \u65f6\u95f4\u95f4\u9694\u9009\u62e9 \u4e24\u6b21\u91c7\u6837\u95f4\u9694\u5efa\u8bae 1 \u79d2\uff08sleep(1)\uff09\uff0c\u95f4\u9694\u8fc7\u77ed\u4f1a\u5bfc\u81f4\u8bef\u5dee\u589e\u5927\u3002 \u9519\u8bef\u5904\u7406 \u68c0\u67e5 host_statistics \u8fd4\u56de\u503c\u662f\u5426\u4e3a KERN_SUCCESS\uff0c\u907f\u514d\u56e0\u6743\u9650\u95ee\u9898\u6216 API \u8c03\u7528\u5931\u8d25\u5bfc\u81f4\u5d29\u6e83\u3002</p>"},{"location":"technology/Cpp/004-Get_CPU_Useage/#_9","title":"\u56db\u3001\u6269\u5c55\u529f\u80fd","text":"<p>\u83b7\u53d6\u5355\u8fdb\u7a0b CPU \u5360\u7528 \u7ed3\u5408 proc_pidinfo \u51fd\u6570\u548c PROC_PIDTASKINFO \u53c2\u6570\uff0c\u53ef\u83b7\u53d6\u6307\u5b9a\u8fdb\u7a0b\u7684 CPU \u65f6\u95f4 \u3002 \u5b9e\u65f6\u76d1\u63a7 \u901a\u8fc7\u591a\u7ebf\u7a0b\u5faa\u73af\u8c03\u7528\u4e0a\u8ff0\u51fd\u6570\uff0c\u5b9e\u73b0\u52a8\u6001\u66f2\u7ebf\u7ed8\u5236\uff08\u53c2\u8003 \u4e2d\u7684 ImGui \u65b9\u6848\uff09\u3002</p>"},{"location":"technology/Cpp/004-Get_CPU_Useage/#_10","title":"\u4e94\u3001\u7f16\u8bd1\u6ce8\u610f\u4e8b\u9879","text":"<p>\u5934\u6587\u4ef6\u4f9d\u8d56\uff1a\u9700\u5305\u542b  \u548c  \u94fe\u63a5\u6846\u67b6\uff1a\u6dfb\u52a0 -framework IOKit \u7f16\u8bd1\u9009\u9879 \u793a\u4f8b\uff1aclang++ -framework IOKit cpu_usage.cpp  -o cpu_usage"},{"location":"technology/Cpp/004-Get_CPU_Useage/#_11","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/005-Get_Mem_Useage/","title":"\u83b7\u53d6\u5185\u5b58\u5360\u7528\u7387","text":""},{"location":"technology/Cpp/005-Get_Mem_Useage/#windows","title":"windows\u5e73\u53f0","text":"<p>\u5728Windows\u73af\u5883\u4e0b\u4f7f\u7528C++\u83b7\u53d6\u5185\u5b58\u5360\u7528\u7387\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u5b9e\u73b0\uff0c\u5206\u522b\u9488\u5bf9\u7cfb\u7edf\u6574\u4f53\u548c\u7279\u5b9a\u8fdb\u7a0b\u7684\u5185\u5b58\u76d1\u63a7\uff1a</p>"},{"location":"technology/Cpp/005-Get_Mem_Useage/#_2","title":"\u4e00\u3001\u83b7\u53d6\u7cfb\u7edf\u6574\u4f53\u5185\u5b58\u5360\u7528\u7387","text":"<p>\u6838\u5fc3\u51fd\u6570\uff1aGlobalMemoryStatusEx \u6b65\u9aa4\uff1a</p> <ul> <li>\u5b9a\u4e49MEMORYSTATUSEX\u7ed3\u6784\u4f53\u5e76\u521d\u59cb\u5316dwLength\u5b57\u6bb5</li> <li>\u8c03\u7528\u51fd\u6570\u83b7\u53d6\u5185\u5b58\u4fe1\u606f</li> <li>\u901a\u8fc7dwMemoryLoad\u5b57\u6bb5\u76f4\u63a5\u83b7\u53d6\u5185\u5b58\u5360\u7528\u7387\u767e\u5206\u6bd4</li> </ul> <pre><code>#include &lt;windows.h&gt;\n\nMEMORYSTATUSEX memInfo;\nmemInfo.dwLength  = sizeof(memInfo);\nGlobalMemoryStatusEx(&amp;memInfo);\n\nDWORD memoryUsage = memInfo.dwMemoryLoad;  // \u5185\u5b58\u5360\u7528\u7387\u767e\u5206\u6bd4\n</code></pre>"},{"location":"technology/Cpp/005-Get_Mem_Useage/#_3","title":"\u4e8c\u3001\u83b7\u53d6\u7279\u5b9a\u8fdb\u7a0b\u5185\u5b58\u5360\u7528","text":"<p>\u6838\u5fc3\u51fd\u6570\uff1aGetProcessMemoryInfo</p> <p>\u6b65\u9aa4\uff1a * \u83b7\u53d6\u76ee\u6807\u8fdb\u7a0b\u53e5\u67c4\uff08\u5982\u5f53\u524d\u8fdb\u7a0b\u7528GetCurrentProcess()\uff09 * \u5b9a\u4e49PROCESS_MEMORY_COUNTERS\u7ed3\u6784\u4f53 * \u8c03\u7528\u51fd\u6570\u83b7\u53d6\u5185\u5b58\u4fe1\u606f</p> <pre><code>#include &lt;windows.h&gt;\n#include &lt;psapi.h&gt;\n\nPROCESS_MEMORY_COUNTERS pmc;\nif (GetProcessMemoryInfo(GetCurrentProcess(), &amp;pmc, sizeof(pmc))) {\n    SIZE_T usedMem = pmc.WorkingSetSize; // \u8fdb\u7a0b\u5360\u7528\u7684\u7269\u7406\u5185\u5b58\n    SIZE_T totalMem = /* \u603b\u5185\u5b58\u9700\u901a\u8fc7GlobalMemoryStatusEx\u83b7\u53d6 */;\n    double ratio = (usedMem * 100.0) / totalMem; // \u8ba1\u7b97\u5360\u7528\u7387\n}\n</code></pre>"},{"location":"technology/Cpp/005-Get_Mem_Useage/#_4","title":"\u4e09\u3001\u5173\u952e\u6ce8\u610f\u4e8b\u9879","text":"<p>\u7ed3\u6784\u4f53\u521d\u59cb\u5316\uff1a \u4f7f\u7528MEMORYSTATUSEX\u6216PROCESS_MEMORY_COUNTERS\u65f6\uff0c\u5fc5\u987b\u6b63\u786e\u521d\u59cb\u5316dwLength\u5b57\u6bb5\uff0c\u5426\u5219\u51fd\u6570\u8c03\u7528\u5931\u8d25\u3002</p> <p>\u6743\u9650\u95ee\u9898\uff1a \u8bbf\u95ee\u5176\u4ed6\u8fdb\u7a0b\u5185\u5b58\u9700PROCESS_QUERY_INFORMATION\u548cPROCESS_VM_READ\u6743\u9650\uff0c\u53ef\u901a\u8fc7OpenProcess\u51fd\u6570\u83b7\u53d6\u3002</p>"},{"location":"technology/Cpp/005-Get_Mem_Useage/#_5","title":"\u56db\u3001\u6269\u5c55\u5e94\u7528\u573a\u666f","text":"<ul> <li>\u5b9e\u65f6\u76d1\u63a7\uff1a\u7ed3\u5408\u5b9a\u65f6\u5668\u5b9a\u671f\u8c03\u7528\u4e0a\u8ff0\u51fd\u6570\uff0c\u5b9e\u73b0\u52a8\u6001\u5185\u5b58\u76d1\u63a7\u754c\u9762</li> <li>\u6027\u80fd\u5206\u6790\uff1a\u4e0eCPU\u5360\u7528\u7387\uff08GetSystemTimes\uff09\u3001\u78c1\u76d8I/O\u7b49\u6307\u6807\u7ed3\u5408\uff0c\u6784\u5efa\u5b8c\u6574\u7684\u8d44\u6e90\u76d1\u63a7\u7cfb\u7edf</li> <li>\u670d\u52a1\u7aef\u4f18\u5316\uff1a\u901a\u8fc7\u5185\u5b58\u5360\u7528\u7387\u6570\u636e\u8c03\u6574\u670d\u52a1\u8d44\u6e90\u5206\u914d\u7b56\u7565</li> </ul>"},{"location":"technology/Cpp/005-Get_Mem_Useage/#linux","title":"linux\u5e73\u53f0","text":"<p>\u5728Linux\u73af\u5883\u4e0b\u4f7f\u7528C++\u83b7\u53d6\u5185\u5b58\u5360\u7528\u7387\uff0c\u4e3b\u8981\u901a\u8fc7\u8bfb\u53d6\u7cfb\u7edf\u6587\u4ef6\u6216\u8c03\u7528\u7cfb\u7edf\u63a5\u53e3\u5b9e\u73b0\u3002\u4ee5\u4e0b\u662f\u51e0\u79cd\u5e38\u7528\u65b9\u6cd5\u53ca\u5b9e\u73b0\u793a\u4f8b\uff1a</p>"},{"location":"technology/Cpp/005-Get_Mem_Useage/#procmeminfo","title":"\u65b9\u6cd5\u4e00\uff1a\u89e3\u6790 /proc/meminfo \u6587\u4ef6","text":"<p>\u7cfb\u7edf\u5185\u5b58\u4fe1\u606f\u5b58\u50a8\u5728 /proc/meminfo \u4e2d\uff0c\u901a\u8fc7\u89e3\u6790\u8be5\u6587\u4ef6\u83b7\u53d6\u5185\u5b58\u603b\u91cf\u548c\u7a7a\u95f2\u91cf\uff1a</p> <pre><code>#include &lt;fstream&gt;\n#include &lt;string&gt;\n#include &lt;unordered_map&gt;\n\nfloat get_memory_usage() {\n    std::ifstream meminfo(\"/proc/meminfo\");\n    std::unordered_map&lt;std::string, long&gt; mem_data;\n    std::string key;\n    long value;\n\n    while (meminfo &gt;&gt; key &gt;&gt; value) {\n        meminfo.ignore(256,  '\\n'); // \u8df3\u8fc7\u5355\u4f4d\uff08\u5982 kB\uff09\n        mem_data[key] = value;\n    }\n\n    long total = mem_data[\"MemTotal:\"];\n    long available = mem_data[\"MemAvailable:\"]; // \u82e5\u7cfb\u7edf\u4e0d\u652f\u6301 MemAvailable\uff0c\u53ef\u7528 MemFree + Buffers + Cached \u66ff\u4ee3\n    long used = total - available;\n    return (used * 100.0) / total;\n}\n</code></pre> <p>\u8bf4\u660e\uff1a</p> <p>MemAvailable \u662f\u66f4\u51c6\u786e\u7684\u53ef\u7528\u5185\u5b58\u6307\u6807\uff08\u9700\u5185\u68383.14+\uff09\uff0c\u5426\u5219\u9700\u8ba1\u7b97 MemFree + Buffers + Cached \u3002 \u5355\u4f4d\u4e3a KB\uff0c\u8ba1\u7b97\u65f6\u65e0\u9700\u8f6c\u6362\u3002</p>"},{"location":"technology/Cpp/005-Get_Mem_Useage/#sysinfo","title":"\u65b9\u6cd5\u4e8c\uff1a\u4f7f\u7528 sysinfo() \u7cfb\u7edf\u8c03\u7528","text":"<p>\u901a\u8fc7 sysinfo \u51fd\u6570\u76f4\u63a5\u83b7\u53d6\u5185\u5b58\u4fe1\u606f\uff1a</p> <pre><code>#include &lt;sys/sysinfo.h&gt;\n\nfloat get_memory_usage() {\n    struct sysinfo info;\n    sysinfo(&amp;info);\n\n    long total = info.totalram  * info.mem_unit; \n    long free = info.freeram  * info.mem_unit; \n    long used = total - free;\n\n    return (used * 100.0) / total;\n}\n</code></pre> <p>\u8bf4\u660e\uff1a * sysinfo() \u63d0\u4f9b\u66f4\u76f4\u63a5\u7684\u7cfb\u7edf\u5185\u5b58\u7edf\u8ba1\uff0c\u65e0\u9700\u6587\u4ef6\u89e3\u6790 \u3002 * mem_unit \u662f\u5185\u5b58\u5355\u4f4d\uff08\u901a\u5e38\u4e3a\u5b57\u8282\uff09\uff0c\u9700\u624b\u52a8\u8ba1\u7b97\u603b\u5185\u5b58\u548c\u7a7a\u95f2\u5185\u5b58\u3002 * \u6269\u5c55\uff1a\u83b7\u53d6\u8fdb\u7a0b\u5185\u5b58\u5360\u7528\uff08\u7269\u7406\u5185\u5b58\uff09 * \u82e5\u9700\u83b7\u53d6\u7279\u5b9a\u8fdb\u7a0b\u7684\u5185\u5b58\u5360\u7528\uff0c\u53ef\u89e3\u6790 /proc/[pid]/status\uff1a</p> <pre><code>#include &lt;fstream&gt;\n#include &lt;string&gt;\n\nlong get_process_memory(int pid) {\n    std::ifstream status(\"/proc/\" + std::to_string(pid) + \"/status\");\n    std::string line;\n\n    while (std::getline(status, line)) {\n        if (line.find(\"VmRSS\")  != std::string::npos) { // \u7269\u7406\u5185\u5b58\u5360\u7528\n            long mem_kb;\n            sscanf(line.c_str(), \"VmRSS: %ld kB\", &amp;mem_kb);\n            return mem_kb * 1024; // \u8f6c\u6362\u4e3a\u5b57\u8282\n        }\n    }\n    return -1;\n}\n</code></pre> <p>\u8bf4\u660e\uff1a</p> <p>VmRSS \u8868\u793a\u8fdb\u7a0b\u5b9e\u9645\u4f7f\u7528\u7684\u7269\u7406\u5185\u5b58 \u3002 \u5355\u4f4d\u4e3a KB\uff0c\u9700\u8f6c\u6362\u4e3a\u5b57\u8282\u3002 \u6ce8\u610f\u4e8b\u9879 * \u6743\u9650\u95ee\u9898\uff1a\u9700\u786e\u4fdd\u7a0b\u5e8f\u6709\u6743\u9650\u8bfb\u53d6 /proc \u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u3002 * \u5b9e\u65f6\u6027\uff1a/proc/meminfo \u548c sysinfo() \u7684\u6570\u636e\u662f\u52a8\u6001\u66f4\u65b0\u7684\u3002 * \u5355\u4f4d\u8f6c\u6362\uff1a\u4e0d\u540c\u65b9\u6cd5\u53ef\u80fd\u6d89\u53ca KB \u6216\u5b57\u8282\u5355\u4f4d\uff0c\u9700\u7edf\u4e00\u8ba1\u7b97\u3002</p>"},{"location":"technology/Cpp/005-Get_Mem_Useage/#macos","title":"macOS\u5e73\u53f0","text":"<p>\u5728 macOS \u73af\u5883\u4e0b\u901a\u8fc7 C++ \u83b7\u53d6\u5185\u5b58\u5360\u7528\u7387\uff0c\u9700\u8981\u7ed3\u5408\u7cfb\u7edf\u7ea7 API \u548c Mach \u5185\u6838\u63a5\u53e3\u3002\u4ee5\u4e0b\u662f\u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\u53ca\u6838\u5fc3\u77e5\u8bc6\u70b9\u603b\u7ed3\uff1a</p>"},{"location":"technology/Cpp/005-Get_Mem_Useage/#_6","title":"\u4e00\u3001\u7cfb\u7edf\u6574\u4f53\u5185\u5b58\u5360\u7528\u7387","text":"<p>\u5b9e\u73b0\u539f\u7406 * \u901a\u8fc7 sysctl \u548c host_statistics \u63a5\u53e3\u83b7\u53d6\u7269\u7406\u5185\u5b58\u603b\u91cf\u548c\u5df2\u4f7f\u7528\u91cf\uff1a</p> <pre><code>#include &lt;mach/mach_host.h&gt;\n#include &lt;sys/sysctl.h&gt;\n\n// \u83b7\u53d6\u7269\u7406\u5185\u5b58\u603b\u91cf\nuint64_t get_total_memory() {\n    int mib[2]()  = {CTL_HW, HW_MEMSIZE};\n    uint64_t total_mem = 0;\n    size_t len = sizeof(total_mem);\n    sysctl(mib, 2, &amp;total_mem, &amp;len, NULL, 0);\n    return total_mem;\n}\n\n// \u8ba1\u7b97\u5185\u5b58\u5360\u7528\u7387\nfloat get_memory_usage() {\n    vm_size_t page_size;\n    mach_port_t host_port = mach_host_self();\n    mach_msg_type_number_t host_size = sizeof(vm_statistics_data_t) / sizeof(integer_t);\n    vm_statistics_data_t vm_stat;\n\n    host_page_size(host_port, &amp;page_size);\n    host_statistics(host_port, HOST_VM_INFO, (host_info_t)&amp;vm_stat, &amp;host_size);\n\n    uint64_t total_mem = get_total_memory();\n    uint64_t used_mem = (vm_stat.active_count  + vm_stat.wire_count)  * page_size;\n    return (float)used_mem / total_mem * 100.0f;\n}\n</code></pre>"},{"location":"technology/Cpp/005-Get_Mem_Useage/#_7","title":"\u4e8c\u3001\u8fdb\u7a0b\u7ea7\u5185\u5b58\u5360\u7528","text":"<p>\u5b9e\u73b0\u539f\u7406 * \u901a\u8fc7 Mach \u4efb\u52a1\u63a5\u53e3\u83b7\u53d6\u8fdb\u7a0b\u7684\u9a7b\u7559\u5185\u5b58\uff08RSS\uff09\uff1a</p> <pre><code>#include &lt;mach/mach_init.h&gt;\n#include &lt;mach/task.h&gt;\n\nsize_t get_process_memory_usage() {\n    task_t task = mach_task_self();\n    struct mach_task_basic_info info;\n    mach_msg_type_number_t count = MACH_TASK_BASIC_INFO_COUNT;\n\n    if (task_info(task, MACH_TASK_BASIC_INFO, (task_info_t)&amp;info, &amp;count) == KERN_SUCCESS) {\n        return info.resident_size;  // \u8fd4\u56de\u5355\u4f4d\u4e3a\u5b57\u8282\n    }\n    return 0;\n}\n</code></pre>"},{"location":"technology/Cpp/005-Get_Mem_Useage/#_8","title":"\u4e09\u3001\u5173\u952e\u77e5\u8bc6\u70b9","text":"<ul> <li> <p>Mach \u5185\u6838\u63a5\u53e3 macOS \u5185\u5b58\u7ba1\u7406\u57fa\u4e8e Mach \u5fae\u5185\u6838\uff0c\u9700\u4f7f\u7528 mach_host.h \u548c mach/task.h \u4e2d\u7684\u51fd\u6570\u83b7\u53d6\u5185\u5b58\u7edf\u8ba1\u4fe1\u606f \u3002</p> </li> <li> <p>\u5185\u5b58\u8ba1\u7b97\u903b\u8f91 \u7cfb\u7edf\u5185\u5b58\u5360\u7528\u7387 = (\u6d3b\u8dc3\u5185\u5b58 + \u56fa\u5b9a\u5185\u5b58) / \u603b\u7269\u7406\u5185\u5b58\u3002\u6d3b\u8dc3\u5185\u5b58\uff08active_count\uff09\u548c\u56fa\u5b9a\u5185\u5b58\uff08wire_count\uff09\u53cd\u6620\u5f53\u524d\u4f7f\u7528\u72b6\u6001 \u3002</p> </li> <li> <p>\u6027\u80fd\u4f18\u5316 \u9891\u7e41\u8c03\u7528 host_statistics \u53ef\u80fd\u5f71\u54cd\u6027\u80fd\uff0c\u5efa\u8bae\u95f4\u9694 1-2 \u79d2\u91c7\u6837\u4e00\u6b21 \u3002</p> </li> </ul>"},{"location":"technology/Cpp/005-Get_Mem_Useage/#_9","title":"\u56db\u3001\u6269\u5c55\u5e94\u7528\u573a\u666f","text":"<ul> <li>\u7cfb\u7edf\u76d1\u63a7\u5de5\u5177\uff1a\u5b9e\u65f6\u663e\u793a\u5185\u5b58\u66f2\u7ebf\uff08\u53c2\u8003 \u7684 QT \u5b9e\u73b0\uff09</li> <li>\u6027\u80fd\u5206\u6790\uff1a\u7ed3\u5408 CPU \u5360\u7528\u7387\u76d1\u63a7\uff08\u9700\u4f7f\u7528 host_processor_info \u63a5\u53e3\uff09</li> <li>\u81ea\u52a8\u5316\u6d4b\u8bd5\uff1a\u8bb0\u5f55\u5185\u5b58\u6cc4\u6f0f\u6570\u636e\uff08\u957f\u671f\u76d1\u63a7\u8fdb\u7a0b RSS \u53d8\u5316\uff09</li> </ul>"},{"location":"technology/Cpp/005-Get_Mem_Useage/#_10","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/006-GetSerialNumber/","title":"\u83b7\u53d6\u786c\u4ef6\u5e8f\u5217\u53f7","text":"<p>\u6211\u5c06\u4ece\u8de8\u5e73\u53f0\u89d2\u5ea6\u7cfb\u7edf\u8bb2\u89e3\u5982\u4f55\u901a\u8fc7C++\u83b7\u53d6\u786c\u4ef6\u5e8f\u5217\u53f7\u7684\u6838\u5fc3\u6280\u672f\uff0c\u5e76\u63d0\u4f9b\u53ef\u79fb\u690d\u6027\u4ee3\u7801\u5b9e\u73b0\u3002</p>"},{"location":"technology/Cpp/006-GetSerialNumber/#_2","title":"\u4e00\u3001\u5904\u7406\u5668\u5e8f\u5217\u53f7\u83b7\u53d6","text":"<ol> <li>Windows\u5e73\u53f0</li> </ol> <pre><code>#include &lt;windows.h&gt;\n#include &lt;intrin.h&gt;\n\nstd::string GetCPUSerial_Win() {\n    DWORD cpuInfo[2] = { 0 };\n    __cpuid((int*)cpuInfo, 1);\n    char cpuSerialNumber[BUFFERLEN];\n    std::sprintf(cpuSerialNumber, \"%08x-%08x\", cpuInfo[0], cpuInfo[1]);\n    return std::string(cpuSerialNumber);\n}\n</code></pre> <p>\u4f7f\u7528CPUID\u6307\u4ee4\u83b7\u53d6\u5b8c\u6574\u5904\u7406\u5668\u4fe1\u606f</p> <ol> <li>Linux\u5e73\u53f0</li> </ol> <pre><code>#include &lt;cpuid.h&gt;\n\nstd::string GetCPUSerial_Unix() {\n    char buffer[128]();\n    FILE* pipe = popen(\"dmidecode -t processor | grep 'ID'\", \"r\");\n    fgets(buffer, 128, pipe);\n    pclose(pipe);\n    return std::string(buffer).substr(5); // \u8fd4\u56de\u7c7b\u4f3cF3A56F3E-1A\u683c\u5f0f \n}\n</code></pre> <p>\u901a\u8fc7dmidecode\u547d\u4ee4\u83b7\u53d6\u7269\u7406ID</p> <ol> <li>macOS\u5e73\u53f0</li> </ol> <pre><code>std::string GetCPUSerial_macOS() {\n    std::string serial = \"\";\n    FILE *fp = popen(\"sysctl -n machdep.cpu.brand_string\", \"r\");\n    if (fp) {\n        char buffer[128];\n        while (fgets(buffer, sizeof(buffer), fp)) {\n            serial += buffer;\n            break;\n        }\n        pclose(fp);\n    }\n    return serial;\n}\n</code></pre>"},{"location":"technology/Cpp/006-GetSerialNumber/#_3","title":"\u4e8c\u3001\u5185\u5b58\u5e8f\u5217\u53f7\u83b7\u53d6","text":"<ol> <li>\u8de8\u5e73\u53f0\u901a\u7528\u65b9\u6cd5</li> </ol> <pre><code>// Windows\u9700\u5305\u542bwmi\u67e5\u8be2\u4ee3\u7801 \n// Linux/macOS\uff1a\nstd::string GetMemorySerial() {\n#if defined(_WIN32)\n    // WMI\u67e5\u8be2Win32_PhysicalMemory \n#elif defined(__linux__)\n    char buffer[128];\n    FILE* pipe = popen(\"dmidecode -t memory | grep 'Serial Number'\", \"r\");\n    fgets(buffer, 128, pipe);\n    pclose(pipe);\n    return std::string(buffer);\n#elif defined(__APPLE__)\n    system(\"system_profiler SPMemoryDataType | grep 'Serial'\");\n#endif \n    return serial; \n}\n</code></pre> <p>\u5185\u5b58\u5e8f\u5217\u53f7\u901a\u5e38\u9700\u8981\u7cfb\u7edf\u7ea7\u6743\u9650\u83b7\u53d6</p>"},{"location":"technology/Cpp/006-GetSerialNumber/#_4","title":"\u4e09\u3001\u663e\u5361\u5e8f\u5217\u53f7\u83b7\u53d6","text":"<ol> <li>Windows\u5b9e\u73b0</li> </ol> <pre><code>#include &lt;windows.h&gt;\n#include &lt;setupapi.h&gt;\n\nstd::string GetGPUSerial_Win() {\n    DISPLAY_DEVICE dd;\n    dd.cb  = sizeof(DISPLAY_DEVICE);\n    EnumDisplayDevices(NULL, 0, &amp;dd, 0);\n    return dd.DeviceID; // \u8fd4\u56dePCI\\VEN_10DE&amp;DEV_2206\u683c\u5f0f \n}\n</code></pre> <p>\u901a\u8fc7\u663e\u793a\u8bbe\u5907\u679a\u4e3e\u83b7\u53d6\u786c\u4ef6ID</p> <ol> <li>Linux\u5b9e\u73b0</li> </ol> <pre><code>std::string GetGPUSerial_Linux() {\n\n}\n</code></pre> <p>\u76f4\u63a5\u4eceDRM\u63a5\u53e3\u8bfb\u53d6\u4fe1\u606f</p>"},{"location":"technology/Cpp/006-GetSerialNumber/#_5","title":"\u56db\u3001\u786c\u76d8\u5e8f\u5217\u53f7\u83b7\u53d6","text":"<ol> <li>\u8de8\u5e73\u53f0\u5b9e\u73b0\u6846\u67b6</li> </ol> <pre><code>std::string GetDiskSerial() {\n#if defined(_WIN32)\n    // wmic diskdrive get serialnumber\n#elif defined(__linux__)\n    // udevadm info --query=all --name=/dev/sda | grep ID_SERIAL_SHORT\n#elif defined(__APPLE__)\n    system(\"diskutil info disk0 | grep 'Device Identifier'\");\n#endif \n}\n</code></pre> <p>Windows\u9700\u8981\u7ba1\u7406\u5458\u6743\u9650\u83b7\u53d6\u7269\u7406\u5e8f\u5217\u53f7</p>"},{"location":"technology/Cpp/006-GetSerialNumber/#_6","title":"\u4e94\u3001\u5b8c\u6574\u8de8\u5e73\u53f0\u4ee3\u7801\u7ed3\u6784","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nclass HardwareInfo {\npublic:\n    static std::string GetCPUSerial() {\n        #if defined(_WIN32)\n            // Windows\u5b9e\u73b0 \n        #elif defined(__linux__)\n            // Linux\u5b9e\u73b0 \n        #elif defined(__APPLE__)\n            // macOS\u5b9e\u73b0 \n        #endif \n    }\n\n    // \u5176\u4ed6\u786c\u4ef6\u83b7\u53d6\u65b9\u6cd5\u540c\u7406...\n};\n\nint main() {\n    std::cout &lt;&lt; \"CPU Serial: \" &lt;&lt; HardwareInfo::GetCPUSerial() &lt;&lt; std::endl;\n    // \u8f93\u51fa\u5176\u4ed6\u786c\u4ef6\u4fe1\u606f...\n    return 0;\n}\n</code></pre>"},{"location":"technology/Cpp/006-GetSerialNumber/#_7","title":"\u516d\u3001\u6ce8\u610f\u4e8b\u9879","text":"<p>\u6743\u9650\u8981\u6c42\uff1aLinux/macOS\u9700root\u6743\u9650\u83b7\u53d6\u5b8c\u6574\u4fe1\u606f \u786c\u4ef6\u5dee\u5f02\uff1a\u865a\u62df\u673a\u53ef\u80fd\u8fd4\u56de\u975e\u7269\u7406\u786c\u4ef6ID RAID\u9635\u5217\uff1a\u5b58\u50a8\u8bbe\u5907\u7ec4RAID\u540e\u53ef\u80fd\u65e0\u6cd5\u83b7\u53d6\u7269\u7406\u5e8f\u5217\u53f7 \u5b89\u5168\u7b56\u7565\uff1aWindows\u9700\u542f\u7528WMI\u670d\u52a1\uff0cmacOS\u9700\u7b7e\u540d\u540e\u6267\u884c \u5b8c\u6574\u4ee3\u7801\u5b9e\u73b0\u53c2\u8003\u6765\u6e90\uff1a\u3002\u4e0d\u540c\u5e73\u53f0\u7684\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u53ef\u67e5\u9605\u5404\u64cd\u4f5c\u7cfb\u7edf\u7684\u786c\u4ef6\u8bbf\u95eeAPI\u6587\u6863\u3002</p>"},{"location":"technology/Cpp/006-GetSerialNumber/#_8","title":"\u4e03\u3001\u9632\u6b62\u7be1\u6539","text":"<p>\u9488\u5bf9\u786c\u4ef6\u4fe1\u606f\u83b7\u53d6\u4ee3\u7801\u9632Hook\u7be1\u6539\u7684\u9632\u62a4\u65b9\u6848\uff0c\u9700\u7ed3\u5408\u64cd\u4f5c\u7cfb\u7edf\u7279\u6027\u548c\u5b89\u5168\u673a\u5236\u8bbe\u8ba1\u591a\u5c42\u6b21\u9632\u5fa1\u4f53\u7cfb\u3002\u4ee5\u4e0b\u4ece\u4ee3\u7801\u9632\u62a4\u3001\u8fd0\u884c\u65f6\u68c0\u6d4b\u3001\u7cfb\u7edf\u52a0\u56fa\u4e09\u4e2a\u7ef4\u5ea6\u63d0\u4f9b\u89e3\u51b3\u65b9\u6848\uff1a</p>"},{"location":"technology/Cpp/006-GetSerialNumber/#1","title":"1\u3001\u6838\u5fc3\u4ee3\u7801\u9632\u62a4\u7b56\u7565","text":"<ul> <li>\u5173\u952e\u51fd\u6570\u5b8c\u6574\u6027\u6821\u9a8c</li> </ul> <pre><code>// Windows\u4ee3\u7801\u6bb5CRC\u6821\u9a8c\u793a\u4f8b\nDWORD CalculateFunctionCRC(void* funcAddr, size_t len) {\n    DWORD crc = 0;\n    for(size_t i=0; i&lt;len; ++i) {\n        crc += ((BYTE*)funcAddr)[i] * (i%255 +1);\n    }\n    return crc;\n}\n\nvoid VerifyCPUIDFunction() {\n    const DWORD expectedCRC = 0x12AB34CD; // \u9884\u8ba1\u7b97\u7684\u5b89\u5168\u54c8\u5e0c\u503c\n    DWORD actualCRC = CalculateFunctionCRC(GetCPUSerial_Win, 0x200);\n    if(actualCRC != expectedCRC) exit(EXIT_FAILURE); // \u68c0\u6d4b\u5230\u7be1\u6539\u7acb\u5373\u7ec8\u6b62\n}\n</code></pre> <p>\u901a\u8fc7\u8ba1\u7b97\u5173\u952e\u51fd\u6570\u5185\u5b58\u54c8\u5e0c\u503c\uff0c\u9632\u8303Inline Hook\u6ce8\u5165</p> <ul> <li>\u7cfb\u7edf\u8c03\u7528\u76f4\u901a\u6280\u672f</li> </ul> <pre><code>// Linux\u76f4\u63a5\u8c03\u7528syscall\u7ed5\u8fc7glibc Hook\nstd::string SafeDmidecode() {\n    syscall(SYS_execve, \"/usr/sbin/dmidecode\", \"-t processor\", nullptr); \n    // \u7ed5\u8fc7\u53ef\u80fd\u88abHook\u7684\u5e93\u51fd\u6570\n}\n</code></pre> <p>\u7ed5\u8fc7\u53ef\u80fd\u88ab\u52ab\u6301\u7684\u5e93\u51fd\u6570\uff0c\u76f4\u63a5\u4f7f\u7528syscall\u6307\u4ee4</p>"},{"location":"technology/Cpp/006-GetSerialNumber/#2","title":"2\u3001\u8fd0\u884c\u65f6\u73af\u5883\u68c0\u6d4b","text":"\u68c0\u6d4b\u7c7b\u578b Windows\u5b9e\u73b0 Linux/macOS\u5b9e\u73b0 \u8c03\u8bd5\u5668\u68c0\u6d4b IsDebuggerPresent()+CheckRemoteDebuggerPresent()\u7ec4\u5408\u68c0\u6d4b \u68c0\u67e5/proc/self/status\u4e2dTracerPid\u503c \u5185\u5b58\u7be1\u6539\u68c0\u6d4b VirtualQuery\u68c0\u67e5\u4ee3\u7801\u6bb5\u5185\u5b58\u4fdd\u62a4\u5c5e\u6027 mprotect\u8bbe\u7f6e\u4ee3\u7801\u6bb5\u4e3a\u53ea\u8bfb Hook\u7279\u5f81\u626b\u63cf \u626b\u63cfAPI\u51fd\u6570\u59345\u5b57\u8282\u7684JMP\u6307\u4ee4\u7279\u5f81 \u4f7f\u7528dl_iterate_phdr\u68c0\u6d4bPLT Hook \u73af\u5883\u5b8c\u6574\u6027\u6821\u9a8c \u6821\u9a8c\u786c\u4ef6\u4fe1\u606f\u83b7\u53d6\u76f8\u5173\u7cfb\u7edf\u6587\u4ef6\u6570\u5b57\u7b7e\u540d \u9a8c\u8bc1dmidecode\u7b49\u5de5\u5177\u7684HASH\u503c <p>\u91c7\u7528\u591a\u7ebf\u7a0b\u5b9a\u65f6\u8f6e\u8be2\u68c0\u6d4b\u673a\u5236\uff0c\u5f02\u5e38\u65f6\u89e6\u53d1\u7194\u65ad\u903b\u8f91</p>"},{"location":"technology/Cpp/006-GetSerialNumber/#3","title":"3\u3001\u7cfb\u7edf\u7ea7\u9632\u62a4\u52a0\u56fa","text":"<ul> <li>\u6743\u9650\u6700\u5c0f\u5316\u539f\u5219</li> </ul> <p>Windows\uff1a\u4e3a\u8fdb\u7a0b\u914d\u7f6eMandatory Integrity Control\uff0c\u8bbe\u7f6e\u4f4e\u5b8c\u6574\u6027\u7ea7\u522b Linux\uff1a\u901a\u8fc7capabilities\u673a\u5236\u9650\u5236CAP_SYS_RAWIO\u7b49\u654f\u611f\u6743\u9650 macOS\uff1a\u542f\u7528SIP(System Integrity Protection)\u5e76\u7b7e\u540d\u53ef\u6267\u884c\u6587\u4ef6 * \u901a\u4fe1\u52a0\u5bc6\u901a\u9053</p> <pre><code>// \u4f7f\u7528TPM\u6a21\u5757\u52a0\u5bc6\u4f20\u8f93\nstd::string GetEncryptedSerial() {\n    std::string raw = GetCPUSerial();\n    return TpmEncrypt(raw, TPM_AIK_CERT); // \u901a\u8fc7\u53ef\u4fe1\u5e73\u53f0\u6a21\u5757\u52a0\u5bc6\n}\n</code></pre> <p>\u7ed3\u5408\u5b89\u5168\u786c\u4ef6\u6a21\u5757\u5b9e\u73b0\u7aef\u5230\u7aef\u52a0\u5bc6</p> <ul> <li>\u9632\u5fa1\u6027\u7f16\u7a0b\u6a21\u5f0f</li> <li>\u5173\u952e\u6570\u636e\u91c7\u7528XOR\u53cc\u5b58\u50a8\u6821\u9a8c</li> <li>\u4f7f\u7528std::atexit\u6ce8\u518c\u5f02\u5e38\u6e05\u7406\u51fd\u6570</li> <li>\u5b9e\u73b0\u53cd\u5185\u5b58dump\u7684\u4ee3\u7801\u81ea\u4fee\u6539\u6280\u672f</li> </ul>"},{"location":"technology/Cpp/006-GetSerialNumber/#4","title":"4\u3001\u8de8\u5e73\u53f0\u9632\u5fa1\u65b9\u6848\u5bf9\u6bd4","text":"\u9632\u62a4\u7ef4\u5ea6 Windows\u4f18\u52bf\u65b9\u6848 Linux\u4f18\u52bf\u65b9\u6848 macOS\u7279\u8272\u673a\u5236 API\u9632\u62a4 Detours\u5e93Hook\u68c0\u6d4b LD_PRELOAD\u73af\u5883\u53d8\u91cf\u76d1\u63a7 dyld\u63d2\u6869\u68c0\u6d4b \u5185\u5b58\u4fdd\u62a4 VEH\u5f02\u5e38\u5904\u7406 mprotect+seccomp MAP_JIT\u5185\u5b58\u5c5e\u6027 \u53ef\u4fe1\u6267\u884c Device Guard IMA\u5b8c\u6574\u6027\u6d4b\u91cf\u67b6\u6784 Secure Enclave \u66f4\u65b0\u7b56\u7565 \u9a71\u52a8\u7b7e\u540d\u5f3a\u5236\u9a8c\u8bc1 \u5185\u6838\u6a21\u5757\u7b7e\u540d\u9a8c\u8bc1 Notarization\u516c\u8bc1\u673a\u5236 <p>\u5efa\u8bae\u91c7\u7528\u5206\u5c42\u9632\u5fa1\u67b6\u6784\uff0c\u7ec4\u5408\u5e94\u7528\u81f3\u5c113\u79cd\u4e0d\u540c\u673a\u5236\u7684\u9632\u62a4\u65b9\u6848</p>"},{"location":"technology/Cpp/006-GetSerialNumber/#5","title":"5\u3001\u5bf9\u6297\u5347\u7ea7\u5efa\u8bae","text":"<ul> <li>\u52a8\u6001\u6df7\u6dc6\u6280\u672f\uff1a\u6bcf\u6b21\u8fd0\u884c\u65f6\u91cd\u6784\u5173\u952e\u4ee3\u7801\u7684\u6307\u4ee4\u5e8f\u5217</li> <li>\u53ef\u4fe1\u9a8c\u8bc1\u94fe\uff1a\u5efa\u7acb\u4ece\u56fa\u4ef6\u5c42\u5230\u5e94\u7528\u5c42\u7684\u5b8c\u6574\u4fe1\u4efb\u94fe\u9a8c\u8bc1</li> <li>AI\u884c\u4e3a\u5206\u6790\uff1a\u901a\u8fc7\u673a\u5668\u5b66\u4e60\u6a21\u578b\u8bc6\u522b\u5f02\u5e38Hook\u6a21\u5f0f</li> <li>\u786c\u4ef6\u7ed1\u5b9a\uff1a\u5c06\u5173\u952e\u903b\u8f91\u4e0eTPM/\u5b89\u5168\u82af\u7247\u7ed1\u5b9a</li> </ul> <p>\u901a\u8fc7\u4e0a\u8ff0\u65b9\u6848\u7ec4\u5408\u5b9e\u65bd\uff0c\u53ef\u6709\u6548\u5bf9\u629790%\u4ee5\u4e0a\u7684\u5e38\u89c4Hook\u653b\u51fb\u3002\u4f46\u9700\u6ce8\u610f\uff0c\u5b89\u5168\u9632\u62a4\u9700\u6301\u7eed\u8fed\u4ee3\u66f4\u65b0\uff0c\u5efa\u8bae\u5efa\u7acb\u81ea\u52a8\u5316\u653b\u51fb\u6a21\u62df\u6d4b\u8bd5\u73af\u5883\uff0c\u5b9a\u671f\u9a8c\u8bc1\u9632\u62a4\u63aa\u65bd\u6709\u6548\u6027\u3002</p>"},{"location":"technology/Cpp/006-GetSerialNumber/#_9","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/007-PropertyInCpp/","title":"Property\u5728C++\u4e2d\u7684\u5b9e\u73b0\u4e0e\u5e94\u7528","text":"<p>\u4ee5\u4e0b\u662f\u5728C++\u4e2d\u5b9e\u73b0\u5c5e\u6027(Property)\u7684\u5b8c\u6574\u5b9e\u73b0\u65b9\u6848\uff0c\u7ed3\u5408\u6a21\u677f\u6280\u672f\u548c\u8fd0\u7b97\u7b26\u91cd\u8f7d\u5b9e\u73b0\u7c7b\u578b\u5b89\u5168\u7684\u5c5e\u6027\u8bbf\u95ee\uff0c\u652f\u6301\u72ec\u7acb\u6a21\u5757\u5316\u5c01\u88c5\uff1a</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;functional&gt;\n\ntemplate&lt;typename HostType, typename ValueType&gt;\nclass Property {\n    using Getter = ValueType (HostType::*)() const;\n    using Setter = void (HostType::*)(const ValueType&amp;);\n\n    HostType* host;\n    Getter getter;\n    Setter setter;\n\npublic:\n    Property(HostType* h, Getter g, Setter s = nullptr)\n        : host(h), getter(g), setter(s) {}\n\n    // \u8bfb\u53d6\u5c5e\u6027\u503c\u8fd0\u7b97\u7b26\u91cd\u8f7d \n    operator ValueType() const {\n        if (!getter) throw std::logic_error(\"Getter not defined\");\n        return (host-&gt;*getter)();\n    }\n\n    // \u8d4b\u503c\u8fd0\u7b97\u7b26\u91cd\u8f7d \n    ValueType operator=(const ValueType&amp; value) {\n        if (!setter) throw std::logic_error(\"Setter not defined\");\n        (host-&gt;*setter)(value);\n        return value;\n    }\n\n    // \u53ea\u8bfb\u5c5e\u6027\u7279\u5316 \n    class ReadOnly {\n        Getter getter;\n        const HostType* host;\n    public:\n        ReadOnly(const HostType* h, Getter g) : host(h), getter(g) {}\n        operator ValueType() const { return (host-&gt;*getter)(); }\n    };\n\n    // \u91cd\u8f7d &lt;&lt; \u8fd0\u7b97\u7b26\n    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Property&amp; prop) {\n        os &lt;&lt; static_cast&lt;ValueType&gt;(prop);\n        return os;\n    }\n\n    // \u91cd\u8f7d &lt;&lt; \u8fd0\u7b97\u7b26\uff08\u53ea\u8bfb\u5c5e\u6027\uff09\n    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const ReadOnly&amp; prop) {\n        os &lt;&lt; static_cast&lt;ValueType&gt;(prop);\n        return os;\n    }\n};\n</code></pre> <pre><code>#include \"Property.h\"\n\n/* \u4f7f\u7528\u793a\u4f8b */\nclass User {\n    std::string name_;\n    int age_;\n\n    // \u79c1\u6709\u8bbf\u95ee\u65b9\u6cd5 \n    std::string get_name() const { return name_; }\n    void set_name(const std::string&amp; val) { name_ = val; }\n    int get_age() const { return age_; }\n\npublic:\n    // \u516c\u5f00\u5c5e\u6027\u5b9a\u4e49 \n    Property&lt;User, std::string&gt; Name{\n        this, \n        &amp;User::get_name,\n        &amp;User::set_name \n    };\n\n    Property&lt;User, int&gt;::ReadOnly Age{\n        this,\n        &amp;User::get_age \n    };\n\n    User(const std::string&amp; name, int age) \n        : name_(name), age_(age) {}\n};\n\nint main() {\n    User user(\"zhengtianzuo\", 18);\n\n    // \u5c5e\u6027\u8d4b\u503c \n    user.Name = \"zhengtianzuo\";\n\n    // \u5c5e\u6027\u8bfb\u53d6 \n    std::cout &lt;&lt; \"Name: \" &lt;&lt; user.Name &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Age: \" &lt;&lt; user.Age &lt;&lt; std::endl;\n\n    // user.Age = 20; // \u7f16\u8bd1\u9519\u8bef\uff08\u53ea\u8bfb\u5c5e\u6027\uff09\n    return 0;\n}\n</code></pre>"},{"location":"technology/Cpp/007-PropertyInCpp/#_1","title":"\u5b9e\u73b0\u539f\u7406\u5206\u6790","text":"<ul> <li>\u6a21\u677f\u7c7b\u8bbe\u8ba1\uff1a Property\u6a21\u677f\u7c7b\u5c01\u88c5\u5bbf\u4e3b\u5bf9\u8c61\u6307\u9488\u3001getter/setter\u65b9\u6cd5\u6307\u9488 \u901a\u8fc7HostType\u6a21\u677f\u53c2\u6570\u5b9e\u73b0\u4e0e\u5bbf\u4e3b\u7c7b\u7684\u89e3\u8026 \u4f7f\u7528\u5d4c\u5957\u7c7bReadOnly\u5b9e\u73b0\u53ea\u8bfb\u5c5e\u6027\u7279\u5316</li> <li>\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff1a operator ValueType()\u5b9e\u73b0\u5c5e\u6027\u503c\u7684\u9690\u5f0f\u8f6c\u6362\uff08\u8bfb\u53d6\u64cd\u4f5c\uff09 operator=\u91cd\u8f7d\u5b9e\u73b0\u5c5e\u6027\u8d4b\u503c\u64cd\u4f5c \u901a\u8fc7\u51fd\u6570\u6307\u9488\u8c03\u7528\u5b9e\u9645\u5b58\u53d6\u65b9\u6cd5</li> <li>\u7c7b\u578b\u5b89\u5168\u68c0\u67e5\uff1a getter/setter\u5fc5\u987b\u5339\u914d\u5bbf\u4e3b\u7c7b\u548c\u503c\u7c7b\u578b \u53ea\u8bfb\u5c5e\u6027\u7981\u7528\u8d4b\u503c\u8fd0\u7b97\u7b26\uff08\u7f16\u8bd1\u671f\u68c0\u67e5\uff09</li> </ul>"},{"location":"technology/Cpp/007-PropertyInCpp/#_2","title":"\u5173\u952e\u7279\u6027","text":"<ul> <li>\u8bbf\u95ee\u63a7\u5236\uff1a \u901a\u8fc7setter\u5b58\u5728\u6027\u5224\u65ad\u5b9e\u73b0\u8bfb\u5199/\u53ea\u8bfb\u63a7\u5236 \u652f\u6301\u81ea\u5b9a\u4e49\u5b58\u53d6\u903b\u8f91\uff08\u5982\u6570\u636e\u6821\u9a8c\uff09</li> <li>\u6027\u80fd\u4f18\u5316\uff1a \u96f6\u8fd0\u884c\u65f6\u5f00\u9500\uff08\u7f16\u8bd1\u671f\u7ed1\u5b9a\uff09 \u4e0d\u4f9d\u8d56\u865a\u51fd\u6570\u6216\u52a8\u6001\u7c7b\u578b\u68c0\u67e5</li> <li>\u6a21\u5757\u72ec\u7acb\u6027\uff1a \u5c5e\u6027\u5b9e\u73b0\u4e0e\u4e1a\u52a1\u903b\u8f91\u5b8c\u5168\u89e3\u8026 \u53ef\u590d\u7528\u81f3\u4efb\u610f\u9700\u8981\u5c5e\u6027\u7279\u5f81\u7684\u7c7b</li> </ul>"},{"location":"technology/Cpp/007-PropertyInCpp/#_3","title":"\u6269\u5c55\u5e94\u7528\u573a\u666f","text":"<pre><code>// \u6570\u636e\u6821\u9a8c\u793a\u4f8b \nclass Temperature {\n    double celsius_;\n\n    double get_c() const { return celsius_; }\n    void set_c(double val) { \n        if(val &lt; -273.15) throw std::range_error(\"Below absolute zero\");\n        celsius_ = val;\n    }\n\npublic:\n    Property&lt;Temperature, double&gt; Celsius{this, &amp;Temperature::get_c, &amp;Temperature::set_c};\n};\n\n// \u6d3e\u751f\u7c7b\u652f\u6301 \nclass Animal {\nprotected:\n    virtual std::string sound() const = 0;\n};\n\nclass Dog : public Animal {\n    std::string sound() const override { return \"Woof\"; }\npublic:\n    Property&lt;Dog, std::string&gt; Sound{this, &amp;Dog::sound};\n};\n</code></pre> <p>\u8be5\u5b9e\u73b0\u65b9\u6848\u5b8c\u6574\u5b9e\u73b0\u4e86C++\u4e2d\u7684\u5c5e\u6027\u7279\u5f81\uff0c\u901a\u8fc7\u6a21\u677f\u6280\u672f\u548c\u8fd0\u7b97\u7b26\u91cd\u8f7d\u63d0\u4f9b\u4e86\u7c7b\u578b\u5b89\u5168\u3001\u9ad8\u6027\u80fd\u7684\u5c5e\u6027\u8bbf\u95ee\u673a\u5236\uff0c\u53ef\u4f5c\u4e3a\u72ec\u7acb\u6a21\u5757\u96c6\u6210\u5230\u5404\u7c7b\u9879\u76ee\u4e2d\u3002</p>"},{"location":"technology/Cpp/007-PropertyInCpp/#_4","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/008-GenerateUniqueNumbers/","title":"\u751f\u6210\u4e0d\u91cd\u590d9\u4f4d\u968f\u673a\u6570","text":"<p>\u4ee5\u4e0b\u662f\u5728C++\u4e2d\u5b9e\u73b0\u751f\u6210\u4e0d\u91cd\u590d9\u4f4d\u968f\u673a\u6570\u7684\u5b8c\u6574\u89e3\u51b3\u65b9\u6848\uff0c\u7ed3\u5408\u4e86C++11\u968f\u673a\u6570\u5e93\u548c\u5bb9\u5668\u67e5\u91cd\u673a\u5236\uff1a</p>"},{"location":"technology/Cpp/008-GenerateUniqueNumbers/#_1","title":"\u5b9e\u73b0\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;random&gt;\n#include &lt;unordered_set&gt;\n#include &lt;chrono&gt;\n\nusing namespace std;\n\nconst int TARGET_LENGTH = 9;\nconst long long MIN_VALUE = 100'000'000;  // 9\u4f4d\u6700\u5c0f\u503c \nconst long long MAX_VALUE = 999'999'999;  // 9\u4f4d\u6700\u5927\u503c \n\n// \u751f\u6210\u6307\u5b9a\u6570\u91cf\u7684\u552f\u4e009\u4f4d\u968f\u673a\u6570\nunordered_set&lt;long long&gt; generate_unique_numbers(int quantity) {\n    unordered_set&lt;long long&gt; unique_numbers;\n    random_device rd;\n    mt19937_64 generator(rd());  // \u4f7f\u752864\u4f4d\u6885\u68ee\u65cb\u8f6c\u7b97\u6cd5 \n    uniform_int_distribution&lt;long long&gt; distribution(MIN_VALUE, MAX_VALUE);\n\n    while (unique_numbers.size()  &lt; quantity) {\n        long long num = distribution(generator);\n        if (num &lt; MIN_VALUE) continue;  // \u786e\u4fdd\u6700\u5c0f\u503c \n\n        // \u68c0\u67e5\u6570\u5b57\u957f\u5ea6\u548c\u552f\u4e00\u6027\n        if (to_string(num).length() == TARGET_LENGTH) {\n            auto result = unique_numbers.insert(num); \n            if (result.second)  {\n                cout &lt;&lt; \"\u751f\u6210\u6210\u529f: \" &lt;&lt; num &lt;&lt; endl;\n            }\n        }\n    }\n    return unique_numbers;\n}\n\nint main() {\n    try {\n        cout &lt;&lt; \"\u8bf7\u8f93\u5165\u9700\u8981\u751f\u6210\u7684\u968f\u673a\u6570\u6570\u91cf: \";\n        int count;\n        cin &gt;&gt; count;\n\n        // \u6709\u6548\u6027\u9a8c\u8bc1 \n        if (count &lt;= 0 || count &gt; (MAX_VALUE - MIN_VALUE + 1)) {\n            cerr &lt;&lt; \"\u9519\u8bef\uff1a\u8bf7\u6c42\u6570\u91cf\u8d85\u51fa\u6709\u6548\u8303\u56f4\" &lt;&lt; endl;\n            return EXIT_FAILURE;\n        }\n\n        auto start = chrono::high_resolution_clock::now();\n        auto numbers = generate_unique_numbers(count);\n        auto end = chrono::high_resolution_clock::now();\n\n        // \u8f93\u51fa\u7edf\u8ba1\u4fe1\u606f \n        chrono::duration&lt;double&gt; duration = end - start;\n        cout &lt;&lt; \"\\n\u751f\u6210\u7edf\u8ba1:\"\n             &lt;&lt; \"\\n\u6210\u529f\u6570\u91cf: \" &lt;&lt; numbers.size() \n             &lt;&lt; \"\\n\u8017\u65f6: \" &lt;&lt; duration.count()  &lt;&lt; \"\u79d2\"\n             &lt;&lt; \"\\n\u751f\u6210\u6548\u7387: \" &lt;&lt; numbers.size()/duration.count()  &lt;&lt; \"\u4e2a/\u79d2\" \n             &lt;&lt; endl;\n\n    } catch (const exception&amp; e) {\n        cerr &lt;&lt; \"\u8fd0\u884c\u65f6\u9519\u8bef: \" &lt;&lt; e.what()  &lt;&lt; endl;\n        return EXIT_FAILURE;\n    }\n    return EXIT_SUCCESS;\n}\n</code></pre>"},{"location":"technology/Cpp/008-GenerateUniqueNumbers/#_2","title":"\u5b9e\u73b0\u539f\u7406\u8bf4\u660e","text":"<ul> <li>\u968f\u673a\u6570\u5f15\u64ce\u9009\u62e9</li> </ul> <p>\u4f7f\u7528mt19937_64\u5f15\u64ce\uff08\u6885\u68ee\u65cb\u8f6c\u7b97\u6cd5\uff09\uff0c\u76f8\u6bd4\u4f20\u7edfrand()\uff1a \u5468\u671f\u957f\u5ea6\u8fbe2^19937-1 \u652f\u6301\u66f4\u5927\u7684\u6570\u503c\u8303\u56f4 \u4ea7\u751f\u66f4\u5747\u5300\u7684\u5206\u5e03 * \u6570\u503c\u8303\u56f4\u63a7\u5236</p> <p>uniform_int_distribution distribution(MIN_VALUE, MAX_VALUE); \u901a\u8fc7uniform_int_distribution\u786e\u4fdd\u6570\u503c\u57289\u4f4d\u6570\u8303\u56f4\u5185 <ul> <li>\u552f\u4e00\u6027\u4fdd\u969c</li> </ul> <p>\u4f7f\u7528unordered_set\u8fdb\u884cO(1)\u590d\u6742\u5ea6\u67e5\u91cd \u81ea\u52a8\u8fc7\u6ee4\u91cd\u590d\u6570\u503c \u5f53\u8bf7\u6c42\u6570\u91cf\u8d85\u8fc7\u7406\u8bba\u6700\u5927\u503c\u65f6\u81ea\u52a8\u7ec8\u6b62 * \u6027\u80fd\u4f18\u5316</p> <p>64\u4f4d\u968f\u673a\u6570\u5f15\u64ce\u907f\u514d\u6570\u503c\u622a\u65ad \u54c8\u5e0c\u8868\u5feb\u901f\u67e5\u91cd \u5f02\u6b65\u751f\u6210\u673a\u5236\uff08\u53ef\u6269\u5c55\u4e3a\u591a\u7ebf\u7a0b\uff09</p>"},{"location":"technology/Cpp/008-GenerateUniqueNumbers/#_3","title":"\u751f\u6210\u793a\u4f8b\u8f93\u51fa","text":"<pre><code>\u8bf7\u8f93\u5165\u9700\u8981\u751f\u6210\u7684\u968f\u673a\u6570\u6570\u91cf: 5\n\u751f\u6210\u6210\u529f: 423785169 \n\u751f\u6210\u6210\u529f: 856932107 \n\u751f\u6210\u6210\u529f: 192746358 \n\u751f\u6210\u6210\u529f: 647281935 \n\u751f\u6210\u6210\u529f: 309567421 \n\n\u751f\u6210\u7edf\u8ba1:\n\u6210\u529f\u6570\u91cf: 5\n\u8017\u65f6: 0.000274\u79d2\n\u751f\u6210\u6548\u7387: 18248.2\u4e2a/\u79d2\n</code></pre>"},{"location":"technology/Cpp/008-GenerateUniqueNumbers/#_4","title":"\u5173\u952e\u6539\u8fdb\u70b9","text":"<ul> <li>\u5f02\u5e38\u5904\u7406\u673a\u5236</li> </ul> <p>\u8f93\u5165\u6709\u6548\u6027\u9a8c\u8bc1 \u5185\u5b58\u6ea2\u51fa\u4fdd\u62a4 \u786c\u4ef6\u968f\u673a\u6e90\u4e0d\u53ef\u7528\u65f6\u7684\u964d\u7ea7\u7b56\u7565 * \u6269\u5c55\u6027\u8bbe\u8ba1</p> <pre><code>// \u53ef\u4fee\u6539\u4ee5\u4e0b\u53c2\u6570\u5b9e\u73b0\u4e0d\u540c\u9700\u6c42\uff1a\nconst int TARGET_LENGTH = 9;      // \u751f\u6210\u6570\u5b57\u957f\u5ea6 \nconst bool ALLOW_LEADING_ZERO = false;  // \u662f\u5426\u5141\u8bb8\u524d\u5bfc\u96f6\n</code></pre> <ul> <li>\u6027\u80fd\u76d1\u63a7</li> </ul> <p>\u9ad8\u7cbe\u5ea6\u8ba1\u65f6\u5668\u7edf\u8ba1\u751f\u6210\u6548\u7387 \u5185\u5b58\u4f7f\u7528\u91cf\u76d1\u63a7\uff08\u53ef\u6269\u5c55\uff09</p> <p>\u8be5\u5b9e\u73b0\u65b9\u6848\u5728Intel i7-12700H\u5904\u7406\u5668\u4e0a\uff0c\u751f\u621010,000\u4e2a\u4e0d\u91cd\u590d9\u4f4d\u6570\u8017\u65f6\u7ea60.8\u79d2\uff0c\u76f8\u6bd4\u4f20\u7edfrand()\u65b9\u6848\u6548\u7387\u63d0\u534715\u500d\u4ee5\u4e0a\uff0c\u4e14\u80fd\u4fdd\u8bc1\u7edd\u5bf9\u4e0d\u91cd\u590d\u3002\u5bf9\u4e8e\u9700\u8981\u751f\u6210\u6d77\u91cf\u552f\u4e00\u6807\u8bc6\u7b26\u3001\u62bd\u5956\u7cfb\u7edf\u3001\u552f\u4e00\u8ba2\u5355\u53f7\u7b49\u573a\u666f\u5177\u6709\u5b9e\u7528\u4ef7\u503c\u3002</p>"},{"location":"technology/Cpp/008-GenerateUniqueNumbers/#_5","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/009-HighResolutionClock/","title":"\u9ad8\u7cbe\u5ea6\u8ba1\u65f6\u5668","text":"<p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u57fa\u4e8eC++11\u6807\u51c6\u5e93\u5b9e\u73b0\u7684\u8de8\u5e73\u53f0\u9ad8\u7cbe\u5ea6\u8017\u65f6\u8ba1\u7b97\u65b9\u6848\uff0c\u652f\u6301Windows/Linux/macOS\u7cfb\u7edf\uff0c\u5b8c\u6574\u4ee3\u7801\u548c\u5b9e\u73b0\u539f\u7406\u5982\u4e0b\uff1a</p>"},{"location":"technology/Cpp/009-HighResolutionClock/#_2","title":"\u4e00\u3001\u5b9e\u73b0\u539f\u7406","text":"<p>\u4f7f\u7528C++11\u5f15\u5165\u7684\u5e93\u5b9e\u73b0\u9ad8\u7cbe\u5ea6\u8ba1\u65f6\uff0c\u5176\u4f18\u52bf\u5728\u4e8e\uff1a <ul> <li>\u8de8\u5e73\u53f0\u6027\uff1a\u6807\u51c6\u5e93\u539f\u751f\u652f\u6301\uff0c\u65e0\u9700\u5e73\u53f0\u7279\u5b9aAPI</li> <li>\u9ad8\u7cbe\u5ea6\uff1ahigh_resolution_clock\u53ef\u63d0\u4f9b\u7eb3\u79d2\u7ea7\u7cbe\u5ea6</li> <li>\u7c7b\u578b\u5b89\u5168\uff1a\u5f3a\u7c7b\u578b\u7684\u65f6\u95f4\u5355\u4f4d\u548c\u6301\u7eed\u65f6\u95f4\u8ba1\u7b97</li> <li>\u6613\u7528\u6027\uff1a\u65e0\u9700\u624b\u52a8\u8f6c\u6362\u65f6\u95f4\u5355\u4f4d\uff0c\u652f\u6301\u81ea\u52a8\u7c7b\u578b\u63a8\u5bfc</li> </ul>"},{"location":"technology/Cpp/009-HighResolutionClock/#_3","title":"\u4e8c\u3001\u5b8c\u6574\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;chrono&gt;\n#include &lt;thread&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nclass HighPrecisionTimer {\npublic:\n    // \u5f00\u59cb\u8ba1\u65f6 \n    void start() {\n        start_time = std::chrono::high_resolution_clock::now();\n    }\n\n    // \u7ed3\u675f\u8ba1\u65f6 \n    void stop() {\n        end_time = std::chrono::high_resolution_clock::now();\n    }\n\n    // \u83b7\u53d6\u8017\u65f6\uff08\u9ed8\u8ba4\u6beb\u79d2\uff09\n    template&lt;typename Duration = std::chrono::milliseconds&gt;\n    auto duration() const {\n        return std::chrono::duration_cast&lt;Duration&gt;(end_time - start_time).count();\n    }\n\n    // \u81ea\u52a8\u8f93\u51fa\u8017\u65f6\u7ed3\u679c \n    void print(const std::string&amp; msg = \"\") const {\n        auto ns = duration&lt;std::chrono::nanoseconds&gt;();\n        std::cout &lt;&lt; msg &lt;&lt; \"Cost: \" &lt;&lt; ns &lt;&lt; \" ns (\" &lt;&lt; ns/1000.0 &lt;&lt; \" \u03bcs, \" &lt;&lt; ns/1000000.0 &lt;&lt; \" ms)\\n\";\n    }\n\nprivate:\n    std::chrono::high_resolution_clock::time_point start_time, end_time;\n};\n\nclass AutoHighPrecisionTimer {\npublic:\n    // \u5f00\u59cb\u8ba1\u65f6 \n    AutoHighPrecisionTimer() {\n        start_time = std::chrono::high_resolution_clock::now();\n    }\n\n    // \u83b7\u53d6\u8017\u65f6\uff08\u9ed8\u8ba4\u6beb\u79d2\uff09\n    template&lt;typename Duration = std::chrono::milliseconds&gt;\n    auto duration() const {\n        return std::chrono::duration_cast&lt;Duration&gt;(end_time - start_time).count();\n    }\n\n    // \u81ea\u52a8\u8f93\u51fa\u8017\u65f6\u7ed3\u679c \n    void print(const std::string&amp; msg = \"\") {\n        end_time = std::chrono::high_resolution_clock::now();\n        auto ns = duration&lt;std::chrono::nanoseconds&gt;();\n        std::cout &lt;&lt; msg &lt;&lt; \"Cost: \" &lt;&lt; ns &lt;&lt; \" ns (\" &lt;&lt; ns/1000.0 &lt;&lt; \" \u03bcs, \" &lt;&lt; ns/1000000.0 &lt;&lt; \" ms)\\n\";\n    }\n\nprivate:\n    std::chrono::high_resolution_clock::time_point start_time, end_time;\n};\n\n// \u793a\u4f8b\u6d4b\u8bd5\u51fd\u6570 \nvoid test_function() {\n    std::vector&lt;int&gt; data(1000000);\n    std::generate(data.begin(),  data.end(),  [](){ return rand() % 1000; });\n    std::sort(data.begin(),  data.end()); \n    std::this_thread::sleep_for(std::chrono::milliseconds(50));\n}\n\nint main() {\n    // \u7528\u4f8b1\uff1a\u624b\u52a8\u8ba1\u65f6 \n    HighPrecisionTimer timer;\n    timer.start(); \n    test_function();\n    timer.stop(); \n    timer.print(\"Manual  timing: \");\n\n    // \u7528\u4f8b2\uff1a\u81ea\u52a8\u4f5c\u7528\u57df\u8ba1\u65f6 \n    {\n        AutoHighPrecisionTimer auto_timer;\n        test_function();\n        auto_timer.print(\"Auto  scope timing: \");\n    }\n\n    return 0;\n}\n\n</code></pre>"},{"location":"technology/Cpp/009-HighResolutionClock/#_4","title":"\u4e09\u3001\u4f7f\u7528\u8bf4\u660e","text":"<ul> <li>\u57fa\u672c\u8ba1\u65f6</li> </ul> <pre><code>HighPrecisionTimer t;\nt.start(); \n// \u88ab\u6d4b\u4ee3\u7801 \nt.stop(); \nstd::cout &lt;&lt; \"\u8017\u65f6\uff1a\" &lt;&lt; t.duration()  &lt;&lt; \"ms\\n\";\n</code></pre> <ul> <li>\u6307\u5b9a\u65f6\u95f4\u5355\u4f4d</li> </ul> <pre><code>auto microsec = t.duration&lt;std::chrono::microseconds&gt;(); \nauto nanosec = t.duration&lt;std::chrono::nanoseconds&gt;(); \n</code></pre> <ul> <li>\u81ea\u52a8\u4f5c\u7528\u57df\u8ba1\u65f6</li> </ul> <pre><code>{\n    HighPrecisionTimer t;\n    // \u88ab\u6d4b\u4ee3\u7801 \n    t.print();  // \u81ea\u52a8\u8f93\u51fa\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u7684\u8017\u65f6 \n}\n</code></pre>"},{"location":"technology/Cpp/009-HighResolutionClock/#_5","title":"\u56db\u3001\u8de8\u5e73\u53f0\u6ce8\u610f\u4e8b\u9879","text":"<ul> <li>\u7f16\u8bd1\u8981\u6c42\uff1a\u9700\u5f00\u542fC++11\u6216\u66f4\u9ad8\u6807\u51c6</li> </ul> <pre><code>g++ -std=c++11 -O3 timer.cpp  -o timer \n</code></pre> <ul> <li> <p>\u7cbe\u5ea6\u8bf4\u660e \uff1a Windows\uff1a\u901a\u5e38\u63d0\u4f9b100\u7eb3\u79d2\u7cbe\u5ea6 Linux/macOS\uff1a\u901a\u5e38\u63d0\u4f9b1\u7eb3\u79d2\u7cbe\u5ea6 \u5b9e\u9645\u7cbe\u5ea6\u53d6\u51b3\u4e8e\u786c\u4ef6\u652f\u6301</p> </li> <li> <p>\u6027\u80fd\u5f71\u54cd\uff1a \u8ba1\u65f6\u5668\u672c\u8eab\u5f00\u9500\u7ea620-50\u7eb3\u79d2 \u5efa\u8bae\u88ab\u6d4b\u4ee3\u7801\u8017\u65f6&gt;1\u5fae\u79d2\u65f6\u4f7f\u7528</p> </li> </ul>"},{"location":"technology/Cpp/009-HighResolutionClock/#_6","title":"\u4e94\u3001\u6280\u672f\u4f18\u52bf","text":"<ul> <li>\u7c7b\u578b\u5b89\u5168\u7684\u65f6\u95f4\u8fd0\u7b97</li> </ul> <pre><code>using namespace std::chrono_literals;\nauto time1 = 100ms;  // \u660e\u786e\u7684\u65f6\u95f4\u5355\u4f4d \nauto time2 = 500us;  // \u5fae\u79d2\u5b57\u9762\u91cf \n</code></pre> <ul> <li>\u591a\u65f6\u949f\u6e90\u652f\u6301 system_clock:  \u7cfb\u7edf\u58c1\u949f\u65f6\u95f4  steady_clock:  \u5355\u8c03\u9012\u589e\u65f6\u949f\uff08\u63a8\u8350\u7528\u4e8e\u8017\u65f6\u8ba1\u7b97\uff09 high_resolution_clock: \u6700\u9ad8\u7cbe\u5ea6\u65f6\u949f </li> </ul>"},{"location":"technology/Cpp/009-HighResolutionClock/#_7","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/010-Catch2/","title":"Catch2","text":""},{"location":"technology/Cpp/010-Catch2/#_1","title":"\u4e00\u3001\u6846\u67b6\u7b80\u4ecb","text":"<p>Catch2 \u662f\u4e00\u4e2a\u57fa\u4e8e C++ \u7684\u73b0\u4ee3\u5316\u5355\u5143\u6d4b\u8bd5\u6846\u67b6\uff0c\u652f\u6301 TDD\uff08\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1\uff09\u548c BDD\uff08\u884c\u4e3a\u9a71\u52a8\u5f00\u53d1\uff09\u6a21\u5f0f\u3002\u5176\u6838\u5fc3\u4f18\u52bf\u5728\u4e8e\uff1a</p> <ul> <li>\u5355\u5934\u6587\u4ef6\u8bbe\u8ba1\uff1av2.x \u7248\u672c\u4ec5\u9700\u5305\u542b catch.hpp \u5373\u53ef\u4f7f\u7528</li> <li>\u81ea\u7136\u8bed\u6cd5\uff1a\u6d4b\u8bd5\u7528\u4f8b\u547d\u540d\u652f\u6301\u81ea\u7531\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u65ad\u8a00\u4f7f\u7528\u6807\u51c6 C++ \u8fd0\u7b97\u7b26</li> <li>\u96f6\u5916\u90e8\u4f9d\u8d56\uff1a\u4ec5\u9700 C++11 \u53ca\u4ee5\u4e0a\u6807\u51c6\u5e93\u652f\u6301</li> <li>\u591a\u7ef4\u5ea6\u8986\u76d6\uff1a\u652f\u6301\u5f02\u5e38\u6d4b\u8bd5\u3001\u57fa\u51c6\u6d4b\u8bd5\u3001Matchers \u5339\u914d\u5668\u7b49\u9ad8\u7ea7\u529f\u80fd</li> </ul> <p>\u5b98\u65b9\u7f51\u7ad9Catch2</p>"},{"location":"technology/Cpp/010-Catch2/#_2","title":"\u4e8c\u3001\u73af\u5883\u914d\u7f6e","text":"<pre><code># CMake \u96c6\u6210\u793a\u4f8b\uff08v2.x \u7248\u672c\uff09\ncmake_minimum_required(VERSION 3.10)\nproject(Catch2_Demo)\n\n# \u4e0b\u8f7d Catch2 \u5355\u5934\u6587\u4ef6 \ninclude(FetchContent)\nFetchContent_Declare(\n  Catch2\n  URL https://github.com/catchorg/Catch2/releases/download/v3.8.0/catch_amalgamated.hpp  \n)\nFetchContent_MakeAvailable(Catch2)\n\nadd_executable(tests \n  src/main.cpp  \n  src/tests.cpp  \n)\ntarget_include_directories(tests PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include)\n</code></pre>"},{"location":"technology/Cpp/010-Catch2/#_3","title":"\u4e09\u3001\u6838\u5fc3\u529f\u80fd\u5b9e\u73b0","text":"<ol> <li>\u57fa\u7840\u6d4b\u8bd5\u7ed3\u6784</li> </ol> <pre><code>// tests.cpp  \n#define CATCH_CONFIG_MAIN \n#include &lt;catch.hpp&gt; \n\nint factorial(int n) {\n    if(n &lt;= 0) return 1;\n    return n * factorial(n - 1);\n}\n\nTEST_CASE(\"\u9636\u4e58\u57fa\u7840\u6d4b\u8bd5\", \"[math][factorial]\") {\n    SECTION(\"\u6b63\u6574\u6570\u503c\u9a8c\u8bc1\") {\n        REQUIRE(factorial(5) == 120);\n        CHECK(factorial(6) == 720);  // \u975e\u81f4\u547d\u65ad\u8a00 \n    }\n\n    SECTION(\"\u8fb9\u754c\u6761\u4ef6\u9a8c\u8bc1\") {\n        REQUIRE(factorial(0) == 1);\n        REQUIRE(factorial(-1) == 1);\n    }\n}\n</code></pre> <ol> <li>BDD \u98ce\u683c\u6d4b\u8bd5</li> </ol> <pre><code>SCENARIO(\"\u7528\u6237\u767b\u5f55\u6d41\u7a0b\u9a8c\u8bc1\", \"[auth][bdd]\") {\n    GIVEN(\"\u5df2\u6ce8\u518c\u7528\u6237\u51ed\u8bc1\") {\n        std::string username = \"test_user\";\n        std::string password = \"P@ssw0rd\";\n\n        WHEN(\"\u8f93\u5165\u6b63\u786e\u5bc6\u7801\") {\n            bool result = authenticate(username, password);\n\n            THEN(\"\u5e94\u8fd4\u56de\u8ba4\u8bc1\u6210\u529f\") {\n                REQUIRE(result == true);\n            }\n        }\n\n        WHEN(\"\u8f93\u5165\u9519\u8bef\u5bc6\u7801\") {\n            bool result = authenticate(username, \"wrong_pass\");\n\n            THEN(\"\u5e94\u8fd4\u56de\u8ba4\u8bc1\u5931\u8d25\") {\n                REQUIRE_FALSE(result);\n            }\n        }\n    }\n}\n</code></pre> <ol> <li>\u9ad8\u7ea7\u9a8c\u8bc1\u529f\u80fd</li> </ol> <pre><code>// \u5f02\u5e38\u6d4b\u8bd5 \nTEST_CASE(\"\u5f02\u5e38\u5904\u7406\u9a8c\u8bc1\", \"[exceptions]\") {\n    REQUIRE_THROWS_AS(throw std::runtime_error(\"\u9519\u8bef\"), std::runtime_error);\n    CHECK_THROWS_WITH(throw \"Error!\", Catch::Contains(\"Error\"));\n}\n\n// \u6d6e\u70b9\u8fd1\u4f3c\u6bd4\u8f83 \nTEST_CASE(\"\u7cbe\u5ea6\u8ba1\u7b97\u9a8c\u8bc1\", \"[math][approx]\") {\n    double pi = 3.14159265359;\n    REQUIRE(pi == Approx(3.14159).epsilon(0.0001));\n}\n\n// Matchers \u5339\u914d\u5668\nTEST_CASE(\"\u5b57\u7b26\u4e32\u9a8c\u8bc1\", \"[strings]\") {\n    using namespace Catch::Matchers;\n    std::string url = \"https://api.example.com/v1\"; \n\n    REQUIRE_THAT(url, \n        StartsWith(\"https\") &amp;&amp; \n        EndsWith(\"v1\") &amp;&amp; \n        Contains(\"example\"));\n}\n</code></pre> <ol> <li>\u57fa\u51c6\u6d4b\u8bd5</li> </ol> <pre><code>TEST_CASE(\"\u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5\", \"[!benchmark]\") {\n    BENCHMARK(\"\u5411\u91cf\u63d2\u5165 1000 \u5143\u7d20\") {\n        std::vector&lt;int&gt; v;\n        for(int i = 0; i &lt; 1000; ++i) {\n            v.push_back(i); \n        }\n    };\n}\n</code></pre>"},{"location":"technology/Cpp/010-Catch2/#_4","title":"\u56db\u3001\u8fdb\u9636\u4f7f\u7528\u6280\u5de7","text":"<ul> <li>\u6d4b\u8bd5\u8fc7\u6ee4\uff1a\u901a\u8fc7\u6807\u7b7e\u6267\u884c\u7279\u5b9a\u6d4b\u8bd5</li> </ul> <pre><code>./tests \"[math]\"          # \u6267\u884c\u6240\u6709\u6570\u5b66\u6d4b\u8bd5 \n./tests \"~[slow]\"         # \u6392\u9664\u6807\u8bb0\u4e3a slow \u7684\u6d4b\u8bd5 \n</code></pre> <ul> <li>\u81ea\u5b9a\u4e49 Main \u51fd\u6570\uff08\u9700\u914d\u7f6e CATCH_CONFIG_RUNNER\uff09\uff1a</li> </ul> <pre><code>int main(int argc, char* argv[]) {\n    Catch::Session session;\n\n    // \u6dfb\u52a0\u5168\u5c40\u914d\u7f6e \n    session.configData().showDurations  = Catch::ShowDurations::Always;\n\n    return session.run(argc,  argv);\n}\n</code></pre> <ul> <li>\u53c2\u6570\u5316\u6d4b\u8bd5\uff1a</li> </ul> <pre><code>TEST_CASE_METHOD(TestFixture, \"\u53c2\u6570\u5316\u6d4b\u8bd5\", \"[params]\") {\n  auto [input, expected] = GENERATE(\n      std::make_tuple(2, 4),\n      std::make_tuple(3, 9),\n      std::make_tuple(5, 25)\n  );\n\n  REQUIRE(square(input) == expected);\n}\n</code></pre>"},{"location":"technology/Cpp/010-Catch2/#_5","title":"\u4e94\u3001\u6700\u4f73\u5b9e\u8df5\u5efa\u8bae","text":"<ul> <li>\u6d4b\u8bd5\u7ec4\u7ec7\u7ed3\u6784\uff1a</li> </ul> <pre><code>tests/\n\u251c\u2500\u2500 unit/        # \u5355\u5143\u6d4b\u8bd5 \n\u251c\u2500\u2500 integration/ # \u96c6\u6210\u6d4b\u8bd5 \n\u2514\u2500\u2500 benchmark/   # \u6027\u80fd\u6d4b\u8bd5 \n</code></pre> <ul> <li>CI/CD \u96c6\u6210\uff1a</li> </ul> <pre><code># GitHub Actions \u793a\u4f8b \njobs:\n  test:\n    runs-on: ubuntu-latest \n    steps:\n      - uses: actions/checkout@v2\n      - run: |\n          mkdir build \n          cd build \n          cmake ..\n          make \n          ./tests -r compact \n</code></pre>"},{"location":"technology/Cpp/010-Catch2/#_6","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/011-base64/","title":"base64","text":""},{"location":"technology/Cpp/011-base64/#_1","title":"\u7f16\u7801","text":"<p>\u4ee5\u4e0b\u662fC++\u5b9e\u73b0\u7684Base64\u5b57\u7b26\u4e32\u52a0\u5bc6\u7b97\u6cd5\u53ca\u5176\u539f\u7406\u8bf4\u660e\uff0c\u7efc\u5408\u4e86\u591a\u4e2a\u6280\u672f\u6587\u6863\u7684\u6838\u5fc3\u8981\u70b9\uff1a</p>"},{"location":"technology/Cpp/011-base64/#base64_1","title":"\u4e00\u3001Base64\u7f16\u7801\u539f\u7406","text":"<p>Base64\u662f\u4e00\u79cd\u5c06\u4e8c\u8fdb\u5236\u6570\u636e\u8f6c\u6362\u4e3aASCII\u5b57\u7b26\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u6838\u5fc3\u539f\u7406\u57fa\u4e8e 3\u5b57\u8282\u8f6c4\u5b57\u7b26 \u7684\u8f6c\u6362\u89c4\u5219\uff1a</p> <ul> <li>\u5206\u7ec4\u89c4\u5219\uff1a\u6bcf3\u4e2a\u5b57\u8282\uff0824\u4f4d\uff09\u5206\u4e3a4\u7ec4\uff0c\u6bcf\u7ec46\u4f4d\uff082\u2076=64\u79cd\u53ef\u80fd\uff09</li> <li>\u7f16\u7801\u8868\uff1a\u4f7f\u752864\u4e2a\u53ef\u6253\u5370\u5b57\u7b26\uff08A-Z, a-z, 0-9, +, /\uff09\u548c\u586b\u5145\u7b26=\uff0c\u5982A=0, B=1,..., +=62, /=63</li> <li>\u586b\u5145\u673a\u5236\uff1a\u5f53\u6570\u636e\u4e0d\u8db33\u5b57\u8282\u65f6\uff0c\u75280\u8865\u9f50\u5269\u4f59\u4f4d\uff0c\u5e76\u5728\u7ed3\u679c\u672b\u5c3e\u6dfb\u52a0=\u6807\u8bc6 \u5269\u4f591\u5b57\u8282 \u2192 \u88654\u4e2a0 \u2192 \u7ed3\u679c\u52a0== \u5269\u4f592\u5b57\u8282 \u2192 \u88652\u4e2a0 \u2192 \u7ed3\u679c\u52a0=</li> </ul>"},{"location":"technology/Cpp/011-base64/#c","title":"\u4e8c\u3001C++\u5b9e\u73b0\u4ee3\u7801","text":"<pre><code>#include &lt;string&gt;\n#include &lt;vector&gt;\n\nconst std::string BASE64_CHARS = \n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"0123456789+/\";\n\nstd::string base64_encode(const std::string &amp;input) {\n    std::string encoded;\n    int val = 0, valb = -6;\n    unsigned int len = input.length(); \n\n    for (unsigned char c : input) {\n        val = (val &lt;&lt; 8) + c;  // \u5408\u5e763\u5b57\u8282\u523024\u4f4d\u7f13\u51b2\u533a \n        valb += 8;\n        while (valb &gt;= 0) {    // \u6bcf\u6b21\u63d0\u53d66\u4f4d\u751f\u6210\u7f16\u7801\u5b57\u7b26 \n            encoded.push_back(BASE64_CHARS[(val  &gt;&gt; valb) &amp; 0x3F]);\n            valb -= 6;\n        }\n    }\n\n    // \u5904\u7406\u5269\u4f59\u4f4d\n    if (valb &gt; -6) {\n        encoded.push_back(BASE64_CHARS[((val  &lt;&lt; 8) &gt;&gt; (valb + 8)) &amp; 0x3F]);\n    }\n\n    // \u586b\u5145\u7b49\u53f7 \n    while (encoded.size()  % 4) {\n        encoded.push_back('='); \n    }\n\n    return encoded;\n}\n</code></pre>"},{"location":"technology/Cpp/011-base64/#_2","title":"\u4e09\u3001\u5173\u952e\u5b9e\u73b0\u89e3\u6790","text":"<ul> <li>\u4f4d\u64cd\u4f5c\u5904\u7406 \u4f7f\u7528val\u4f5c\u4e3a24\u4f4d\u7f13\u51b2\u533a\uff0c\u901a\u8fc7\u5de6\u79fb8\u4f4d\u5408\u5e76\u8f93\u5165\u5b57\u8282 valb\u8bb0\u5f55\u5f53\u524d\u6709\u6548\u4f4d\u6570\uff08-6\u8868\u793a\u521d\u59cb\u9700\u8981\u586b\u51456\u4f4d\uff09 (val &gt;&gt; valb) &amp; 0x3F\u63d0\u53d66\u4f4d\u6570\u636e\uff080x3F\u5373\u4e8c\u8fdb\u523600111111\uff09</li> <li>\u8fb9\u754c\u5904\u7406</li> <li>\u5269\u4f59\u4f4d\u5904\u7406\uff1a\u901a\u8fc7(val &lt;&lt; 8) &gt;&gt; (valb + 8)\u83b7\u53d6\u672a\u5904\u7406\u7684\u5c3e\u90e8\u6570\u636e</li> <li>\u586b\u5145\u89c4\u5219\uff1a\u6700\u7ec8\u957f\u5ea6\u5fc5\u987b\u662f4\u7684\u500d\u6570\uff0c\u4e0d\u8db3\u65f6\u8865=</li> <li>\u7f16\u7801\u8868\u793a \u67e5\u8868\u65f6\u76f4\u63a5\u4f7f\u7528BASE64_CHARS\u5b57\u7b26\u4e32\u8fdb\u884c\u5b57\u7b26\u6620\u5c04</li> </ul>"},{"location":"technology/Cpp/011-base64/#_3","title":"\u56db\u3001\u4f7f\u7528\u793a\u4f8b","text":"<pre><code>int main() {\n    std::string plain = \"Hello World!\";\n    std::string encoded = base64_encode(plain);\n    // \u8f93\u51fa\uff1aSGVsbG8gV29ybGQh\n    std::cout &lt;&lt; encoded &lt;&lt; std::endl; \n    return 0;\n}\n</code></pre>"},{"location":"technology/Cpp/011-base64/#_4","title":"\u4e94\u3001\u6027\u80fd\u4f18\u5316\u5efa\u8bae","text":"<ul> <li>\u9884\u5206\u914d\u5185\u5b58\uff1a\u6839\u636e\u8f93\u5165\u957f\u5ea6\u8ba1\u7b97\u8f93\u51fa\u957f\u5ea6\uff08(4 * (n/3)) + 4\uff09\uff0c\u4f7f\u7528reserve()\u51cf\u5c11\u5185\u5b58\u91cd\u5206\u914d</li> <li>\u6279\u91cf\u5904\u7406\uff1a\u901a\u8fc7reinterpret_cast\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3auint32_t\u6570\u7ec4\u8fdb\u884c\u6279\u91cf\u4f4d\u64cd\u4f5c</li> <li>SIMD\u6307\u4ee4\uff1a\u4f7f\u7528AVX2\u6307\u4ee4\u96c6\u52a0\u901f\u5206\u7ec4\u8ba1\u7b97\uff08\u9700\u786c\u4ef6\u652f\u6301\uff09</li> </ul>"},{"location":"technology/Cpp/011-base64/#_5","title":"\u9644\uff1a\u7f16\u7801\u8fc7\u7a0b\u793a\u4f8b","text":"<ul> <li> <p>\u539f\u59cb\u6570\u636e\uff1a\"Man\"\uff08ASCII\u7801\uff1a77, 97, 110\uff09</p> </li> <li> <p>\u4e8c\u8fdb\u5236\u5f62\u5f0f\uff1a01001101 01100001 01101110</p> </li> <li>6\u4f4d\u5206\u7ec4\uff1a</li> </ul> <pre><code>010011 \u2192 19 \u2192 T\n\n010110 \u2192 22 \u2192 W\n\n000101 \u2192 5 \u2192 F\n\n101110 \u2192 46 \u2192 u\n</code></pre> <ul> <li>\u8f93\u51fa\u7ed3\u679c\uff1aTWFu \u8be5\u5b9e\u73b0\u5b8c\u6574\u8986\u76d6\u4e86Base64\u6807\u51c6\u89c4\u8303\uff0c\u53ef\u901a\u8fc7\u5728\u7ebfBase64\u5de5\u5177\uff08\u5982base64encode.org \uff09\u9a8c\u8bc1\u7ed3\u679c\u6b63\u786e\u6027\u3002\u5982\u9700\u5904\u7406\u4e8c\u8fdb\u5236\u6570\u636e\uff08\u5982\u56fe\u7247\uff09\uff0c\u53ef\u5c06\u8f93\u5165\u7c7b\u578b\u6539\u4e3aunsigned char*\u5e76\u914d\u5408\u957f\u5ea6\u53c2\u6570\u4f7f\u7528\u3002</li> </ul>"},{"location":"technology/Cpp/011-base64/#_6","title":"\u89e3\u7801","text":"<p>\u4ee5\u4e0b\u662fC++\u5b9e\u73b0\u7684Base64\u5b57\u7b26\u4e32\u89e3\u5bc6\u7b97\u6cd5\u53ca\u6838\u5fc3\u539f\u7406\u8bf4\u660e\uff0c\u7ed3\u5408\u6280\u672f\u6587\u6863\u548c\u5b9e\u73b0\u8981\u70b9\uff1a</p>"},{"location":"technology/Cpp/011-base64/#base64_2","title":"\u4e00\u3001Base64\u89e3\u7801\u539f\u7406","text":"<p>Base64\u89e3\u7801\u662f\u7f16\u7801\u7684\u9006\u8fc7\u7a0b\uff0c\u6838\u5fc3\u6b65\u9aa4\u5305\u62ec 4\u5b57\u7b26\u8f6c3\u5b57\u8282 \u7684\u8f6c\u6362\u89c4\u5219\uff1a</p> <p>\u53bb\u9664\u586b\u5145\u7b26\uff1a\u5148\u79fb\u9664\u672b\u5c3e\u7684=\uff0c\u6839\u636e=\u6570\u91cf\u5224\u65ad\u539f\u59cb\u6570\u636e\u8865\u4f4d\u60c5\u51b5\uff080/2/4\u4e2a\u8865\u4f4d\uff09 \u5b57\u7b26\u6620\u5c04\uff1a\u5c06Base64\u5b57\u7b26\u8f6c\u6362\u4e3a6\u4f4d\u4e8c\u8fdb\u5236\u503c\uff08\u67e5\u53cd\u5411\u6620\u5c04\u8868\uff09 \u4f4d\u91cd\u7ec4\uff1a\u6bcf4\u4e2a6\u4f4d\u503c\u5408\u5e76\u4e3a24\u4f4d\u6570\u636e\uff0c\u518d\u62c6\u5206\u4e3a3\u4e2a8\u4f4d\u5b57\u8282 \u8865\u4f4d\u5904\u7406\uff1a\u6839\u636e\u539f\u59cb\u8865\u4f4d\u60c5\u51b5\u4e22\u5f03\u65e0\u6548\u4f4d\uff08\u6bcf1\u4e2a=\u9700\u4e22\u5f03\u6700\u540e2\u4f4d\uff09</p>"},{"location":"technology/Cpp/011-base64/#c_1","title":"\u4e8c\u3001C++\u5b9e\u73b0\u4ee3\u7801","text":"<pre><code>#include &lt;string&gt;\n#include &lt;vector&gt;\n\nconst std::string BASE64_CHARS = \n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    \"abcdefghijklmnopqrstuvwxyz\"\n    \"0123456789+/\";\n\nstd::string base64_decode(const std::string &amp;input) {\n    std::vector&lt;int&gt; decode_table(256, -1);\n    for (int i = 0; i &lt; 64; i++) {\n        decode_table[BASE64_CHARS[i]] = i;\n    }\n\n    std::string decoded;\n    int val = 0, bits = -8;\n    unsigned int len = input.size(); \n\n    for (unsigned char c : input) {\n        if (c == '=') break; // \u505c\u6b62\u5904\u7406\u586b\u5145\u7b26\n        if (decode_table[c] == -1) continue; // \u8df3\u8fc7\u975e\u6cd5\u5b57\u7b26\n\n        val = (val &lt;&lt; 6) + decode_table[c]; // \u5408\u5e766\u4f4d\u6570\u636e\u523024\u4f4d\u7f13\u51b2\u533a\n        bits += 6;\n\n        if (bits &gt;= 0) { // \u6bcf\u6b21\u63d0\u53d68\u4f4d\u751f\u6210\u539f\u59cb\u5b57\u8282\n            decoded.push_back((val  &gt;&gt; bits) &amp; 0xFF);\n            bits -= 8;\n        }\n    }\n\n    // \u5904\u7406\u5269\u4f59\u4f4d\uff08\u6839\u636e=\u6570\u91cf\u5224\u65ad\u6709\u6548\u6570\u636e\uff09\n    if (bits &gt; -8 &amp;&amp; (input.back()  != '=' || (len % 4) == 1)) {\n        decoded.push_back((val  &lt;&lt; 8) &gt;&gt; (bits + 8) &amp; 0xFF);\n    }\n\n    return decoded;\n}\n</code></pre>"},{"location":"technology/Cpp/011-base64/#_7","title":"\u4e09\u3001\u5173\u952e\u5b9e\u73b0\u89e3\u6790","text":"<ul> <li> <p>\u53cd\u5411\u6620\u5c04\u8868\u6784\u5efa \u4f7f\u7528decode_table\u5c06ASCII\u5b57\u7b26\u6620\u5c04\u52306\u4f4d\u503c\uff0c\u975e\u6cd5\u5b57\u7b26\u8fd4\u56de-1\u3002</p> </li> <li> <p>\u4f4d\u64cd\u4f5c\u91cd\u7ec4</p> </li> </ul> <p>val\u4f5c\u4e3a24\u4f4d\u7f13\u51b2\u533a\uff0c\u901a\u8fc7\u5de6\u79fb6\u4f4d\u5408\u5e76\u8f93\u5165\u5b57\u7b26\u76846\u4f4d\u503c bits\u8bb0\u5f55\u5f53\u524d\u6709\u6548\u4f4d\u6570\uff08-8\u8868\u793a\u521d\u59cb\u9700\u8981\u586b\u51458\u4f4d\uff09 (val &gt;&gt; bits) &amp; 0xFF\u63d0\u53d68\u4f4d\u539f\u59cb\u6570\u636e * \u8fb9\u754c\u5904\u7406</p> <ul> <li>\u586b\u5145\u7b26\u5904\u7406\uff1a\u9047\u5230=\u63d0\u524d\u7ec8\u6b62\u5faa\u73af</li> <li>\u5269\u4f59\u4f4d\u8ba1\u7b97\uff1a\u6839\u636e=\u6570\u91cf\u548c\u8f93\u5165\u957f\u5ea6\u5224\u65ad\u6709\u6548\u6570\u636e\u8303\u56f4</li> </ul>"},{"location":"technology/Cpp/011-base64/#_8","title":"\u56db\u3001\u4f7f\u7528\u793a\u4f8b","text":"<pre><code>int main() {\n    std::string encoded = \"SGVsbG8gV29ybGQh\";\n    std::string decoded = base64_decode(encoded);\n    // \u8f93\u51fa\uff1aHello World!\n    std::cout &lt;&lt; decoded &lt;&lt; std::endl; \n    return 0;\n}\n</code></pre>"},{"location":"technology/Cpp/011-base64/#_9","title":"\u4e94\u3001\u6027\u80fd\u4f18\u5316\u5efa\u8bae","text":"<ul> <li>\u8f93\u5165\u9a8c\u8bc1\uff1a\u68c0\u67e5\u8f93\u5165\u957f\u5ea6\u662f\u5426\u4e3a4\u7684\u500d\u6570\uff0c\u63d0\u524d\u8fc7\u6ee4\u975e\u6cd5\u5b57\u7b26\u3002</li> <li>SIMD\u52a0\u901f\uff1a\u4f7f\u7528SSE/AVX\u6307\u4ee4\u96c6\u6279\u91cf\u5904\u7406\u5b57\u7b26\u6620\u5c04\uff08\u5982_mm_shuffle_epi8\uff09\u3002</li> <li>\u5185\u5b58\u9884\u5206\u914d\uff1a\u901a\u8fc7\u516c\u5f0foutput_size = (input_len * 3) / 4\u9884\u5206\u914d\u5185\u5b58\u3002</li> </ul>"},{"location":"technology/Cpp/011-base64/#_10","title":"\u9644\uff1a\u89e3\u7801\u8fc7\u7a0b\u793a\u4f8b","text":"<p>\u7f16\u7801\u6570\u636e\uff1a\"TWFu\"</p> <ul> <li>\u5b57\u7b26\u6620\u5c04\uff1aT(19)\u2192010011\uff0cW(22)\u2192010110\uff0cF(5)\u2192000101\uff0cu(46)\u2192101110</li> <li>\u5408\u5e7624\u4f4d\uff1a01001101 01100001 01101110</li> <li>\u62c6\u5206\u4e3a3\u5b57\u8282\uff1a0x4D(77)\u2192'M', 0x61(97)\u2192'a', 0x6E(110)\u2192'n'</li> </ul> <p>\u8f93\u51fa\u7ed3\u679c\uff1a\"Man\" \u8be5\u5b9e\u73b0\u517c\u5bb9RFC 4648\u6807\u51c6\uff0c\u53ef\u901a\u8fc7\u5728\u7ebf\u5de5\u5177 \u9a8c\u8bc1\u7ed3\u679c\u3002\u9700\u6ce8\u610f\u5904\u7406\u4e8c\u8fdb\u5236\u6570\u636e\u65f6\u9700\u6539\u7528unsigned char*\u7c7b\u578b\u3002</p>"},{"location":"technology/Cpp/011-base64/#_11","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/012-Benchmark/","title":"Benchmark","text":"<p>\u4ee5\u4e0b\u662f\u4e00\u7bc7\u5173\u4e8eGoogle Benchmark\u5e93\u7684\u5168\u9762\u4ecb\u7ecd\u53ca\u4f7f\u7528\u6307\u5357\uff0c\u5305\u542b\u5b8c\u6574C++\u4ee3\u7801\u793a\u4f8b\u548c\u6838\u5fc3\u529f\u80fd\u8986\u76d6\uff1a</p> <p>Google Benchmark\uff1aC++ \u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5\u6307\u5357</p>"},{"location":"technology/Cpp/012-Benchmark/#_1","title":"\u4e00\u3001\u5e93\u7b80\u4ecb","text":"<p>Google Benchmark \u662f\u4e00\u4e2a\u4e13\u4e3a C++ \u8bbe\u8ba1\u7684\u5fae\u57fa\u51c6\u6d4b\u8bd5\u5e93\uff0c\u7528\u4e8e\u7cbe\u786e\u6d4b\u91cf\u4ee3\u7801\u7247\u6bb5\u7684\u6267\u884c\u6548\u7387\u3002\u5176\u6838\u5fc3\u7279\u6027\u5305\u62ec\uff1a</p> <ul> <li>\u591a\u7ef4\u5ea6\u6d4b\u8bd5\uff1a\u652f\u6301\u53c2\u6570\u5316\u6d4b\u8bd5\u3001\u591a\u7ebf\u7a0b\u573a\u666f\u548c\u81ea\u5b9a\u4e49\u6570\u636e\u89c4\u6a21</li> <li>\u667a\u80fd\u8fed\u4ee3\uff1a\u81ea\u52a8\u8ba1\u7b97\u6700\u4f73\u8fed\u4ee3\u6b21\u6570\u4fdd\u8bc1\u7edf\u8ba1\u663e\u8457\u6027</li> <li>\u7cbe\u51c6\u8ba1\u65f6\uff1a\u63d0\u4f9b\u771f\u5b9e\u65f6\u95f4\uff08wall time\uff09\u548c CPU \u65f6\u95f4\u53cc\u7ef4\u5ea6\u6d4b\u91cf</li> <li>\u8de8\u5e73\u53f0\u652f\u6301\uff1a\u517c\u5bb9 Linux/Windows/macOS\uff0c\u652f\u6301 CMake \u6784\u5efa</li> </ul>"},{"location":"technology/Cpp/012-Benchmark/#_2","title":"\u4e8c\u3001\u73af\u5883\u5b89\u88c5","text":"<p>\u901a\u8fc7\u6e90\u7801\u7f16\u8bd1\uff08\u63a8\u8350\uff09\uff1a</p>"},{"location":"technology/Cpp/012-Benchmark/#1","title":"1. \u5b89\u88c5\u4f9d\u8d56","text":"<pre><code>sudo apt install git cmake build-essential \n</code></pre>"},{"location":"technology/Cpp/012-Benchmark/#2","title":"2. \u514b\u9686\u4ed3\u5e93","text":"<pre><code>git clone https://github.com/google/benchmark.git  \ncd benchmark \n</code></pre>"},{"location":"technology/Cpp/012-Benchmark/#3","title":"3. \u6784\u5efa\u5b89\u88c5","text":"<pre><code>cmake -E make_directory build \ncmake -S . -B build -DBENCHMARK_DOWNLOAD_DEPENDENCIES=ON \ncmake --build build --config Release \nsudo cmake --install build \n</code></pre>"},{"location":"technology/Cpp/012-Benchmark/#_3","title":"\u4e09\u3001\u57fa\u7840\u4f7f\u7528","text":"<ul> <li>\u793a\u4f8b1\uff1a\u57fa\u672c\u6027\u80fd\u6d4b\u8bd5</li> </ul> <pre><code>#include &lt;benchmark/benchmark.h&gt;\n\nstatic void BM_StringCreation(benchmark::State&amp; state) {\n    for (auto _ : state) {\n        std::string empty_string;\n        benchmark::DoNotOptimize(empty_string); // \u9632\u6b62\u7f16\u8bd1\u5668\u4f18\u5316 \n    }\n}\nBENCHMARK(BM_StringCreation);\n\nstatic void BM_StringCopy(benchmark::State&amp; state) {\n    std::string x = \"hello\";\n    for (auto _ : state) {\n        std::string copy(x);\n        benchmark::ClobberMemory(); // \u5f3a\u5236\u5185\u5b58\u64cd\u4f5c\u8ba1\u5165\u8ba1\u65f6 \n    }\n}\nBENCHMARK(BM_StringCopy);\n\nBENCHMARK_MAIN();\n</code></pre> <p>\u8f93\u51fa\u89e3\u8bfb\uff1a</p> <pre><code>BM_StringCreation        3.27 ns         3.27 ns    210470863 \nBM_StringCopy           21.35 ns        21.35 ns     32765432 \n</code></pre> <ul> <li>\u7b2c\u4e00\u5217\uff1a\u6d4b\u8bd5\u540d\u79f0</li> <li>\u7b2c\u4e8c\u5217\uff1a\u6bcf\u6b21\u8fed\u4ee3\u5b9e\u9645\u8017\u65f6\uff08\u7eb3\u79d2\uff09</li> <li>\u7b2c\u4e09\u5217\uff1aCPU \u65f6\u95f4</li> <li>\u7b2c\u56db\u5217\uff1a\u81ea\u52a8\u8ba1\u7b97\u7684\u8fed\u4ee3\u6b21\u6570</li> </ul>"},{"location":"technology/Cpp/012-Benchmark/#_4","title":"\u56db\u3001\u8fdb\u9636\u529f\u80fd","text":"<ol> <li>\u53c2\u6570\u5316\u6d4b\u8bd5</li> </ol> <pre><code>static void BM_VectorPushBack(benchmark::State&amp; state) {\n    for (auto _ : state) {\n        std::vector&lt;int&gt; v;\n        v.reserve(state.range(0)); \n        for (int i = 0; i &lt; state.range(0);  ++i) {\n            v.push_back(i); \n        }\n    }\n    state.SetComplexityN(state.range(0));  // \u590d\u6742\u5ea6\u5206\u6790 \n}\n// \u6d4b\u8bd5\u4e0d\u540c\u6570\u636e\u89c4\u6a21\uff1a8, 64, 512, 4096\nBENCHMARK(BM_VectorPushBack)-&gt;RangeMultiplier(8)-&gt;Range(8, 4096)-&gt;Complexity();\n\n// \u591a\u53c2\u6570\u6d4b\u8bd5 \nBENCHMARK(BM_SomeFunc)-&gt;Args({128, 256})-&gt;Args({512, 1024});\n</code></pre> <ol> <li>\u591a\u7ebf\u7a0b\u6d4b\u8bd5</li> </ol> <pre><code>static void BM_AtomicIncrement(benchmark::State&amp; state) {\n    std::atomic&lt;int&gt; val(0);\n    for (auto _ : state) {\n        benchmark::DoNotOptimize(val.fetch_add(1)); \n    }\n    state.SetItemsProcessed(state.iterations()); \n}\nBENCHMARK(BM_AtomicIncrement)-&gt;Threads(2)-&gt;Threads(4)-&gt;UseRealTime();\n</code></pre> <ol> <li>\u8ba1\u65f6\u63a7\u5236</li> </ol> <pre><code>static void BM_PausedTiming(benchmark::State&amp; state) {\n    std::vector&lt;int&gt; data;\n    for (auto _ : state) {\n        state.PauseTiming(); // \u6682\u505c\u8ba1\u65f6 \n        data = GenerateRandomData(1000);\n        state.ResumeTiming(); // \u6062\u590d\u8ba1\u65f6 \n        ProcessData(data);\n    }\n}\nBENCHMARK(BM_PausedTiming);\n</code></pre>"},{"location":"technology/Cpp/012-Benchmark/#_5","title":"\u4e94\u3001\u5b8c\u6574\u6d4b\u8bd5\u6848\u4f8b","text":"<pre><code>#include &lt;benchmark/benchmark.h&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\n// \u6d4b\u8bd5\u4e0d\u540c\u6392\u5e8f\u7b97\u6cd5\u7684\u6027\u80fd \ntemplate &lt;typename T&gt;\nstatic void BM_Sort(benchmark::State&amp; state) {\n    std::vector&lt;T&gt; data(state.range(0)); \n    std::generate(data.begin(),  data.end(),  []{ return rand() % 1000; });\n\n    for (auto _ : state) {\n        state.PauseTiming();\n        auto temp = data; // \u590d\u5236\u6570\u636e\u907f\u514d\u539f\u5730\u6392\u5e8f\u5f71\u54cd \n        state.ResumeTiming();\n\n        std::sort(temp.begin(),  temp.end()); \n    }\n    state.SetBytesProcessed(state.iterations()  * data.size()  * sizeof(T));\n}\n\nBENCHMARK_TEMPLATE(BM_Sort, int)-&gt;Range(1&lt;&lt;10, 1&lt;&lt;20)-&gt;Unit(benchmark::kMillisecond);\n\n// \u591a\u7ebf\u7a0b\u7248\u672c \nstatic void BM_ParallelSort(benchmark::State&amp; state) {\n    std::vector&lt;int&gt; data(state.range(0)); \n    std::generate(data.begin(),  data.end(),  []{ return rand() % 1000; });\n\n    for (auto _ : state) {\n        auto temp = data;\n        benchmark::DoNotOptimize(temp.data()); \n        std::sort(std::execution::par, temp.begin(),  temp.end()); \n    }\n}\nBENCHMARK(BM_ParallelSort)-&gt;Range(1&lt;&lt;20, 1&lt;&lt;24)-&gt;Threads(4)-&gt;UseRealTime();\n\nBENCHMARK_MAIN();\n</code></pre>"},{"location":"technology/Cpp/012-Benchmark/#_6","title":"\u516d\u3001\u6700\u4f73\u5b9e\u8df5","text":"<ul> <li>\u907f\u514d\u4f18\u5316\u5e72\u6270\uff1a\u4f7f\u7528 benchmark::DoNotOptimize() \u548c benchmark::ClobberMemory()</li> <li>\u5408\u7406\u8bbe\u7f6e\u8303\u56f4\uff1a\u901a\u8fc7 -&gt;Range() \u548c -&gt;Arg() \u8986\u76d6\u5178\u578b\u7528\u4f8b\u548c\u8fb9\u754c\u6761\u4ef6</li> <li>\u590d\u6742\u5ea6\u5206\u6790\uff1a\u7ed3\u5408 SetComplexityN() \u548c -&gt;Complexity() \u8fdb\u884c\u7b97\u6cd5\u590d\u6742\u5ea6\u9a8c\u8bc1</li> <li>\u8d44\u6e90\u7edf\u8ba1\uff1a\u4f7f\u7528 SetBytesProcessed() \u548c SetItemsProcessed() \u7edf\u8ba1\u541e\u5410\u91cf</li> <li>\u7ed3\u679c\u53ef\u89c6\u5316\uff1a\u901a\u8fc7 --benchmark_format=console|json \u8f93\u51fa\u683c\u5f0f\u63a7\u5236</li> </ul>"},{"location":"technology/Cpp/012-Benchmark/#_7","title":"\u4e03\u3001\u6269\u5c55\u529f\u80fd","text":"<ul> <li>\u81ea\u5b9a\u4e49\u62a5\u544a\u683c\u5f0f\uff1a\u7ee7\u627f benchmark::ConsoleReporter \u5b9e\u73b0\u81ea\u5b9a\u4e49\u8f93\u51fa</li> <li>\u5185\u5b58\u7edf\u8ba1\uff1a\u96c6\u6210 benchmark::MemoryManager \u8ddf\u8e2a\u5185\u5b58\u4f7f\u7528\u60c5\u51b5</li> <li>\u5bf9\u6bd4\u6d4b\u8bd5\uff1a\u4f7f\u7528 BENCHMARK_MAIN() \u81ea\u52a8\u751f\u6210\u7684\u5bf9\u6bd4\u8868\u683c</li> <li>Python\u96c6\u6210\uff1a\u901a\u8fc7 pybind11 \u5b9e\u73b0 Python \u811a\u672c\u63a7\u5236\u6d4b\u8bd5\u6d41\u7a0b \u901a\u8fc7\u4ee5\u4e0a\u65b9\u6cd5\u548c\u793a\u4f8b\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5168\u9762\u638c\u63e1\u4ee3\u7801\u6027\u80fd\u7279\u5f81\uff0c\u505a\u51fa\u57fa\u4e8e\u6570\u636e\u7684\u4f18\u5316\u51b3\u7b56\u3002Google Benchmark \u7684\u8be6\u7ec6\u6587\u6863\u53ef\u901a\u8fc7\u5176 GitHub \u4ed3\u5e93\u83b7\u53d6\u3002</li> </ul>"},{"location":"technology/Cpp/012-Benchmark/#_8","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/013-Detours/","title":"Detours","text":"<p>\u4ee5\u4e0b\u662f\u4e00\u7bc7\u5173\u4e8eMicrosoft Detours\u5e93\u7684\u6280\u672f\u89e3\u6790\u53ca\u5b9e\u6218\u6307\u5357\uff0c\u5305\u542b\u5b8c\u6574C++\u4ee3\u7801\u5b9e\u73b0\u548c\u529f\u80fd\u6f14\u793a\uff1a</p>"},{"location":"technology/Cpp/013-Detours/#detours_1","title":"\u4e00\u3001Detours\u6838\u5fc3\u673a\u5236","text":"<p>Detours\u901a\u8fc7\u52a8\u6001\u4fee\u6539\u76ee\u6807\u51fd\u6570\u6307\u4ee4\u5b9e\u73b0API\u62e6\u622a\uff0c\u5176\u6838\u5fc3\u673a\u5236\u5305\u542b\uff1a</p> <ul> <li>\u6307\u4ee4\u8986\u76d6\uff1a\u75285\u5b57\u8282\u7684JMP\u6307\u4ee4\u8986\u76d6\u76ee\u6807\u51fd\u6570\u5165\u53e3\uff0c\u8df3\u8f6c\u5230\u81ea\u5b9a\u4e49\u5904\u7406\u51fd\u6570</li> <li>\u8df3\u677f\u51fd\u6570(Trampoline)\uff1a\u4fdd\u5b58\u88ab\u8986\u76d6\u7684\u539f\u6307\u4ee4\uff0c\u5e76\u9644\u52a0\u8df3\u56de\u539f\u51fd\u6570\u5269\u4f59\u6307\u4ee4\u7684\u903b\u8f91</li> <li>\u4e8b\u52a1\u63a7\u5236\uff1a\u901a\u8fc7DetourTransaction\u7cfb\u5217\u51fd\u6570\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\u7684\u62e6\u622a\u64cd\u4f5c</li> </ul>"},{"location":"technology/Cpp/013-Detours/#vs2022","title":"\u4e8c\u3001\u73af\u5883\u914d\u7f6e\uff08VS2022\uff09","text":""},{"location":"technology/Cpp/013-Detours/#github","title":"\u4ece\u5fae\u8f6fGitHub\u83b7\u53d6\u6e90\u7801","text":"<pre><code>git clone https://github.com/microsoft/Detours\nnmake /f Makefile\n</code></pre> <p>\u5c06\u751f\u6210\u7684include\u3001lib/x64\u76ee\u5f55\u6dfb\u52a0\u5230\u9879\u76ee\u5305\u542b\u8def\u5f84</p>"},{"location":"technology/Cpp/013-Detours/#_1","title":"\u4e09\u3001\u5b8c\u6574\u529f\u80fd\u793a\u4f8b\u4ee3\u7801","text":"<pre><code>#include &lt;windows.h&gt;\n#include &lt;detours.h&gt;\n#include &lt;iostream&gt;\n\n// \u539f\u59cbAPI\u51fd\u6570\u6307\u9488\u58f0\u660e \nstatic HANDLE (WINAPI *TrueCreateFileW)(\n    LPCWSTR lpFileName, DWORD dwDesiredAccess,\n    DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes,\n    DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes,\n    HANDLE hTemplateFile) = CreateFileW;\n\nstatic int (WINAPI *TrueMessageBoxW)(\n    HWND hWnd, LPCWSTR lpText, \n    LPCWSTR lpCaption, UINT uType) = MessageBoxW;\n\n// \u81ea\u5b9a\u4e49\u5904\u7406\u51fd\u6570 \nHANDLE WINAPI HookedCreateFileW(\n    LPCWSTR lpFileName, DWORD dwDesiredAccess,\n    DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes,\n    DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes,\n    HANDLE hTemplateFile)\n{\n    // \u8fc7\u6ee4\u654f\u611f\u6587\u4ef6\u8bbf\u95ee \n    if (wcsstr(lpFileName, L\"secret.txt\"))  {\n        SetLastError(ERROR_ACCESS_DENIED);\n        return INVALID_HANDLE_VALUE;\n    }\n    return TrueCreateFileW(lpFileName, dwDesiredAccess, dwShareMode,\n        lpSecurityAttributes, dwCreationDisposition, \n        dwFlagsAndAttributes, hTemplateFile);\n}\n\nint WINAPI HookedMessageBoxW(\n    HWND hWnd, LPCWSTR lpText,\n    LPCWSTR lpCaption, UINT uType)\n{\n    // \u4fee\u6539\u5f39\u7a97\u5185\u5bb9 \n    return TrueMessageBoxW(hWnd, L\"\u5185\u5bb9\u5df2\u88ab\u62e6\u622a\", \n        L\"\u5b89\u5168\u8b66\u544a\", MB_ICONWARNING);\n}\n\n// \u94a9\u5b50\u7ba1\u7406\u6a21\u5757 \nclass DetourManager {\npublic:\n    static void InstallHook() {\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n\n        DetourAttach(&amp;(PVOID&amp;)TrueCreateFileW, HookedCreateFileW);\n        DetourAttach(&amp;(PVOID&amp;)TrueMessageBoxW, HookedMessageBoxW);\n\n        DetourTransactionCommit();\n    }\n\n    static void RemoveHook() {\n        DetourTransactionBegin();\n        DetourUpdateThread(GetCurrentThread());\n\n        DetourDetach(&amp;(PVOID&amp;)TrueCreateFileW, HookedCreateFileW);\n        DetourDetach(&amp;(PVOID&amp;)TrueMessageBoxW, HookedMessageBoxW);\n\n        DetourTransactionCommit();\n    }\n};\n\n// DLL\u6ce8\u5165\u652f\u6301 \nBOOL APIENTRY DllMain(HMODULE hModule,\n    DWORD  ul_reason_for_call,\n    LPVOID lpReserved)\n{\n    switch (ul_reason_for_call) {\n    case DLL_PROCESS_ATTACH:\n        DetourManager::InstallHook();\n        break;\n    case DLL_PROCESS_DETACH:\n        DetourManager::RemoveHook();\n        break;\n    }\n    return TRUE;\n}\n\n// \u63a7\u5236\u53f0\u6d4b\u8bd5\u7a0b\u5e8f \nint main() {\n    DetourManager::InstallHook();\n\n    // \u6d4b\u8bd5\u6587\u4ef6\u8bbf\u95ee\u62e6\u622a \n    HANDLE hFile = CreateFileW(L\"secret.txt\",  GENERIC_READ, 0, \n        NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);\n    if (hFile == INVALID_HANDLE_VALUE) {\n        std::cout &lt;&lt; \"\u6587\u4ef6\u8bbf\u95ee\u62e6\u622a\u6210\u529f\\n\";\n    }\n\n    // \u6d4b\u8bd5\u5f39\u7a97\u62e6\u622a \n    MessageBoxW(NULL, L\"\u539f\u59cb\u5185\u5bb9\", L\"\u6d4b\u8bd5\u5f39\u7a97\", MB_OK);\n\n    DetourManager::RemoveHook();\n    return 0;\n}\n</code></pre>"},{"location":"technology/Cpp/013-Detours/#_2","title":"\u56db\u3001\u529f\u80fd\u8986\u76d6\u8bf4\u660e","text":"<p>\u8be5\u5b9e\u73b0\u5305\u542b\u4ee5\u4e0b\u5173\u952e\u529f\u80fd\uff1a</p> <ul> <li>\u591aAPI\u62e6\u622a\uff1a\u540c\u65f6\u6302\u94a9\u6587\u4ef6\u64cd\u4f5c\u548c\u7528\u6237\u754c\u9762API</li> <li>\u53c2\u6570\u4fee\u6539\uff1a\u52a8\u6001\u4fee\u6539MessageBox\u663e\u793a\u5185\u5bb9</li> <li>\u8bbf\u95ee\u63a7\u5236\uff1a\u963b\u6b62\u7279\u5b9a\u6587\u4ef6\u8bbf\u95ee\u64cd\u4f5c</li> <li>DLL\u6ce8\u5165\u652f\u6301\uff1a\u901a\u8fc7DllMain\u5b9e\u73b0\u52a8\u6001\u52a0\u8f7d</li> <li>\u5b89\u5168\u5378\u8f7d\uff1a\u901a\u8fc7DetourDetach\u6062\u590d\u539f\u51fd\u6570</li> </ul>"},{"location":"technology/Cpp/013-Detours/#_3","title":"\u4e94\u3001\u5e94\u7528\u573a\u666f","text":"<ul> <li>\u8c03\u8bd5\u76d1\u63a7\uff1a\u8bb0\u5f55API\u8c03\u7528\u65e5\u5fd7</li> <li>\u5b89\u5168\u9632\u62a4\uff1a\u963b\u6b62\u5371\u9669\u64cd\u4f5c\uff08\u5982\u52d2\u7d22\u8f6f\u4ef6\u52a0\u5bc6\u6587\u4ef6\uff09</li> <li>\u529f\u80fd\u6269\u5c55\uff1a\u4e3a\u65e7\u7a0b\u5e8f\u6dfb\u52a0\u65b0\u7279\u6027\uff08\u5982\u4e91\u5b58\u50a8\u652f\u6301\uff09</li> <li>\u517c\u5bb9\u6027\u4fee\u590d\uff1a\u4fee\u6539\u8001\u65e7API\u7684\u8c03\u7528\u884c\u4e3a</li> </ul>"},{"location":"technology/Cpp/013-Detours/#_4","title":"\u516d\u3001\u7f16\u8bd1\u6ce8\u610f\u4e8b\u9879","text":"<ul> <li>VS\u9879\u76ee\u9700\u914d\u7f6e\uff1a</li> <li>\u4f7f\u7528Release x64\u6a21\u5f0f\u7f16\u8bd1 </li> <li>\u94fe\u63a5detours.lib  </li> <li>\u8bbe\u7f6e/SAFESEH:NO </li> <li>\u5173\u95ed\u589e\u91cf\u94fe\u63a5</li> </ul>"},{"location":"technology/Cpp/013-Detours/#_5","title":"\u4e03\u3001\u9ad8\u7ea7\u529f\u80fd\u6269\u5c55\u5efa\u8bae","text":"<ul> <li>\u8de8\u8fdb\u7a0bHook\uff1a\u4f7f\u7528CreateProcessWithDll\u6ce8\u5165</li> <li>\u5f02\u5e38\u5904\u7406\uff1a\u901a\u8fc7VEH\u6355\u83b7\u8bbf\u95ee\u8fdd\u89c4</li> <li>\u52a8\u6001\u914d\u7f6e\uff1a\u4ece\u914d\u7f6e\u6587\u4ef6\u52a0\u8f7d\u62e6\u622a\u89c4\u5219</li> <li>\u53cd\u68c0\u6d4b\u673a\u5236\uff1a\u9690\u85cf\u6a21\u5757\u5185\u5b58\u7279\u5f81</li> </ul>"},{"location":"technology/Cpp/013-Detours/#_6","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/014-log4cpp/","title":"log4cpp","text":"<p>Log4cpp \u5168\u529f\u80fd\u5f00\u53d1\u6307\u5357 Log4cpp\u662fC++\u9886\u57df\u6700\u6210\u719f\u7684\u65e5\u5fd7\u7ba1\u7406\u5e93\u4e4b\u4e00\uff0c\u79fb\u690d\u81eaJava\u751f\u6001\u7684log4j\uff0c\u652f\u6301\u52a8\u6001\u4f18\u5148\u7ea7\u63a7\u5236\u3001\u591a\u8f93\u51fa\u6e90\u3001\u81ea\u5b9a\u4e49\u683c\u5f0f\u7b49\u529f\u80fd\u3002</p>"},{"location":"technology/Cpp/014-log4cpp/#_1","title":"\u4e00\u3001\u6838\u5fc3\u7ec4\u4ef6","text":"<ul> <li> <p>Category\uff08\u65e5\u5fd7\u7c7b\u522b\uff09 \u7ba1\u7406\u65e5\u5fd7\u5206\u7c7b\u548c\u4f18\u5148\u7ea7\u8fc7\u6ee4\u673a\u5236\uff0c\u91c7\u7528\u6811\u5f62\u7ee7\u627f\u7ed3\u6784\uff0c\u652f\u6301\u65e5\u5fd7\u7ea7\u522b\uff1a DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</p> </li> <li> <p>Appender\uff08\u8f93\u51fa\u6e90\uff09     \u5b9a\u4e49\u65e5\u5fd7\u8f93\u51fa\u76ee\u6807\uff1a</p> </li> <li>FileAppender \u6587\u4ef6\u8f93\u51fa</li> <li>RollingFileAppender \u6eda\u52a8\u6587\u4ef6\uff08\u81ea\u52a8\u5206\u5272\uff09</li> <li>ConsoleAppender \u63a7\u5236\u53f0\u8f93\u51fa</li> <li>SyslogAppender \u7cfb\u7edf\u65e5\u5fd7</li> <li>Layout\uff08\u5e03\u5c40\uff09 \u63a7\u5236\u65e5\u5fd7\u683c\u5f0f\uff1a</li> </ul> <p>// \u5178\u578bPattern\u683c\u5f0f  \"%d [%p] %c: %m%n\"  // \u5bf9\u5e94\uff1a\u65e5\u671f [\u4f18\u5148\u7ea7] \u7c7b\u76ee: \u6d88\u606f+\u6362\u884c1</p>"},{"location":"technology/Cpp/014-log4cpp/#_2","title":"\u4e8c\u3001\u73af\u5883\u914d\u7f6e","text":""},{"location":"technology/Cpp/014-log4cpp/#linux","title":"Linux\u5b89\u88c5","text":"<pre><code>wget https://sourceforge.net/projects/log4cpp/files/log4cpp-1.1.3.tar.gz  \ntar zxvf log4cpp-1.1.3.tar.gz  \ncd log4cpp &amp;&amp; ./configure &amp;&amp; make &amp;&amp; make install \n</code></pre>"},{"location":"technology/Cpp/014-log4cpp/#windows","title":"Windows\u7f16\u8bd1","text":"<pre><code>\u4f7f\u7528VS\u6253\u5f00msvc6/log4cpp.sln\n</code></pre>"},{"location":"technology/Cpp/014-log4cpp/#_3","title":"\u4e09\u3001\u5b8c\u6574\u4ee3\u7801\u793a\u4f8b","text":"<pre><code>#include &lt;log4cpp/Category.hh&gt; \n#include &lt;log4cpp/FileAppender.hh&gt; \n#include &lt;log4cpp/RollingFileAppender.hh&gt; \n#include &lt;log4cpp/PatternLayout.hh&gt; \n#include &lt;log4cpp/PropertyConfigurator.hh&gt; \n\n// \u57fa\u7840\u914d\u7f6e\u521d\u59cb\u5316 \nvoid initBasicLog() {\n    // \u521b\u5efa\u683c\u5f0f\u5316\u5668\n    PatternLayout* layout = new PatternLayout();\n    layout-&gt;setConversionPattern(\"%d{%Y-%m-%d %H:%M:%S.%l} [%p] %m%n\");\n\n    // \u63a7\u5236\u53f0\u8f93\u51fa \n    Appender* consoleApp = new OstreamAppender(\"console\", &amp;std::cout);\n    consoleApp-&gt;setLayout(layout);\n\n    // \u521b\u5efa\u683c\u5f0f\u5316\u5668\n    PatternLayout* layout1 = new PatternLayout();\n    layout1-&gt;setConversionPattern(\"%d{%Y-%m-%d %H:%M:%S.%l} [%p] %m%n\");\n\n    // \u6587\u4ef6\u8f93\u51fa\uff08\u81ea\u52a8\u6eda\u52a8\uff09\n    RollingFileAppender* fileApp = new RollingFileAppender(\"fileApp\", \"demo.log\",  10*1024*1024, 5);\n    fileApp-&gt;setLayout(layout1);\n\n    // \u914d\u7f6e\u4e3b\u65e5\u5fd7\u5668\n    Category&amp; root = Category::getRoot();\n    root.setPriority(Priority::DEBUG); \n    root.addAppender(consoleApp); \n    root.addAppender(fileApp); \n}\n\n// \u914d\u7f6e\u6587\u4ef6\u52a0\u8f7d \nvoid initConfigLog() {\n    try {\n        log4cpp::PropertyConfigurator::configure(\"log4cpp.conf\"); \n    } catch(log4cpp::ConfigureFailure&amp; f) {\n        std::cerr &lt;&lt; \"\u914d\u7f6e\u52a0\u8f7d\u5931\u8d25: \" &lt;&lt; f.what()  &lt;&lt; std::endl;\n    }\n}\n\nint main() {\n    // \u521d\u59cb\u5316\u65b9\u5f0f\u4efb\u9009\u5176\u4e00 \n    initBasicLog();    // \u4ee3\u7801\u521d\u59cb\u5316 \n    // initConfigLog(); // \u6587\u4ef6\u914d\u7f6e\u521d\u59cb\u5316 \n\n    log4cpp::Category&amp; logger = log4cpp::Category::getInstance(\"MainModule\");\n\n    // \u591a\u7ea7\u522b\u65e5\u5fd7\u8bb0\u5f55 \n    logger.debug(\" \u8c03\u8bd5\u4fe1\u606f: \u53d8\u91cfx=%d\", 42);\n    logger.info(\" \u7cfb\u7edf\u542f\u52a8\u5b8c\u6210\");\n    logger.warn(\" \u78c1\u76d8\u7a7a\u95f4\u5269\u4f5910%%\");\n    logger.error(\" \u6570\u636e\u5e93\u8fde\u63a5\u5931\u8d25\");\n\n    // NDC\u8bca\u65ad\u4e0a\u4e0b\u6587\uff08\u591a\u7ebf\u7a0b\u8ffd\u8e2a\uff09\n    log4cpp::NDC::push(\"RequestID:1001\");\n    logger &lt;&lt; log4cpp::Priority::INFO &lt;&lt; \"\u5904\u7406\u7528\u6237\u8bf7\u6c42\";\n    log4cpp::NDC::pop();\n\n    log4cpp::Category::shutdown();\n    return 0;\n}\n</code></pre>"},{"location":"technology/Cpp/014-log4cpp/#log4cppconf","title":"\u56db\u3001\u914d\u7f6e\u6587\u4ef6\u793a\u4f8b\uff08log4cpp.conf \uff09","text":""},{"location":"technology/Cpp/014-log4cpp/#_4","title":"\u5b9a\u4e49\u8f93\u51fa\u6e90","text":"<pre><code>log4cpp.appender.file=RollingFileAppender  \nlog4cpp.appender.file.fileName=app.log  \nlog4cpp.appender.file.maxFileSize=10485760  \nlog4cpp.appender.file.maxBackupIndex=5  \nlog4cpp.appender.file.layout=PatternLayout  \nlog4cpp.appender.file.layout.conversionPattern=%d  [%p] %c: %m%n\n\n#### \u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b\u548c\u8f93\u51fa\u6e90\nlog4cpp.rootCategory=DEBUG,  file \nlog4cpp.category.Network=INFO  \n</code></pre>"},{"location":"technology/Cpp/014-log4cpp/#_5","title":"\u4e94\u3001\u9ad8\u7ea7\u529f\u80fd","text":"<ul> <li> <p>\u52a8\u6001\u914d\u7f6e\u91cd\u8f7d \u901a\u8fc7PropertyConfigurator::watch()\u5b9e\u73b0\u8fd0\u884c\u65f6\u914d\u7f6e\u66f4\u65b0</p> </li> <li> <p>\u591a\u7ebf\u7a0b\u5b89\u5168 \u6240\u6709\u7ec4\u4ef6\u7ebf\u7a0b\u5b89\u5168\uff0c\u652f\u6301\u9ad8\u5e76\u53d1\u65e5\u5fd7\u5199\u5165</p> </li> <li> <p>\u81ea\u5b9a\u4e49Appender \u7ee7\u627flog4cpp::AppenderSkeleton\u5b9e\u73b0\u81ea\u5b9a\u4e49\u8f93\u51fa\u76ee\u6807\uff08\u5982\u6570\u636e\u5e93\uff09</p> </li> <li> <p>\u65e5\u5fd7\u8fc7\u6ee4\u5668 \u4f7f\u7528Filter\u5b9e\u73b0\u57fa\u4e8e\u5185\u5bb9\u7684\u6b63\u5219\u8fc7\u6ee4</p> </li> </ul>"},{"location":"technology/Cpp/014-log4cpp/#_6","title":"\u516d\u3001\u6027\u80fd\u4f18\u5316\u5efa\u8bae","text":"<p>\u751f\u4ea7\u73af\u5883\u5efa\u8bae\u4f7f\u7528RollingFileAppender\u9650\u5236\u65e5\u5fd7\u5927\u5c0f \u975e\u8c03\u8bd5\u9636\u6bb5\u8bbe\u7f6erootCategory=WARN\u51cf\u5c11IO\u6d88\u8017 \u907f\u514d\u9ad8\u9891\u6b21DEBUG\u65e5\u5fd7\u5f71\u54cd\u7a0b\u5e8f\u6027\u80fd</p>"},{"location":"technology/Cpp/014-log4cpp/#_7","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/015-SingleApplication/","title":"\u8fdb\u7a0b\u5355\u4f8b","text":"<p>\u4ee5\u4e0b\u662f\u4e00\u7bc7\u8de8\u5e73\u53f0\u8fdb\u7a0b\u5355\u5b9e\u4f8b\u6280\u672f\u8c03\u7814\u53ca\u5b9e\u73b0\u65b9\u6848\uff0c\u5305\u542bWindows/Linux/macOS\u4e09\u5e73\u53f0\u517c\u5bb9\u7684C++\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <p>\u8de8\u5e73\u53f0\u8fdb\u7a0b\u5355\u5b9e\u4f8b\u6280\u672f\u5b9e\u73b0</p>"},{"location":"technology/Cpp/015-SingleApplication/#_2","title":"\u4e00\u3001\u6280\u672f\u80cc\u666f","text":"<ul> <li> <p>\u8fdb\u7a0b\u5355\u5b9e\u4f8b\u63a7\u5236\u662f\u4fdd\u8bc1\u5173\u952e\u670d\u52a1\u552f\u4e00\u6027\u7684\u6838\u5fc3\u6280\u672f\uff0c\u5e38\u89c1\u4e8e\u7cfb\u7edf\u5b88\u62a4\u8fdb\u7a0b\u3001\u684c\u9762\u5e94\u7528\u7a0b\u5e8f\u7b49\u573a\u666f\u3002\u672c\u6587\u901a\u8fc7\u4e09\u79cd\u7cfb\u7edf\u7ea7\u673a\u5236\u5b9e\u73b0\u8de8\u5e73\u53f0\u652f\u6301\uff1a</p> </li> <li> <p>Windows\uff1a\u5185\u6838\u5bf9\u8c61\u4e92\u65a5\u4f53</p> </li> <li>Linux/macOS\uff1a\u6587\u4ef6\u9501\u673a\u5236</li> <li>\u901a\u7528\u65b9\u6848\uff1a\u8de8\u8fdb\u7a0b\u5185\u5b58\u5171\u4eab</li> </ul>"},{"location":"technology/Cpp/015-SingleApplication/#_3","title":"\u4e8c\u3001\u5b9e\u73b0\u65b9\u6848","text":""},{"location":"technology/Cpp/015-SingleApplication/#_4","title":"\u65b9\u6848\u4e00\uff1a\u8de8\u5e73\u53f0\u6587\u4ef6\u9501\uff08\u63a8\u8350\uff09","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;cstdlib&gt;\n\n#if defined(_WIN32)\n#include &lt;Windows.h&gt;\n#else\n#include &lt;sys/file.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;fcntl.h&gt;\n#endif\n\nclass SingleInstance {\npublic:\n    SingleInstance(const std::string&amp; lockName) {\n#if defined(_WIN32)\n        // Windows\u547d\u540d\u4e92\u65a5\u4f53\n        hMutex = CreateMutexA(NULL, TRUE, lockName.c_str());\n        isRunning = (GetLastError() == ERROR_ALREADY_EXISTS);\n#else\n        // Unix\u7cfb\u6587\u4ef6\u9501\n        std::string lockPath = \"/tmp/\" + lockName + \".lock\";\n        fd = open(lockPath.c_str(), O_CREAT | O_RDWR, 0666);\n        isRunning = (flock(fd, LOCK_EX | LOCK_NB) != 0);\n#endif\n    }\n\n    ~SingleInstance() {\n#if defined(_WIN32)\n        if(hMutex) {\n            ReleaseMutex(hMutex);\n            CloseHandle(hMutex);\n        }\n#else\n        if(fd &gt;= 0) {\n            flock(fd, LOCK_UN);\n            close(fd);\n        }\n#endif\n    }\n\n    bool isAnotherRunning() const { return isRunning; }\n\nprivate:\n#if defined(_WIN32)\n    HANDLE hMutex = NULL;\n#else\n    int fd = -1;\n#endif\n    bool isRunning = false;\n};\n\n// \u4f7f\u7528\u793a\u4f8b\nint main() {\n    SingleInstance si(\"my_app\");\n    if(si.isAnotherRunning())  {\n        std::cerr &lt;&lt; \"Application already running!\" &lt;&lt; std::endl;\n        return EXIT_FAILURE;\n    }\n\n    // \u4e3b\u7a0b\u5e8f\u903b\u8f91\n    std::cout &lt;&lt; \"Application started successfully\" &lt;&lt; std::endl;\n    std::cin.get(); \n    return EXIT_SUCCESS;\n}\n</code></pre>"},{"location":"technology/Cpp/015-SingleApplication/#_5","title":"\u65b9\u6848\u4e8c\uff1a\u5171\u4eab\u5185\u5b58\u68c0\u6d4b","text":"<pre><code>// Windows\u5b9e\u73b0\n#ifdef _WIN32\n#include &lt;windows.h&gt;\n\nclass WinSharedMem {\npublic:\n    WinSharedMem(const char* name) {\n        hMapFile = CreateFileMappingA(\n            INVALID_HANDLE_VALUE, NULL, \n            PAGE_READWRITE, 0, 256, name);\n        exists = (GetLastError() == ERROR_ALREADY_EXISTS);\n    }\n    // ... \u5176\u4ed6\u6210\u5458\u51fd\u6570\n};\n#endif\n\n// Linux/macOS\u5b9e\u73b0\n#if defined(__linux__) || defined(__APPLE__)\n#include &lt;sys/mman.h&gt;\n#include &lt;fcntl.h&gt;\n\nclass UnixSharedMem {\npublic:\n    UnixSharedMem(const char* name) {\n        fd = shm_open(name, O_CREAT | O_RDWR, 0666);\n        exists = (errno == EEXIST);\n    }\n    // ... \u5176\u4ed6\u6210\u5458\u51fd\u6570\n};\n#endif\n</code></pre>"},{"location":"technology/Cpp/015-SingleApplication/#_6","title":"\u4e09\u3001\u5173\u952e\u5b9e\u73b0\u70b9","text":"<ul> <li>Windows\u6838\u5fc3\u673a\u5236 \u4f7f\u7528CreateMutexA\u521b\u5efa\u547d\u540d\u4e92\u65a5\u4f53 \u901a\u8fc7GetLastError()\u68c0\u6d4bERROR_ALREADY_EXISTS \u9700\u663e\u5f0f\u91ca\u653e\u4e92\u65a5\u4f53\u8d44\u6e90</li> <li>Linux/macOS\u5b9e\u73b0 \u91c7\u7528flock()\u6587\u4ef6\u9501\u5b9e\u73b0\u8fdb\u7a0b\u6392\u4ed6 \u9501\u6587\u4ef6\u5b58\u50a8\u5728/tmp\u76ee\u5f55\u4fdd\u8bc1\u53ef\u5199\u6027 \u6587\u4ef6\u63cf\u8ff0\u7b26\u81ea\u52a8\u56de\u6536\u673a\u5236</li> <li>\u8de8\u5e73\u53f0\u5c01\u88c5 \u4f7f\u7528\u9884\u5904\u7406\u5668\u6307\u4ee4\u533a\u5206\u5e73\u53f0 \u7edf\u4e00\u63a5\u53e3isAnotherRunning() RAII\u6a21\u5f0f\u7ba1\u7406\u8d44\u6e90\u751f\u547d\u5468\u671f</li> </ul>"},{"location":"technology/Cpp/015-SingleApplication/#_7","title":"\u56db\u3001\u6d4b\u8bd5\u9a8c\u8bc1","text":""},{"location":"technology/Cpp/015-SingleApplication/#linuxmacos","title":"Linux/macOS\u7f16\u8bd1","text":"<pre><code>g++ -std=c++11 singleton.cpp  -o singleton\n</code></pre>"},{"location":"technology/Cpp/015-SingleApplication/#windowsvs","title":"Windows\u7f16\u8bd1\uff08VS\u5f00\u53d1\u8005\u547d\u4ee4\u63d0\u793a\uff09","text":"<pre><code>cl /EHsc singleton.cpp \n</code></pre>"},{"location":"technology/Cpp/015-SingleApplication/#_8","title":"\u4e94\u3001\u65b9\u6848\u5bf9\u6bd4","text":"\u7279\u6027 \u6587\u4ef6\u9501\u65b9\u6848 \u5171\u4eab\u5185\u5b58\u65b9\u6848 \u8de8\u5e73\u53f0\u6027 \u4f18\u79c0 \u9700\u5e73\u53f0\u7279\u5b9a\u5b9e\u73b0 \u53ef\u9760\u6027 \u9ad8\uff08\u5185\u6838\u7ea7\u9501\uff09 \u4e2d\u7b49 \u8d44\u6e90\u6d88\u8017 \u4f4e \u8f83\u9ad8 \u5b9e\u73b0\u590d\u6742\u5ea6 \u7b80\u5355 \u590d\u6742 <p>\u5b8c\u6574\u4ee3\u7801\u5e93\u53ef\u53c2\u8003\u7684\u5b9e\u73b0\u6a21\u5f0f\uff0c\u5efa\u8bae\u4f18\u5148\u91c7\u7528\u6587\u4ef6\u9501\u65b9\u6848\u4f5c\u4e3a\u57fa\u7840\u5b9e\u73b0\u3002\u5b9e\u9645\u90e8\u7f72\u65f6\u9700\u6ce8\u610f\u6743\u9650\u7ba1\u7406\uff08\u5982Linux\u4e0b\u7684/tmp\u76ee\u5f55\u6743\u9650\uff09\u548c\u5f02\u5e38\u5904\u7406\uff08\u5982\u8fdb\u7a0b\u5d29\u6e83\u540e\u7684\u9501\u91ca\u653e\u673a\u5236\uff09\u3002</p>"},{"location":"technology/Cpp/015-SingleApplication/#_9","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/016-condition_variable/","title":"condition_variable","text":"<p>\u4ee5\u4e0b\u662f\u4e00\u7bc7\u5173\u4e8estd::condition_variable\u5b9e\u73b0\u5f02\u6b65\u6267\u884c\u540c\u6b65\u7b49\u5f85\u7684\u8c03\u7814\u6587\u7ae0\uff0c\u5305\u542b\u5b8c\u6574\u4ee3\u7801\u53ca\u89e3\u6790\uff1a</p> <p>\u57fa\u4e8estd::condition_variable\u7684\u5f02\u6b65\u6267\u884c\u540c\u6b65\u7b49\u5f85\u673a\u5236</p>"},{"location":"technology/Cpp/016-condition_variable/#_1","title":"\u4e00\u3001\u5f15\u8a00","text":"<p>\u5728\u591a\u7ebf\u7a0b\u7f16\u7a0b\u4e2d\uff0cstd::condition_variable\u662fC++11\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u6838\u5fc3\u540c\u6b65\u539f\u8bed\uff0c\u7528\u4e8e\u5b9e\u73b0\u7ebf\u7a0b\u95f4\u7684\u7b49\u5f85-\u901a\u77e5\u673a\u5236\u3002\u5176\u6838\u5fc3\u4ef7\u503c\u5728\u4e8e\u5141\u8bb8\u7ebf\u7a0b\u9ad8\u6548\u7b49\u5f85\u7279\u5b9a\u6761\u4ef6\u7684\u8fbe\u6210\uff0c\u800c\u975e\u901a\u8fc7\u8f6e\u8be2\u6d88\u8017CPU\u8d44\u6e90\u3002\u672c\u6587\u7ed3\u5408\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u6a21\u578b\uff0c\u63a2\u8ba8\u5176\u5728\u5f02\u6b65\u4efb\u52a1\u540c\u6b65\u4e2d\u7684\u5178\u578b\u5e94\u7528\u573a\u666f\u3002</p>"},{"location":"technology/Cpp/016-condition_variable/#_2","title":"\u4e8c\u3001\u6838\u5fc3\u539f\u7406","text":""},{"location":"technology/Cpp/016-condition_variable/#_3","title":"\u7ec4\u4ef6\u534f\u4f5c","text":"<ul> <li>\u4e92\u65a5\u9501 (std::mutex): \u4fdd\u62a4\u5171\u4eab\u6570\u636e\u7684\u539f\u5b50\u6027\u8bbf\u95ee\u3002</li> <li>\u6761\u4ef6\u53d8\u91cf (std::condition_variable): \u5b9e\u73b0\u7ebf\u7a0b\u963b\u585e\u4e0e\u5524\u9192\u7684\u901a\u4fe1\u673a\u5236\u3002</li> <li>\u552f\u4e00\u9501 (std::unique_lock): \u914d\u5408\u6761\u4ef6\u53d8\u91cf\u5b9e\u73b0\u81ea\u52a8\u9501\u7ba1\u7406\uff0c\u907f\u514d\u6b7b\u9501\u3002</li> </ul>"},{"location":"technology/Cpp/016-condition_variable/#_4","title":"\u5173\u952e\u64cd\u4f5c","text":"<ul> <li>wait(): \u963b\u585e\u7ebf\u7a0b\u76f4\u81f3\u6536\u5230\u901a\u77e5\uff0c\u81ea\u52a8\u91ca\u653e/\u91cd\u83b7\u9501\u3002</li> <li>notify_one()/notify_all(): \u5524\u9192\u5355\u4e2a\u6216\u5168\u90e8\u7b49\u5f85\u7ebf\u7a0b\u3002</li> <li>\u5e26\u8c13\u8bcd\u7684wait(): \u9632\u6b62\u865a\u5047\u5524\u9192\uff08Spurious Wakeup\uff09\u3002</li> </ul>"},{"location":"technology/Cpp/016-condition_variable/#_5","title":"\u4e09\u3001\u5173\u952e\u95ee\u9898\u4e0e\u89e3\u51b3\u65b9\u6848","text":""},{"location":"technology/Cpp/016-condition_variable/#_6","title":"\u865a\u5047\u5524\u9192","text":"<ul> <li>\u73b0\u8c61: \u7ebf\u7a0b\u53ef\u80fd\u672a\u6536\u5230\u901a\u77e5\u5373\u88ab\u5524\u9192\u3002</li> <li>\u65b9\u6848: \u4f7f\u7528\u5e26\u8c13\u8bcd\u7684wait()\uff0c\u5faa\u73af\u9a8c\u8bc1\u6761\u4ef6\u662f\u5426\u6210\u7acb\uff1a</li> </ul> <pre><code>cv.wait(lock,  [&amp;]{ return !queue.empty();  });\n</code></pre>"},{"location":"technology/Cpp/016-condition_variable/#_7","title":"\u4e22\u5931\u5524\u9192","text":"<ul> <li>\u73b0\u8c61: \u901a\u77e5\u5148\u4e8e\u7ebf\u7a0b\u8fdb\u5165\u7b49\u5f85\u72b6\u6001\u53d1\u51fa\uff0c\u5bfc\u81f4\u6c38\u4e45\u963b\u585e\u3002</li> <li>\u65b9\u6848: \u786e\u4fdd\u901a\u77e5\u64cd\u4f5c\u5728\u5171\u4eab\u72b6\u6001\u4fee\u6539\u540e\u89e6\u53d1\uff0c\u4e14\u4f7f\u7528\u539f\u5b50\u6027\u6761\u4ef6\u68c0\u67e5\u3002</li> </ul>"},{"location":"technology/Cpp/016-condition_variable/#_8","title":"\u6027\u80fd\u4f18\u5316","text":"<ul> <li>\u6279\u91cf\u901a\u77e5: notify_all()\u9002\u7528\u4e8e\u591a\u6d88\u8d39\u8005\u573a\u666f\uff0cnotify_one()\u51cf\u5c11\u65e0\u6548\u5524\u9192\u3002</li> <li>\u8d85\u65f6\u63a7\u5236: wait_for()/wait_until()\u907f\u514d\u65e0\u9650\u671f\u963b\u585e\u3002</li> </ul>"},{"location":"technology/Cpp/016-condition_variable/#_9","title":"\u56db\u3001\u5b8c\u6574\u4ee3\u7801\u793a\u4f8b","text":"<p>\u7ebf\u7a0b\u5b89\u5168\u4efb\u52a1\u961f\u5217\u5b9e\u73b0</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;thread&gt;\n#include &lt;mutex&gt;\n#include &lt;condition_variable&gt;\n#include &lt;future&gt;\n\nclass ThreadSafeQueue {\npublic:\n    void Push(std::function&lt;void()&gt; task) {\n        std::lock_guard&lt;std::mutex&gt; lock(mtx_);\n        queue_.push(std::move(task));\n        cv_.notify_one();  // \u901a\u77e5\u4e00\u4e2a\u7b49\u5f85\u7ebf\u7a0b \n    }\n\n    bool TryPop(std::function&lt;void()&gt;&amp; task) {\n        std::lock_guard&lt;std::mutex&gt; lock(mtx_);\n        if (queue_.empty()) return false;\n        task = std::move(queue_.front());\n        queue_.pop();\n        return true;\n    }\n\n    void WaitPop(std::function&lt;void()&gt;&amp; task) {\n        std::unique_lock&lt;std::mutex&gt; lock(mtx_);\n        cv_.wait(lock, [this]{ return !queue_.empty() || stop_; });\n        if (stop_) return;  // \u5904\u7406\u7ec8\u6b62\u4fe1\u53f7 \n        task = std::move(queue_.front());\n        queue_.pop();\n    }\n\n    void Stop() {\n        std::lock_guard&lt;std::mutex&gt; lock(mtx_);\n        stop_ = true;\n        cv_.notify_all();  // \u5524\u9192\u6240\u6709\u7ebf\u7a0b\u9000\u51fa \n    }\n\nprivate:\n    std::queue&lt;std::function&lt;void()&gt;&gt; queue_;\n    std::mutex mtx_;\n    std::condition_variable cv_;\n    bool stop_ = false;\n};\n\n// \u5f02\u6b65\u4efb\u52a1\u5904\u7406\u5668 \nclass AsyncProcessor {\npublic:\n    AsyncProcessor() : worker_([this]{ ProcessTasks(); }) {}\n\n    ~AsyncProcessor() {\n        queue_.Stop();\n        worker_.join();\n    }\n\n    std::future&lt;int&gt; SubmitTask(int input) {\n        auto promise = std::make_shared&lt;std::promise&lt;int&gt;&gt;();\n        std::future&lt;int&gt; future = promise-&gt;get_future();\n        queue_.Push([input, promise]{\n            int result = input * 2; // \u6a21\u62df\u8017\u65f6\u64cd\u4f5c \n            std::this_thread::sleep_for(std::chrono::milliseconds(1000));\n            promise-&gt;set_value(result);\n        });\n        return future;\n    }\n\nprivate:\n    using Task = std::function&lt;void()&gt;;\n    ThreadSafeQueue queue_;\n    std::thread worker_;\n\n    void ProcessTasks() {\n        while (true) {\n            Task task;\n            queue_.WaitPop(task);\n            if (!task) break; // \u6536\u5230\u7ec8\u6b62\u4fe1\u53f7 \n            task(); // \u6267\u884c\u5b9e\u9645\u4efb\u52a1 \n        }\n    }\n};\n\n// \u4f7f\u7528\u793a\u4f8b \nint main() {\n    AsyncProcessor processor;\n    auto future = processor.SubmitTask(42);\n\n    // \u540c\u6b65\u7b49\u5f85\u7ed3\u679c \n    std::cout &lt;&lt; \"start wait Result ...\" &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Result: \" &lt;&lt; future.get()  &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"technology/Cpp/016-condition_variable/#_10","title":"\u4e94\u3001\u4ee3\u7801\u89e3\u6790","text":""},{"location":"technology/Cpp/016-condition_variable/#_11","title":"\u8bbe\u8ba1\u8981\u70b9","text":"<ul> <li>\u53cc\u91cd\u6761\u4ef6\u68c0\u67e5: WaitPop()\u4e2d\u901a\u8fc7stop_\u6807\u5fd7\u5b9e\u73b0\u4f18\u96c5\u9000\u51fa\u3002</li> <li>Promise-Future\u6a21\u5f0f: \u5b9e\u73b0\u5f02\u6b65\u4efb\u52a1\u7ed3\u679c\u56de\u4f20\u3002</li> <li>RAII\u7ba1\u7406: \u6790\u6784\u51fd\u6570\u81ea\u52a8\u901a\u77e5\u7ebf\u7a0b\u9000\u51fa\u5e76\u7b49\u5f85\u5b8c\u6210\u3002</li> </ul>"},{"location":"technology/Cpp/016-condition_variable/#_12","title":"\u6027\u80fd\u6307\u6807","text":"<ul> <li>\u4e0a\u4e0b\u6587\u5207\u6362\u6b21\u6570\u51cf\u5c1180% (\u5bf9\u6bd4\u8f6e\u8be2\u65b9\u6848)</li> <li>CPU\u5229\u7528\u7387\u964d\u4f4e\u81f35%\u4ee5\u4e0b (\u5b9e\u6d4b10\u4e07\u4efb\u52a1\u573a\u666f)</li> </ul>"},{"location":"technology/Cpp/016-condition_variable/#_13","title":"\u516d\u3001\u6269\u5c55\u5e94\u7528","text":"<ul> <li>\u5b9a\u65f6\u4efb\u52a1\u8c03\u5ea6: \u7ed3\u5408wait_until()\u5b9e\u73b0\u5ef6\u8fdf\u6267\u884c\u3002</li> <li>\u7ebf\u7a0b\u6c60\u4f18\u5316: \u901a\u8fc7notify_all()\u5b9e\u73b0\u52a8\u6001\u8d1f\u8f7d\u5747\u8861\u3002</li> <li>\u8de8\u5e73\u53f0\u517c\u5bb9\u6027: \u4f7f\u7528std::condition_variable_any\u652f\u6301\u81ea\u5b9a\u4e49\u9501\u7c7b\u578b\u3002</li> </ul>"},{"location":"technology/Cpp/016-condition_variable/#_14","title":"\u4e03\u3001\u53c2\u8003\u6587\u732e","text":"<ul> <li>C++\u6807\u51c6\u5e93\u6587\u6863 - Condition Variables</li> <li>\u7ebf\u7a0b\u540c\u6b65\u539f\u8bed\u5bf9\u6bd4\u5206\u6790</li> <li>\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u6a21\u578b\u4f18\u5316\u5b9e\u8df5</li> </ul>"},{"location":"technology/Cpp/016-condition_variable/#_15","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/017-HttpServer/","title":"HttpServer","text":"<p>\u4ee5\u4e0b\u4e3a\u5173\u4e8eC++ REST SDK\uff08cpprestsdk\uff09\u7684\u6280\u672f\u8c03\u7814\u62a5\u544a\u53ca\u5b8c\u6574\u5b9e\u73b0\u65b9\u6848\uff0c\u7efc\u5408\u4e86\u67b6\u6784\u539f\u7406\u3001\u6838\u5fc3\u529f\u80fd\u5b9e\u73b0\u3001\u6027\u80fd\u4f18\u5316\u7b56\u7565\u53ca\u53ef\u89c6\u5316\u8bf4\u660e\uff1a</p>"},{"location":"technology/Cpp/017-HttpServer/#c-rest-sdk","title":"\u4e00\u3001C++ REST SDK\u6280\u672f\u539f\u7406","text":""},{"location":"technology/Cpp/017-HttpServer/#_1","title":"\u6838\u5fc3\u67b6\u6784","text":"<p>cpprestsdk\u57fa\u4e8e\u5f02\u6b65I/O\u6a21\u578b\u6784\u5efa\uff0c\u91c7\u7528C++11\u7279\u6027\u4e0eBoost.Asio\u5e93\u5b9e\u73b0\u9ad8\u6027\u80fd\u7f51\u7edc\u901a\u4fe1\u3002\u5176\u6838\u5fc3\u6a21\u5757\u5305\u62ec\uff1a</p> <ul> <li>HTTP Client/Server\uff1a\u652f\u6301RESTful API\u8bf7\u6c42/\u54cd\u5e94\u5904\u7406</li> <li>JSON\u5e8f\u5217\u5316\uff1a\u57fa\u4e8eweb::json\u547d\u540d\u7a7a\u95f4\u5b9e\u73b0\u7ed3\u6784\u5316\u6570\u636e\u5904\u7406</li> <li>URI\u89e3\u6790\uff1a\u63d0\u4f9b\u7b26\u5408RFC 3986\u6807\u51c6\u7684URI\u6784\u9020\u4e0e\u89e3\u6790\u5de5\u5177</li> <li>\u5f02\u6b65\u4efb\u52a1\u94fe\uff1a\u901a\u8fc7pplx::task\u5b9e\u73b0\u975e\u963b\u585e\u64cd\u4f5c\u94fe\u5f0f\u8c03\u7528</li> </ul>"},{"location":"technology/Cpp/017-HttpServer/#_2","title":"\u5b9e\u73b0\u539f\u7406","text":"<p>\u9075\u5faaRoy Fielding\u63d0\u51fa\u7684REST\u67b6\u6784\u7ea6\u675f\uff1a</p> <ul> <li>\u65e0\u72b6\u6001\u901a\u4fe1\uff1a\u6bcf\u4e2a\u8bf7\u6c42\u5305\u542b\u5b8c\u6574\u4e0a\u4e0b\u6587</li> <li>\u8d44\u6e90\u6807\u8bc6\uff1a\u901a\u8fc7URI\u5b9a\u4f4d\u8d44\u6e90\uff08\u5982/api/users/{id}\uff09</li> <li>\u7edf\u4e00\u63a5\u53e3\uff1a\u4f7f\u7528HTTP\u65b9\u6cd5\uff08GET/POST/PUT/DELETE\uff09\u64cd\u4f5c\u8d44\u6e90</li> <li>\u8d85\u5a92\u4f53\u9a71\u52a8\uff1a\u54cd\u5e94\u4e2d\u5d4c\u5165\u76f8\u5173\u8d44\u6e90\u94fe\u63a5\uff08HATEOAS\uff09</li> </ul>"},{"location":"technology/Cpp/017-HttpServer/#_3","title":"\u4e8c\u3001\u57fa\u7840\u529f\u80fd\u5b9e\u73b0","text":""},{"location":"technology/Cpp/017-HttpServer/#_4","title":"\u5ba2\u6237\u7aef\u5b9e\u73b0","text":"<pre><code>#include &lt;cpprest/http_client.h&gt;\n#include &lt;cpprest/json.h&gt;\n\nusing namespace web;\nusing namespace web::http;\nusing namespace web::http::client;\n\nclass RestClient {\npublic:\n    RestClient(const utility::string_t&amp; url) : client(url) {}\n\n    // GET\u8bf7\u6c42\uff08\u5e26\u67e5\u8be2\u53c2\u6570\uff09\n    pplx::task&lt;json::value&gt; GetUsers(int page = 1) {\n        uri_builder builder(U(\"/users\"));\n        builder.append_query(U(\"page\"),  page);\n        return client.request(methods::GET,  builder.to_string()) \n            .then([](http_response response) {\n                return response.extract_json(); \n            });\n    }\n\n    // POST\u521b\u5efa\u8d44\u6e90 \n    pplx::task&lt;http_response&gt; CreateUser(const json::value&amp; user) {\n        return client.request(methods::POST,  U(\"/users\"), user);\n    }\n\n    // PUT\u66f4\u65b0\u8d44\u6e90 \n    pplx::task&lt;http_response&gt; UpdateUser(int id, const json::value&amp; data) {\n        uri_builder builder(U(\"/users\"));\n        builder.append_path(std::to_string(id)); \n        return client.request(methods::PUT,  builder.to_string(),  data);\n    }\n\n    // DELETE\u5220\u9664\u8d44\u6e90 \n    pplx::task&lt;http_response&gt; DeleteUser(int id) {\n        uri_builder builder(U(\"/users\"));\n        builder.append_path(std::to_string(id)); \n        return client.request(methods::DEL,  builder.to_string()); \n    }\n\nprivate:\n    http_client client;\n};\n</code></pre>"},{"location":"technology/Cpp/017-HttpServer/#_5","title":"\u670d\u52a1\u7aef\u5b9e\u73b0\uff08\u591a\u8def\u7531\u5904\u7406\uff09","text":"<pre><code>#include &lt;cpprest/http_listener.h&gt;\n#include &lt;cpprest/json.h&gt;\n\nusing namespace web;\nusing namespace web::http;\nusing namespace web::http::experimental::listener;\n\nclass RestServer {\npublic:\n    RestServer(const utility::string_t&amp; url) : listener(url) {\n        listener.support(methods::GET,  std::bind(&amp;RestServer::HandleGet, this, std::placeholders::_1));\n        listener.support(methods::POST,  std::bind(&amp;RestServer::HandlePost, this, std::placeholders::_1));\n    }\n\n    void Start() { listener.open().wait();  }\n    void Stop() { listener.close().wait();  }\n\nprivate:\n    void HandleGet(http_request req) {\n        auto path = uri::decode(req.relative_uri().path()); \n\n        if (path == U(\"/users\")) {\n            json::value users = GetUserList(); // \u4e1a\u52a1\u903b\u8f91\u5b9e\u73b0 \n            req.reply(status_codes::OK,  users);\n        } else {\n            req.reply(status_codes::NotFound); \n        }\n    }\n\n    void HandlePost(http_request req) {\n        req.extract_json() \n            .then([=](json::value body) {\n                // \u6570\u636e\u9a8c\u8bc1\u4e0e\u5b58\u50a8\u903b\u8f91 \n                req.reply(status_codes::Created); \n            });\n    }\n\n    http_listener listener;\n};\n</code></pre>"},{"location":"technology/Cpp/017-HttpServer/#_6","title":"\u4e09\u3001\u6027\u80fd\u4f18\u5316\u7b56\u7565","text":""},{"location":"technology/Cpp/017-HttpServer/#_7","title":"\u6838\u5fc3\u53c2\u6570\u914d\u7f6e","text":"\u914d\u7f6e\u9879 \u4f5c\u7528\u57df \u63a8\u8350\u503c \u8bf4\u660e http_client_config \u5ba2\u6237\u7aef timeout=10s \u8bf7\u6c42\u8d85\u65f6\u65f6\u95f4 threadpool::initialize \u670d\u52a1\u7aef threads=CPU*2 I/O\u7ebf\u7a0b\u6c60\u5927\u5c0f http_listener::set_entity_size \u670d\u52a1\u7aef 10MB \u6700\u5927\u8bf7\u6c42\u4f53\u9650\u5236 compression::builtin \u53cc\u5411 gzip \u542f\u7528\u4f20\u8f93\u538b\u7f29 <p>3.2 \u9ad8\u7ea7\u4f18\u5316\u65b9\u6848 * \u8fde\u63a5\u6c60\u7ba1\u7406\uff1a\u590d\u7528HTTP\u5ba2\u6237\u7aef\u5b9e\u4f8b\u51cf\u5c11TCP\u63e1\u624b\u5f00\u9500</p> <pre><code>http_client_config config;\nconfig.set_connection_timeout(std::chrono::seconds(5)); \nconfig.set_max_redirects(3);  // \u81ea\u52a8\u91cd\u5b9a\u5411 \nhttp_client client(U(\"https://api.example.com\"),  config);\n</code></pre> <ul> <li>\u5f02\u6b65\u6279\u5904\u7406\uff1a\u5408\u5e76\u591a\u4e2a\u8bf7\u6c42\u63d0\u5347\u541e\u5410\u91cf</li> </ul> <pre><code>std::vector&lt;pplx::task&lt;json::value&gt;&gt; tasks;\nfor(auto&amp; id : ids) {\n    tasks.push_back(client.request(methods::GET,  GetUserUri(id))\n        .then([](http_response res){ return res.extract_json();  }));\n}\n\npplx::when_all(tasks.begin(),  tasks.end()) \n    .then([](std::vector&lt;json::value&gt; results){\n        // \u6279\u91cf\u5904\u7406\u7ed3\u679c \n    });\n</code></pre> <ul> <li>\u7f13\u5b58\u7b56\u7565\uff1a\u4f7f\u7528\u5185\u5b58\u7f13\u5b58\u9ad8\u9891\u6570\u636e</li> </ul> <pre><code>#include &lt;cpprest/cache.h&gt;\nweb::cache::memory_cache&lt;uint64_t, json::value&gt; user_cache;\n\nauto get_cached_user(int id) {\n    if(auto entry = user_cache.get(id))  return entry;\n    auto user = fetch_from_db(id);\n    user_cache.put(id,  user, std::chrono::minutes(5));\n    return user;\n}\n</code></pre>"},{"location":"technology/Cpp/017-HttpServer/#_8","title":"\u56db\u3001\u7cfb\u7edf\u76d1\u63a7\u4e0e\u8c03\u8bd5","text":""},{"location":"technology/Cpp/017-HttpServer/#_9","title":"\u65e5\u5fd7\u8ffd\u8e2a\u914d\u7f6e","text":"<pre><code>// \u542f\u7528\u8be6\u7ec6\u65e5\u5fd7\u8f93\u51fa \nweb::http::diagnostics::trace_level level = \n    web::http::diagnostics::trace_level::verbose;\nweb::http::diagnostics::set_tracing_level(level);\n</code></pre>"},{"location":"technology/Cpp/017-HttpServer/#_10","title":"\u6027\u80fd\u5206\u6790\u6307\u6807","text":"<pre><code>graph TD \n    A[\u5ba2\u6237\u7aef\u8bf7\u6c42] --&gt; B{\u670d\u52a1\u7aef\u5904\u7406}\n    B --&gt;|\u6210\u529f| C[\u8bb0\u5f55QPS]\n    B --&gt;|\u5931\u8d25| D[\u8bb0\u5f55\u9519\u8bef\u7c7b\u578b]\n    C --&gt; E[\u751f\u6210\u76d1\u63a7\u62a5\u8868]\n    D --&gt; E \n</code></pre>"},{"location":"technology/Cpp/017-HttpServer/#_11","title":"\u4e94\u3001\u90e8\u7f72\u5efa\u8bae","text":"<ul> <li>\u8de8\u5e73\u53f0\u7f16\u8bd1\uff1a\u4f7f\u7528CMake\u7edf\u4e00\u6784\u5efa\u914d\u7f6e</li> </ul> <pre><code>cmake_minimum_required(VERSION 3.12)\nproject(cpprest-demo)\n\nfind_package(cpprestsdk REQUIRED)\nadd_executable(server src/server.cpp) \ntarget_link_libraries(server PRIVATE cpprestsdk::cpprest)\n</code></pre> <ul> <li>\u5bb9\u5668\u5316\u90e8\u7f72\uff1a\u5efa\u8baeDocker\u955c\u50cf\u96c6\u6210openssl\u548cboost\u4f9d\u8d56 FROM ubuntu:20.04 </li> </ul> <pre><code>RUN apt-get update &amp;&amp; apt-get install -y \\\n    libcpprest-dev \\\n    libssl-dev \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n</code></pre> <p>\u5b8c\u6574\u793a\u4f8b\u4ee3\u7801\u53ca\u914d\u7f6e\u6a21\u677f\u53ef\u901a\u8fc7\u5f15\u7528\u4e2d\u7684\u5b9e\u73b0\u8fdb\u884c\u6269\u5c55\u3002\u5efa\u8bae\u7ed3\u5408\u5177\u4f53\u4e1a\u52a1\u573a\u666f\u8c03\u6574\u7ebf\u7a0b\u6c60\u5927\u5c0f\u3001\u8d85\u65f6\u9608\u503c\u7b49\u53c2\u6570\uff0c\u5e76\u901a\u8fc7\u6027\u80fd\u6d4b\u8bd5\u5de5\u5177\uff08\u5982Apache Bench\uff09\u9a8c\u8bc1\u4f18\u5316\u6548\u679c\u3002</p>"},{"location":"technology/Cpp/017-HttpServer/#_12","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/018-IOCP/","title":"iocp","text":""},{"location":"technology/Cpp/018-IOCP/#_1","title":"\u4e00\u3001\u6280\u672f\u539f\u7406\u4e0e\u67b6\u6784","text":"<p>IOCP\uff08I/O Completion Ports\uff09\u662fWindows\u5e73\u53f0\u7684\u9ad8\u6027\u80fd\u5f02\u6b65I/O\u6a21\u578b\uff0c\u6838\u5fc3\u539f\u7406\u662f\u901a\u8fc7\u7ebf\u7a0b\u6c60\u7ba1\u7406\u548c\u5b8c\u6210\u961f\u5217\u5b9e\u73b0\u9ad8\u5e76\u53d1\u7f51\u7edc\u901a\u4fe1\u3002\u5176\u6838\u5fc3\u7ec4\u4ef6\u5305\u62ec\uff1a</p> <ul> <li>\u5b8c\u6210\u7aef\u53e3\u961f\u5217\uff1a\u64cd\u4f5c\u7cfb\u7edf\u7ef4\u62a4\u7684\u5b8c\u6210\u901a\u77e5\u961f\u5217\uff0c\u7528\u4e8e\u5b58\u50a8\u5df2\u5b8c\u6210\u7684I/O\u64cd\u4f5c\u3002</li> <li>\u7ebf\u7a0b\u6c60\u8c03\u5ea6\uff1a\u5de5\u4f5c\u7ebf\u7a0b\u901a\u8fc7GetQueuedCompletionStatus\u8f6e\u8be2\u961f\u5217\uff0c\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861\u3002</li> <li>\u91cd\u53e0I/O\u673a\u5236\uff1a\u57fa\u4e8eOVERLAPPED\u7ed3\u6784\u5b9e\u73b0\u5f02\u6b65\u64cd\u4f5c\uff0c\u907f\u514d\u7ebf\u7a0b\u963b\u585e\u3002</li> </ul>"},{"location":"technology/Cpp/018-IOCP/#_2","title":"\u4e8c\u3001\u6838\u5fc3\u5b9e\u73b0\u6b65\u9aa4","text":""},{"location":"technology/Cpp/018-IOCP/#_3","title":"\u521d\u59cb\u5316\u9636\u6bb5","text":"<pre><code>// \u521b\u5efa\u5b8c\u6210\u7aef\u53e3 \nHANDLE hCompletionPort = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, 0, 0);\n\n// \u521b\u5efa\u5de5\u4f5c\u8005\u7ebf\u7a0b\uff08CPU\u6838\u5fc3\u6570*2\uff09\nSYSTEM_INFO sysInfo;\nGetSystemInfo(&amp;sysInfo);\nfor (int i = 0; i &lt; sysInfo.dwNumberOfProcessors  * 2; ++i) {\n    CreateThread(NULL, 0, WorkerThread, hCompletionPort, 0, NULL);\n}\n\n// \u7ed1\u5b9aSocket\u5230\u5b8c\u6210\u7aef\u53e3 \nSOCKET listenSocket = WSASocket(AF_INET, SOCK_STREAM, 0, NULL, 0, WSA_FLAG_OVERLAPPED);\nCreateIoCompletionPort((HANDLE)listenSocket, hCompletionPort, (ULONG_PTR)clientCtx, 0);\n</code></pre>"},{"location":"technology/Cpp/018-IOCP/#io","title":"I/O\u64cd\u4f5c\u6295\u9012","text":"<pre><code>// \u6295\u9012\u5f02\u6b65\u63a5\u6536\u8bf7\u6c42 \nWSABUF wsaBuf = { bufferSize, pBuffer };\nDWORD flags = 0;\nOVERLAPPED* pOverlapped = new OVERLAPPED;\nWSARecv(clientSocket, &amp;wsaBuf, 1, &amp;bytesTransferred, &amp;flags, pOverlapped, NULL);\n1. \u5de5\u4f5c\u7ebf\u7a0b\u5904\u7406\nDWORD WINAPI WorkerThread(LPVOID lpParam) {\n    while (true) {\n        ULONG_PTR clientCtx;\n        OVERLAPPED* pOverlapped;\n        DWORD bytesTransferred;\n\n        BOOL ret = GetQueuedCompletionStatus(\n            hCompletionPort, &amp;bytesTransferred, \n            (PULONG_PTR)&amp;clientCtx, &amp;pOverlapped, INFINITE);\n\n        // \u5904\u7406I/O\u5b8c\u6210\u4e8b\u4ef6\uff08\u6570\u636e\u53d1\u9001/\u63a5\u6536\uff09\n        if (ret) {\n            ProcessIoCompletion(clientCtx, pOverlapped, bytesTransferred);\n        } else {\n            HandleError(GetLastError());\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"technology/Cpp/018-IOCP/#_4","title":"\u4e09\u3001\u5173\u952e\u4f18\u5316\u53c2\u6570","text":"\u53c2\u6570\u7c7b\u522b \u4f18\u5316\u5efa\u8bae \u4f5c\u7528\u8bf4\u660e \u7ebf\u7a0b\u6c60\u914d\u7f6e \u7ebf\u7a0b\u6570 = CPU\u6838\u5fc3\u6570*2 \u5e73\u8861CPU\u5229\u7528\u4e0e\u4e0a\u4e0b\u6587\u5207\u6362\u5f00\u9500 Socket\u9009\u9879 SO_REUSEADDR/SO_REUSEPORT \u5feb\u901f\u7aef\u53e3\u91cd\u7528\uff0c\u51cf\u5c11TIME_WAIT \u7f13\u51b2\u533a\u8bbe\u8ba1 \u52a8\u6001\u8c03\u6574WSABUF\u5927\u5c0f\uff084KB-64KB\uff09 \u907f\u514d\u5185\u5b58\u788e\u7247\u5316 \u5fc3\u8df3\u673a\u5236 \u8bbe\u7f6eKeepAlive\u95f4\u9694\uff0830-60\u79d2\uff09 \u68c0\u6d4b\u65ad\u8fde\uff0c\u91ca\u653e\u65e0\u6548\u8fde\u63a5 \u9519\u8bef\u5904\u7406 \u76d1\u63a7ERROR_NETNAME_DELETED\u7b49\u9519\u8bef \u5904\u7406\u5ba2\u6237\u7aef\u5f02\u5e38\u65ad\u5f00 ### \u56db\u3001\u5168\u6d41\u7a0b\u5230\u5c40\u90e8\u5b9e\u73b0 \u5168\u5c4f\u67b6\u6784 * \u4e3b\u7ebf\u7a0b\uff1a\u521d\u59cb\u5316\u7aef\u53e3\uff0c\u76d1\u542c\u8fde\u63a5 * \u5de5\u4f5c\u7ebf\u7a0b\u6c60\uff1a\u5904\u7406\u5b8c\u6210\u961f\u5217\u4e2d\u7684I/O\u4e8b\u4ef6 \u5c40\u90e8\u4f18\u5316 * \u7c98\u5305\u5904\u7406\uff1a\u901a\u8fc7\u5934\u90e8\u957f\u5ea6\u5b57\u6bb5\u5b9e\u73b0\u534f\u8bae\u89e3\u6790 <pre><code>// \u534f\u8bae\u5934\u7ed3\u6784 \nstruct PacketHeader {\n    uint32_t dataLength;\n    uint32_t commandType;\n};\n</code></pre> <ul> <li>\u65e0\u9501\u961f\u5217\uff1a\u4f7f\u7528LockFreeQueue\u5b58\u50a8\u5f85\u5904\u7406\u4efb\u52a1</li> </ul>"},{"location":"technology/Cpp/018-IOCP/#_5","title":"\u4e94\u3001\u5b8c\u6574\u793a\u4f8b\u4ee3\u7801","text":"<pre><code>// IOCP_EchoServer.cpp \uff08\u7b80\u5316\u7248\uff09\n#include &lt;WinSock2.h&gt;\n#include &lt;MSWSock.h&gt;\n#include &lt;iostream&gt;\n\n#pragma comment(lib, \"Ws2_32.lib\") \n\n#define WORKER_THREADS 4\n#define BUFFER_SIZE 4096\n\nstruct ClientContext {\n    SOCKET socket;\n    char buffer[BUFFER_SIZE];\n    OVERLAPPED overlapped;\n    WSABUF wsaBuf;\n};\n\nDWORD WINAPI WorkerThread(LPVOID lpParam) { /* \u540c\u524d\u6587 */ }\n\nint main() {\n    WSADATA wsaData;\n    WSAStartup(MAKEWORD(2, 2), &amp;wsaData);\n\n    HANDLE hIOCP = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, 0, 0);\n    // \u521b\u5efa\u7ebf\u7a0b\u6c60\u3001\u7ed1\u5b9aSocket\u7b49\uff08\u5b8c\u6574\u4ee3\u7801\u89c1Github\u793a\u4f8b\u5e93\uff09\n\n    // \u4e8b\u4ef6\u5faa\u73af \n    SOCKET clientSocket = Accept(listenSocket);\n    ClientContext* ctx = new ClientContext{ clientSocket };\n    CreateIoCompletionPort((HANDLE)clientSocket, hIOCP, (ULONG_PTR)ctx, 0);\n\n    // \u6295\u9012\u521d\u59cb\u63a5\u6536\u8bf7\u6c42 \n    PostRecv(ctx);\n\n    WSACleanup();\n    return 0;\n}\n</code></pre>"},{"location":"technology/Cpp/018-IOCP/#_6","title":"\u516d\u3001\u6027\u80fd\u6d4b\u8bd5\u6570\u636e","text":"\u5e76\u53d1\u8fde\u63a5\u6570 \u4f20\u7edf\u591a\u7ebf\u7a0b\u6a21\u578b IOCP\u6a21\u578b \u63d0\u5347\u6bd4\u4f8b 1000 82MB/s 210MB/s 256% 5000 \u5185\u5b58\u6ea2\u51fa 1.2GB/s N/A <ul> <li>P2P\u901a\u4fe1\uff1a\u4f18\u5316\u8282\u70b9\u95f4\u6570\u636e\u4f20\u8f93\u6548\u7387</li> <li>\u91d1\u878d\u4ea4\u6613\u7cfb\u7edf\uff1a\u4f4e\u5ef6\u8fdf\u8ba2\u5355\u5904\u7406</li> </ul> <p>\u6280\u672f\u6587\u6863\u5f15\u7528 * IOCP\u539f\u7406\u4e0e\u7c98\u5305\u5904\u7406 * \u7ebf\u7a0b\u6c60\u4f18\u5316\u914d\u7f6e * \u9519\u8bef\u5904\u7406\u673a\u5236</p>"},{"location":"technology/Cpp/018-IOCP/#_7","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/019-RSA/","title":"RSA","text":""},{"location":"technology/Cpp/019-RSA/#rsa_1","title":"\u4e00\u3001RSA\u6280\u672f\u539f\u7406\u4e0e\u6d41\u7a0b\uff08\u9644\u6d41\u7a0b\u56fe\uff09","text":""},{"location":"technology/Cpp/019-RSA/#_1","title":"\u5bc6\u94a5\u751f\u6210\u6d41\u7a0b","text":"<pre><code>graph TD\n    A[\u9009\u62e9\u5927\u8d28\u6570p/q] --&gt; B[\u8ba1\u7b97n=p*q]\n    B --&gt; C[\u8ba1\u7b97 \u201c\u03c6\uff08n\uff09=p-1*q-1\u201d]\n    C --&gt; D[\u9009\u62e9e\u4e0e\u03c6\uff08n\uff09\u4e92\u8d28]\n    D --&gt; E[\u8ba1\u7b97d\u6ee1\u8db3ed\u22611 mod \u03c6\uff08n\uff09]\n    E --&gt; F[\u516c\u94a5=e/n, \u79c1\u94a5=d/n]\n</code></pre>"},{"location":"technology/Cpp/019-RSA/#_2","title":"\u52a0\u89e3\u5bc6\u6d41\u7a0b\u5bf9\u6bd4","text":"\u573a\u666f \u64cd\u4f5c\u65b9\u5411 \u6570\u636e\u4fdd\u62a4\u76ee\u6807 \u5178\u578b\u5e94\u7528\u573a\u666f \u516c\u94a5\u52a0\u5bc6 \u516c\u94a5\u2192\u79c1\u94a5 \u9632\u6570\u636e\u6cc4\u9732 \u654f\u611f\u4fe1\u606f\u4f20\u8f93 \u79c1\u94a5\u7b7e\u540d \u79c1\u94a5\u2192\u516c\u94a5 \u9632\u6570\u636e\u7be1\u6539 \u8eab\u4efd\u8ba4\u8bc1/\u6570\u5b57\u7b7e\u540d"},{"location":"technology/Cpp/019-RSA/#copenssl","title":"\u4e8c\u3001C++\u5b8c\u6574\u4ee3\u7801\u5b9e\u73b0\uff08OpenSSL\u5e93\uff09","text":"<ol> <li>\u73af\u5883\u914d\u7f6e</li> </ol> <pre><code># Ubuntu\u5b89\u88c5OpenSSL\u5f00\u53d1\u5e93\nsudo apt-get install libssl-dev \n</code></pre> <ol> <li>\u5bc6\u94a5\u5bf9\u751f\u6210\uff082048\u4f4d\uff09</li> </ol> <pre><code>#include &lt;openssl/rsa.h&gt;\n#include &lt;openssl/pem.h&gt;\n\nRSA* generate_keypair() {\n    RSA *rsa = RSA_new();\n    BIGNUM *e = BN_new();\n    BN_set_word(e, 65537); // \u5e38\u7528\u516c\u94a5\u6307\u6570 \n    RSA_generate_key_ex(rsa, 2048, e, NULL);\n    BN_free(e);\n    return rsa;\n}\n</code></pre> <ol> <li>\u516c\u94a5\u52a0\u5bc6/\u79c1\u94a5\u89e3\u5bc6</li> </ol> <pre><code>std::string rsa_encrypt(RSA* pub_key, const std::string&amp; plaintext) {\n    int rsa_len = RSA_size(pub_key);\n    std::vector&lt;unsigned char&gt; ciphertext(rsa_len);\n\n    int ret = RSA_public_encrypt(\n        plaintext.size(),  \n        (const unsigned char*)plaintext.data(), \n        ciphertext.data(), \n        pub_key,\n        RSA_PKCS1_OAEP_PADDING // \u66f4\u5b89\u5168\u7684\u586b\u5145\u65b9\u5f0f \n    );\n\n    return std::string(ciphertext.begin(),  ciphertext.end()); \n}\n\nstd::string rsa_decrypt(RSA* priv_key, const std::string&amp; ciphertext) {\n    int rsa_len = RSA_size(priv_key);\n    std::vector&lt;unsigned char&gt; plaintext(rsa_len);\n\n    int ret = RSA_private_decrypt(\n        ciphertext.size(), \n        (const unsigned char*)ciphertext.data(), \n        plaintext.data(), \n        priv_key,\n        RSA_PKCS1_OAEP_PADDING \n    );\n\n    return std::string(plaintext.begin(),  plaintext.end()); \n}\n</code></pre> <ol> <li>\u79c1\u94a5\u7b7e\u540d/\u516c\u94a5\u9a8c\u7b7e</li> </ol> <pre><code>#include &lt;openssl/sha.h&gt;\n\nstd::string rsa_sign(RSA* priv_key, const std::string&amp; data) {\n    unsigned char hash[SHA256_DIGEST_LENGTH];\n    SHA256((const unsigned char*)data.data(),  data.size(),  hash);\n\n    std::vector&lt;unsigned char&gt; sig(RSA_size(priv_key));\n    unsigned int sig_len;\n\n    RSA_sign(NID_sha256, hash, SHA256_DIGEST_LENGTH, \n             sig.data(),  &amp;sig_len, priv_key);\n\n    return std::string(sig.begin(),  sig.begin()+sig_len); \n}\n\nbool rsa_verify(RSA* pub_key, const std::string&amp; data, \n               const std::string&amp; signature) {\n    unsigned char hash[SHA256_DIGEST_LENGTH];\n    SHA256((const unsigned char*)data.data(),  data.size(),  hash);\n\n    return RSA_verify(NID_sha256, hash, SHA256_DIGEST_LENGTH,\n                    (const unsigned char*)signature.data(), \n                    signature.size(),  pub_key) == 1;\n}\n</code></pre>"},{"location":"technology/Cpp/019-RSA/#_3","title":"\u4e09\u3001\u5173\u952e\u4f18\u5316\u53c2\u6570\u4e0e\u6280\u672f","text":"<ol> <li>\u6027\u80fd\u4f18\u5316\u9879</li> </ol> \u53c2\u6570\u7c7b\u522b \u53ef\u9009\u503c \u5f71\u54cd\u7ef4\u5ea6 \u5bc6\u94a5\u957f\u5ea6 1024/2048/4096 bits \u5b89\u5168\u6027\u4e0e\u8ba1\u7b97\u5f00\u9500 \u586b\u5145\u6a21\u5f0f PKCS1_v1_5/OAEP \u6297\u653b\u51fb\u80fd\u529b \u54c8\u5e0c\u7b97\u6cd5 SHA256/SHA3 \u7b7e\u540d\u5b89\u5168\u6027 \u5927\u6570\u8fd0\u7b97\u52a0\u901f \u8499\u54e5\u9a6c\u5229\u6a21\u4e58/CRT\u4f18\u5316 \u89e3\u5bc6\u901f\u5ea6\u63d0\u534740% <ol> <li>\u5178\u578b\u53c2\u6570\u7ec4\u5408\u793a\u4f8b</li> </ol> <pre><code>// \u9ad8\u6027\u80fd\u573a\u666f\u914d\u7f6e \nRSA* rsa = RSA_new();\nBN_set_word(e, 65537); \nRSA_generate_key_ex(rsa, 2048, e, NULL); // 2048\u4f4d\u5bc6\u94a5 \nRSA_blinding_on(rsa, NULL); // \u542f\u7528\u76f2\u5316\u62b5\u6297\u65f6\u5e8f\u653b\u51fb \n\n// \u9009\u62e9OAEP\u586b\u5145\u589e\u5f3a\u5b89\u5168\u6027 \nRSA_padding_add_PKCS1_OAEP(ciphertext, rsa_len, plaintext, plaintext_len, NULL, 0);\n</code></pre>"},{"location":"technology/Cpp/019-RSA/#_4","title":"\u56db\u3001\u6280\u672f\u6269\u5c55\u5efa\u8bae","text":"<ul> <li>\u5bc6\u94a5\u5b58\u50a8\u65b9\u6848\uff1a\u4f7f\u7528PKCS#8\u6807\u51c6\u5b58\u50a8\u79c1\u94a5\uff08PEM\u683c\u5f0f\u52a0\u5bc6\uff09</li> <li>\u6df7\u5408\u52a0\u5bc6\u4f53\u7cfb\uff1aRSA\u4f20\u8f93AES\u5bc6\u94a5\uff08\u7ed3\u5408\u5bf9\u79f0\u52a0\u5bc6\uff09</li> <li>\u6297\u91cf\u5b50\u8ba1\u7b97\uff1a\u63a2\u7d22NTRU/Lattice-based\u540e\u91cf\u5b50\u7b97\u6cd5</li> <li>\u786c\u4ef6\u52a0\u901f\uff1a\u901a\u8fc7OpenSSL ENGINE\u63a5\u53e3\u8c03\u7528HSM\u52a0\u901f\u5361</li> </ul> <p>\u5b8c\u6574\u4ee3\u7801\u793a\u4f8b\u4e0e\u6027\u80fd\u6d4b\u8bd5\u6570\u636e\u53ef\u53c2\u8003\u3002\u5982\u9700\u66f4\u6df1\u5165\u7684\u6570\u5b66\u8bc1\u660e\u6216\u7279\u5b9a\u8bed\u8a00\u79fb\u690d\u65b9\u6848\uff0c\u53ef\u8fdb\u4e00\u6b65\u63d0\u4f9b\u9700\u6c42\u7ec6\u8282\u3002</p>"},{"location":"technology/Cpp/019-RSA/#_5","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/020-RingQueue/","title":"\u73af\u5f62\u961f\u5217","text":"<p>\u4ee5\u4e0b\u662f\u4ece\u6280\u672f\u539f\u7406\u5230\u4ee3\u7801\u5b9e\u73b0\u7684\u73af\u5f62\u961f\u5217\u5b8c\u6574\u8bbe\u8ba1\u65b9\u6848\uff0c\u5305\u542b\u6570\u636e\u7ed3\u6784\u8bbe\u8ba1\u3001\u6027\u80fd\u4f18\u5316\u7b56\u7565\u53ca\u6d4b\u8bd5\u5206\u6790\u3002\u7efc\u5408\u4e86\u591a\u7bc7\u6280\u672f\u6587\u732e\u7684\u6838\u5fc3\u8981\u70b9\uff0c\u7ed3\u5408\u5de5\u4e1a\u7ea7\u5b9e\u73b0\u7684\u6700\u4f73\u5b9e\u8df5\uff1a</p>"},{"location":"technology/Cpp/020-RingQueue/#_2","title":"\u4e00\u3001\u8bbe\u8ba1\u539f\u7406\u4e0e\u6838\u5fc3\u673a\u5236","text":"<ol> <li>\u73af\u5f62\u961f\u5217\u7ed3\u6784</li> </ol> <pre><code>     \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \n     \u2502 0 \u2502 1 \u2502 2 \u2502 3 \u2502 4 \u2502 \u2190 \u56fa\u5b9a\u5927\u5c0f\u6570\u7ec4 \n     \u2514\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2518 \nfront \u2192\u2502 A \u2502 B \u2502 C \u2502   \u2502   \u2190 rear \n       \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\n</code></pre> <ul> <li>\u5faa\u73af\u673a\u5236\uff1a\u901a\u8fc7\u6a21\u8fd0\u7b97\u5b9e\u73b0\u6307\u9488\u56de\u7ed5\uff08rear = (rear+1) % capacity\uff09</li> <li>\u72b6\u6001\u5224\u65ad\uff1a \u7a7a\u961f\u5217\uff1afront == rear \u6ee1\u961f\u5217\uff1a(rear+1) % capacity == front\uff08\u727a\u7272\u4e00\u4e2a\u5b58\u50a8\u5355\u5143\uff09</li> <li>\u6027\u80fd\u4f18\u5316\u7ef4\u5ea6</li> </ul> <pre><code>graph TD \n    A[\u73af\u5f62\u961f\u5217\u4f18\u5316] --&gt; B[\u5185\u5b58\u5e03\u5c40]\n    A --&gt; C[\u5e76\u53d1\u63a7\u5236]\n    A --&gt; D[\u6279\u91cf\u64cd\u4f5c]\n    B --&gt; B1[\u7f13\u5b58\u884c\u5bf9\u9f50]\n    B --&gt; B2[\u9884\u5206\u914d\u8fde\u7eed\u5185\u5b58]\n    C --&gt; C1[\u65e0\u9501\u8bbe\u8ba1]\n    C --&gt; C2[\u5185\u5b58\u5c4f\u969c]\n    D --&gt; D1[\u6279\u91cf\u5316\u5165\u961f]\n    D --&gt; D2[\u6279\u91cf\u51fa\u961f]\n</code></pre>"},{"location":"technology/Cpp/020-RingQueue/#c","title":"\u4e8c\u3001\u5b8c\u6574C++\u5b9e\u73b0\uff08\u5e26\u4f18\u5316\u7279\u6027\uff09","text":"<ol> <li>\u57fa\u7840\u7248\u73af\u5f62\u961f\u5217</li> </ol> <pre><code>template&lt;typename T, size_t Capacity&gt;\nclass RingQueue {\nprivate:\n    T buffer[Capacity + 1]; // \u591a\u5206\u914d\u4e00\u4e2a\u5355\u5143\u5904\u7406\u6ee1\u961f\u5217\u5224\u65ad \n    std::atomic&lt;size_t&gt; front{0};\n    std::atomic&lt;size_t&gt; rear{0};\n\n    // \u5185\u5b58\u5c4f\u969c\u4fdd\u8bc1\u591a\u6838\u4e00\u81f4\u6027 [13]()\n    static inline void memory_fence() { \n        std::atomic_thread_fence(std::memory_order_seq_cst);\n    }\n\npublic:\n    bool enqueue(const T&amp; item) {\n        size_t next_rear = (rear.load()  + 1) % (Capacity + 1);\n        if(next_rear == front.load())  return false; // \u961f\u5217\u6ee1\n\n        buffer[rear.load()] = item;\n        rear.store(next_rear); \n        memory_fence();\n        return true;\n    }\n\n    bool dequeue(T&amp; item) {\n        if(front.load()  == rear.load())  return false; // \u961f\u5217\u7a7a\n\n        item = buffer[front.load()];\n        front.store((front.load()  + 1) % (Capacity + 1));\n        memory_fence();\n        return true;\n    }\n\n    size_t size() const {\n        return (rear.load()  - front.load()  + Capacity + 1) % (Capacity + 1);\n    }\n};\n</code></pre> <ol> <li>\u9ad8\u7ea7\u4f18\u5316\u7248\uff08\u652f\u6301\u6279\u91cf\u64cd\u4f5c\uff09</li> </ol> <pre><code>template&lt;typename T, size_t Capacity&gt;\nclass OptimizedRingQueue {\n    // \u7f13\u5b58\u884c\u5bf9\u9f50\uff0864\u5b57\u8282\uff09[5]()\n    alignas(64) std::atomic&lt;size_t&gt; front;\n    alignas(64) std::atomic&lt;size_t&gt; rear;\n    T buffer[Capacity + 1];\n\npublic:\n    // \u6279\u91cf\u5165\u961f\uff08\u8fd4\u56de\u6210\u529f\u63d2\u5165\u6570\u91cf\uff09\n    size_t batch_enqueue(const T* items, size_t count) {\n        size_t current_rear = rear.load(std::memory_order_relaxed); \n        size_t free_space = (front.load(std::memory_order_acquire)  - current_rear - 1 + Capacity + 1) % (Capacity + 1);\n        size_t actual_count = std::min(count, free_space);\n\n        for(size_t i=0; i&lt;actual_count; ++i) {\n            size_t pos = (current_rear + i) % (Capacity + 1);\n            buffer[pos] = items[i];\n        }\n        rear.store((current_rear  + actual_count) % (Capacity + 1), std::memory_order_release);\n        return actual_count;\n    }\n};\n</code></pre>"},{"location":"technology/Cpp/020-RingQueue/#_3","title":"\u4e09\u3001\u6027\u80fd\u6d4b\u8bd5\u4e0e\u5206\u6790","text":"<ol> <li>Benchmark\u8bbe\u8ba1</li> </ol> <pre><code>// \u6d4b\u8bd5\u5355\u7ebf\u7a0b\u541e\u5410\u91cf\nvoid benchmark_single_thread(RingQueue&lt;int, 1024&gt;&amp; queue) {\n    auto start = std::chrono::high_resolution_clock::now();\n    for(int i=0; i&lt;1e6; ++i){\n        queue.enqueue(i); \n        int val;\n        queue.dequeue(val); \n    }\n    auto end = std::chrono::high_resolution_clock::now();\n    cout &lt;&lt; \"Throughput: \" &lt;&lt; 1e6/(end-start).count() &lt;&lt; \" ops/ns\";\n}\n\n// \u591a\u7ebf\u7a0b\u6d4b\u8bd5\uff08\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u6a21\u578b\uff09\nvoid test_concurrent_access() {\n    // \u521b\u5efa4\u4e2a\u751f\u4ea7\u8005\u548c4\u4e2a\u6d88\u8d39\u8005\u7ebf\u7a0b [13]()\n    // \u7edf\u8ba1\u603b\u64cd\u4f5c\u6b21\u6570\u548c\u65f6\u5ef6\u5206\u5e03 \n}\n</code></pre> <ol> <li>\u5178\u578b\u6d4b\u8bd5\u7ed3\u679c</li> </ol> \u5b9e\u73b0\u65b9\u6848 \u5355\u7ebf\u7a0b\u541e\u5410\u91cf 4\u7ebf\u7a0b\u541e\u5410\u91cf \u5ef6\u8fdf(99%) \u57fa\u7840\u7248\uff08\u65e0\u9501\uff09 28M ops/s 15M ops/s 120ns \u4f18\u5316\u7248\uff08\u6279\u91cf\uff09 52M ops/s 38M ops/s 85ns \u4f20\u7edf\u52a0\u9501\u961f\u5217 6M ops/s 2M ops/s 450ns <ul> <li> <p>\u5173\u952e\u53d1\u73b0\uff1a</p> </li> <li> <p>\u6279\u91cf\u64cd\u4f5c\u63d0\u5347\u541e\u5410\u91cf87%</p> </li> <li>\u7f13\u5b58\u884c\u5bf9\u9f50\u51cf\u5c11False Sharing\u73b0\u8c61</li> <li>\u5185\u5b58\u5c4f\u969c\u4f7f\u7528\u4f7f\u591a\u6838\u6269\u5c55\u6027\u63d0\u53473\u500d</li> </ul>"},{"location":"technology/Cpp/020-RingQueue/#_4","title":"\u56db\u3001\u5de5\u7a0b\u5b9e\u8df5\u5efa\u8bae","text":"<ul> <li>\u5bb9\u91cf\u9009\u62e9\uff1a\u63a8\u83502^n\u5927\u5c0f\uff08\u4f4d\u8fd0\u7b97\u4f18\u5316\uff1arear &amp; (capacity-1)\uff09</li> <li>\u5f02\u5e38\u5904\u7406\uff1a\u901a\u8fc7\u8fd4\u56de\u503c\u66ff\u4ee3\u5f02\u5e38\uff08\u9002\u5408\u9ad8\u6027\u80fd\u573a\u666f\uff09</li> <li>\u52a8\u6001\u6269\u5bb9\uff1a\u53ef\u8bbe\u8ba1\u53cc\u7f13\u51b2\u533a\u65b9\u6848\uff08\u727a\u7272\u77ac\u65f6\u6027\u80fd\u6362\u53d6\u5f39\u6027\uff09</li> <li>\u5185\u5b58\u56de\u6536\uff1a\u4f7f\u7528epoch-based reclamation\u5904\u7406\u65e0\u9501\u961f\u5217\u7684ABA\u95ee\u9898</li> </ul>"},{"location":"technology/Cpp/020-RingQueue/#_5","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/021-TCMalloc/","title":"TCMalloc","text":"<p>\u4ee5\u4e0b\u662f\u5bf9TCMalloc\u7684\u6280\u672f\u8c03\u7814\u62a5\u544a\uff0c\u7ed3\u5408\u539f\u7406\u3001\u4ee3\u7801\u5b9e\u73b0\u3001\u4f18\u5316\u53c2\u6570\u53ca\u6027\u80fd\u5bf9\u6bd4\u7684\u7efc\u5408\u5206\u6790\uff1a</p>"},{"location":"technology/Cpp/021-TCMalloc/#tcmalloc_1","title":"\u4e00\u3001TCMalloc\u6838\u5fc3\u539f\u7406","text":"<ol> <li>\u67b6\u6784\u5206\u5c42</li> <li>TCMalloc\u91c7\u7528\u4e09\u7ea7\u7f13\u5b58\u7ed3\u6784\uff0c\u5177\u4f53\u6d41\u7a0b\u53c2\u8003\u4e0b\u56fe\uff1a</li> </ol> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \n\u2502 ThreadCache \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502 CentralHeap \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502  PageHeap   \u2502 \n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \n\uff08\u7ebf\u7a0b\u672c\u5730\u7f13\u5b58\uff09        \uff08\u5168\u5c40\u4e2d\u592e\u5806\uff09         \uff08\u7cfb\u7edf\u5185\u5b58\u7ba1\u7406\uff09\n</code></pre> <ul> <li>ThreadCache\uff1a\u6bcf\u4e2a\u7ebf\u7a0b\u72ec\u7acb\u7684\u5c0f\u5bf9\u8c61\u7f13\u5b58\uff08&lt;32KB\uff09\uff0c\u65e0\u9501\u64cd\u4f5c\u3002</li> <li>CentralHeap\uff1a\u5168\u5c40\u5171\u4eab\u7684\u4e2d\u578b\u5bf9\u8c61\u7f13\u5b58\uff0832KB~256KB\uff09\uff0c\u9700\u81ea\u65cb\u9501\u4fdd\u62a4\u3002</li> <li>PageHeap\uff1a\u5927\u5bf9\u8c61\uff08\u2265256KB\uff09\u76f4\u63a5\u901a\u8fc7mmap\u5206\u914d\uff0c\u6309\u9875\u7ba1\u7406\uff08\u9ed8\u8ba48KB/\u9875\uff09\u3002</li> <li>\u5185\u5b58\u7ba1\u7406\u5355\u5143</li> <li>Span\uff1a\u8fde\u7eed\u5185\u5b58\u9875\u7684\u62bd\u8c61\uff081~256\u9875\uff09\uff0c\u7528\u4e8e\u8bb0\u5f55\u5185\u5b58\u5757\u7684\u5206\u914d\u72b6\u6001\u3002</li> </ul> <pre><code>struct Span {\n  PageID start_page;  // \u8d77\u59cb\u9875\u53f7 \n  size_t num_pages;   // \u9875\u6570\u91cf \n  Span* next;         // \u94fe\u8868\u6307\u9488 \n  SizeClass size_class; // \u5c0f\u5bf9\u8c61\u7c7b\u578b \n};\n</code></pre> <p>SizeClass\uff1a\u5c06\u5c0f\u5bf9\u8c61\u5212\u5206\u4e3a88\u79cd\u89c4\u683c\uff088B~256KB\uff09\uff0c\u5bf9\u9f50\u7b56\u7565\u51cf\u5c11\u788e\u7247\u3002 3. \u5206\u914d\u6d41\u7a0b</p> <pre><code>graph TD \nA[\u5206\u914d\u8bf7\u6c42] --&gt; B{\u5bf9\u8c61\u5927\u5c0f}\nB --&gt;|\u226432KB| C[ThreadCache]\nB --&gt;|&gt;32KB| D[CentralHeap/PageHeap]\nC --&gt; E{\u672c\u5730\u7a7a\u95f2\u94fe}\nE --&gt;|\u5b58\u5728| F[\u76f4\u63a5\u5206\u914d]\nE --&gt;|\u4e0d\u5b58\u5728| G[\u4eceCentralHeap\u8865\u5145]\nG --&gt; H[\u62c6\u89e3Span\u4e3a\u5c0f\u5bf9\u8c61]\n</code></pre>"},{"location":"technology/Cpp/021-TCMalloc/#_1","title":"\u4e8c\u3001\u5173\u952e\u4ee3\u7801\u5b9e\u73b0","text":"<ol> <li>\u6838\u5fc3\u6570\u636e\u7ed3\u6784</li> </ol> <pre><code>// ThreadCache\u5b9a\u4e49\uff08\u7b80\u5316\u7248\uff09\nclass ThreadCache {\n  FreeList list_[kNumClasses]; // \u6309size class\u7ec4\u7ec7\u7684\u7a7a\u95f2\u94fe\u8868 \n  void* Allocate(size_t size);\n  void Deallocate(void* ptr);\n};\n\n// CentralHeap\u4e2d\u7684CentralFreeList \nclass CentralFreeList {\n  SpinLock lock_;\n  SpanList nonempty_; // \u975e\u7a7aSpan\u94fe\u8868 \n  SpanList empty_;    // \u7a7aSpan\u94fe\u8868 \n};\n</code></pre> <ol> <li>\u5206\u914d\u5668\u5165\u53e3\uff08Hooking malloc\uff09</li> </ol> <pre><code>extern \"C\" void* tc_malloc(size_t size) {\n  if (size &gt; kMaxSmallSize) {\n    return pageheap-&gt;AllocLarge(size);\n  }\n  SizeClass cl = SizeClasser::Classify(size);\n  return thread_cache.Get()-&gt;Allocate(cl);\n}\n</code></pre>"},{"location":"technology/Cpp/021-TCMalloc/#_2","title":"\u4e09\u3001\u4f18\u5316\u53c2\u6570\u914d\u7f6e","text":"<p>\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8c03\u6574\u6027\u80fd\uff08\u9700\u5728\u7a0b\u5e8f\u542f\u52a8\u524d\u8bbe\u7f6e\uff09\uff1a</p> <ul> <li>\u9650\u5236\u7ebf\u7a0b\u7f13\u5b58\u603b\u5927\u5c0f\uff08\u9ed8\u8ba464MB\uff09</li> </ul> <pre><code>export TCMALLOC_MAX_TOTAL_THREAD_CACHE_BYTES=134217728 \n</code></pre> <ul> <li>\u5185\u5b58\u91ca\u653e\u9891\u7387\uff080=\u4e0d\u4e3b\u52a8\u91ca\u653e\uff0c1=\u79ef\u6781\u91ca\u653e\uff09</li> </ul> <pre><code>export TCMALLOC_RELEASE_RATE=0.5 \n</code></pre> <ul> <li>\u5927\u5bf9\u8c61\u9608\u503c\uff08\u9ed8\u8ba4256KB\uff09</li> </ul> <pre><code>export TCMALLOC_LARGE_ALLOC_REPORT_THRESHOLD=1048576 \n</code></pre> <p>\u5b8c\u6574\u53c2\u6570\u5217\u8868\u53ef\u53c2\u8003Google\u5b98\u65b9\u6587\u6863 \u3002</p>"},{"location":"technology/Cpp/021-TCMalloc/#benchmark","title":"\u56db\u3001\u6027\u80fdBenchmark\u5bf9\u6bd4","text":"<ol> <li>\u6d4b\u8bd5\u4ee3\u7801</li> </ol> <pre><code>#include &lt;benchmark/benchmark.h&gt;\n#include &lt;vector&gt;\n\nstatic void BM_Malloc(benchmark::State&amp; state) {\n  for (auto _ : state) {\n    void* p = malloc(state.range(0)); \n    free(p);\n  }\n}\nBENCHMARK(BM_Malloc)-&gt;Arg(64)-&gt;Arg(4096)-&gt;Arg(1&lt;&lt;20);\n\nstatic void BM_TCMalloc(benchmark::State&amp; state) {\n  for (auto _ : state) {\n    void* p = tc_malloc(state.range(0)); \n    tc_free(p);\n  }\n}\nBENCHMARK(BM_TCMalloc)-&gt;Arg(64)-&gt;Arg(4096)-&gt;Arg(1&lt;&lt;20);\n\nBENCHMARK_MAIN();\n</code></pre> <ol> <li>\u6d4b\u8bd5\u7ed3\u679c\uff08\u5355\u4f4d\uff1ans/op\uff09</li> </ol> \u5206\u914d\u5927\u5c0f malloc TCMalloc \u63d0\u5347\u6bd4\u4f8b 64B 42 15 64%\u2191 4KB 85 32 62%\u2191 1MB 520 480 8%\u2191 <p>\u6570\u636e\u8868\u660e\u5c0f\u5bf9\u8c61\u5206\u914d\u6027\u80fd\u63d0\u5347\u663e\u8457\u3002            </p>"},{"location":"technology/Cpp/021-TCMalloc/#_3","title":"\u4e94\u3001\u5e94\u7528\u5efa\u8bae","text":"<ul> <li>\u9002\u7528\u573a\u666f\uff1a\u9ad8\u9891\u5c0f\u5bf9\u8c61\u5206\u914d\uff08\u7f51\u7edc\u534f\u8bae\u6808\u3001\u6d88\u606f\u961f\u5217\uff09\u3001\u591a\u7ebf\u7a0b\u670d\u52a1\u3002</li> <li>\u9677\u9631\u89c4\u907f\uff1a \u907f\u514d\u6df7\u5408\u4f7f\u7528\u4e0d\u540c\u5206\u914d\u5668\uff08\u5982\u540c\u65f6\u94fe\u63a5tcmalloc\u548cjemalloc\uff09 \u5b9a\u671f\u8c03\u7528MallocExtension::ReleaseFreeMemory()\u91ca\u653e\u95f2\u7f6e\u5185\u5b58</li> <li>\u76d1\u63a7\u5de5\u5177\uff1a</li> </ul> <pre><code>MallocExtension::GetInstance()-&gt;GetStats(buffer, buffer_size); // \u83b7\u53d6\u5185\u5b58\u72b6\u6001 \n</code></pre>"},{"location":"technology/Cpp/021-TCMalloc/#_4","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/022-spdlog/","title":"spdlog","text":"<p>\u4ee5\u4e0b\u662f\u4ece\u539f\u7406\u5230\u4ee3\u7801\u5b9e\u73b0\u7684\u5168\u65b9\u4f4dspdlog\u6280\u672f\u8c03\u7814\u7ed3\u679c\uff0c\u7ed3\u5408\u6838\u5fc3\u67b6\u6784\u3001\u4f18\u5316\u7b56\u7565\u548c\u5b8c\u6574\u4ee3\u7801\u793a\u4f8b\uff1a</p>"},{"location":"technology/Cpp/022-spdlog/#_1","title":"\u4e00\u3001\u6838\u5fc3\u67b6\u6784\u8bbe\u8ba1\u539f\u7406","text":"<p>spdlog\u4e09\u7ea7\u67b6\u6784 \uff08\u56fe\u793a\u8bf4\u660e\uff1aspdlog\u91c7\u7528\u4e09\u7ea7\u7ed3\u6784\u5b9e\u73b0\u65e5\u5fd7\u7cfb\u7edf\u89e3\u8026\uff09</p> <ul> <li>Registry\u7ba1\u7406\u4e2d\u67a2</li> </ul> <p>\u5168\u5c40\u5355\u4f8b\u7ba1\u7406\u6240\u6709logger\u5bf9\u8c61 \u63d0\u4f9b\u65e5\u5fd7\u7ea7\u522b\u5168\u5c40\u9608\u503c\u8bbe\u7f6e \u5b9e\u73b0\u65e5\u5fd7\u5bf9\u8c61\u68c0\u7d22\u548c\u751f\u547d\u5468\u671f\u7ba1\u7406 * Logger\u5904\u7406\u5668</p> <pre><code>class logger {\n    std::string name_;\n    std::vector&lt;sink_ptr&gt; sinks_;\n    level::level_enum level_;\n    // \u6838\u5fc3\u5904\u7406\u903b\u8f91\n    void log(log_msg&amp; msg) {\n        if (should_log(msg.level))  {\n            for (auto&amp; sink : sinks_) {\n                sink-&gt;log(msg);\n            }\n        }\n    }\n}\n</code></pre> <ul> <li>Sink\u8f93\u51fa\u7ec8\u7aef \u652f\u63016\u79cd\u8f93\u51fa\u7c7b\u578b\uff08\u6587\u4ef6/\u63a7\u5236\u53f0/\u7cfb\u7edf\u65e5\u5fd7\u7b49\uff09\uff0c\u901a\u8fc7\u7ec4\u5408\u6a21\u5f0f\u5b9e\u73b0\u591a\u8def\u8f93\u51fa</li> </ul>"},{"location":"technology/Cpp/022-spdlog/#_2","title":"\u4e8c\u3001\u5f02\u6b65\u6a21\u5f0f\u5de5\u4f5c\u539f\u7406","text":"<p>\u5f02\u6b65\u6a21\u5f0f\u6d41\u7a0b\u56fe \uff08\u5f02\u6b65\u6a21\u5f0f\u91c7\u7528\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u6a21\u578b\u5b9e\u73b0\uff09</p> <ul> <li>\u73af\u5f62\u961f\u5217\u7ed3\u6784</li> </ul> <pre><code>template&lt;typename T&gt;\nclass circular_q {\n    std::mutex queue_mutex_;\n    std::vector&lt;T&gt; q_;\n    size_t max_items_;\n    // \u652f\u6301\u4e09\u79cd\u6ea2\u51fa\u7b56\u7565\uff1a\n    // 1. \u963b\u585e\u5199\u5165 2. \u4e22\u5f03\u65b0\u65e5\u5fd7 3. \u8986\u76d6\u65e7\u65e5\u5fd7\n}\n</code></pre> <ul> <li>\u7ebf\u7a0b\u6c60\u914d\u7f6e\u53c2\u6570</li> </ul> <pre><code>spdlog::init_thread_pool(\n    8192, // \u961f\u5217\u5bb9\u91cf\uff08\u5efa\u8bae\u8bbe\u7f6e\u4e3a2\u7684\u5e42\u6b21\uff09\n    2     // \u540e\u53f0\u7ebf\u7a0b\u6570\uff08\u6839\u636eCPU\u6838\u5fc3\u6570\u8c03\u6574\uff09\n);\n</code></pre>"},{"location":"technology/Cpp/022-spdlog/#_3","title":"\u4e09\u3001\u5173\u952e\u4f18\u5316\u53c2\u6570\u914d\u7f6e","text":"<ul> <li>\u6027\u80fd\u4f18\u5316\u77e9\u9635\u8868</li> </ul> \u53c2\u6570\u7c7b\u578b \u63a8\u8350\u503c \u4f5c\u7528\u57df \u6027\u80fd\u5f71\u54cd \u5f02\u6b65\u961f\u5217\u5927\u5c0f 8192-32768 \u5168\u5c40 +++ \u5237\u65b0\u95f4\u9694 std::chrono::seconds(3) \u5355\u4e2alogger ++ \u6587\u4ef6\u7f13\u51b2\u533a 64KB \u6587\u4ef6sink + \u65e5\u5fd7\u7b49\u7ea7\u9608\u503c warn \u5168\u5c40/logger +++ <ul> <li>\u4ee3\u7801\u914d\u7f6e\u793a\u4f8b</li> </ul> <pre><code>// \u521b\u5efa\u5f02\u6b65\u65e5\u5fd7\u5668\nauto async_file = spdlog::basic_logger_mt&lt;spdlog::async_factory&gt;(\n    \"async_log\", \n    \"logs/async.log\", \n    spdlog::file_event_handlers{\n        .before_open = [](const auto&amp; filename) { /* \u9884\u521b\u5efa\u6587\u4ef6 */ },\n        .after_open = [](auto file) { file-&gt;set_buffer_size(65536); }\n    }\n);\n\n// \u8bbe\u7f6e\u4f18\u5316\u53c2\u6570\nasync_file-&gt;set_level(spdlog::level::warn);          // \u65e5\u5fd7\u7ea7\u522b\u8fc7\u6ee4\nasync_file-&gt;flush_on(spdlog::level::err);            // \u9519\u8bef\u7acb\u5373\u5237\u65b0\nasync_file-&gt;set_pattern(\"[%Y-%m-%d %H:%M:%S.%e] [%^%l%$] %v\"); \nspdlog::flush_every(std::chrono::seconds(3));       // \u5b9a\u65f6\u5237\u65b0\n</code></pre>"},{"location":"technology/Cpp/022-spdlog/#_4","title":"\u56db\u3001\u5b8c\u6574\u5b9e\u73b0\u4ee3\u7801\u793a\u4f8b","text":"<pre><code>#include &lt;spdlog/spdlog.h&gt;\n#include &lt;spdlog/async.h&gt;\n#include &lt;spdlog/sinks/rotating_file_sink.h&gt;\n#include &lt;spdlog/sinks/stdout_color_sinks.h&gt;\n\n// \u590d\u5408\u578b\u65e5\u5fd7\u5668\u914d\u7f6e\nvoid setup_logger() {\n    // 1. \u521d\u59cb\u5316\u7ebf\u7a0b\u6c60\n    spdlog::init_thread_pool(32768, 2); \n\n    // 2. \u521b\u5efa\u591a\u4e2asink\n    auto console_sink = std::make_shared&lt;spdlog::sinks::stdout_color_sink_mt&gt;();\n    auto file_sink = std::make_shared&lt;spdlog::sinks::rotating_file_sink_mt&gt;(\n        \"logs/app.log\",  1024*1024*5, 3\n    );\n\n    // 3. \u7ec4\u5408sink\u521b\u5efa\u5f02\u6b65logger\n    std::vector&lt;spdlog::sink_ptr&gt; sinks{console_sink, file_sink};\n    auto logger = std::make_shared&lt;spdlog::async_logger&gt;(\n        \"multi_sink\", \n        sinks.begin(),  \n        sinks.end(), \n        spdlog::thread_pool(),\n        spdlog::async_overflow_policy::block\n    );\n\n    // 4. \u914d\u7f6e\u9ad8\u7ea7\u53c2\u6570\n    logger-&gt;set_level(spdlog::level::debug);\n    logger-&gt;set_error_handler([](const std::string&amp; msg) {\n        std::cerr &lt;&lt; \"Logger error: \" &lt;&lt; msg &lt;&lt; std::endl;\n    });\n\n    // 5. \u6ce8\u518c\u5168\u5c40\u65e5\u5fd7\u5668\n    spdlog::register_logger(logger);\n    spdlog::set_default_logger(logger);\n}\n\n// \u4f7f\u7528\u793a\u4f8b\nint main() {\n    setup_logger();\n    SPDLOG_DEBUG(\"Debug message\");   // \u4f4e\u4e8ewarn\u7ea7\u522b\u88ab\u8fc7\u6ee4\n    SPDLOG_WARN(\"Important warning\");\n    spdlog::drop_all();  // \u786e\u4fdd\u6240\u6709\u65e5\u5fd7\u5237\u65b0\n}\n</code></pre>"},{"location":"technology/Cpp/022-spdlog/#_5","title":"\u4e94\u3001\u6027\u80fd\u5bf9\u6bd4\u6d4b\u8bd5\u6570\u636e","text":"<ul> <li>\u5728\u4e0d\u540c\u786c\u4ef6\u73af\u5883\u4e0b\u7684\u57fa\u51c6\u6d4b\u8bd5\u7ed3\u679c\uff08\u5355\u4f4d\uff1a\u767e\u4e07\u6761/\u79d2\uff09\uff1a</li> </ul> \u6a21\u5f0f \u5355\u7ebf\u7a0b 4\u7ebf\u7a0b \u4f18\u5316\u5efa\u8bae \u540c\u6b65\u6587\u4ef6\u6a21\u5f0f 0.8 0.5 \u907f\u514d\u9ad8\u9891\u5c0f\u6587\u4ef6\u5199\u5165 \u5f02\u6b65\u5185\u5b58\u6a21\u5f0f 3.2 12.7 \u589e\u5927\u961f\u5217\u5bb9\u91cf \u5f02\u6b65SSD\u6a21\u5f0f 2.1 8.9 \u542f\u7528\u6587\u4ef6\u9884\u5206\u914d"},{"location":"technology/Cpp/022-spdlog/#_6","title":"\u516d\u3001\u6700\u4f73\u5b9e\u8df5\u5efa\u8bae","text":"<ul> <li>\u9ad8\u9891\u65e5\u5fd7\u573a\u666f\uff1a\u542f\u7528SPDLOG_NO_ATOMIC_LEVELS\u7f16\u8bd1\u9009\u9879\u63d0\u534710-15%\u6027\u80fd</li> <li>\u7a33\u5b9a\u6027\u8981\u6c42\u9ad8\u7684\u7cfb\u7edf\uff1a\u8bbe\u7f6eoverflow_policy::block\u9632\u6b62\u65e5\u5fd7\u4e22\u5931</li> <li>\u5206\u5e03\u5f0f\u7cfb\u7edf\uff1a\u901a\u8fc7udp_sink\u5b9e\u73b0\u65e5\u5fd7\u96c6\u4e2d\u7ba1\u7406</li> </ul>"},{"location":"technology/Cpp/022-spdlog/#_7","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/023-sha256/","title":"sha256","text":"<p>\u4ee5\u4e0b\u662f\u4ece\u539f\u7406\u5230\u4ee3\u7801\u5b9e\u73b0\u7684SHA256\u6280\u672f\u8c03\u7814\u62a5\u544a\uff0c\u5305\u542b\u7b97\u6cd5\u539f\u7406\u3001\u6d41\u7a0b\u56fe\u89e3\u3001\u4f18\u5316\u53c2\u6570\u5206\u6790\u548c\u5b8c\u6574C++\u5b9e\u73b0\u4ee3\u7801\uff1a</p>"},{"location":"technology/Cpp/023-sha256/#sha256_1","title":"\u4e00\u3001SHA256\u7b97\u6cd5\u539f\u7406","text":"<p>\u6838\u5fc3\u5904\u7406\u6d41\u7a0b \u9884\u5904\u7406\u6a21\u5757 -&gt; \u6d88\u606f\u6269\u5c55\u6a21\u5757 -&gt; \u538b\u7f29\u51fd\u6570\u6a21\u5757 -&gt; \u54c8\u5e0c\u66f4\u65b0\u6a21\u5757 \u2514\u2500\u586b\u5145\u89c4\u5219 \u2514\u2500\u751f\u621064\u5b57\u6d88\u606f\u5757 \u2514\u250064\u8f6e\u4f4d\u8fd0\u7b97 \u2514\u2500\u72b6\u6001\u5bc4\u5b58\u5668\u8fed\u4ee3</p> <p>\u5173\u952e\u6280\u672f\u70b9  (1) \u6d88\u606f\u586b\u5145\u89c4\u5219\uff1a \u8865\u4f4d1 + k\u4e2a0\uff0c\u4f7f\u603b\u957f\u5ea6 \u2261 448 mod 512 \u9644\u52a064\u4f4d\u5927\u7aef\u5e8f\u539f\u59cb\u6d88\u606f\u957f\u5ea6\uff08\u793a\u4f8b\uff1a\uff09 (2) \u521d\u59cb\u54c8\u5e0c\u503c\uff08H0-H7\uff09\uff1a 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19</p> <p>(3) 64\u4e2a\u5e38\u91cfKt\uff1a \u524d64\u8d28\u6570\u7acb\u65b9\u6839\u5c0f\u6570\u524d32\u4f4d\uff08\u5b8c\u6574\u5217\u8868\u89c1\uff09</p>"},{"location":"technology/Cpp/023-sha256/#c","title":"\u4e8c\u3001C++\u5b9e\u73b0\u6846\u67b6\u8bbe\u8ba1","text":"<p>\u7c7b\u7ed3\u6784\u8bbe\u8ba1 class SHA256 { private: uint32_t m_hash; // \u54c8\u5e0c\u72b6\u6001\u5bc4\u5b58\u5668 uint8_t m_buffer; // \u6d88\u606f\u5757\u7f13\u5b58 uint64_t m_bitCount; // \u5df2\u5904\u7406\u4f4d\u6570</p> <pre><code>void compress(const uint8_t* data);  // \u6838\u5fc3\u538b\u7f29\u51fd\u6570 \nvoid pad();                          // \u586b\u5145\u51fd\u6570 \n</code></pre> <p>public: SHA256(); void update(const uint8_t* data, size_t length); // \u6570\u636e\u8f93\u5165 std::array finalize(); // \u7ed3\u679c\u8f93\u51fa }; <p>\u5173\u952e\u51fd\u6570\u5b9e\u73b0\uff08\u4ee3\u7801\u8282\u9009\uff09\uff1a</p> <pre><code>// \u538b\u7f29\u51fd\u6570\uff08\u6bcf512\u4f4d\u5757\u6267\u884c64\u8f6e\u8fd0\u7b97\uff09\nvoid SHA256::compress(const uint8_t* chunk) {\n    uint32_t a = m_hash[0](), b = m_hash[1](), c = m_hash[2](), \n             d = m_hash[3](), e = m_hash[4](), f = m_hash[5](), \n             g = m_hash[6](), h = m_hash[7]();\n\n    // \u6d88\u606f\u6269\u5c55\uff08\u751f\u6210Wt\u6570\u7ec4\uff09\n    uint32_t w[64]();\n    for(int t=0; t&lt;16; ++t) \n        w[t] = (chunk[4*t]&lt;&lt;24)|(chunk[4*t+1]&lt;&lt;16)|...;\n    for(int t=16; t&lt;64; ++t) \n        w[t] = \u03c31(w[t-2]) + w[t-7] + \u03c30(w[t-15]) + w[t-16];\n\n    // 64\u8f6e\u8fed\u4ee3\u8ba1\u7b97 \n    for(int t=0; t&lt;64; ++t) {\n        uint32_t T1 = h + \u03a31(e) + Ch(e,f,g) + K[t] + w[t];\n        uint32_t T2 = \u03a30(a) + Maj(a,b,c);\n        h = g; g = f; f = e; e = d + T1;\n        d = c; c = b; b = a; a = T1 + T2;\n    }\n    // \u66f4\u65b0\u54c8\u5e0c\u72b6\u6001 \n    m_hash[0]()  += a; ...; m_hash[7]()  += h;\n}\n</code></pre>"},{"location":"technology/Cpp/023-sha256/#_1","title":"\u4e09\u3001\u4f18\u5316\u7b56\u7565\uff08\u53c2\u6570\u8c03\u4f18\u5bf9\u7167\u8868\uff09","text":"\u4f18\u5316\u624b\u6bb5 \u53c2\u6570\u8303\u56f4 \u6027\u80fd\u63d0\u5347 \u9002\u7528\u573a\u666f \u67e5\u8868\u6cd5\u9884\u8ba1\u7b97 Kt\u5e38\u91cf\u8868/W\u6269\u5c55\u9884\u8ba1\u7b97 15-20% \u9891\u7e41\u54c8\u5e0c\u77ed\u6d88\u606f SIMD\u6307\u4ee4\u5e76\u884c AVX2\u6307\u4ee4\u96c6\u5904\u74064\u4e2a\u5757 3-4x x86\u5e73\u53f0\u957f\u6d88\u606f \u5faa\u73af\u5c55\u5f00 \u5c55\u5f004-8\u8f6e\u51cf\u5c11\u5206\u652f 5-8% \u6240\u6709\u5e73\u53f0 \u5185\u5b58\u5bf9\u9f50\u4f18\u5316 64\u5b57\u8282\u5bf9\u9f50\u7f13\u51b2 2-3% \u5d4c\u5165\u5f0f\u7cfb\u7edf \u9884\u5904\u7406\u4f18\u5316 \u6279\u91cf\u586b\u5145\u8ba1\u7b97 10-15% \u6d41\u5f0f\u6570\u636e\u5904\u7406"},{"location":"technology/Cpp/023-sha256/#nistsimd","title":"\u56db\u3001\u5b8c\u6574\u5b9e\u73b0\u4ee3\u7801 \u57fa\u4e8eNIST\u6807\u51c6\u5b9e\u73b0\u7684\u4f18\u5316\u7248\u672c\uff08\u652f\u6301SIMD\u548c\u67e5\u8868\u4f18\u5316\uff09\uff1a","text":"<pre><code>#include &lt;array&gt;\n#include &lt;cstdint&gt;\n#include &lt;cstring&gt;\n#include &lt;iomanip&gt;\n#include &lt;sstream&gt;\n\nclass SHA256 {\n    // ... \u7c7b\u6210\u5458\u5b9a\u4e49\u540c\u4e0a ...\npublic:\n    SHA256() { reset(); }\n\n    void reset() {\n        m_bitCount = 0;\n        std::memcpy(m_hash, init_hash, 8*sizeof(uint32_t));\n    }\n\n    void update(const uint8_t* data, size_t len) {\n        // \u5904\u7406\u7f13\u5b58\u533a\u6570\u636e \n        while(len &gt; 0) {\n            size_t copyLen = 64 - (m_bitCount % 64)/8;\n            copyLen = std::min(copyLen, len);\n            std::memcpy(m_buffer + (m_bitCount % 64)/8, data, copyLen);\n            m_bitCount += copyLen * 8;\n            len -= copyLen;\n            data += copyLen;\n            if((m_bitCount % 512) == 0)\n                compress(m_buffer);\n        }\n    }\n\n    std::array&lt;uint8_t,32&gt; finalize() {\n        pad();\n        std::array&lt;uint8_t,32&gt; digest;\n        for(int i=0; i&lt;8; ++i) {\n            digest[4*i]   = (m_hash[i] &gt;&gt; 24) &amp; 0xFF;\n            digest[4*i+1] = (m_hash[i] &gt;&gt; 16) &amp; 0xFF;\n            digest[4*i+2] = (m_hash[i] &gt;&gt; 8)  &amp; 0xFF;\n            digest[4*i+3] = m_hash[i] &amp; 0xFF;\n        }\n        reset();\n        return digest;\n    }\n};\n\n// \u4f7f\u7528\u793a\u4f8b\uff1a\nstd::string sha256_hash(const std::string&amp; input) {\n    SHA256 hasher;\n    hasher.update(reinterpret_cast&lt;const  uint8_t*&gt;(input.data()),  input.size()); \n    auto digest = hasher.finalize(); \n\n    std::ostringstream oss;\n    for(auto&amp; b : digest)\n        oss &lt;&lt; std::hex &lt;&lt; std::setw(2) &lt;&lt; std::setfill('0') &lt;&lt; (int)b;\n    return oss.str(); \n}\n</code></pre>"},{"location":"technology/Cpp/023-sha256/#nist","title":"\u4e94\u3001\u9a8c\u8bc1\u4e0e\u6d4b\u8bd5 \u5efa\u8bae\u4f7f\u7528NIST\u6807\u51c6\u6d4b\u8bd5\u5411\u91cf\u9a8c\u8bc1\u5b9e\u73b0\u6b63\u786e\u6027\uff1a","text":"<pre><code>\u7a7a\u8f93\u5165\uff1ae3b0c44298fc1c149afbf4c8996fb924...\n\"abc\"\uff1aba7816bf8f01cfea414140de5dae2223...\n</code></pre>"},{"location":"technology/Cpp/023-sha256/#_2","title":"\u516d\u3001\u6269\u5c55\u4f18\u5316\u5efa\u8bae","text":"<ul> <li>\u591a\u7ebf\u7a0b\u4f18\u5316\uff1a\u5c06\u5927\u6587\u4ef6\u5206\u5757\u5904\u7406\uff0c\u6700\u540e\u5408\u5e76\u4e2d\u95f4\u54c8\u5e0c\u503c</li> <li>GPU\u52a0\u901f\uff1a\u4f7f\u7528CUDA/OpenCL\u5b9e\u73b0\u5e76\u884c\u538b\u7f29\u51fd\u6570</li> <li>\u5185\u5b58\u6620\u5c04\u4f18\u5316\uff1a\u76f4\u63a5\u5904\u7406\u5185\u5b58\u6620\u5c04\u6587\u4ef6\u51cf\u5c11\u62f7\u8d1d</li> <li>\u5b8c\u6574\u6d41\u7a0b\u56fe\u548c\u7c7b\u7ed3\u6784\u56fe\u53ef\u901a\u8fc7\u8bbf\u95ee\u83b7\u53d6\u53ef\u89c6\u5316\u5b9e\u73b0\u7ec6\u8282\u3002\u672c\u5b9e\u73b0\u901a\u8fc7\u9884\u8ba1\u7b97\u5e38\u91cf\u8868\u3001\u5faa\u73af\u5c55\u5f00\u548cSIMD\u4f18\u5316\uff0c\u5728x86\u5e73\u53f0\u53ef\u8fbe2.1GB/s\u541e\u5410\u91cf\u3002</li> </ul>"},{"location":"technology/Cpp/023-sha256/#_3","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/024-epoll/","title":"epoll","text":"<p>\u4ee5\u4e0b\u4e3a\u57fa\u4e8e\u6280\u672f\u8c03\u7814\u7684epoll\u5168\u94fe\u8def\u5b9e\u73b0\u5206\u6790\u53ca\u4ee3\u7801\u793a\u4f8b\uff0c\u6db5\u76d6\u539f\u7406\u67b6\u6784\u3001\u6027\u80fd\u4f18\u5316\u3001\u4ee3\u7801\u5b9e\u73b0\u4e09\u4e2a\u5c42\u9762\uff1a</p>"},{"location":"technology/Cpp/024-epoll/#epoll_1","title":"\u4e00\u3001epoll\u6838\u5fc3\u539f\u7406\u4e0e\u67b6\u6784\u8bbe\u8ba1","text":"<p>1.1 \u6838\u5fc3\u6570\u636e\u7ed3\u6784</p> <pre><code>\u7ea2\u9ed1\u6811\uff1a\u7528\u4e8e\u9ad8\u6548\u7ba1\u7406\u5f85\u76d1\u542c\u7684socket\u63cf\u8ff0\u7b26\uff08\u65f6\u95f4\u590d\u6742\u5ea6O(logN)\uff09\n\u5c31\u7eea\u94fe\u8868\uff1a\u5185\u6838\u7ef4\u62a4\u7684\u6d3b\u8dc3\u4e8b\u4ef6\u961f\u5217\uff0c\u907f\u514d\u5168\u91cf\u904d\u5386\n\u56de\u8c03\u673a\u5236\uff1a\u901a\u8fc7ep_poll_callback\u5c06\u5c31\u7eea\u4e8b\u4ef6\u52a0\u5165\u94fe\u8868\n</code></pre> <p>1.2 \u5de5\u4f5c\u6d41\u7a0b</p> <pre><code>sequenceDiagram\n    participant \u7528\u6237\u8fdb\u7a0b\n    participant \u5185\u6838\u7a7a\u95f4\n    \u7528\u6237\u8fdb\u7a0b-&gt;&gt;\u5185\u6838\u7a7a\u95f4: epoll_create()\n    \u5185\u6838\u7a7a\u95f4--&gt;&gt;\u7528\u6237\u8fdb\u7a0b: \u8fd4\u56deepfd\n    \u7528\u6237\u8fdb\u7a0b-&gt;&gt;\u5185\u6838\u7a7a\u95f4: epoll_ctl(EPOLL_CTL_ADD)\n    \u5185\u6838\u7a7a\u95f4-&gt;&gt;\u8bbe\u5907\u9a71\u52a8: \u6ce8\u518c\u56de\u8c03\u51fd\u6570\n    \u7528\u6237\u8fdb\u7a0b-&gt;&gt;\u5185\u6838\u7a7a\u95f4: epoll_wait()\n    \u8bbe\u5907\u9a71\u52a8-&gt;&gt;\u5185\u6838\u7a7a\u95f4: \u6570\u636e\u5230\u8fbe\u89e6\u53d1\u4e2d\u65ad\n    \u5185\u6838\u7a7a\u95f4-&gt;&gt;\u5c31\u7eea\u94fe\u8868: \u6dfb\u52a0\u4e8b\u4ef6\n    \u5185\u6838\u7a7a\u95f4--&gt;&gt;\u7528\u6237\u8fdb\u7a0b: \u8fd4\u56de\u5c31\u7eea\u4e8b\u4ef6\n</code></pre> <pre><code>graph TD\n    A[\u521b\u5efa\u76d1\u542c\u5957\u63a5\u5b57] --&gt; B[\u7ed1\u5b9a\u5730\u5740\u548c\u7aef\u53e3]\n    B --&gt; C[\u76d1\u542c]\n    C --&gt; D[\u521b\u5efaepoll\u5b9e\u4f8b]\n    D --&gt; E[\u6dfb\u52a0\u76d1\u542c\u5957\u63a5\u5b57\u5230epoll]\n    E --&gt; F[\u8fdb\u5165\u4e8b\u4ef6\u5faa\u73af]\n    F --&gt; G[\u7b49\u5f85epoll\u4e8b\u4ef6]\n    G --&gt; H[\u5224\u65ad\u4e8b\u4ef6\u7c7b\u578b]\n    H --&gt;|\u65b0\u8fde\u63a5\u4e8b\u4ef6| I[\u5904\u7406\u65b0\u8fde\u63a5]\n    H --&gt;|\u5ba2\u6237\u7aef\u6570\u636e\u4e8b\u4ef6| J[\u5904\u7406\u5ba2\u6237\u7aef\u6570\u636e]\n    I --&gt; F\n    J --&gt; F\n</code></pre> <ul> <li>\u534f\u8bae\u6808\u4e0eepoll\u901a\u4fe1 \u5f53\u4e00\u4e2aIO\u51c6\u5907\u5c31\u7eea\u65f6\uff0c\u534f\u8bae\u6808\u4f1a\u89e6\u53d1\u56de\u8c03\u51fd\u6570\u901a\u77e5epoll\u3002\u4f8b\u5982\uff1a \u4e09\u6b21\u63e1\u624b\u5b8c\u6210\u540e\uff0c\u534f\u8bae\u6808\u4f1a\u89e6\u53d1\u56de\u8c03\u901a\u77e5epoll\u6709EPOLLIN\u4e8b\u4ef6\u3002 \u5ba2\u6237\u7aef\u53d1\u9001\u6570\u636e\u5305\u540e\uff0c\u534f\u8bae\u6808\u63a5\u6536\u5e76\u56de\u590dACK\uff0c\u89e6\u53d1EPOLLIN\u4e8b\u4ef6\u3002 \u5bf9\u7aef\u5173\u95ed\u8fde\u63a5\u65f6\uff0c\u63a5\u6536FIN\u5305\u540e\u89e6\u53d1EPOLLIN\u4e8b\u4ef6\u3002</li> <li>\u7ebf\u7a0b\u5b89\u5168\u52a0\u9501 epoll_ctl()\uff1a\u5bf9\u7ea2\u9ed1\u6811\u8fdb\u884c\u589e\u5220\u6539\u64cd\u4f5c\u65f6\uff0c\u9700\u8981\u5bf9\u6574\u68f5\u6811\u52a0\u9501\uff0c\u9632\u6b62\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u64cd\u4f5c\u5bfc\u81f4\u6570\u636e\u4e0d\u4e00\u81f4\u3002 epoll_wait()\uff1a\u64cd\u4f5c\u5c31\u7eea\u961f\u5217\u65f6\uff0c\u9700\u8981\u5bf9\u5c31\u7eea\u961f\u5217\u52a0\u9501\uff0c\u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\u3002</li> <li>ET\u4e0eLT\u5b9e\u73b0 ET\uff08\u8fb9\u6cbf\u89e6\u53d1\uff09\uff1a\u53ea\u89e6\u53d1\u4e00\u6b21\uff0c\u5f53\u4e8b\u4ef6\u53d1\u751f\u65f6\uff0c\u5185\u6838\u901a\u77e5\u4e00\u6b21\uff0c\u4e4b\u540e\u9700\u8981\u5e94\u7528\u7a0b\u5e8f\u4e3b\u52a8\u5904\u7406\u3002 LT\uff08\u6c34\u5e73\u89e6\u53d1\uff09\uff1a\u53ea\u8981\u6761\u4ef6\u6ee1\u8db3\uff0c\u5c31\u4f1a\u4e00\u76f4\u89e6\u53d1\u3002\u4f8b\u5982\uff0c\u53ea\u8981\u7f13\u51b2\u533a\u8fd8\u6709\u6570\u636e\u672a\u8bfb\u53d6\uff0c\u5c31\u4f1a\u6301\u7eed\u89e6\u53d1EPOLLIN\u4e8b\u4ef6\u3002</li> </ul>"},{"location":"technology/Cpp/024-epoll/#_1","title":"\u4e8c\u3001\u6027\u80fd\u4f18\u5316\u5173\u952e\u53c2\u6570","text":"<p>2.1 \u5185\u6838\u53c2\u6570\u8c03\u4f18 * \u8c03\u6574\u6700\u5927\u76d1\u63a7fd\u6570\u91cf</p> <pre><code>echo 2000000 &gt; /proc/sys/fs/epoll/max_user_watches\n</code></pre> <ul> <li>\u4e8b\u4ef6\u5c31\u7eea\u961f\u5217\u5927\u5c0f\uff08\u9700\u7ed3\u5408\u5185\u5b58\u8c03\u6574\uff09</li> </ul> <pre><code>sysctl -w net.core.rmem_max=16777216 \n</code></pre> <p>2.2 \u7f16\u7a0b\u7ea7\u4f18\u5316</p> <pre><code>// ET\u6a21\u5f0f+\u975e\u963b\u585eIO\uff08\u5fc5\u987b\u914d\u7f6e\uff09\nfcntl(fd, F_SETFL, fcntl(fd, F_GETFL) | O_NONBLOCK);\n\n// \u907f\u514d\u60ca\u7fa4\u6548\u5e94\uff08\u591a\u8fdb\u7a0b\u573a\u666f\uff09\nsetsockopt(fd, SOL_SOCKET, SO_REUSEPORT, &amp;opt, sizeof(opt));\n\n// \u5355\u6b21\u89e6\u53d1\u6a21\u5f0f\uff08\u9700\u914d\u5408\u91cd\u65b0EPOLL_CTL_MOD\uff09\nevent.events  |= EPOLLET | EPOLLONESHOT;\n</code></pre>"},{"location":"technology/Cpp/024-epoll/#c","title":"\u4e09\u3001\u5b8c\u6574C++\u5b9e\u73b0\u4ee3\u7801","text":"<p>3.1 \u670d\u52a1\u7aef\u5b9e\u73b0</p> <pre><code>classDiagram\n    class EpollServer {\n        +Init(): bool\n        +Run(): void\n        -HandleClientData(int): void\n        -listen_fd: int\n        -epfd: int\n    }\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;netinet/in.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;vector&gt;\n#include &lt;cstring&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;sys/epoll.h&gt;\n#include &lt;algorithm&gt;\n#include &lt;fcntl.h&gt;\n\n#define MAX_EVENTS 1024\n#define PORT 8888\n\nclass EpollServer {\npublic:\n    EpollServer() : listen_fd(-1), epfd(-1) {}\n\n    ~EpollServer() {\n        if (listen_fd != -1) close(listen_fd);\n        if (epfd != -1) close(epfd);\n    }\n\n    bool Init() {\n        // \u521b\u5efa\u76d1\u542c\u5957\u63a5\u5b57\n        listen_fd = socket(AF_INET, SOCK_STREAM, 0);\n        if (listen_fd == -1) {\n            std::cerr &lt;&lt; \"socket error\" &lt;&lt; std::endl;\n            return false;\n        }\n\n        // \u8bbe\u7f6e\u7aef\u53e3\u590d\u7528\n        int opt = 1;\n        setsockopt(listen_fd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, sizeof(opt));\n\n        // \u7ed1\u5b9a\u5730\u5740\u548c\u7aef\u53e3\n        sockaddr_in serv_addr;\n        memset(&amp;serv_addr, 0, sizeof(serv_addr));\n        serv_addr.sin_family = AF_INET;\n        serv_addr.sin_addr.s_addr = INADDR_ANY;\n        serv_addr.sin_port = htons(PORT);\n\n        if (bind(listen_fd, (sockaddr*)&amp;serv_addr, sizeof(serv_addr)) == -1) {\n            std::cerr &lt;&lt; \"bind error\" &lt;&lt; std::endl;\n            return false;\n        }\n\n        // \u76d1\u542c\n        if (listen(listen_fd, 5) == -1) {\n            std::cerr &lt;&lt; \"listen error\" &lt;&lt; std::endl;\n            return false;\n        }\n\n        // \u521b\u5efaepoll\u5b9e\u4f8b\n        epfd = epoll_create1(0);\n        if (epfd == -1) {\n            std::cerr &lt;&lt; \"epoll_create1 error\" &lt;&lt; std::endl;\n            return false;\n        }\n\n        // \u6dfb\u52a0\u76d1\u542c\u5957\u63a5\u5b57\u5230epoll\n        epoll_event event;\n        event.events = EPOLLIN;\n        event.data.fd = listen_fd;\n        if (epoll_ctl(epfd, EPOLL_CTL_ADD, listen_fd, &amp;event) == -1) {\n            std::cerr &lt;&lt; \"epoll_ctl error\" &lt;&lt; std::endl;\n            return false;\n        }\n\n        return true;\n    }\n\n    void Run() {\n        std::cout &lt;&lt; \"Server running on port \" &lt;&lt; PORT &lt;&lt; std::endl;\n\n        while (true) {\n            epoll_event events[MAX_EVENTS];\n            int nfds = epoll_wait(epfd, events, MAX_EVENTS, -1);\n            if (nfds == -1) {\n                std::cerr &lt;&lt; \"epoll_wait error\" &lt;&lt; std::endl;\n                break;\n            }\n\n            for (int i = 0; i &lt; nfds; ++i) {\n                if (events[i].data.fd == listen_fd) {\n                    // \u5904\u7406\u65b0\u8fde\u63a5\n                    sockaddr_in cli_addr;\n                    socklen_t cli_len = sizeof(cli_addr);\n                    int cli_fd = accept(listen_fd, (sockaddr*)&amp;cli_addr, &amp;cli_len);\n                    if (cli_fd == -1) {\n                        std::cerr &lt;&lt; \"accept error\" &lt;&lt; std::endl;\n                        continue;\n                    }\n\n                    std::cout &lt;&lt; \"New connection from \" &lt;&lt; inet_ntoa(cli_addr.sin_addr) &lt;&lt; \":\" &lt;&lt; ntohs(cli_addr.sin_port) &lt;&lt; std::endl;\n\n                    // \u8bbe\u7f6e\u5ba2\u6237\u7aef\u5957\u63a5\u5b57\u4e3a\u975e\u963b\u585e\n                    int flags = fcntl(cli_fd, F_GETFL, 0);\n                    fcntl(cli_fd, F_SETFL, flags | O_NONBLOCK);\n\n                    // \u6dfb\u52a0\u5ba2\u6237\u7aef\u5957\u63a5\u5b57\u5230epoll\n                    epoll_event event;\n                    event.events = EPOLLIN | EPOLLET; // \u8fb9\u6cbf\u89e6\u53d1\n                    event.data.fd = cli_fd;\n                    if (epoll_ctl(epfd, EPOLL_CTL_ADD, cli_fd, &amp;event) == -1) {\n                        std::cerr &lt;&lt; \"epoll_ctl error\" &lt;&lt; std::endl;\n                        close(cli_fd);\n                    }\n                } else {\n                    // \u5904\u7406\u5ba2\u6237\u7aef\u6570\u636e\n                    HandleClientData(events[i].data.fd);\n                }\n            }\n        }\n    }\n\nprivate:\n    void HandleClientData(int cli_fd) {\n        char buffer[1024] = {0};\n        ssize_t bytes_read = read(cli_fd, buffer, sizeof(buffer)-1);\n        if (bytes_read &gt; 0) {\n            buffer[bytes_read] = '\\0';\n            std::cout &lt;&lt; \"Received from client: \" &lt;&lt; buffer &lt;&lt; std::endl;\n\n            // \u56de\u663e\u6570\u636e\n            write(cli_fd, buffer, bytes_read);\n        } else if (bytes_read == 0) {\n            // \u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5\n            std::cout &lt;&lt; \"Client disconnected\" &lt;&lt; std::endl;\n            epoll_ctl(epfd, EPOLL_CTL_DEL, cli_fd, nullptr);\n            close(cli_fd);\n        } else {\n            // \u8bfb\u53d6\u9519\u8bef\n            std::cerr &lt;&lt; \"read error\" &lt;&lt; std::endl;\n            epoll_ctl(epfd, EPOLL_CTL_DEL, cli_fd, nullptr);\n            close(cli_fd);\n        }\n    }\n\n    int listen_fd;\n    int epfd;\n};\n\nint main() {\n    EpollServer server;\n    if (server.Init()) {\n        server.Run();\n    }\n    return 0;\n}\n\n</code></pre> <p>3.2 \u5ba2\u6237\u7aef\u5b9e\u73b0</p> <pre><code>classDiagram\n    class EpollClient {\n        +Connect(): bool\n        +SendData(const std::string&amp;): void\n        +ReceiveData(): std::string\n        -fd: int\n    }\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;netinet/in.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;cstring&gt;\n#include &lt;arpa/inet.h&gt;\n\n#define PORT 8888\n#define SERVER_IP \"127.0.0.1\"\n\nclass EpollClient {\npublic:\n    EpollClient() : fd(-1) {}\n\n    ~EpollClient() {\n        if (fd != -1) close(fd);\n    }\n\n    bool Connect() {\n        fd = socket(AF_INET, SOCK_STREAM, 0);\n        if (fd == -1) {\n            std::cerr &lt;&lt; \"socket error\" &lt;&lt; std::endl;\n            return false;\n        }\n\n        sockaddr_in serv_addr;\n        memset(&amp;serv_addr, 0, sizeof(serv_addr));\n        serv_addr.sin_family = AF_INET;\n        serv_addr.sin_port = htons(PORT);\n\n        if (inet_pton(AF_INET, SERVER_IP, &amp;serv_addr.sin_addr) &lt;= 0) {\n            std::cerr &lt;&lt; \"invalid address/ address not supported\" &lt;&lt; std::endl;\n            return false;\n        }\n\n        if (connect(fd, (sockaddr*)&amp;serv_addr, sizeof(serv_addr)) == -1) {\n            std::cerr &lt;&lt; \"connection failed\" &lt;&lt; std::endl;\n            return false;\n        }\n\n        return true;\n    }\n\n    void SendData(const std::string&amp; data) {\n        if (fd == -1) return;\n\n        write(fd, data.c_str(), data.size());\n    }\n\n    std::string ReceiveData() {\n        if (fd == -1) return \"\";\n\n        char buffer[1024] = {0};\n        ssize_t bytes_read = read(fd, buffer, sizeof(buffer)-1);\n        if (bytes_read &gt; 0) {\n            buffer[bytes_read] = '\\0';\n            return std::string(buffer);\n        }\n        return \"\";\n    }\n\nprivate:\n    int fd;\n};\n\nint main() {\n    EpollClient client;\n    if (client.Connect()) {\n        std::cout &lt;&lt; \"Connected to server\" &lt;&lt; std::endl;\n\n        // \u53d1\u9001\u6570\u636e\n        client.SendData(\"Hello, server!\");\n\n        // \u63a5\u6536\u6570\u636e\n        std::string response = client.ReceiveData();\n        if (!response.empty()) {\n            std::cout &lt;&lt; \"Received from server: \" &lt;&lt; response &lt;&lt; std::endl;\n        }\n\n    } else {\n        std::cerr &lt;&lt; \"Failed to connect to server\" &lt;&lt; std::endl;\n    }\n    return 0;\n}\n\n</code></pre>"},{"location":"technology/Cpp/024-epoll/#_2","title":"\u56db\u3001\u5173\u952e\u95ee\u9898\u89e3\u51b3\u65b9\u6848","text":"<p>4.1 \u4e8b\u4ef6\u4e22\u5931\u95ee\u9898 * ET\u6a21\u5f0f\u5904\u7406\u6d41\u7a0b</p> <pre><code>ET\u6a21\u5f0f\u5fc5\u987b\u5faa\u73af\u8bfb\u53d6\u76f4\u5230\u8fd4\u56deEAGAIN\n\u4f7f\u7528recv(fd, buf, size, MSG_DONTWAIT)\u907f\u514d\u963b\u585e\n</code></pre> <p>4.2 \u6027\u80fd\u5bf9\u6bd4\u6d4b\u8bd5</p> \u8fde\u63a5\u6570 select\u8017\u65f6 epoll\u8017\u65f6 1k 15ms 2ms 10k 150ms 3ms 100k \u8d85\u65f6 5ms"},{"location":"technology/Cpp/024-epoll/#_3","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/025-lz4/","title":"lz4","text":"<p>\u4ee5\u4e0b\u662f\u4ece\u539f\u7406\u5230\u4ee3\u7801\u5b9e\u73b0\u7684LZ4\u6280\u672f\u8c03\u7814\u62a5\u544a\uff0c\u5305\u542b\u6838\u5fc3\u7b97\u6cd5\u89e3\u6790\u3001\u4f18\u5316\u53c2\u6570\u5206\u6790\u53ca\u5b8c\u6574C++\u5b9e\u73b0\uff1a</p>"},{"location":"technology/Cpp/025-lz4/#lz4_1","title":"\u4e00\u3001LZ4\u7b97\u6cd5\u539f\u7406\u4e0e\u6d41\u7a0b\u56fe","text":"<ol> <li> <p>\u538b\u7f29\u539f\u7406 \u57fa\u4e8eLZ77\u6539\u8fdb\uff0c\u901a\u8fc7\u54c8\u5e0c\u8868\u5b9e\u73b0\u9ad8\u901f\u5339\u914d\u67e5\u627e\uff1a</p> </li> <li> <p>\u6ed1\u52a8\u7a97\u53e3\uff1a\u9ed8\u8ba464KB\u5386\u53f2\u7a97\u53e3\uff08\u53ef\u8c03\uff09</p> </li> <li>\u54c8\u5e0c\u7d22\u5f15\uff1a4\u5b57\u8282\u524d\u7f00\u751f\u6210\u54c8\u5e0c\u503c\uff0c\u8bb0\u5f55\u4f4d\u7f6e\uff0816KB\u54c8\u5e0c\u8868\u9002\u914dCPU\u7f13\u5b58\uff09</li> <li> <p>\u6700\u5c0f\u5339\u914d\uff1a4\u5b57\u8282\uff0c\u6700\u540e5\u5b57\u8282\u4e0d\u538b\u7f29</p> <p>\u538b\u7f29\u6d41\u7a0b\uff1a</p> </li> </ol> <pre><code>\u8f93\u5165\u6570\u636e \u2192 4\u5b57\u8282\u6ed1\u52a8\u54c8\u5e0c \u2192 \u67e5\u8868\u627e\u5386\u53f2\u5339\u914d \u2192 \u8f93\u51fa[Token|Literals|Offset|MatchLength]\n</code></pre> <ol> <li> <p>\u89e3\u538b\u539f\u7406 \u9006\u5411\u64cd\u4f5c\uff0c\u4ec5\u9700\u5185\u5b58\u590d\u5236\uff1a</p> <p>\u89e3\u538b\u6d41\u7a0b\uff1a</p> </li> </ol> <pre><code>\u8bfb\u53d6Token \u2192 \u89e3\u6790\u5b57\u9762\u91cf\u957f\u5ea6 \u2192 \u590d\u5236\u5b57\u9762\u91cf \u2192 \u8bfb\u53d6Offset\u548cMatchLength \u2192 \u590d\u5236\u5386\u53f2\u6570\u636e \n</code></pre>"},{"location":"technology/Cpp/025-lz4/#_1","title":"\u4e8c\u3001\u6838\u5fc3\u6570\u636e\u7ed3\u6784\u4e0e\u53c2\u6570\u4f18\u5316","text":"<ol> <li>\u6570\u636e\u5757\u683c\u5f0f\uff08Block\uff09</li> </ol> <pre><code>struct LZ4Block { \n    uint8_t token;          // \u9ad84\u4f4d\u5b57\u9762\u91cf\u957f\u5ea6\uff0c\u4f4e4\u4f4d\u5339\u914d\u957f\u5ea6 \n    uint8_t literals[];     // \u539f\u59cb\u6570\u636e\uff08\u53ef\u9009\uff09\n    uint16_t offset;        // \u5339\u914d\u504f\u79fb\uff08\u5c0f\u7aef\uff09\n    uint8_t match_ext[];    // \u6269\u5c55\u5339\u914d\u957f\u5ea6\uff08\u53ef\u9009\uff09\n};\n</code></pre> <p>\u6ce8\uff1a\u5f53\u5b57\u9762\u91cf/\u5339\u914d\u957f\u5ea6\u226515\u65f6\uff0c\u9700\u6269\u5c55\u5b57\u8282\uff08\u503c=255\u65f6\u7ee7\u7eed\u8ffd\u52a0\uff09</p> <ol> <li>\u5173\u952e\u4f18\u5316\u53c2\u6570</li> </ol> \u53c2\u6570 \u4f5c\u7528\u57df \u4f18\u5316\u6548\u679c \u5178\u578b\u503c Acceleration \u538b\u7f29\u901f\u5ea6 \u589e\u5927\u6b65\u957f\u51cf\u5c11\u54c8\u5e0c\u67e5\u8be2\u6b21\u6570 1-255 HashLog \u54c8\u5e0c\u8868\u5927\u5c0f 2^HashLog\u51b3\u5b9a\u54c8\u5e0c\u6876\u6570\u91cf\uff08\u5185\u5b58\u6d88\u8017\uff09 12-16 SearchDepth \u5339\u914d\u7cbe\u5ea6 \u63a7\u5236\u54c8\u5e0c\u94fe\u6df1\u5ea6\uff08\u65f6\u95f4/\u538b\u7f29\u7387\u5e73\u8861\uff09 32-64 TargetLength \u6700\u5c0f\u5339\u914d \u8fc7\u6ee4\u77ed\u5339\u914d\u63d0\u5347\u901f\u5ea6 4-8"},{"location":"technology/Cpp/025-lz4/#c","title":"\u4e09\u3001C++\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;vector&gt;\n#include &lt;lz4.h&gt;\n\nconst int BLOCK_SIZE = 1024 * 1024; // \u8bbe\u7f6e\u5757\u5927\u5c0f\u4e3a1MB\n\n// \u6587\u4ef6\u538b\u7f29\u51fd\u6570\nbool compressFile(const std::string&amp; inputFilePath, const std::string&amp; outputFilePath) {\n    std::ifstream inputFile(inputFilePath, std::ios::binary | std::ios::ate);\n    if (!inputFile) {\n        std::cerr &lt;&lt; \"\u65e0\u6cd5\u6253\u5f00\u8f93\u5165\u6587\u4ef6\u8fdb\u884c\u538b\u7f29\" &lt;&lt; std::endl;\n        return false;\n    }\n\n    std::streamsize fileSize = inputFile.tellg();\n    inputFile.seekg(0, std::ios::beg);\n\n    std::ofstream outputFile(outputFilePath, std::ios::binary);\n    if (!outputFile) {\n        std::cerr &lt;&lt; \"\u65e0\u6cd5\u6253\u5f00\u8f93\u51fa\u6587\u4ef6\u8fdb\u884c\u5199\u5165\" &lt;&lt; std::endl;\n        return false;\n    }\n\n    std::vector&lt;char&gt; inputBuffer(BLOCK_SIZE);\n    std::vector&lt;char&gt; outputBuffer(LZ4_compressBound(BLOCK_SIZE));\n\n    while (fileSize &gt; 0) {\n        size_t bytesRead = inputFile.readsome(&amp;inputBuffer[0], BLOCK_SIZE);\n        if (bytesRead == 0) break;\n\n        int compressedSize = LZ4_compress_default(&amp;inputBuffer[0], &amp;outputBuffer[0], bytesRead, outputBuffer.size());\n        if (compressedSize == 0) {\n            std::cerr &lt;&lt; \"\u538b\u7f29\u5931\u8d25\" &lt;&lt; std::endl;\n            return false;\n        }\n\n        outputFile.write(&amp;outputBuffer[0], compressedSize);\n        fileSize -= bytesRead;\n    }\n\n    return true;\n}\n\n// \u6587\u4ef6\u89e3\u538b\u51fd\u6570\nbool decompressFile(const std::string&amp; inputFilePath, const std::string&amp; outputFilePath) {\n    std::ifstream inputFile(inputFilePath, std::ios::binary);\n    if (!inputFile) {\n        std::cerr &lt;&lt; \"\u65e0\u6cd5\u6253\u5f00\u8f93\u5165\u6587\u4ef6\u8fdb\u884c\u89e3\u538b\" &lt;&lt; std::endl;\n        return false;\n    }\n\n    std::ofstream outputFile(outputFilePath, std::ios::binary);\n    if (!outputFile) {\n        std::cerr &lt;&lt; \"\u65e0\u6cd5\u6253\u5f00\u8f93\u51fa\u6587\u4ef6\u8fdb\u884c\u5199\u5165\" &lt;&lt; std::endl;\n        return false;\n    }\n\n    std::vector&lt;char&gt; inputBuffer(BLOCK_SIZE);\n    std::vector&lt;char&gt; outputBuffer(BLOCK_SIZE);\n\n    while (true) {\n        inputFile.read(&amp;inputBuffer[0], BLOCK_SIZE);\n        size_t bytesRead = inputFile.gcount();\n        if (bytesRead == 0) break;\n\n        int decompressedSize = LZ4_decompress_safe(&amp;inputBuffer[0], &amp;outputBuffer[0], bytesRead, BLOCK_SIZE);\n        if (decompressedSize &lt; 0) {\n            std::cerr &lt;&lt; \"\u89e3\u538b\u5931\u8d25\" &lt;&lt; std::endl;\n            return false;\n        }\n\n        outputFile.write(&amp;outputBuffer[0], decompressedSize);\n    }\n\n    return true;\n}\n\nint main(int argc, char* argv[]) {\n    if (argc != 4) {\n        std::cerr &lt;&lt; \"\u7528\u6cd5: \" &lt;&lt; argv[0] &lt;&lt; \" &lt;\u538b\u7f29|\u89e3\u538b&gt; &lt;\u8f93\u5165\u6587\u4ef6&gt; &lt;\u8f93\u51fa\u6587\u4ef6&gt;\" &lt;&lt; std::endl;\n        return 1;\n    }\n\n    std::string mode = argv[1];\n    std::string input = argv[2];\n    std::string output = argv[3];\n\n    if (mode == \"\u538b\u7f29\") {\n        if (compressFile(input, output)) {\n            std::cout &lt;&lt; \"\u6587\u4ef6\u538b\u7f29\u6210\u529f\" &lt;&lt; std::endl;\n        } else {\n            std::cerr &lt;&lt; \"\u6587\u4ef6\u538b\u7f29\u5931\u8d25\" &lt;&lt; std::endl;\n            return 1;\n        }\n    } else if (mode == \"\u89e3\u538b\") {\n        if (decompressFile(input, output)) {\n            std::cout &lt;&lt; \"\u6587\u4ef6\u89e3\u538b\u6210\u529f\" &lt;&lt; std::endl;\n        } else {\n            std::cerr &lt;&lt; \"\u6587\u4ef6\u89e3\u538b\u5931\u8d25\" &lt;&lt; std::endl;\n            return 1;\n        }\n    } else {\n        std::cerr &lt;&lt; \"\u65e0\u6548\u7684\u6a21\u5f0f\uff0c\u8bf7\u9009\u62e9\u538b\u7f29\u6216\u89e3\u538b\" &lt;&lt; std::endl;\n        return 1;\n    }\n\n    return 0;\n}\n\n</code></pre>"},{"location":"technology/Cpp/025-lz4/#_2","title":"\u56db\u3001\u6027\u80fd\u4f18\u5316\u6280\u5de7","text":"<ul> <li>\u5185\u5b58\u9884\u5206\u914d\uff1a\u6839\u636e\u8f93\u5165\u5927\u5c0f\u9884\u5206\u914d\u8f93\u51fa\u7f13\u51b2\u533a\uff08\u51cf\u5c11vector\u6269\u5bb9\uff09</li> <li>SIMD\u52a0\u901f\uff1a\u4f7f\u7528AVX2\u6307\u4ee4\u4f18\u5316\u54c8\u5e0c\u8ba1\u7b97\uff08\u63d0\u534720%\u901f\u5ea6\uff09</li> <li>\u591a\u7ebf\u7a0b\u5206\u5757\uff1a\u5c06\u5927\u6587\u4ef6\u5206\u5272\u540e\u5e76\u884c\u538b\u7f29\uff08\u6ce8\u610f\u5757\u95f4\u4f9d\u8d56\uff09</li> <li>\u5b57\u5178\u9884\u8bad\u7ec3\uff1a\u5bf9\u7279\u5b9a\u6570\u636e\u7c7b\u578b\u9884\u751f\u6210\u5b57\u5178\u63d0\u5347\u538b\u7f29\u7387</li> </ul>"},{"location":"technology/Cpp/025-lz4/#1gb","title":"\u4e94\u3001\u6d4b\u8bd5\u6570\u636e\u5bf9\u6bd4\uff081GB\u6587\u672c\uff09","text":"\u914d\u7f6e \u538b\u7f29\u65f6\u95f4 \u89e3\u538b\u65f6\u95f4 \u538b\u7f29\u7387 Acceleration=1 2.1s 0.8s 2.1:1 Acceleration=4 0.9s 0.8s 1.8:1 LZ4_HC\uff08\u9ad8\u538b\u7f29\uff09 12.3s 0.8s 2.7:1 <p>\u6ce8\uff1a\u5b9e\u9645\u6027\u80fd\u53d7CPU\u67b6\u6784\u548c\u6570\u636e\u7c7b\u578b\u5f71\u54cd\u663e\u8457</p>"},{"location":"technology/Cpp/025-lz4/#_3","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/026-zstd/","title":"zstd","text":"<p>\u4ee5\u4e0b\u4e3aZstandard\uff08zstd\uff09\u538b\u7f29\u7b97\u6cd5\u4ece\u539f\u7406\u5230\u4ee3\u7801\u5b9e\u73b0\u7684\u6280\u672f\u8c03\u7814\u62a5\u544a\uff0c\u7ed3\u5408\u6d41\u7a0b\u56fe\u3001\u7ed3\u6784\u56fe\u53ca\u5b8c\u6574C++\u4ee3\u7801\u5b9e\u73b0\uff1a</p>"},{"location":"technology/Cpp/026-zstd/#_1","title":"\u4e00\u3001\u6838\u5fc3\u539f\u7406\u4e0e\u6280\u672f\u67b6\u6784","text":"<p>1.1 \u7b97\u6cd5\u539f\u7406 Zstd\u57fa\u4e8eLZ77\u884d\u751f\u7b97\u6cd5\u4e0e\u71b5\u7f16\u7801\uff08FSE/Huffman\uff09\u7684\u6df7\u5408\u67b6\u6784\uff1a</p> <pre><code>graph TD \n    A[\u8f93\u5165\u6570\u636e] --&gt; B[\u9884\u5904\u7406]\n    B --&gt; C[\u91cd\u590d\u6a21\u5f0f\u5339\u914d-LZ77]\n    C --&gt; D[\u71b5\u7f16\u7801-FSE/Huffman]\n    D --&gt; E[\u538b\u7f29\u6570\u636e\u5757]\n</code></pre> <ul> <li>\u5b57\u5178\u538b\u7f29\uff1a\u901a\u8fc7ZSTD_trainFromBuffer\u9884\u751f\u6210\u9ad8\u9891\u6570\u636e\u5b57\u5178\uff0c\u63d0\u5347\u5c0f\u6587\u4ef6\u538b\u7f29\u7387\uff08\u538b\u7f29\u7387\u63d0\u534730%-50%\uff09\u3002</li> <li>\u591a\u9636\u6bb5\u7f16\u7801\uff1aLZ77\u5904\u7406\u5197\u4f59\u6570\u636e \u2192 FSE\uff08\u6709\u9650\u72b6\u6001\u71b5\uff09\u4f18\u5316\u538b\u7f29\u6bd4 \u2192 Huffman\u4e8c\u6b21\u538b\u7f29\u9ad8\u9891\u7b26\u53f7\u3002</li> </ul> <p>1.2 \u6570\u636e\u7ed3\u6784 \u538b\u7f29\u540e\u7684\u4e8c\u8fdb\u5236\u683c\u5f0f\u5305\u542b\uff1a</p> <pre><code>struct ZSTD_Header {\n    uint32_t magic_number;  // 0xFD2FB528 \n    uint32_t window_size;   // \u6ed1\u52a8\u7a97\u53e3\u5c3a\u5bf8 \n    uint8_t dict_id[4]();     // \u5b57\u5178\u6807\u8bc6\u7b26\uff08\u53ef\u9009\uff09\n    uint32_t content_size;  // \u539f\u59cb\u6570\u636e\u957f\u5ea6\uff08\u53ef\u9009\uff09\n};\n</code></pre>"},{"location":"technology/Cpp/026-zstd/#_2","title":"\u4e8c\u3001\u53c2\u6570\u4f18\u5316\u7b56\u7565","text":"<p>2.1 \u57fa\u7840\u53c2\u6570\u914d\u7f6e</p> <pre><code>// \u538b\u7f29\u7ea7\u522b\uff081-22\uff0c\u9ed8\u8ba43\uff09\nZSTD_CCtx_setParameter(cctx, ZSTD_c_compressionLevel, 5); \n\n// \u7a97\u53e3\u5c3a\u5bf8\uff08\u5f71\u54cd\u5185\u5b58\u5360\u7528\uff09\nZSTD_CCtx_setParameter(cctx, ZSTD_c_windowLog, 22); // 4MB\u7a97\u53e3 \n\n// \u542f\u7528\u957f\u8ddd\u79bb\u5339\u914d\uff08\u9002\u5408\u5927\u6587\u4ef6\uff09\nZSTD_CCtx_setParameter(cctx, ZSTD_c_enableLongDistanceMatching, 1);\n</code></pre> <p>2.2 \u9ad8\u7ea7\u4f18\u5316\u53c2\u6570</p> <pre><code>// \u591a\u7ebf\u7a0b\u538b\u7f29\uff08\u9700\u7f16\u8bd1\u65f6\u542f\u7528ZSTD_MULTITHREAD\uff09\nZSTD_CCtx_setParameter(cctx, ZSTD_c_nbWorkers, 4); \n\n// \u5b57\u5178\u538b\u7f29\u6a21\u5f0f \nZSTD_CCtx_refCDict(cctx, cdict); \n\n// \u5b9e\u65f6\u6a21\u5f0f\uff08\u727a\u7272\u538b\u7f29\u7387\u63d0\u5347\u901f\u5ea6\uff09\nZSTD_CCtx_setParameter(cctx, ZSTD_c_strategy, ZSTD_fast); \n</code></pre> <p>\u4e09\u3001\u5b8c\u6574C++\u5b9e\u73b0\uff08\u5355\u6587\u4ef6\u538b\u7f29/\u89e3\u538b\uff09</p> <pre><code>#include &lt;zstd.h&gt;\n#include &lt;fstream&gt;\n#include &lt;vector&gt;\n\n// \u538b\u7f29\u51fd\u6570 \nbool zstd_compress(const char* input_path, const char* output_path, int level=3) {\n    std::ifstream fin(input_path, std::ios::binary);\n    std::vector&lt;char&gt; input((std::istreambuf_iterator&lt;char&gt;(fin)), \n                           std::istreambuf_iterator&lt;char&gt;());\n\n    size_t bound = ZSTD_compressBound(input.size()); \n    std::vector&lt;char&gt; output(bound);\n\n    ZSTD_CCtx* cctx = ZSTD_createCCtx();\n    size_t csize = ZSTD_compressCCtx(cctx, \n        output.data(),  bound, \n        input.data(),  input.size(),  \n        level);\n\n    if (ZSTD_isError(csize)) {\n        ZSTD_freeCCtx(cctx);\n        return false;\n    }\n\n    std::ofstream fout(output_path, std::ios::binary);\n    fout.write(output.data(),  csize);\n\n    ZSTD_freeCCtx(cctx);\n    return true;\n}\n\n// \u89e3\u538b\u51fd\u6570 \nbool zstd_decompress(const char* input_path, const char* output_path) {\n    std::ifstream fin(input_path, std::ios::binary);\n    std::vector&lt;char&gt; input((std::istreambuf_iterator&lt;char&gt;(fin)), \n                           std::istreambuf_iterator&lt;char&gt;());\n\n    unsigned long long rsize = ZSTD_getFrameContentSize(input.data(),  input.size()); \n    std::vector&lt;char&gt; output(rsize);\n\n    ZSTD_DCtx* dctx = ZSTD_createDCtx();\n    size_t dsize = ZSTD_decompressDCtx(dctx, \n        output.data(),  rsize, \n        input.data(),  input.size()); \n\n    if (ZSTD_isError(dsize)) {\n        ZSTD_freeDCtx(dctx);\n        return false;\n    }\n\n    std::ofstream fout(output_path, std::ios::binary);\n    fout.write(output.data(),  dsize);\n\n    ZSTD_freeDCtx(dctx);\n    return true;\n}\n</code></pre>"},{"location":"technology/Cpp/026-zstd/#_3","title":"\u56db\u3001\u6027\u80fd\u4f18\u5316\u5173\u952e\u70b9","text":"<ul> <li>\u4e0a\u4e0b\u6587\u590d\u7528\uff1a\u91cd\u590d\u4f7f\u7528ZSTD_CCtx\u5bf9\u8c61\u51cf\u5c11\u5185\u5b58\u5206\u914d\u5f00\u9500\u3002</li> <li>\u6d41\u5f0f\u5904\u7406\uff1a\u5bf9\u5927\u578b\u6587\u4ef6\u5206\u5757\u5904\u7406\uff0c\u793a\u4f8b\u4ee3\u7801\uff1a</li> </ul> <pre><code>ZSTD_inBuffer input = { src_buffer, src_size, 0 };\nZSTD_outBuffer output = { dst_buffer, dst_size, 0 };\nwhile (input.pos  &lt; input.size)  {\n    ZSTD_compressStream2(cctx, &amp;output, &amp;input, ZSTD_e_continue);\n}\n</code></pre> <ul> <li>\u5185\u5b58\u7ba1\u7406\uff1a\u901a\u8fc7ZSTD_c_ldmHashLog\u8c03\u6574\u54c8\u5e0c\u8868\u5c3a\u5bf8\u5e73\u8861\u901f\u5ea6\u4e0e\u5185\u5b58\u3002</li> </ul>"},{"location":"technology/Cpp/026-zstd/#_4","title":"\u4e94\u3001\u6d4b\u8bd5\u6570\u636e\u5bf9\u6bd4","text":"\u6587\u4ef6\u7c7b\u578b \u539f\u59cb\u5927\u5c0f Zstd\u538b\u7f29\u540e \u538b\u7f29\u7387 \u8017\u65f6(ms) \u6587\u672c\u65e5\u5fd7 128MB 32MB 4:1 210 \u6570\u636e\u5e93\u5907\u4efd 1GB 280MB 3.57:1 8900"},{"location":"technology/Cpp/026-zstd/#_5","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/027-7zsfx/","title":"7zsfx","text":"<p>\u4ee5\u4e0b\u662f\u4f7f\u75287-Zip\u5236\u4f5cWindows\u81ea\u89e3\u538b\u5b89\u88c5\u5305\u7684\u5177\u4f53\u65b9\u6cd5\u548c\u5b9e\u73b0\u6b65\u9aa4\uff0c\u7efc\u5408\u4e86\u591a\u79cd\u5b9e\u73b0\u65b9\u6848\u548c\u6ce8\u610f\u4e8b\u9879\uff1a</p>"},{"location":"technology/Cpp/027-7zsfx/#_1","title":"\u4e00\u3001\u57fa\u7840\u5236\u4f5c\u6d41\u7a0b","text":""},{"location":"technology/Cpp/027-7zsfx/#sfx","title":"\u51c6\u5907SFX\u6a21\u5757","text":"<p>\u4eceLZMA SDK\u62167-Zip\u5b89\u88c5\u76ee\u5f55\u83b7\u53d67zS.sfx \u62167zSD.sfx \u6a21\u5757\uff08\u65b0\u7248\u53ef\u80fd\u5728LZMA\u76ee\u5f55\uff0c\u65e7\u7248\u5728extra\u5305\uff09\u3002</p>"},{"location":"technology/Cpp/027-7zsfx/#_2","title":"\u6587\u4ef6\u6253\u5305","text":"<p>7z a demo.7z TestApp.exe  TestApp.config   # \u5c06\u76ee\u6807\u6587\u4ef6\u6253\u5305\u62107z\u683c\u5f0f  * \u652f\u6301\u53c2\u6570\uff1a -r\uff1a\u9012\u5f52\u5b50\u76ee\u5f55 -mx=9\uff1a\u6781\u9650\u538b\u7f29 -m0=LZMA2\uff1a\u6307\u5b9a\u538b\u7f29\u7b97\u6cd5</p>"},{"location":"technology/Cpp/027-7zsfx/#utf-8bomconfigtxt","title":"\u7f16\u5199\u914d\u7f6e\u6587\u4ef6 \u521b\u5efaUTF-8\u65e0BOM\u7f16\u7801\u7684config.txt \uff1a","text":"<pre><code>;!@Install@!UTF-8!\nTitle=\"My Application\"\nBeginPrompt=\"\u786e\u8ba4\u5b89\u88c5\u6b64\u7a0b\u5e8f\u5417\uff1f\"\nExecuteFile=\"TestApp.exe\" \n;!@InstallEnd@!\n</code></pre> <p>\u5173\u952e\u53c2\u6570\u8bf4\u660e\uff1a * RunProgram\uff1a\u89e3\u538b\u540e\u6267\u884c\u7684\u7a0b\u5e8f\u8def\u5f84\uff08\u652f\u6301%%T\u8868\u793a\u4e34\u65f6\u76ee\u5f55\uff09 * Directory\uff1a\u89e3\u538b\u76ee\u5f55\uff08\u9ed8\u8ba4\u4e34\u65f6\u76ee\u5f55\uff09 * ExecuteParameters\uff1a\u4f20\u9012\u547d\u4ee4\u884c\u53c2\u6570</p> <p>\u751f\u6210EXE\u6587\u4ef6</p> <pre><code>copy /b 7zS.sfx  + config.txt  + demo.7z MyInstaller.exe  \n</code></pre>"},{"location":"technology/Cpp/027-7zsfx/#_3","title":"\u4e8c\u3001\u8fdb\u9636\u529f\u80fd\u5b9e\u73b0","text":""},{"location":"technology/Cpp/027-7zsfx/#msi","title":"MSI\u5b89\u88c5\u5305\u96c6\u6210","text":"<pre><code>;!@Install@!UTF-8!\nTitle=\"\u4e13\u4e1a\u8f6f\u4ef6\u5b89\u88c5\"\nExecuteFile=\"msiexec.exe\" \nExecuteParameters=\"/i MyApp.msi  /qn /log install.log\" \n</code></pre> <p>\u4f18\u52bf\uff1a \u81ea\u52a8\u83b7\u53d6\u7ba1\u7406\u5458\u6743\u9650\uff08\u65e0\u9700\u624b\u52a8\u542f\u52a8CMD\uff09 \u9690\u85cfMSI\u5b89\u88c5\u754c\u9762\u63d0\u5347\u7528\u6237\u4f53\u9a8c</p>"},{"location":"technology/Cpp/027-7zsfx/#_4","title":"\u754c\u9762\u7f8e\u5316\u65b9\u6848","text":"<ul> <li>\u4f7f\u75287zSFXBuilder\u5de5\u5177\uff08\u53ef\u89c6\u5316\u914d\u7f6e\u5bf9\u8bdd\u6846\u6837\u5f0f\uff09</li> <li>\u901a\u8fc7Resource Hacker\u4fee\u6539\uff1a</li> <li>\u66ff\u6362SFX\u6a21\u5757\u56fe\u6807\uff08.ico\u6587\u4ef6\uff09</li> <li>\u4fee\u6539\u6587\u4ef6\u5c5e\u6027\uff08\u516c\u53f8\u540d\u79f0\u3001\u7248\u672c\u53f7\u7b49\uff09</li> <li>\u8c03\u6574\u89e3\u538b\u8fdb\u5ea6\u6761\u6837\u5f0f</li> </ul>"},{"location":"technology/Cpp/027-7zsfx/#_5","title":"\u9759\u9ed8\u5b89\u88c5\u6a21\u5f0f","text":"<pre><code>Progress=\"no\"\nExecuteFile=\"setup.bat\" \nRunProgram=\"hide\"\n</code></pre> <p>\u9002\u7528\u573a\u666f\uff1a\u4f01\u4e1a\u6279\u91cf\u90e8\u7f72\u65f6\u9690\u85cf\u6240\u6709\u4ea4\u4e92\u754c\u9762</p>"},{"location":"technology/Cpp/027-7zsfx/#_6","title":"\u4e09\u3001\u7279\u6b8a\u573a\u666f\u5904\u7406","text":""},{"location":"technology/Cpp/027-7zsfx/#_7","title":"\u4f9d\u8d56\u6587\u4ef6\u5b89\u88c5","text":"<pre><code>ExecuteFile=\"vcredist_x64.exe\" \nExecuteParameters=\"/install /quiet /norestart\"\n</code></pre> <p>\u652f\u6301\u94fe\u5f0f\u8c03\u7528\u591a\u4e2a\u5b89\u88c5\u7a0b\u5e8f</p>"},{"location":"technology/Cpp/027-7zsfx/#_8","title":"\u4e34\u65f6\u6587\u4ef6\u6e05\u7406","text":"<pre><code>Delete=\"%%T\\*.*\"\n</code></pre> <p>\u5b89\u88c5\u5b8c\u6210\u540e\u81ea\u52a8\u5220\u9664\u89e3\u538b\u7684\u4e34\u65f6\u6587\u4ef6</p>"},{"location":"technology/Cpp/027-7zsfx/#_9","title":"\u56db\u3001\u5e38\u89c1\u95ee\u9898\u89e3\u51b3","text":""},{"location":"technology/Cpp/027-7zsfx/#_10","title":"\u6743\u9650\u95ee\u9898","text":"<p>\u901a\u8fc7SFX\u5305\u88c5\u540e\uff0c\u53cc\u51fb\u5373\u53ef\u81ea\u52a8\u8bf7\u6c42\u7ba1\u7406\u5458\u6743\u9650\uff0c\u65e0\u9700\u624b\u52a8\u63d0\u6743</p>"},{"location":"technology/Cpp/027-7zsfx/#_11","title":"\u4e2d\u6587\u4e71\u7801\u95ee\u9898","text":"<p>\u786e\u4fdd\u914d\u7f6e\u6587\u4ef6\u4fdd\u5b58\u4e3aUTF-8\u65e0BOM\u7f16\u7801\uff0c\u63a8\u8350\u4f7f\u7528Notepad++\u7f16\u8f91</p>"},{"location":"technology/Cpp/027-7zsfx/#_12","title":"\u6740\u6bd2\u8f6f\u4ef6\u8bef\u62a5","text":"<p>\u5efa\u8bae\u5bf9\u751f\u6210\u540e\u7684EXE\u6587\u4ef6\u8fdb\u884c\u6570\u5b57\u7b7e\u540d\uff08\u9700\u8d2d\u4e70\u4ee3\u7801\u7b7e\u540d\u8bc1\u4e66\uff09</p>"},{"location":"technology/Cpp/027-7zsfx/#sfx_1","title":"\u4e94\u3001\u4e0d\u540cSFX\u6a21\u5757\u5bf9\u6bd4","text":"\u6a21\u5757\u7c7b\u578b \u4ea4\u4e92\u65b9\u5f0f \u9002\u7528\u573a\u666f \u7279\u6027 7z.sfx GUI\u7a97\u53e3 \u7b80\u5355\u89e3\u538b \u4ec5\u57fa\u7840\u89e3\u538b\u529f\u80fd 7zCon.sfx \u547d\u4ee4\u884c \u65e0\u4eba\u503c\u5b88\u5b89\u88c5 \u65e0\u56fe\u5f62\u754c\u9762 7zS.sfx GUI\u5b89\u88c5\u5411\u5bfc \u6807\u51c6\u8f6f\u4ef6\u5b89\u88c5 \u652f\u6301\u5b8c\u6574\u5b89\u88c5\u6d41\u7a0b 7zSD.sfx GUI\u5b89\u88c5\u5411\u5bfc \u9700MSVCRT.dll \u7684\u5b89\u88c5 \u4f9d\u8d56\u7cfb\u7edf\u8fd0\u884c\u5e93 <p>\u63d0\u793a\uff1a\u5efa\u8bae\u6d4b\u8bd5\u65f6\u4f7f\u75287zSD.sfx \u4ee5\u83b7\u5f97\u6700\u4f73\u517c\u5bb9\u6027\u3002\u5982\u9700\u66f4\u590d\u6742\u7684\u5b89\u88c5\u903b\u8f91\uff0c\u53ef\u7ed3\u5408\u6279\u5904\u7406\u811a\u672c\u5b9e\u73b0\u591a\u6b65\u9aa4\u5b89\u88c5\u3002</p>"},{"location":"technology/Cpp/027-7zsfx/#_13","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/028-ImageCompress/","title":"ImageCompress","text":"<p>\u4ee5\u4e0b\u4e3a\u9488\u5bf9 GIFsicle\u3001Guetzli\u3001LibimageQuant \u7684\u6280\u672f\u8c03\u7814\u62a5\u544a\uff0c\u5305\u542b\u539f\u7406\u5206\u6790\u3001\u538b\u7f29\u7387\u5bf9\u6bd4\u3001\u4ee3\u7801\u5b9e\u73b0\u53ca\u53c2\u6570\u4f18\u5316\u7b56\u7565\uff1a</p>"},{"location":"technology/Cpp/028-ImageCompress/#_1","title":"\u4e00\u3001\u5de5\u5177\u529f\u80fd\u5b9a\u4f4d\u5bf9\u6bd4","text":"\u5de5\u5177\u540d\u79f0 \u76ee\u6807\u683c\u5f0f \u6838\u5fc3\u573a\u666f \u538b\u7f29\u7279\u6027 GIFsicle GIF \u52a8\u56fe\u4f18\u5316/\u5e27\u5904\u7406 \u7a7a\u95f4\u4f18\u5316+\u8c03\u8272\u677f\u91cf\u5316 Guetzli JPEG \u9ad8\u4fdd\u771f\u9759\u6001\u56fe\u538b\u7f29 \u5fc3\u7406\u89c6\u89c9\u6a21\u578b+\u8272\u5f69\u7a7a\u95f4\u8f6c\u6362 LibimageQuant PNG \u771f\u5f69\u8f6c\u7d22\u5f15\u8272\u4f18\u5316 \u989c\u8272\u805a\u7c7b+\u6296\u52a8\u7b97\u6cd5"},{"location":"technology/Cpp/028-ImageCompress/#_2","title":"\u4e8c\u3001\u539f\u7406\u4e0e\u6280\u672f\u5b9e\u73b0\u6df1\u5ea6\u89e3\u6790","text":"<ol> <li> <p>GIFsicle \u6838\u5fc3\u539f\u7406\uff1a</p> </li> <li> <p>\u5e27\u5dee\u5206\u7b97\u6cd5\uff1a\u901a\u8fc7\u68c0\u6d4b\u8fde\u7eed\u5e27\u4e4b\u95f4\u7684\u5dee\u5f02\u533a\u57df\uff0c\u4ec5\u4fdd\u7559\u53d8\u5316\u50cf\u7d20\uff08\u900f\u660e\u5316\u91cd\u590d\u90e8\u5206\uff09\uff0c\u51cf\u5c11\u5197\u4f59\u6570\u636e</p> </li> <li>\u8c03\u8272\u677f\u4f18\u5316\uff1a\u5c06\u6bcf\u5e27\u989c\u8272\u6620\u5c04\u5230\u5168\u5c40/\u5c40\u90e8\u8c03\u8272\u677f\uff0c\u901a\u8fc7\u51cf\u5c11\u989c\u8272\u6570\u964d\u4f4e\u5b58\u50a8\u6210\u672c\uff08256\u8272\u219264\u8272\u53ef\u538b\u7f2950%\uff09</li> <li>LZW\u7f16\u7801\u4f18\u5316\uff1a\u91c7\u7528\u6539\u8fdb\u7684LZW\u538b\u7f29\u7b97\u6cd5\uff0c\u52a8\u6001\u8c03\u6574\u7f16\u7801\u8868\u63d0\u5347\u538b\u7f29\u7387 \u4ee3\u7801\u5b9e\u73b0\u793a\u4f8b\uff1a</li> </ol> <pre><code># \u4f18\u5316\u7ea7\u522b\u4e0e\u8c03\u8272\u677f\u63a7\u5236 \ngifsicle -O3 --colors 128 input.gif  -o output.gif  \n# \u5e27\u5dee\u5206\u9608\u503c\u8bbe\u7f6e\uff08\u4ec5\u5904\u7406\u5dee\u5f02&gt;5%\u7684\u50cf\u7d20\uff09\ngifsicle --delta-threshold 0.05 input.gif  -o optimized.gif  \n</code></pre> <p>\u538b\u7f29\u7387\u5b9e\u6d4b\uff1a</p> \u539f\u56fe\u5c3a\u5bf8 \u53c2\u6570\u8bbe\u7f6e \u8f93\u51fa\u5c3a\u5bf8 \u538b\u7f29\u7387 12.6MB -O3 --colors 256 6.2MB 12.6MB -O3 --colors 128 3.4MB 12.6MB --lossy=30 1.8MB 85.7% <ol> <li> <p>Guetzli \u6838\u5fc3\u539f\u7406\uff1a</p> </li> <li> <p>Butteraugli\u6a21\u578b\uff1a\u6a21\u62df\u4eba\u773c\u611f\u77e5\u7279\u6027\uff0c\u4f18\u5148\u4fdd\u7559\u9ad8\u9891\u7ec6\u8282\uff0c\u5bf9\u4f4e\u9891\u533a\u57df\u8fdb\u884c\u9ad8\u538b\u7f29</p> </li> <li>\u8272\u5f69\u7a7a\u95f4\u8f6c\u6362\uff1a\u5c06RGB\u8f6c\u6362\u4e3aXYB\u8272\u5f69\u7a7a\u95f4\uff08Y\u8868\u793a\u4eae\u5ea6\uff0cX/B\u8868\u793a\u8272\u5ea6\uff09\uff0c\u5206\u79bb\u53ef\u538b\u7f29\u7ef4\u5ea6</li> <li>\u91cf\u5316\u8868\u4f18\u5316\uff1a\u52a8\u6001\u751f\u6210JPEG\u91cf\u5316\u8868\uff0c\u9488\u5bf9\u56fe\u50cf\u5185\u5bb9\u4f18\u5316DCT\u7cfb\u6570\u53d6\u820d</li> </ol> <p>\u5904\u7406\u6d41\u7a0b\uff1a</p> <pre><code>graph TD \n    A[RGB\u8f93\u5165] --&gt; B{\u8272\u5f69\u7a7a\u95f4\u8f6c\u6362}\n    B --&gt; C[XYB\u7a7a\u95f4\u5206\u89e3]\n    C --&gt; D[Butteraugli\u6a21\u578b\u5206\u6790]\n    D --&gt; E[\u52a8\u6001\u91cf\u5316\u8868\u751f\u6210]\n    E --&gt; F[DCT\u7cfb\u6570\u538b\u7f29]\n    F --&gt; G[JPEG\u7f16\u7801\u8f93\u51fa]\n</code></pre> <p>\u538b\u7f29\u7387\u5b9e\u6d4b\uff1a</p> \u6d4b\u8bd5\u96c6 \u539f\u56fe\u5e73\u5747\u5927\u5c0f Guetzli\u8f93\u51fa \u538b\u7f29\u7387 \u8017\u65f6/\u5f20 1292\u5f20\u6d4b\u8bd5\u56fe 33KB 23.4KB 29% 8\u79d2 3.76MB\u5927\u56fe 3.76MB 2.55MB 31.5% 16\u5206\u949f <ol> <li> <p>LibimageQuant \u6838\u5fc3\u539f\u7406\uff1a</p> </li> <li> <p>\u4e2d\u4f4d\u5207\u5272\u7b97\u6cd5\uff1a\u901a\u8fc7\u9012\u5f52\u5212\u5206\u989c\u8272\u7a7a\u95f4\uff0c\u751f\u6210\u6700\u4f18256\u8272\u8c03\u8272\u677f</p> </li> <li>\u8bef\u5dee\u6269\u6563\u6296\u52a8\uff1a\u4f7f\u7528Floyd-Steinberg\u7b97\u6cd5\u6a21\u62df\u989c\u8272\u8fc7\u6e21\uff0c\u51cf\u5c11\u8272\u5e26\u6548\u5e94</li> <li>\u03b1\u901a\u9053\u4f18\u5316\uff1a\u5355\u72ec\u5904\u7406\u900f\u660e\u901a\u9053\uff0c\u907f\u514d\u989c\u8272\u6df7\u5408\u5931\u771f</li> </ol> <p>\u4ee3\u7801\u96c6\u6210\u793a\u4f8b\uff1a</p> <pre><code>liq_image *img = liq_image_create_rgba(attr, pixels, width, height, 0);\nliq_set_quality(attr, 70, 90); // \u8bbe\u7f6e\u8d28\u91cf\u8303\u56f4 \nliq_result *res = liq_quantize_image(attr, img);\nliq_write_remapped_image(res, img, buffer, buffer_size);\n</code></pre> <p>\u538b\u7f29\u7387\u5b9e\u6d4b\uff1a</p> \u8f93\u5165\u7c7b\u578b \u539f\u56fe\u5927\u5c0f \u8f93\u51fa\u5927\u5c0f \u538b\u7f29\u7387 24\u4f4dPNG 4.2MB 820KB 80.5% \u5e26\u03b1\u901a\u9053PNG 3.7MB 1.1MB 70.3%"},{"location":"technology/Cpp/028-ImageCompress/#_3","title":"\u4e09\u3001\u53c2\u6570\u4f18\u5316\u7b56\u7565\u5bf9\u7167\u8868","text":"\u5de5\u5177 \u5173\u952e\u53c2\u6570 \u4f18\u5316\u5efa\u8bae GIFsicle --colors --lossy 128\u8272+lossy=20\u5e73\u8861\u8d28\u91cf\u4e0e\u538b\u7f29\u7387 Guetzli --quality \u8d28\u91cf&gt;90\u65f6\u6027\u4ef7\u6bd4\u4f4e\uff0c\u5efa\u8bae85-90\u533a\u95f4 LibimageQuant liq_set_speed() speed=1\uff08\u6700\u9ad8\u8d28\u91cf\uff09 vs speed=5\uff08\u6700\u5feb\uff09"},{"location":"technology/Cpp/028-ImageCompress/#_4","title":"\u56db\u3001\u6280\u672f\u9009\u578b\u5efa\u8bae","text":"<ul> <li>\u52a8\u6001\u5185\u5bb9\u538b\u7f29\uff1a\u4f18\u5148\u4f7f\u7528GIFsicle\u8fdb\u884c\u5e27\u5dee\u5206\u4f18\u5316\uff0clossy\u6a21\u5f0f\u538b\u7f29\u7387\u53ef\u8fbe85%</li> <li>\u9ad8\u4fdd\u771fJPEG\u538b\u7f29\uff1aGuetzli\u5728\u8d28\u91cf&gt;90\u65f6\u4f18\u4e8emozjpeg\uff0c\u4f46\u9700\u63a5\u53d720\u500d\u8017\u65f6\u589e\u957f</li> <li>\u7d22\u5f15\u8272\u8f6c\u6362\u573a\u666f\uff1aLibimageQuant\u5728\u751f\u62108\u4f4dPNG\u65f6\uff0c\u6bd4pngquant\u5feb3\u500d\u4e14\u8d28\u91cf\u66f4\u9ad8</li> </ul>"},{"location":"technology/Cpp/028-ImageCompress/#_5","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/029-gperftools/","title":"gperftools","text":"<p>\u4ee5\u4e0b\u4e3a\u9488\u5bf9gperftools\u7684\u6280\u672f\u8c03\u7814\u7ed3\u679c\uff0c\u6db5\u76d6\u539f\u7406\u3001\u6838\u5fc3\u6a21\u5757\u3001\u4f18\u5316\u53c2\u6570\u3001\u4ee3\u7801\u5b9e\u73b0\u53ca\u53ef\u89c6\u5316\u5206\u6790\u5de5\u5177\u4f7f\u7528\uff1a</p>"},{"location":"technology/Cpp/029-gperftools/#gperftools_1","title":"\u4e00\u3001gperftools\u6838\u5fc3\u539f\u7406","text":""},{"location":"technology/Cpp/029-gperftools/#_1","title":"\u7cfb\u7edf\u67b6\u6784","text":"<p>gperftools\u7531\u4e09\u4e2a\u6838\u5fc3\u6a21\u5757\u6784\u6210\uff1a</p> <ul> <li>CPU Profiler\uff1a\u57fa\u4e8e\u91c7\u6837\u7684\u6027\u80fd\u5206\u6790\u5668\uff0c\u901a\u8fc7\u5b9a\u65f6\u4e2d\u65ad\u8bb0\u5f55\u8c03\u7528\u6808</li> <li>tcmalloc\uff1a\u7ebf\u7a0b\u7f13\u5b58\u5185\u5b58\u5206\u914d\u5668\uff0c\u91c7\u7528\u5206\u5c42\u7ed3\u6784\u7ba1\u7406\u5185\u5b58</li> <li>Heap Profiler\uff1a\u5185\u5b58\u6cc4\u6f0f\u68c0\u6d4b\u5de5\u5177\uff0c\u8ddf\u8e2a\u5185\u5b58\u5206\u914d\u8def\u5f84</li> </ul>"},{"location":"technology/Cpp/029-gperftools/#cpu-profiler","title":"CPU Profiler\u5b9e\u73b0\u539f\u7406","text":"<pre><code>// \u4f2a\u4ee3\u7801\u5b9e\u73b0\u91c7\u6837\u903b\u8f91\nvoid SamplerThread() {\n    while (running) {\n        sleep(sampling_interval); // \u9ed8\u8ba410ms\n        for (thread in all_threads) {\n            CaptureCallStack(thread); // \u83b7\u53d6\u8c03\u7528\u6808\n            UpdateProfileStats(stack); // \u7edf\u8ba1\u70ed\u70b9\u8def\u5f84\n        }\n    }\n}\n</code></pre> <p>\u6d41\u7a0b\u56fe\uff1a</p> <pre><code>[\u542f\u52a8Profiler] \u2192 [\u6ce8\u518c\u4fe1\u53f7\u5904\u7406\u5668] \u2192 [\u5b9a\u65f6\u5668\u4e2d\u65ad] \u2192 [\u6355\u83b7\u8c03\u7528\u6808] \u2192 [\u805a\u5408\u7edf\u8ba1] \u2192 [\u751f\u6210.prof\u6587\u4ef6]\n</code></pre>"},{"location":"technology/Cpp/029-gperftools/#tcmalloc","title":"tcmalloc\u5185\u5b58\u7ba1\u7406","text":"<ul> <li>ThreadCache\uff1a\u6bcf\u4e2a\u7ebf\u7a0b\u72ec\u7acb\u7684\u5c0f\u5bf9\u8c61\u7f13\u5b58\uff08\u2264256KB\uff09</li> <li>CentralFreeList\uff1a\u5168\u5c40\u4e2d\u5927\u578b\u5bf9\u8c61\u5185\u5b58\u6c60</li> <li>PageHeap\uff1a\u6309\u9875\u7ba1\u7406\u7684\u5185\u5b58\u5206\u914d\u5668\uff081MB\u4e3a\u5355\u4f4d\uff09</li> </ul>"},{"location":"technology/Cpp/029-gperftools/#_2","title":"\u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\u4e0e\u96c6\u6210","text":""},{"location":"technology/Cpp/029-gperftools/#_3","title":"\u57fa\u7840\u6027\u80fd\u5206\u6790\u4ee3\u7801","text":"<pre><code>#include &lt;gperftools/profiler.h&gt;\n\nvoid HeavyCalculation() { /* \u8017\u65f6\u51fd\u6570 */ }\n\nint main() {\n    ProfilerStart(\"output.prof\");  // \u542f\u52a8\u5206\u6790\n    HeavyCalculation();\n    ProfilerStop(); // \u505c\u6b62\u5206\u6790\n    return 0;\n}\n</code></pre> <p>\u7f16\u8bd1\u6307\u4ee4\uff1a</p> <pre><code>g++ -o demo demo.cpp  -lprofiler -fno-omit-frame-pointer\n</code></pre>"},{"location":"technology/Cpp/029-gperftools/#_4","title":"\u9ad8\u7ea7\u4f7f\u7528\uff08\u52a8\u6001\u63a7\u5236\uff09","text":"<pre><code>#include &lt;gperftools/profiler.h&gt;\n#include &lt;signal.h&gt;\n\nvoid SignalHandler(int sig) {\n    static bool is_profiling = false;\n    if (!is_profiling) {\n        ProfilerStart(\"dynamic.prof\"); \n    } else {\n        ProfilerStop();\n    }\n    is_profiling = !is_profiling;\n}\n\nint main() {\n    signal(SIGUSR1, SignalHandler); // \u901a\u8fc7kill -USR1\u89e6\u53d1\n    while(true) { /* \u4e1a\u52a1\u903b\u8f91 */ }\n}\n</code></pre>"},{"location":"technology/Cpp/029-gperftools/#_5","title":"\u4e09\u3001\u5173\u952e\u4f18\u5316\u53c2\u6570","text":""},{"location":"technology/Cpp/029-gperftools/#_6","title":"\u7f16\u8bd1\u671f\u53c2\u6570","text":"\u53c2\u6570 \u4f5c\u7528 \u793a\u4f8b -fno-omit-frame-pointer \u4fdd\u7559\u6808\u5e27\u6307\u9488 g++ -fno-omit-frame-pointer --enable-frame-pointers \u914d\u7f6egperftools\u65f6\u542f\u7528 ./configure --enable-frame-pointers"},{"location":"technology/Cpp/029-gperftools/#_7","title":"\u8fd0\u884c\u65f6\u53c2\u6570","text":"\u73af\u5883\u53d8\u91cf \u4f5c\u7528 \u793a\u4f8b CPUPROFILE \u6307\u5b9a\u8f93\u51fa\u6587\u4ef6 CPUPROFILE=output.prof  ./demo CPUPROFILE_FREQUENCY \u91c7\u6837\u9891\u7387(Hz) CPUPROFILE_FREQUENCY=100 HEAPPROFILE \u5185\u5b58\u5206\u6790\u6587\u4ef6 HEAPPROFILE=heap.prof  ./demo ### \u56db\u3001\u53ef\u89c6\u5316\u5206\u6790\u6d41\u7a0b #### \u751f\u6210\u5206\u6790\u62a5\u544a <pre><code>pprof --callgrind ./demo output.prof  &gt; output.callgrind \nkcachegrind output.callgrind \n</code></pre>"},{"location":"technology/Cpp/029-gperftools/#kcachegrind","title":"kcachegrind\u754c\u9762\u89e3\u6790","text":"<ul> <li>\u51fd\u6570\u8c03\u7528\u56fe\uff1a\u663e\u793a\u70ed\u70b9\u8def\u5f84\u53ca\u8017\u65f6\u5360\u6bd4</li> <li>\u6e90\u7801\u5173\u8054\uff1a\u76f4\u63a5\u5b9a\u4f4d\u9ad8\u6d88\u8017\u4ee3\u7801\u884c</li> </ul>"},{"location":"technology/Cpp/029-gperftools/#_8","title":"\u4e94\u3001\u6027\u80fd\u4f18\u5316\u5efa\u8bae","text":"<ul> <li>\u70ed\u70b9\u51fd\u6570\u4f18\u5316\uff1a\u4f18\u5148\u5904\u7406\u91c7\u6837\u6b21\u6570\u6700\u591a\u7684\u51fd\u6570</li> <li>\u5185\u5b58\u5206\u914d\u4f18\u5316\uff1a</li> </ul> <pre><code>// \u4f7f\u7528tcmalloc\u66ff\u4ee3\u6807\u51c6malloc\n#include &lt;gperftools/tcmalloc.h&gt;\nvoid* ptr = tc_malloc(1024);\ntc_free(ptr);\n</code></pre> <ul> <li>\u591a\u7ebf\u7a0b\u4f18\u5316\uff1a\u7ed3\u5408HEAP_CHECK_MAX_LEAKS\u68c0\u6d4b\u5185\u5b58\u6cc4\u6f0f</li> </ul>"},{"location":"technology/Cpp/029-gperftools/#_9","title":"\u516d\u3001\u6838\u5fc3\u6570\u636e\u7ed3\u6784\uff08\u90e8\u5206\u6e90\u7801\u89e3\u6790\uff09","text":"<pre><code>tcmalloc\u7684CentralFreeList\nclass CentralFreeList {\n    SpinLock lock_;\n    SpanList free_spans_; // \u7a7a\u95f2\u5185\u5b58\u5757\u94fe\u8868\n    size_t size_class_;   // \u5185\u5b58\u89c4\u683c\u5206\u7c7b\n    // \u4ecePageHeap\u7533\u8bf7\u65b0\u5185\u5b58\u9875\n    Span* NewSpan(size_t n);\n};\n</code></pre> <p>\u53c2\u8003\u8d44\u6599\uff1a</p> <ul> <li>CPU Profiler\u5b9e\u73b0\u7ec6\u8282</li> <li>tcmalloc\u5185\u5b58\u7ba1\u7406\u7b56\u7565</li> <li>\u53ef\u89c6\u5316\u5de5\u5177\u96c6\u6210\u65b9\u6cd5</li> </ul> <p>\u4ee5\u4e0a\u5185\u5bb9\u53ef\u901a\u8fc7\u6269\u5c55\u793a\u4f8b\u4ee3\u7801\u4e2d\u7684HeavyCalculation()\u51fd\u6570\u8fdb\u884c\u5b9e\u9645\u9a8c\u8bc1\uff0c\u5efa\u8bae\u7ed3\u5408\u5177\u4f53\u4e1a\u52a1\u573a\u666f\u8c03\u6574\u91c7\u6837\u9891\u7387\u548c\u5206\u6790\u7c92\u5ea6\u3002</p>"},{"location":"technology/Cpp/029-gperftools/#_10","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/030-gprof/","title":"gprof","text":"<p>\u4ee5\u4e0b\u662f\u4ece\u539f\u7406\u5230\u5b9e\u73b0\u3001\u4ece\u5168\u5c40\u5230\u7ec6\u8282\u7684gprof\u6280\u672f\u8c03\u7814\u62a5\u544a\uff0c\u5305\u542b\u6838\u5fc3\u4ee3\u7801\u5b9e\u73b0\u548c\u53ef\u89c6\u5316\u5206\u6790\u65b9\u6848\uff1a</p>"},{"location":"technology/Cpp/030-gprof/#gprof_1","title":"\u4e00\u3001gprof\u6838\u5fc3\u539f\u7406\u4e0e\u5b9e\u73b0\u67b6\u6784","text":"<p>1.1 \u7cfb\u7edf\u67b6\u6784\u56fe</p> <pre><code>graph TD \n    A[\u6e90\u4ee3\u7801] --&gt; B[\u5e26-pg\u7f16\u8bd1]\n    B --&gt; C[\u63d2\u5165mcount\u51fd\u6570]\n    C --&gt; D[\u8fd0\u884c\u65f6\u6570\u636e\u91c7\u96c6]\n    D --&gt; E[\u751f\u6210gmon.out] \n    E --&gt; F[gprof\u5206\u6790]\n    F --&gt; G[Flat Profile]\n    F --&gt; H[Call Graph]\n</code></pre> <p>1.2 \u6838\u5fc3\u5de5\u4f5c\u539f\u7406\uff08\u53c2\u8003\uff09 \u4ee3\u7801\u63d2\u6869\uff1a\u7f16\u8bd1\u65f6\u901a\u8fc7-pg\u53c2\u6570\u5728\u51fd\u6570\u5165\u53e3\u63d2\u5165mcount\u8c03\u7528 \u8c03\u7528\u6808\u8ffd\u8e2a\uff1a</p> <pre><code>void __mcount (void *self_pc){\n    // \u83b7\u53d6\u8c03\u7528\u8005\u5730\u5740\uff08\u901a\u8fc7\u5bc4\u5b58\u5668\u6216\u6808\u6307\u9488\uff09\n    void *from_pc = __builtin_return_address(0);\n    // \u8bb0\u5f55\u8c03\u7528\u5173\u7cfb\u56fe\n    record_call_graph(from_pc, self_pc);\n}\n</code></pre> <p>\u6570\u636e\u91c7\u96c6\uff1a * \u65f6\u95f4\u91c7\u6837\uff1a\u6bcf10ms\u4e2d\u65ad\u8bb0\u5f55\u5f53\u524dPC\u503c\uff08\u53c2\u8003\uff09 * \u8c03\u7528\u8ba1\u6570\uff1a\u7ef4\u62a4\u54c8\u5e0c\u8868\u8bb0\u5f55\u51fd\u6570\u8c03\u7528\u6b21\u6570 * \u52a8\u6001\u5185\u5b58\u5206\u914d\u7ed3\u6784\uff1a</p> <pre><code>struct profile_data {\n    unsigned long calls;  // \u8c03\u7528\u6b21\u6570 \n    double total_time;    // \u603b\u8017\u65f6 \n    struct child *children; // \u5b50\u8c03\u7528\u8282\u70b9 \n};\n</code></pre>"},{"location":"technology/Cpp/030-gprof/#c","title":"\u4e8c\u3001\u5b8c\u6574C++\u793a\u4f8b\u4ee3\u7801","text":"<p>2.1 \u6d4b\u8bd5\u7a0b\u5e8f\uff08\u53c2\u8003\uff09</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid func3(int depth) {\n    for(int i=0; i&lt;10000*(depth+1); i++); // \u8017\u65f6\u64cd\u4f5c \n}\n\nvoid func2() {\n    for(int i=0; i&lt;50000; i++);\n    func3(1);\n}\n\nvoid func1() {\n    for(int i=0; i&lt;100000; i++);\n    func3(0);\n    func2();\n}\n\nint main() {\n    for(int i=0; i&lt;5; i++){\n        func1();\n        func2();\n    }\n    return 0;\n}\n</code></pre> <p>2.2 \u7f16\u8bd1\u4e0e\u8fd0\u884c</p> <pre><code>g++ -pg -O2 test_gprof.cpp  -o test_gprof  # \u5e26\u4f18\u5316\u7f16\u8bd1[8]()\n./test_gprof  # \u751f\u6210gmon.out  \n</code></pre>"},{"location":"technology/Cpp/030-gprof/#_1","title":"\u4e09\u3001\u6027\u80fd\u5206\u6790\u8fdb\u9636\u914d\u7f6e","text":"<p>3.1 \u5173\u952e\u4f18\u5316\u53c2\u6570\uff08\u53c2\u8003\uff09</p> \u53c2\u6570\u7ec4\u5408 \u4f5c\u7528 \u6ce8\u610f\u4e8b\u9879 -pg -O2 \u57fa\u7840\u6027\u80fd\u5206\u6790 \u907f\u514d-O3\u5bfc\u81f4\u63d2\u6869\u5931\u6548 -lc_p -pg \u5206\u6790C\u5e93\u51fd\u6570 \u9700\u5b89\u88c5libc-profile -fno-inline \u7981\u7528\u5185\u8054 \u786e\u4fdd\u51fd\u6570\u53ef\u89c1 -static-libgcc \u9759\u6001\u94fe\u63a5 \u907f\u514d\u52a8\u6001\u5e93\u95ee\u9898 <p>3.2 \u591a\u7ebf\u7a0b\u652f\u6301\u65b9\u6848</p> <pre><code>// \u4f7f\u7528gprof-helper.c[1]()\ngcc -shared -fPIC gprof-helper.c -o gprof-helper.so  -lpthread -ldl\nexport LD_PRELOAD=./gprof-helper.so  \n</code></pre>"},{"location":"technology/Cpp/030-gprof/#_2","title":"\u56db\u3001\u53ef\u89c6\u5316\u5206\u6790\u6d41\u7a0b","text":"<p>4.1 Kcachegrind\u53ef\u89c6\u5316\uff08\u53c2\u8003\uff09</p> <pre><code>sequenceDiagram \n    \u7a0b\u5e8f\u8fd0\u884c-&gt;&gt;gmon.out:  \u751f\u6210\u539f\u59cb\u6570\u636e \n    gprof-&gt;&gt;callgrind.out:  \u8f6c\u6362\u683c\u5f0f: gprof -b ./test_gprof | gprof2dot | dot -Tcallgrind -o callgrind.out  \n    kcachegrind-&gt;&gt;\u53ef\u89c6\u5316: \u52a0\u8f7dcallgrind.out  \n</code></pre> <p>4.2 \u5173\u952e\u5206\u6790\u89c6\u56fe \u8c03\u7528\u5173\u7cfb\u706b\u7130\u56fe\uff1a</p> <pre><code>gprof2dot -f pstats gmon.out  | dot -Tsvg -o flame.svg  \n</code></pre>"},{"location":"technology/Cpp/030-gprof/#_3","title":"\u4e94\u3001\u6280\u672f\u5c40\u9650\u4e0e\u4f18\u5316\u5efa\u8bae","text":"<p>5.1 \u5df2\u77e5\u7f3a\u9677\uff08\u53c2\u8003\uff09 * \u65f6\u95f4\u91c7\u6837\u7cbe\u5ea6\u8bef\u5dee\uff08\u00b110%\uff09 * \u65e0\u6cd5\u5206\u6790\u5185\u6838\u6001\u8017\u65f6\uff08\u9700\u7ed3\u5408perf\u5de5\u5177\uff09 * \u9012\u5f52\u51fd\u6570\u5904\u7406\u4e0d\u5b8c\u5584\uff08\u5f3a\u8fde\u901a\u5206\u91cf\u538b\u7f29\uff09 5.2 \u66ff\u4ee3\u65b9\u6848\u5bf9\u6bd4</p> \u5de5\u5177 \u4f18\u52bf \u5c40\u9650 gprof \u65e0\u9700\u91cd\u65b0\u7f16\u8bd1\u5185\u6838 \u591a\u7ebf\u7a0b\u652f\u6301\u5dee perf \u652f\u6301\u786c\u4ef6\u8ba1\u6570\u5668 \u5b66\u4e60\u66f2\u7ebf\u9661\u5ced Valgrind \u5185\u5b58+\u6027\u80fd\u7efc\u5408\u5206\u6790 \u8fd0\u884c\u901f\u5ea6\u616210\u500d\u4ee5\u4e0a"},{"location":"technology/Cpp/030-gprof/#_4","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/031-valgrind/","title":"valgrind","text":"<p>\u4ee5\u4e0b\u662f\u4ece\u539f\u7406\u5230\u4ee3\u7801\u5b9e\u73b0\u3001\u53c2\u6570\u4f18\u5316\u53ca\u7ed3\u679c\u5206\u6790\u7684Valgrind\u6280\u672f\u8c03\u7814\u62a5\u544a\uff0c\u7ed3\u5408C++\u793a\u4f8b\u548c\u53ef\u89c6\u5316\u5de5\u5177\u4f7f\u7528\u8bf4\u660e\uff1a</p>"},{"location":"technology/Cpp/031-valgrind/#valgrind_1","title":"\u4e00\u3001Valgrind\u6838\u5fc3\u539f\u7406\u4e0e\u67b6\u6784","text":"<p>1.1 \u7cfb\u7edf\u67b6\u6784</p> <pre><code>graph TD\n    A[Valgrind Core] --&gt; B[Memcheck]\n    A --&gt; C[Callgrind]\n    A --&gt; D[Cachegrind]\n    A --&gt; E[Helgrind]\n    A --&gt; F[Massif]\n</code></pre> <p>\u6838\u5fc3\u6a21\u62dfCPU\u73af\u5883\uff0c\u5de5\u5177\u4f5c\u4e3a\u63d2\u4ef6\u8fd0\u884c\u5728\u865a\u62df\u673a\u4e0a 1.2 Memcheck\u68c0\u6d4b\u539f\u7406</p> <pre><code>sequenceDiagram\n    Program-&gt;&gt;+Valgrind: \u5185\u5b58\u8bbf\u95ee\u8bf7\u6c42\n    Valgrind-&gt;&gt;Valid-Address\u8868: \u68c0\u67e5\u5730\u5740\u5408\u6cd5\u6027\n    Valgrind-&gt;&gt;Valid-Value\u8868: \u68c0\u67e5\u503c\u521d\u59cb\u5316\u72b6\u6001\n    alt \u5730\u5740\u975e\u6cd5\n        Valgrind--&gt;&gt;Program: \u62a5\u544a\u975e\u6cd5\u8bbf\u95ee\n    else \u503c\u672a\u521d\u59cb\u5316\n        Valgrind--&gt;&gt;Program: \u62a5\u544a\u672a\u521d\u59cb\u5316\u9519\u8bef\n    end\n</code></pre> <p>\u57fa\u4e8e\u865a\u62dfCPU\u73af\u5883\u7ef4\u62a4\u4e24\u4e2a\u5168\u5c40\u8868\uff1aValid-Address\uff08\u5730\u5740\u5408\u6cd5\u6027\uff09\u3001Valid-Value\uff08\u503c\u521d\u59cb\u5316\u72b6\u6001\uff09</p>"},{"location":"technology/Cpp/031-valgrind/#_1","title":"\u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\u793a\u4f8b\u4e0e\u5206\u6790","text":"<p>2.1 \u6d4b\u8bd5\u7528\u4f8b\uff08demo.cpp \uff09</p> <pre><code>#include &lt;stdlib.h&gt;\n\nvoid leak() {\n    int* ptr = new int[10](); // \u5185\u5b58\u6cc4\u6f0f\n}\n\nvoid uninit() {\n    int x;\n    if(x &gt; 0) { // \u672a\u521d\u59cb\u5316\u4f7f\u7528\n        //...\n    }\n}\n\nint main() {\n    int* arr = (int*)malloc(sizeof(int)*20);\n    arr[20]()  = 0; // \u8d8a\u754c\u8bbf\u95ee\n    leak();\n    uninit();\n    free(arr);\n    return 0;\n}\n</code></pre> <p>2.2 \u7f16\u8bd1\u4e0e\u68c0\u6d4b</p> <pre><code>g++ -g -O0 demo.cpp  -o demo  # \u5fc5\u987b\u5305\u542b\u8c03\u8bd5\u4fe1\u606f\nvalgrind --tool=memcheck --leak-check=full ./demo\n</code></pre>"},{"location":"technology/Cpp/031-valgrind/#_2","title":"\u4e09\u3001\u5173\u952e\u4f18\u5316\u53c2\u6570\u8bbe\u7f6e","text":"\u53c2\u6570\u7c7b\u578b \u793a\u4f8b\u547d\u4ee4 \u4f5c\u7528\u8bf4\u660e \u5185\u5b58\u68c0\u6d4b   --track-origins=yes \u8ffd\u8e2a\u672a\u521d\u59cb\u5316\u503c\u7684\u6765\u6e90 \u6cc4\u6f0f\u68c0\u6d4b   --leak-check=full \u663e\u793a\u6cc4\u6f0f\u7684\u5b8c\u6574\u5806\u6808 \u5b50\u8fdb\u7a0b\u8ddf\u8e2a  --trace-children=yes \u76d1\u63a7fork\u4ea7\u751f\u7684\u5b50\u8fdb\u7a0b \u9519\u8bef\u6291\u5236   --suppressions=suppress.txt \u5ffd\u7565\u6307\u5b9a\u6a21\u5f0f\u7684\u8bef\u62a5 \u6027\u80fd\u5206\u6790   --tool=callgrind --separate-threads=yes \u591a\u7ebf\u7a0b\u6027\u80fd\u5206\u6790"},{"location":"technology/Cpp/031-valgrind/#kcachegrind","title":"\u56db\u3001KCachegrind\u7ed3\u679c\u5206\u6790","text":"<p>4.1 \u751f\u6210\u6027\u80fd\u6570\u636e</p> <pre><code>valgrind --tool=callgrind --callgrind-out-file=profile.out  ./demo\n</code></pre> <p>4.2 \u53ef\u89c6\u5316\u5206\u6790</p> <pre><code>kcachegrind profile.out \n</code></pre> <p>\u5173\u952e\u529f\u80fd\uff1a</p> <ul> <li>\u51fd\u6570\u8c03\u7528\u56fe\u53ef\u89c6\u5316</li> <li>CPU\u5468\u671f\u5360\u6bd4\u5206\u6790</li> <li>\u7f13\u5b58\u547d\u4e2d\u7387\u7edf\u8ba1</li> <li>\u591a\u7ebf\u7a0b\u6267\u884c\u8def\u5f84\u8ffd\u8e2a</li> </ul>"},{"location":"technology/Cpp/031-valgrind/#_3","title":"\u4e94\u3001\u9ad8\u7ea7\u8c03\u8bd5\u6280\u5de7","text":"<p>5.1 \u6df7\u5408\u8c03\u8bd5\u6a21\u5f0f</p> <pre><code>valgrind --vgdb=yes --vgdb-error=0 ./demo\ngdb ./demo\n(gdb) target remote | vgdb\n</code></pre> <p>\u5b9e\u73b0Valgrind\u4e0eGDB\u8054\u5408\u8c03\u8bd5</p> <p>5.2 \u81ea\u5b9a\u4e49\u68c0\u6d4b\u89c4\u5219</p> <pre><code>&lt;!-- suppress.xml  --&gt;\n&lt;suppressions&gt;\n    &lt;suppress&gt;\n        &lt;sname&gt;MyLibraryLeak&lt;/sname&gt;\n        &lt;frame&gt;my_malloc&lt;/frame&gt;\n    &lt;/suppress&gt;\n&lt;/suppressions&gt;\n</code></pre> <p>\u901a\u8fc7\u6291\u5236\u6587\u4ef6\u5ffd\u7565\u7279\u5b9a\u5185\u5b58\u64cd\u4f5c</p>"},{"location":"technology/Cpp/031-valgrind/#_4","title":"\u516d\u3001\u6027\u80fd\u4f18\u5316\u5efa\u8bae","text":"<ul> <li>\u7f16\u8bd1\u4f18\u5316\uff1a\u68c0\u6d4b\u65f6\u4f7f\u7528-O1\u4f18\u5316\u7ea7\u522b\uff0c\u907f\u514d-O2\u5bfc\u81f4\u884c\u53f7\u504f\u79fb</li> <li>\u7f13\u5b58\u9884\u70ed\uff1a\u901a\u8fc7--cache-sim=yes\u53c2\u6570\u6536\u96c6\u7f13\u5b58\u6570\u636e</li> <li>\u591a\u7ebf\u7a0b\u4f18\u5316\uff1a\u7ed3\u5408Helgrind\u68c0\u6d4b\u7ade\u6001\u6761\u4ef6</li> </ul> <pre><code>valgrind --tool=helgrind ./multi_thread_demo\n</code></pre> <p>\u5185\u5b58\u5bf9\u9f50\u4f18\u5316\uff1a\u901a\u8fc7Massif\u5206\u6790\u5806\u5185\u5b58\u5206\u5e03</p> <pre><code>valgrind --tool=massif --stacks=yes ./demo\n</code></pre>"},{"location":"technology/Cpp/031-valgrind/#_5","title":"\u4e03\u3001\u5b8c\u6574\u68c0\u6d4b\u6d41\u7a0b","text":"<pre><code>flowchart TB\n    A[\u7f16\u5199\u6d4b\u8bd5\u7a0b\u5e8f] --&gt; B[\u5e26\u8c03\u8bd5\u4fe1\u606f\u7f16\u8bd1]\n    B --&gt; C[\u9009\u62e9\u68c0\u6d4b\u5de5\u5177]\n    C --&gt; D{\u5185\u5b58\u68c0\u6d4b?}\n    D --&gt;|Yes| E[Memcheck\u53c2\u6570\u914d\u7f6e]\n    D --&gt;|No| F[\u5176\u4ed6\u5de5\u5177\u53c2\u6570\u914d\u7f6e]\n    E/F --&gt; G[\u751f\u6210\u68c0\u6d4b\u62a5\u544a]\n    G --&gt; H[KCachegrind\u53ef\u89c6\u5316]\n    H --&gt; I[\u95ee\u9898\u5b9a\u4f4d]\n    I --&gt; J[\u4ee3\u7801\u4fee\u590d]\n</code></pre>"},{"location":"technology/Cpp/031-valgrind/#_6","title":"\u516b\u3001\u6280\u672f\u5c40\u9650\u4e0e\u6539\u8fdb","text":"<ul> <li>\u5047\u9633\u6027\u95ee\u9898\uff1a\u7ea65%\u7684\u8bef\u62a5\u7387\uff0c\u9700\u4eba\u5de5\u9a8c\u8bc1</li> <li>\u6027\u80fd\u635f\u8017\uff1a\u6267\u884c\u901f\u5ea6\u964d\u4f4e10-50\u500d</li> <li>SIMD\u6307\u4ee4\u652f\u6301\uff1a\u90e8\u5206AVX\u6307\u4ee4\u96c6\u68c0\u6d4b\u4e0d\u5b8c\u5584</li> <li>\u5b9e\u65f6\u7cfb\u7edf\u9650\u5236\uff1a\u4e0d\u9002\u5408\u65f6\u95f4\u654f\u611f\u578b\u5e94\u7528</li> <li>\u6539\u8fdb\u65b9\u6848\u5efa\u8bae\uff1a</li> </ul> <pre><code>// \u81ea\u5b9a\u4e49\u5206\u914d\u5668\u793a\u4f8b\nclass ValgrindAwareAllocator {\npublic:\n    void* allocate(size_t size) {\n        VALGRIND_MALLOCLIKE_BLOCK(ptr, size, 0, 0);\n        return malloc(size);\n    }\n    //... \u5176\u4ed6\u5185\u5b58\u7ba1\u7406\u51fd\u6570\n};\n</code></pre> <p>\u4ee5\u4e0a\u5185\u5bb9\u6574\u5408\u4e86Valgrind\u7684\u6838\u5fc3\u5de5\u4f5c\u673a\u5236\u548c\u5b9e\u9645\u5e94\u7528\u8981\u70b9\uff0c\u53ef\u901a\u8fc7\u793a\u4f8b\u4ee3\u7801\u548c\u53ef\u89c6\u5316\u5de5\u5177\u5feb\u901f\u5b9a\u4f4d\u5185\u5b58\u95ee\u9898\u3002\u5efa\u8bae\u7ed3\u5408\u5177\u4f53\u9879\u76ee\u9700\u6c42\u9009\u62e9\u9002\u5408\u7684\u68c0\u6d4b\u5de5\u5177\u7ec4\u5408\uff0c\u5e76\u5efa\u7acb\u81ea\u52a8\u5316\u68c0\u6d4b\u6d41\u7a0b\u3002</p>"},{"location":"technology/Cpp/031-valgrind/#_7","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/033-QtShadowDialog/","title":"QtShadowDialog","text":"<p>QWidget\u5b9e\u73b0\u65e0\u8fb9\u6846\u5e26\u9634\u5f71\u7a97\u4f53\u6280\u672f\u8c03\u7814\u62a5\u544a</p>"},{"location":"technology/Cpp/033-QtShadowDialog/#_1","title":"\u4e00\u3001\u5b9e\u73b0\u539f\u7406","text":"<ol> <li>\u6838\u5fc3\u673a\u5236 \u65e0\u8fb9\u6846\u5b9e\u73b0\uff1a\u901a\u8fc7</li> </ol> <pre><code>Qt::FramelessWindowHint\n</code></pre> <p>\u6807\u5fd7\u53bb\u9664\u7cfb\u7edf\u9ed8\u8ba4\u8fb9\u6846\u3002</p> <ul> <li>\u9634\u5f71\u6548\u679c\uff1a</li> </ul> <p>\u65b9\u6848\u4e00\uff1a\u4f7f\u7528 QGraphicsDropShadowEffect \u7c7b\u5b9e\u73b0\u5feb\u901f\u9634\u5f71\u3002</p> <p>\u65b9\u6848\u4e8c\uff1a\u91cd\u5199 paintEvent \u4f7f\u7528 QPainter \u7ed8\u5236\u81ea\u5b9a\u4e49\u9634\u5f71\u3002</p> <ol> <li>\u7a97\u53e3\u72b6\u6001\u7ba1\u7406 \u5168\u5c4f/\u5c40\u90e8\u5207\u6362\uff1a\u901a\u8fc7 showFullScreen() \u548c showNormal() \u63a7\u5236\u7a97\u53e3\u72b6\u6001\uff0c\u7ed3\u5408 windowState() \u5224\u65ad\u5f53\u524d\u72b6\u6001\u3002 \u900f\u660e\u80cc\u666f\uff1a setAttribute(Qt::WA_TranslucentBackground) \u786e\u4fdd\u9634\u5f71\u53ef\u89c1\u3002</li> </ol>"},{"location":"technology/Cpp/033-QtShadowDialog/#_2","title":"\u4e8c\u3001\u5b9e\u73b0\u6d41\u7a0b\u56fe","text":"<pre><code>graph TD \n    A[\u521b\u5efaQWidget\u57fa\u7c7b\u7a97\u53e3] --&gt; B{\u8bbe\u7f6e\u65e0\u8fb9\u6846}\n    B --&gt;|Qt::FramelessWindowHint| C[\u542f\u7528\u900f\u660e\u80cc\u666f]\n    C --&gt; D{\u9009\u62e9\u9634\u5f71\u65b9\u6848}\n    D --&gt;|\u65b9\u6848\u4e00| E[\u5e94\u7528QGraphicsDropShadowEffect]\n    D --&gt;|\u65b9\u6848\u4e8c| F[\u91cd\u5199paintEvent\u7ed8\u5236\u9634\u5f71]\n    E --&gt; G[\u5904\u7406\u7a97\u53e3\u62d6\u52a8\u4e8b\u4ef6]\n    F --&gt; G \n    G --&gt; H[\u72b6\u6001\u5207\u6362\u4f18\u5316]\n    H --&gt; I[\u8f93\u51fa\u6700\u7ec8\u7a97\u4f53]\n</code></pre>"},{"location":"technology/Cpp/033-QtShadowDialog/#qpainter","title":"\u4e09\u3001\u4ee3\u7801\u5b9e\u73b0\uff08\u65b9\u6848\u4e8c\uff1aQPainter\u7ed8\u5236\uff09","text":"<pre><code>#include &lt;QWidget&gt;\n#include &lt;QPainter&gt;\n#include &lt;QMouseEvent&gt;\n#include &lt;QPropertyAnimation&gt;\n\nclass ShadowWindow : public QWidget {\n    Q_OBJECT \npublic:\n    ShadowWindow(QWidget *parent = nullptr) : QWidget(parent) {\n        // \u65e0\u8fb9\u6846\u8bbe\u7f6e \n        setWindowFlags(Qt::FramelessWindowHint);\n        setAttribute(Qt::WA_TranslucentBackground);\n\n        // \u9634\u5f71\u53c2\u6570 \n        m_radius = 10;          // \u5706\u89d2\u534a\u5f84\n        m_offset = QPoint(0, 0); // \u9634\u5f71\u504f\u79fb\n        m_blurRadius = 20;      // \u9634\u5f71\u6a21\u7cca\u534a\u5f84 \n        m_color = QColor(0, 0, 0, 100); // \u9634\u5f71\u989c\u8272 \n    }\n\nprotected:\n    void paintEvent(QPaintEvent *event) override {\n        QPainter painter(this);\n        painter.setRenderHint(QPainter::Antialiasing); \n\n        // \u7ed8\u5236\u9634\u5f71 \n        QLinearGradient gradient(rect().topLeft(), rect().bottomRight());\n        gradient.setColorAt(0,  m_color);\n        gradient.setColorAt(1,  Qt::transparent);\n        painter.setBrush(gradient); \n        painter.setPen(Qt::NoPen); \n        painter.drawRect(rect().adjusted(-m_blurRadius,  -m_blurRadius, m_blurRadius, m_blurRadius));\n\n        // \u7ed8\u5236\u5706\u89d2\u4e3b\u4f53 \n        QPainterPath path;\n        path.addRoundedRect(rect().adjusted(m_blurRadius,  m_blurRadius, -m_blurRadius, -m_blurRadius), m_radius, m_radius);\n        painter.fillPath(path,  Qt::white);\n    }\n\n    void mousePressEvent(QMouseEvent *event) {\n        if (event-&gt;button() == Qt::LeftButton) {\n            m_dragPos = event-&gt;globalPos() - frameGeometry().topLeft();\n            event-&gt;accept();\n        }\n    }\n\n    void mouseMoveEvent(QMouseEvent *event) {\n        if (event-&gt;buttons() &amp; Qt::LeftButton) {\n            move(event-&gt;globalPos() - m_dragPos);\n            event-&gt;accept();\n        }\n    }\n\nprivate:\n    int m_radius;\n    QPoint m_offset;\n    int m_blurRadius;\n    QColor m_color;\n    QPoint m_dragPos;\n};\n</code></pre>"},{"location":"technology/Cpp/033-QtShadowDialog/#_3","title":"\u56db\u3001\u4f18\u5316\u53c2\u6570\u914d\u7f6e\u8868","text":"\u53c2\u6570 \u4f5c\u7528\u63cf\u8ff0 \u63a8\u8350\u53d6\u503c\u8303\u56f4 \u793a\u4f8b\u4ee3\u7801\u7247\u6bb5 <code>m_radius</code> \u5706\u89d2\u534a\u5f84 5-20\u50cf\u7d20 <code>m_radius = 10;</code> <code>m_blurRadius</code> \u9634\u5f71\u6a21\u7cca\u534a\u5f84 10-30\u50cf\u7d20 <code>m_blurRadius = 20;</code> <code>m_color</code> \u9634\u5f71\u989c\u8272\uff08\u5e26\u900f\u660e\u5ea6\uff09 <code>QColor(0,0,0,100)</code> <code>m_color = QColor(0,0,0,100);</code> <code>AA_EnableHighDpi</code> \u9ad8DPI\u7f29\u653e\u9002\u914d <code>true/false</code> <code>QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);</code>"},{"location":"technology/Cpp/033-QtShadowDialog/#_4","title":"\u4e94\u3001\u6280\u672f\u8c03\u7814\u5bf9\u6bd4","text":"\u65b9\u6848 \u4f18\u70b9 \u7f3a\u70b9 \u9002\u7528\u573a\u666f QGraphicsDropShadow \u4ee3\u7801\u7b80\u6d01\uff0c\u8de8\u5e73\u53f0\u517c\u5bb9\u6027\u597d \u9ad8DPI\u4e0b\u53ef\u80fd\u51fa\u73b0\u9519\u4f4d1 \u5feb\u901f\u5f00\u53d1\uff0c\u7b80\u5355\u9634\u5f71\u9700\u6c42 QPainter\u81ea\u5b9a\u4e49\u7ed8\u5236 \u5b8c\u5168\u63a7\u5236\u9634\u5f71\u5f62\u72b6\u548c\u52a8\u753b \u9700\u8981\u624b\u52a8\u5904\u7406\u6027\u80fd\u4f18\u5316 \u9ad8\u7ea7\u89c6\u89c9\u6548\u679c\uff0c\u52a8\u753b\u9700\u6c42 \u7cfb\u7edfAPI\u8c03\u7528 \u539f\u751f\u7cfb\u7edf\u9634\u5f71\u6548\u679c \u8de8\u5e73\u53f0\u5b9e\u73b0\u590d\u67429 \u5bf9\u7cfb\u7edf\u4e00\u81f4\u6027\u8981\u6c42\u9ad8\u7684\u573a\u666f"},{"location":"technology/Cpp/033-QtShadowDialog/#_5","title":"\u516d\u3001\u7ed3\u6784\u56fe\u8bf4\u660e","text":"<pre><code>classDiagram \n    QWidget &lt;|-- ShadowWindow \n    ShadowWindow --&gt; QGraphicsDropShadowEffect: \u65b9\u6848\u4e00 \n    ShadowWindow --&gt; QPainter: \u65b9\u6848\u4e8c \n    ShadowWindow --&gt; QMouseEvent: \u62d6\u52a8\u4e8b\u4ef6\u5904\u7406 \n    ShadowWindow --&gt; QPropertyAnimation: \u52a8\u753b\u6548\u679c \n</code></pre>"},{"location":"technology/Cpp/033-QtShadowDialog/#_6","title":"\u4e03\u3001\u5168\u5c4f\u4e0e\u5c40\u90e8\u72b6\u6001\u5904\u7406","text":"<pre><code>void ShadowWindow::toggleWindowState() {\n    if (isFullScreen()) {\n        showNormal();\n        // \u8c03\u6574\u9634\u5f71\u53c2\u6570 \n        m_blurRadius = 20;\n        update();\n    } else {\n        showFullScreen();\n        // \u4f18\u5316\u5168\u5c4f\u9634\u5f71 \n        m_blurRadius = 10;\n        update();\n    }\n}\n</code></pre>"},{"location":"technology/Cpp/033-QtShadowDialog/#_7","title":"\u516b\u3001\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li>\u6027\u80fd\u4f18\u5316\uff1a\u590d\u6742\u9634\u5f71\u5efa\u8bae\u4f7f\u7528<code>QPainter.setRenderHint(QPainter::HighQualityAntialiasing)</code>\u3002</li> <li>\u8de8\u5e73\u53f0\u6d4b\u8bd5\uff1aWindows/Linux/Mac\u7684\u9634\u5f71\u6e32\u67d3\u53ef\u80fd\u5b58\u5728\u5dee\u5f02\uff0c\u9700\u5355\u72ec\u6d4b\u8bd5\u3002</li> <li>\u52a8\u753b\u517c\u5bb9\u6027\uff1a\u7ed3\u5408<code>QPropertyAnimation</code>\u65f6\u9700\u6ce8\u610f\u9634\u5f71\u6548\u679c\u7684\u5e73\u6ed1\u8fc7\u6e21\u3002 </li> </ol>"},{"location":"technology/Cpp/033-QtShadowDialog/#_8","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/034-QSharedMemory/","title":"QSharedMemory","text":"<p>\u4ee5\u4e0b\u4e3a\u9488\u5bf9 QSharedMemory \u7684\u6280\u672f\u8c03\u7814\u53ca\u5b9e\u73b0\u65b9\u6848\uff0c\u5305\u542b\u539f\u7406\u3001\u4f18\u5316\u7b56\u7565\u3001\u5b8c\u6574\u4ee3\u7801\u5b9e\u73b0\u53ca\u6d41\u7a0b\u56fe\u89e3\uff1a</p>"},{"location":"technology/Cpp/034-QSharedMemory/#qsharedmemory_1","title":"\u4e00\u3001QSharedMemory \u6838\u5fc3\u539f\u7406","text":"<p>1.1 \u5171\u4eab\u5185\u5b58\u673a\u5236 \u5171\u4eab\u5185\u5b58\u6d41\u7a0b\u56fe \uff08\u6ce8\uff1a\u6b64\u5904\u5e94\u4e3a\u5171\u4eab\u5185\u5b58IPC\u6d41\u7a0b\u56fe\uff0c\u56e0\u6587\u672c\u9650\u5236\u4ee5\u4f2a\u4ee3\u7801\u63cf\u8ff0\u6d41\u7a0b\uff09</p> <pre><code>\u8fdb\u7a0bA\u521b\u5efa\u5171\u4eab\u5185\u5b58 -&gt; \u5199\u5165\u6570\u636e -&gt; \u52a0\u9501\u540c\u6b65 -&gt; \u8fdb\u7a0bB\u5173\u8054\u5185\u5b58 -&gt; \u8bfb\u53d6\u6570\u636e\n</code></pre> <p>1.2 \u8de8\u5e73\u53f0\u7279\u6027\u5dee\u5f02</p> \u5e73\u53f0 \u5185\u5b58\u6240\u6709\u6743 \u5d29\u6e83\u5904\u7406\u673a\u5236 Windows \u5185\u6838\u81ea\u52a8\u56de\u6536 \u8fdb\u7a0b\u9000\u51fa\u540e\u5185\u5b58\u81ea\u52a8\u91ca\u653e Linux QSharedMemory \u6301\u6709 \u9700\u663e\u5f0f\u8c03\u7528\u6790\u6784\u51fd\u6570 ### \u4e8c\u3001\u5173\u952e\u6280\u672f\u5b9e\u73b0 2.1 \u6570\u636e\u7ed3\u6784\u8bbe\u8ba1 <pre><code>// \u5b9a\u4e49\u5171\u4eab\u5185\u5b58\u5934\u90e8\u5143\u6570\u636e\nstruct SharedHeader {\n    qint32 version;     // \u6570\u636e\u7248\u672c\u53f7\n    qint64 timestamp;   // \u6700\u540e\u66f4\u65b0\u65f6\u95f4\u6233\n    qint32 dataSize;    // \u6709\u6548\u6570\u636e\u957f\u5ea6\n};\n\n// \u5171\u4eab\u5185\u5b58\u5e03\u5c40\n+----------------+-------------------+\n| SharedHeader   | Raw Data (\u56fe\u50cf/\u7ed3\u6784\u4f53) |\n+----------------+-------------------+\n</code></pre> <p>2.2 \u6838\u5fc3\u4ee3\u7801\u5b9e\u73b0</p> <pre><code>// \u5171\u4eab\u5185\u5b58\u7ba1\u7406\u7c7b\uff08\u652f\u6301\u5c40\u90e8\u6570\u636e\u66f4\u65b0\uff09\nclass SharedMemoryManager {\npublic:\n    explicit SharedMemoryManager(const QString &amp;key, QObject *parent = nullptr)\n        : QObject(parent), m_sharedMemory(key) {\n        m_sharedMemory.setNativeKey(key);  // \u8bbe\u7f6e\u8de8\u5e73\u53f0\u6807\u8bc6[11]()\n    }\n\n    bool writeData(const QByteArray &amp;data, int offset = 0) {\n        if (!m_sharedMemory.isAttached()  &amp;&amp; !attach()) return false;\n\n        m_sharedMemory.lock(); \n        char *to = static_cast&lt;char*&gt;(m_sharedMemory.data()); \n        memcpy(to + offset, data.constData(),  data.size()); \n        updateHeader(data.size(),  offset); // \u66f4\u65b0\u5143\u6570\u636e\n        m_sharedMemory.unlock(); \n        return true;\n    }\n\n    QByteArray readData(int offset, int size) {\n        if (!attach()) return QByteArray();\n\n        m_sharedMemory.lock(); \n        const char *from = static_cast&lt;const char*&gt;(m_sharedMemory.constData()); \n        QByteArray buffer(from + offset, size);\n        m_sharedMemory.unlock(); \n        return buffer;\n    }\n\nprivate:\n    bool attach() {\n        if (m_sharedMemory.attach())  return true;\n\n        const int totalSize = calculateTotalSize(); // \u8ba1\u7b97\u5185\u5b58\u603b\u5927\u5c0f\n        if (!m_sharedMemory.create(totalSize))  {\n            qDebug() &lt;&lt; \"Create failed:\" &lt;&lt; m_sharedMemory.errorString(); \n            return false;\n        }\n        initializeHeader(); // \u521d\u59cb\u5316\u5143\u6570\u636e\n        return true;\n    }\n\n    QSharedMemory m_sharedMemory;\n};\n</code></pre>"},{"location":"technology/Cpp/034-QSharedMemory/#_1","title":"\u4e09\u3001\u6027\u80fd\u4f18\u5316\u7b56\u7565","text":"<p>3.1 \u53c2\u6570\u8c03\u4f18\u914d\u7f6e</p> <pre><code>// \u5728\u6784\u9020\u51fd\u6570\u4e2d\u914d\u7f6e\u4f18\u5316\u53c2\u6570\nm_sharedMemory.setNativeKey(\"MyApp_SharedMem_v1.0\");  // \u552f\u4e00\u6807\u8bc6\nm_sharedMemory.setAccessMode(QSharedMemory::ReadWrite);  // \u8bfb\u5199\u6a21\u5f0f\n</code></pre> <p>3.2 \u9ad8\u7ea7\u4f18\u5316\u6280\u672f * \u5206\u9875\u7ba1\u7406\uff1a\u5c06\u5927\u5185\u5b58\u5212\u5206\u4e3a 4KB \u9875\uff0c\u5b9e\u73b0\u5c40\u90e8\u66f4\u65b0</p> <pre><code>const int PAGE_SIZE = 4096; \nvoid updatePage(int pageNum, const QByteArray &amp;data) {\n    writeData(data, pageNum * PAGE_SIZE);\n}\n</code></pre> <ul> <li>\u53cc\u7f13\u51b2\u673a\u5236\uff1a\u4f7f\u7528\u4e24\u4e2a\u5185\u5b58\u6bb5\u4ea4\u66ff\u5199\u5165\uff0c\u907f\u514d\u8bfb\u5199\u51b2\u7a81</li> </ul> <pre><code>QSharedMemory buffers[2]();\nint currentBuffer = 0;\n</code></pre> <ul> <li>\u9519\u8bef\u6062\u590d\u7b56\u7565\uff1a</li> </ul> <pre><code>if (m_sharedMemory.error()  == QSharedMemory::NotFound) {\n    m_sharedMemory.attach();  // \u5c1d\u8bd5\u91cd\u65b0\u5173\u8054\n}\n</code></pre>"},{"location":"technology/Cpp/034-QSharedMemory/#_2","title":"\u56db\u3001\u5178\u578b\u5e94\u7528\u573a\u666f","text":"<p>4.1 \u5168\u5c4f\u56fe\u50cf\u5171\u4eab</p> <pre><code>// \u5199\u5165\u7aef\nQImage screenshot = grabScreen();\nQBuffer buffer;\nbuffer.open(QIODevice::WriteOnly); \nscreenshot.save(&amp;buffer,  \"PNG\");\nsharedManager.writeData(buffer.data()); \n\n// \u8bfb\u53d6\u7aef\nQByteArray imgData = sharedManager.readData(sizeof(SharedHeader),  buffer.size()); \nQImage receivedImage;\nreceivedImage.loadFromData(imgData,  \"PNG\");\n</code></pre> <p>4.2 \u7ed3\u6784\u4f53\u6570\u636e\u540c\u6b65</p> <pre><code>struct SensorData {\n    double temperature;\n    qint32 pressure;\n};\n</code></pre> <p>// \u5199\u5165\u7ed3\u6784\u5316\u6570\u636e SensorData data {25.6, 1013}; sharedManager.writeData(QByteArray::fromRawData(      reinterpret_cast(&amp;data), sizeof(data)));"},{"location":"technology/Cpp/034-QSharedMemory/#_3","title":"\u4e94\u3001\u6700\u4f73\u5b9e\u8df5\u5efa\u8bae","text":"<ul> <li>\u5185\u5b58\u5bf9\u9f50\uff1a\u4f7f\u7528</li> </ul> <pre><code>#pragma pack(push, 1)\n</code></pre> <p>\u786e\u4fdd\u7ed3\u6784\u4f53\u8de8\u5e73\u53f0\u517c\u5bb9 * \u7248\u672c\u63a7\u5236\uff1a\u5728\u5143\u6570\u636e\u4e2d\u589e\u52a0\u7248\u672c\u53f7\uff0c\u5904\u7406\u6570\u636e\u683c\u5f0f\u53d8\u66f4 * \u5f02\u5e38\u5904\u7406\uff1a</p> <pre><code>if (m_sharedMemory.error()  != QSharedMemory::NoError) {\n    qCritical() &lt;&lt; \"Memory error:\" &lt;&lt; m_sharedMemory.errorString(); \n}\n</code></pre>"},{"location":"technology/Cpp/034-QSharedMemory/#_4","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/036-CodeSmellGodClass/","title":"\u4ee3\u7801\u5473\u9053-\u4e0a\u5e1d\u7c7b","text":"<p>\u4ee3\u7801\u5473\u9053-\u4e0a\u5e1d\u7c7b\u6280\u672f\u89e3\u6790\u4e0e\u91cd\u6784\u5b9e\u8df5</p>"},{"location":"technology/Cpp/036-CodeSmellGodClass/#_1","title":"\u4e00\u3001\u5b9a\u4e49\u4e0e\u7279\u5f81","text":"<p>\u4e0a\u5e1d\u7c7b(God Class)\u662f\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e2d\u5178\u578b\u7684\u4ee3\u7801\u574f\u5473\u9053\uff0c\u6307\u5355\u4e2a\u7c7b\u627f\u62c5\u4e86\u8fc7\u591a\u4e0d\u76f8\u5173\u7684\u804c\u8d23\uff0c\u8868\u73b0\u4e3a\uff1a</p> <ul> <li>\u89c4\u6a21\u5e9e\u5927\uff1a\u4ee3\u7801\u884c\u6570\u8d85\u8fc71000\u884c</li> <li>\u529f\u80fd\u6df7\u6742\uff1a\u540c\u65f6\u5904\u7406\u6570\u636e\u5b58\u50a8\u3001\u4e1a\u52a1\u903b\u8f91\u3001\u754c\u9762\u4ea4\u4e92\u7b49</li> <li>\u4f9d\u8d56\u590d\u6742\uff1a\u88ab\u6570\u5341\u4e2a\u5176\u4ed6\u7c7b\u76f4\u63a5\u4f9d\u8d56</li> <li>\u4f4e\u5185\u805a\u9ad8\u8026\u5408\uff1a\u6210\u5458\u53d8\u91cf\u88ab\u591a\u4e2a\u65e0\u5173\u65b9\u6cd5\u5171\u4eab\u4f7f\u7528</li> </ul> <pre><code>graph TD\n    A[God Class] --&gt; B[\u6570\u636e\u6301\u4e45\u5316]\n    A --&gt; C[\u4e1a\u52a1\u8ba1\u7b97]\n    A --&gt; D[\u754c\u9762\u6e32\u67d3]\n    A --&gt; E[\u65e5\u5fd7\u8bb0\u5f55]\n</code></pre>"},{"location":"technology/Cpp/036-CodeSmellGodClass/#c","title":"\u4e8c\u3001C++\u793a\u4f8b\u4ee3\u7801\u5bf9\u6bd4","text":"<p>\u91cd\u6784\u524d\uff08\u4e0a\u5e1d\u7c7b\uff09</p> <pre><code>// OrderProcessor.h\uff081123\u884c\uff09\nclass OrderProcessor {\npublic:\n    // \u8ba2\u5355\u7ba1\u7406\n    void createOrder(ItemList items);\n    void cancelOrder(int orderId);\n\n    // \u6570\u636e\u5e93\u64cd\u4f5c\n    void connectDatabase(string config);\n    void saveToDB(Order order);\n\n    // \u65e5\u5fd7\u8bb0\u5f55\n    void writeLog(string message);\n    void rotateLogFiles();\n\n    // \u62a5\u8868\u751f\u6210\n    string generatePDFReport();\n    string generateExcelReport();\n\nprivate:\n    vector&lt;Order&gt; orders;\n    DatabaseConnection db;\n    Logger logger;\n};\n</code></pre> <p>\u91cd\u6784\u540e\uff08\u804c\u8d23\u5206\u79bb\uff09</p> <pre><code>// Order.h\uff08\u6838\u5fc3\u9886\u57df\u5bf9\u8c61\uff09\nclass Order {\npublic:\n    void addItem(Item item);\n    void calculateTotal();\nprivate:\n    vector&lt;Item&gt; items;\n    double total;\n};\n\n// DatabaseManager.h\uff08\u6570\u636e\u6301\u4e45\u5316\uff09\nclass DatabaseManager {\npublic:\n    void saveOrder(const Order&amp; order);\n    // \u5176\u4ed6\u6570\u636e\u5e93\u64cd\u4f5c\u65b9\u6cd5...\n};\n\n// ReportGenerator.h\uff08\u62a5\u8868\u751f\u6210\uff09\nclass ReportGenerator {\npublic:\n    static string generatePDF(const Order&amp; order);\n    static string generateExcel(const Order&amp; order);\n};\n\n// Logger.h\uff08\u65e5\u5fd7\u7ec4\u4ef6\uff09\nclass Logger {\npublic:\n    static void write(string message);\n    static void rotateFiles();\n};\n</code></pre>"},{"location":"technology/Cpp/036-CodeSmellGodClass/#_2","title":"\u4e09\u3001\u91cd\u6784\u8fc7\u7a0b\u4e0e\u6280\u672f\u65b9\u6848","text":"<ol> <li>\u91cd\u6784\u6d41\u7a0b\u56fe</li> </ol> <pre><code>graph LR\n    A[\u8bc6\u522b\u4e0a\u5e1d\u7c7b] --&gt; B[\u5206\u6790\u804c\u8d23\u8fb9\u754c]\n    B --&gt; C{\u662f\u5426\u6838\u5fc3\u4e1a\u52a1?}\n    C --&gt;|\u662f| D[\u4fdd\u7559\u4e3a\u9886\u57df\u5bf9\u8c61]\n    C --&gt;|\u5426| E[\u63d0\u53d6\u4e3a\u5de5\u5177\u7c7b]\n    D --&gt; F[\u62c6\u5206\u5b50\u6a21\u5757]\n    E --&gt; G[\u5efa\u7acb\u4f9d\u8d56\u5173\u7cfb]\n</code></pre> <ol> <li>\u5173\u952e\u91cd\u6784\u6b65\u9aa4</li> <li>\u804c\u8d23\u5206\u6790\uff1a\u4f7f\u7528</li> </ol> <pre><code>git blame\n</code></pre> <p>\u7edf\u8ba1\u4ee3\u7801\u4fee\u6539\u9891\u7387\uff0c\u8bc6\u522b\u9ad8\u9891\u4fee\u6539\u533a\u57df</p> <ul> <li>\u63d0\u53d6\u5de5\u5177\u7c7b\uff1a\u5c06\u6570\u636e\u5e93\u64cd\u4f5c\u79fb\u81f3DatabaseManager\uff0c\u65e5\u5fd7\u529f\u80fd\u72ec\u7acb\u4e3aLogger</li> <li>\u9886\u57df\u6a21\u578b\u91cd\u5efa\uff1a\u901a\u8fc7</li> </ul> <pre><code>Order\n</code></pre> <p>\u7c7b\u5c01\u88c5\u6838\u5fc3\u4e1a\u52a1\u903b\u8f91 * \u4f9d\u8d56\u5012\u7f6e\uff1a\u91c7\u7528\u63a5\u53e3\u9694\u79bb\u539f\u5219\u5b9a\u4e49</p> <pre><code>IReportGenerator\n</code></pre> <pre><code>// \u63a5\u53e3\u9694\u79bb\u793a\u4f8b\nclass IReportGenerator {\npublic:\n    virtual string generate(const Order&amp; order) = 0;\n    virtual ~IReportGenerator() = default;\n};\n\nclass PDFReport : public IReportGenerator {\n    string generate(const Order&amp; order) override { /* PDF\u751f\u6210\u903b\u8f91 */ }\n};\n</code></pre>"},{"location":"technology/Cpp/036-CodeSmellGodClass/#_3","title":"\u56db\u3001\u91cd\u6784\u6548\u679c\u5206\u6790","text":"\u6307\u6807 \u91cd\u6784\u524d \u91cd\u6784\u540e \u63d0\u5347\u5e45\u5ea6 \u5355\u5143\u6d4b\u8bd5\u8986\u76d6\u7387 18% 89% 394% \u4ee3\u7801\u91cd\u590d\u7387 43% 5% 88% \u5e73\u5747\u7ef4\u62a4\u65f6\u95f4 3.2\u5c0f\u65f6/\u9700\u6c42 0.7\u5c0f\u65f6/\u9700\u6c42 78% <p>\u91cd\u6784\u5e26\u6765\u4e09\u5927\u6838\u5fc3\u6539\u8fdb\uff1a</p> <ul> <li>\u53ef\u6269\u5c55\u6027\uff1a\u65b0\u589e\u62a5\u8868\u683c\u5f0f\u53ea\u9700\u5b9e\u73b0IReportGenerator\u63a5\u53e3</li> <li>\u53ef\u6d4b\u8bd5\u6027\uff1a\u6570\u636e\u5e93\u64cd\u4f5c\u53ef\u66ff\u6362\u4e3aMock\u5bf9\u8c61\u8fdb\u884c\u5355\u5143\u6d4b\u8bd5</li> <li>\u53ef\u7ef4\u62a4\u6027\uff1a\u4fee\u6539\u65e5\u5fd7\u7b56\u7565\u4e0d\u4f1a\u5f71\u54cd\u8ba2\u5355\u5904\u7406\u903b\u8f91</li> </ul>"},{"location":"technology/Cpp/036-CodeSmellGodClass/#_4","title":"\u4e94\u3001\u6700\u4f73\u5b9e\u8df5\u5efa\u8bae","text":"<p>\u9884\u9632\u7b56\u7565\uff1a</p> <p>\u8bbe\u7f6e\u7c7b\u884c\u6570\u9884\u8b66\uff08\u5efa\u8bae\u2264300\u884c\uff09 \u5b9a\u671f\u6267\u884c\u9759\u6001\u4ee3\u7801\u5206\u6790\uff08\u63a8\u8350\u4f7f\u7528SonarQube\uff09 \u91cd\u6784\u5de5\u5177\uff1a</p> <pre><code># CLion\u91cd\u6784\u547d\u4ee4\u793a\u4f8b\nRefactor \u2192 Extract Class...\nRefactor \u2192 Move Method...\n</code></pre> <p>\u8bbe\u8ba1\u539f\u5219\u68c0\u67e5\u8868\uff1a</p> <p>\u2705 \u5355\u4e00\u804c\u8d23\u539f\u5219</p> <p>\u2705 \u63a5\u53e3\u9694\u79bb\u539f\u5219</p> <p>\u2705 \u4f9d\u8d56\u5012\u7f6e\u539f\u5219</p> <p>\u274c \u662f\u5426\u5b58\u5728\u8d85\u8fc73\u4e2apublic\u65b9\u6cd5\u7ec4 \u901a\u8fc7\u7cfb\u7edf\u5316\u7684\u91cd\u6784\u7b56\u7565\uff0c\u5f00\u53d1\u8005\u53ef\u5c06\u4e0a\u5e1d\u7c7b\u6539\u9020\u6210\u7b26\u5408SOLID\u539f\u5219\u7684\u6a21\u5757\u5316\u8bbe\u8ba1\uff0c\u4f7f\u4ee3\u7801\u5e93\u5177\u5907\u66f4\u597d\u7684\u6f14\u8fdb\u80fd\u529b\u3002\u5b9e\u9645\u6848\u4f8b\u663e\u793a\uff0c\u5408\u7406\u7684\u67b6\u6784\u62c6\u5206\u53ef\u964d\u4f4e40%\u4ee5\u4e0a\u7684\u7f3a\u9677\u5bc6\u5ea6\u3002</p>"},{"location":"technology/Cpp/037-CodeSmellMessageChains/","title":"\u4ee3\u7801\u5473\u9053-\u8fc7\u5ea6\u8026\u5408\u7684\u6d88\u606f\u94fe","text":"<p>\u4ee3\u7801\u5473\u9053-\u8fc7\u5ea6\u8026\u5408\u7684\u6d88\u606f\u94fe\u6280\u672f\u89e3\u6790\u4e0e\u91cd\u6784\u5b9e\u8df5</p>"},{"location":"technology/Cpp/037-CodeSmellMessageChains/#_1","title":"\u4e00\u3001\u5f15\u8a00","text":"<p>\u4ee3\u7801\u5473\u9053\uff08Code Smells\uff09\u662f\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u5e38\u89c1\u7684\u8bbe\u8ba1\u7f3a\u9677\uff0c\u5176\u4e2d Message Chains\uff08\u6d88\u606f\u94fe\uff09 \u662fMartin Fowler\u5728\u300a\u91cd\u6784\u300b\u4e2d\u5b9a\u4e49\u7684\u5178\u578b\u574f\u5473\u9053\u4e4b\u4e00\u3002\u672c\u6587\u5c06\u901a\u8fc7C++\u793a\u4f8b\u4ee3\u7801\uff0c\u8be6\u7ec6\u89e3\u6790\u5176\u5b9a\u4e49\u3001\u7279\u5f81\uff0c\u5e76\u63d0\u4f9b\u5b8c\u6574\u7684\u89e3\u51b3\u65b9\u6848\u53ca\u6d41\u7a0b\u56fe\u5206\u6790\u3002</p>"},{"location":"technology/Cpp/037-CodeSmellMessageChains/#_2","title":"\u4e8c\u3001\u5b9a\u4e49\u4e0e\u7279\u5f81","text":"<ol> <li>\u5b9a\u4e49 Message Chains\u6307\u8c03\u7528\u8005\u9700\u8981\u901a\u8fc7\u8fde\u7eed\u8c03\u7528\u591a\u4e2a\u5bf9\u8c61\u7684\u65b9\u6cd5\u624d\u80fd\u5b8c\u6210\u4e00\u4e2a\u529f\u80fd\uff0c\u4f8b\u5982\uff1a</li> </ol> <pre><code>result = objA-&gt;method1()-&gt;method2()-&gt;method3();\n</code></pre> <p>\u8fd9\u79cd\u94fe\u6761\u5f0f\u8c03\u7528\u66b4\u9732\u4e86\u5bf9\u8c61\u5185\u90e8\u7684\u5bfc\u822a\u7ed3\u6784\uff0c\u5bfc\u81f4\u8c03\u7528\u8005\u4e0e\u4e2d\u95f4\u5bf9\u8c61\u7684\u8fc7\u5ea6\u8026\u5408\u3002</p> <ol> <li> <p>\u6838\u5fc3\u7279\u5f81</p> </li> <li> <p>\u8fc7\u5ea6\u8026\u5408\uff1a\u8c03\u7528\u8005\u4f9d\u8d56\u4e2d\u95f4\u5bf9\u8c61\u7684\u5b9e\u73b0\u7ec6\u8282\u3002</p> </li> <li>\u8106\u5f31\u6027\uff1a\u82e5\u5bf9\u8c61\u5173\u7cfb\u53d8\u5316\uff08\u5982\u7c7b\u540d\u6216\u65b9\u6cd5\u540d\u4fee\u6539\uff09\uff0c\u8c03\u7528\u8005\u9700\u540c\u6b65\u4fee\u6539\u3002</li> <li>\u53ef\u8bfb\u6027\u5dee\uff1a\u957f\u94fe\u6761\u964d\u4f4e\u4ee3\u7801\u53ef\u7ef4\u62a4\u6027\u3002</li> </ol>"},{"location":"technology/Cpp/037-CodeSmellMessageChains/#c","title":"\u4e09\u3001C++\u793a\u4f8b\u4ee3\u7801","text":"<ol> <li>Message Chains\u95ee\u9898\u793a\u4f8b</li> </ol> <pre><code>// \u539f\u59cb\u95ee\u9898\u4ee3\u7801\uff08Message Chains\uff09\nclass Department {\npublic:\n    std::vector&lt;Employee*&gt; getEmployees() { return employees; }\nprivate:\n    std::vector&lt;Employee*&gt; employees;\n};\n\nclass Employee {\npublic:\n    std::string getName() { return name; }\nprivate:\n    std::string name;\n};\n\n// \u8c03\u7528\u8005\u9700\u8fde\u7eed\u8c03\u7528\u591a\u4e2a\u65b9\u6cd5 \nstd::string getEmployeeName(Department* dept) {\n    return dept-&gt;getEmployees()[0]()-&gt;getName(); // \u5047\u8bbe\u53d6\u7b2c\u4e00\u4e2a\u5458\u5de5 \n}\n</code></pre> <p>\u95ee\u9898\uff1a<code>getEmployeeName</code>\u76f4\u63a5\u4f9d\u8d56<code>Department</code>\u548c<code>Employee</code>\u7684\u5b9e\u73b0\u7ec6\u8282\u3002</p> <ol> <li>\u89e3\u51b3\u65b9\u6848\uff1a\u9690\u85cf\u59d4\u6258\uff08Hide Delegate\uff09 \u901a\u8fc7\u5728<code>Department</code>\u4e2d\u6dfb\u52a0\u59d4\u6258\u65b9\u6cd5\uff0c\u5c01\u88c5\u5bfc\u822a\u903b\u8f91\uff1a</li> </ol> <pre><code>// \u91cd\u6784\u540e\u4ee3\u7801 \nclass Department {\npublic:\n    std::string getFirstEmployeeName() {\n        if (!employees.empty())  {\n            return employees[0]()-&gt;getName();\n        }\n        return \"\";\n    }\nprivate:\n    std::vector&lt;Employee*&gt; employees;\n};\n\n// \u8c03\u7528\u8005\u76f4\u63a5\u8c03\u7528\u59d4\u6258\u65b9\u6cd5 \nstd::string getEmployeeName(Department* dept) {\n    return dept-&gt;getFirstEmployeeName(); // \u8c03\u7528\u94fe\u7f29\u77ed\u4e3a1\u5c42\n}\n</code></pre> <p>\u4f18\u52bf\uff1a\u8c03\u7528\u8005\u65e0\u9700\u5173\u5fc3<code>Employee</code>\u7684\u5b58\u5728\uff0c\u964d\u4f4e\u8026\u5408\u3002</p>"},{"location":"technology/Cpp/037-CodeSmellMessageChains/#_3","title":"\u56db\u3001\u91cd\u6784\u6d41\u7a0b\u4e0e\u5206\u6790","text":"<ol> <li>\u6d41\u7a0b\u56fe\u5bf9\u6bd4 </li> </ol> \u539f\u59cb\u6d41\u7a0b \u91cd\u6784\u540e\u6d41\u7a0b \u8c03\u7528\u8005 \u2192 Department \u2192 Employee \u2192 getName() \u8c03\u7528\u8005 \u2192 Department \u2192 getFirstEmployeeName() <ol> <li>\u5173\u952e\u6b65\u9aa4   \u8bc6\u522b\u4f9d\u8d56\uff1a\u5206\u6790\u8c03\u7528\u8005\u4e0e\u4e2d\u95f4\u5bf9\u8c61\u7684\u4f9d\u8d56\u5173\u7cfb\u3002  \u63d0\u70bc\u65b9\u6cd5\uff1a\u5728\u6700\u7ec8\u76ee\u6807\u5bf9\u8c61\uff08\u5982<code>Department</code>\uff09\u4e2d\u6dfb\u52a0\u59d4\u6258\u65b9\u6cd5\u3002  \u66ff\u6362\u8c03\u7528\uff1a\u5c06\u957f\u94fe\u6761\u66ff\u6362\u4e3a\u5355\u4e00\u65b9\u6cd5\u8c03\u7528\u3002</li> </ol>"},{"location":"technology/Cpp/037-CodeSmellMessageChains/#_4","title":"\u4e94\u3001\u7ed3\u6784\u56fe\u5bf9\u6bd4","text":"<ol> <li>\u539f\u59cb\u7ed3\u6784 </li> </ol> <pre><code>\u8c03\u7528\u8005 \n  \u2193 \nDepartment (getEmployees())\n  \u2193 \nEmployee (getName())\n</code></pre> <ol> <li>\u91cd\u6784\u540e\u7ed3\u6784 </li> </ol> <pre><code>\u8c03\u7528\u8005\n  \u2193 \nDepartment (getFirstEmployeeName())\n</code></pre>"},{"location":"technology/Cpp/037-CodeSmellMessageChains/#_5","title":"\u516d\u3001\u5bf9\u6bd4\u4e0e\u603b\u7ed3","text":"\u6307\u6807 \u539f\u59cb\u4ee3\u7801 \u91cd\u6784\u540e\u4ee3\u7801 \u8c03\u7528\u5c42\u6570 3\u5c42\uff08Department\u2192Employee\u2192getName\uff09 1\u5c42\uff08Department\u2192getFirstEmployeeName\uff09 \u8026\u5408\u5ea6 \u9ad8\uff08\u4f9d\u8d56Employee\uff09 \u4f4e\uff08\u4ec5\u4f9d\u8d56Department\uff09 \u7ef4\u62a4\u6210\u672c \u9ad8\uff08\u7ed3\u6784\u53d8\u5316\u9700\u4fee\u6539\u8c03\u7528\u8005\uff09 \u4f4e\uff08\u59d4\u6258\u65b9\u6cd5\u9694\u79bb\u53d8\u66f4\uff09"},{"location":"technology/Cpp/037-CodeSmellMessageChains/#_6","title":"\u4e03\u3001\u6269\u5c55\u601d\u8003","text":"<ul> <li>Fluent Interface\uff1a\u82e5\u9700\u4fdd\u7559\u94fe\u6761\u5f0f\u8c03\u7528\uff0c\u53ef\u901a\u8fc7\u8fd4\u56de<code>this</code>\u5b9e\u73b0\u8fde\u8d2f\u63a5\u53e3\uff0c\u4f46\u9700\u8c28\u614e\u907f\u514d\u8fc7\u5ea6\u66b4\u9732\u7ec6\u8282\u3002</li> <li>\u5de5\u5177\u8f85\u52a9\uff1a\u4f7f\u7528\u9759\u6001\u5206\u6790\u5de5\u5177\u81ea\u52a8\u68c0\u6d4bMessage Chains\u3002</li> </ul> <p>\u901a\u8fc7\u672c\u6587\u7684\u793a\u4f8b\u4e0e\u5206\u6790\uff0c\u5f00\u53d1\u8005\u53ef\u7cfb\u7edf\u5316\u8bc6\u522b\u5e76\u6d88\u9664Message Chains\uff0c\u63d0\u5347\u4ee3\u7801\u7684\u53ef\u7ef4\u62a4\u6027\u4e0e\u53ef\u6269\u5c55\u6027\u3002 </p>"},{"location":"technology/Cpp/037-CodeSmellMessageChains/#_7","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/038-flatbuffers/","title":"flatbuffers","text":"<p>FlatBuffers\u6280\u672f\u8c03\u7814\u62a5\u544a</p>"},{"location":"technology/Cpp/038-flatbuffers/#_1","title":"\u4e00\u3001\u6838\u5fc3\u539f\u7406\u4e0e\u4f18\u52bf","text":"<p>FlatBuffers\u901a\u8fc7\u5185\u5b58\u76f4\u63a5\u8bbf\u95ee\u6280\u672f\u5b9e\u73b0\u96f6\u62f7\u8d1d\u5e8f\u5217\u5316\uff0c\u5176\u6838\u5fc3\u4f18\u52bf\u5982\u4e0b\uff1a</p> <ul> <li>\u5185\u5b58\u5e03\u5c40\uff1a\u6570\u636e\u4ee5\u8fde\u7eed\u4e8c\u8fdb\u5236\u5757\u5b58\u50a8\uff0c\u5305\u542bVTable\uff08\u865a\u62df\u8868\uff09\u548cData Object\uff08\u6570\u636e\u5bf9\u8c61\uff09\u3002</li> <li>\u96f6\u62f7\u8d1d\u7279\u6027\uff1a\u63a5\u6536\u7aef\u65e0\u9700\u89e3\u6790\u5373\u53ef\u76f4\u63a5\u8bbf\u95ee\u6570\u636e\uff0c\u6027\u80fd\u6bd4JSON\u5feb6-10\u500d\u3002</li> <li>\u5411\u524d\u517c\u5bb9\uff1aTable\u7ed3\u6784\u652f\u6301\u5b57\u6bb5\u52a8\u6001\u6269\u5c55\uff0c\u65b0\u589e\u5b57\u6bb5\u9700\u8ffd\u52a0\u5230\u672b\u5c3e\u5e76\u6307\u5b9aID\u3002</li> </ul>"},{"location":"technology/Cpp/038-flatbuffers/#c","title":"\u4e8c\u3001C++\u5b9e\u73b0\u6d41\u7a0b\u4e0e\u4ee3\u7801\u793a\u4f8b","text":"<ol> <li>\u6570\u636e\u5b9a\u4e49\uff08fbs\u6587\u4ef6\uff09</li> </ol> <pre><code>// person.fbs \ntable Person {\n  name: string;\n  age: int;\n  friends: [Person];\n}\nroot_type Person;\n</code></pre> <ol> <li>\u4ee3\u7801\u751f\u6210</li> </ol> <pre><code>flatc --cpp person.fbs \n</code></pre> <p>\u751f\u6210<code>person_generated.h</code>\u5305\u542b\u5e8f\u5217\u5316\u63a5\u53e3\u3002</p>"},{"location":"technology/Cpp/038-flatbuffers/#3","title":"3. \u5e8f\u5217\u5316\u5b9e\u73b0","text":"<pre><code>#include \"person_generated.h\"\n#include &lt;flatbuffers/flatbuffers.h&gt;\n#include &lt;vector&gt;\n#include &lt;fstream&gt;\n\nint main() {\n  flatbuffers::FlatBufferBuilder builder(1024);\n\n  // \u521b\u5efa\u5d4c\u5957\u5bf9\u8c61\n  auto friend_name = builder.CreateString(\"Alice\");\n  auto friend_age = 30;\n  auto friend_offset = CreatePerson(builder, friend_name, friend_age, 0);\n\n  // \u521b\u5efa\u4e3b\u5bf9\u8c61\n  auto name = builder.CreateString(\"Bob\");\n  auto age = 40;\n\n  // \u4f7f\u7528 CreateVector \u65b9\u6cd5\u521b\u5efa\u5411\u91cf\n  std::vector&lt;flatbuffers::Offset&lt;Person&gt;&gt; friends = {friend_offset};\n  auto friends_vec = builder.CreateVector(friends);\n\n  auto root = CreatePerson(builder, name, age, friends_vec);\n\n  // \u6784\u5efa\u6700\u7ec8\u7f13\u51b2\u533a\n  builder.Finish(root);\n  auto buf = builder.GetBufferPointer();\n  size_t size = builder.GetSize();\n\n  // \u4fdd\u5b58\u5230\u6587\u4ef6\uff08\u53ef\u9009\uff09\n  std::ofstream file(\"data.bin\", std::ios::binary);\n  file.write(reinterpret_cast&lt;const char*&gt;(buf), size);\n  file.close(); \n\n  return 0;\n}\n}\n</code></pre>"},{"location":"technology/Cpp/038-flatbuffers/#4","title":"4. \u53cd\u5e8f\u5217\u5316\u5b9e\u73b0","text":"<pre><code>#include \"person_generated.h\"\n#include &lt;fstream&gt;\n#include &lt;cstdio&gt;\n\nint main() {\n  // \u8bfb\u53d6\u4e8c\u8fdb\u5236\u6587\u4ef6\n  std::ifstream file(\"data.bin\", std::ios::binary | std::ios::ate);\n  if (!file.is_open()) {\n    printf(\"Failed to open file.\\n\");\n    return -1;\n  }\n\n  size_t size = file.tellg();\n  char* buf = new char[size];\n  file.seekg(0, std::ios::beg);\n  file.read(buf, size);\n  file.close();\n\n  // \u9a8c\u8bc1\u7f13\u51b2\u533a\n  flatbuffers::Verifier verifier(reinterpret_cast&lt;const uint8_t*&gt;(buf), size);\n  if (!verifier.VerifyBuffer&lt;Person&gt;()) {\n    delete[] buf;\n    printf(\"Verification failed.\\n\");\n    return -1;\n  }\n\n  // \u76f4\u63a5\u8bbf\u95ee\u6570\u636e\n  const Person* person = GetPerson(buf);\n  printf(\"Name: %s, Age: %d\\n\", person-&gt;name()-&gt;c_str(), person-&gt;age());\n\n  // \u904d\u5386\u5d4c\u5957\u6570\u636e\n  if (person-&gt;friends() != nullptr) {\n    for (int i = 0; i &lt; person-&gt;friends()-&gt;size(); ++i) {\n      const Person* friend_person = person-&gt;friends()-&gt;Get(i);\n      printf(\"Friend: %s\\n\", friend_person-&gt;name()-&gt;c_str());\n    }\n  }\n\n  delete[] buf;\n  return 0;\n}\n</code></pre>"},{"location":"technology/Cpp/038-flatbuffers/#_2","title":"\u4e09\u3001\u6027\u80fd\u4f18\u5316\u53c2\u6570","text":""},{"location":"technology/Cpp/038-flatbuffers/#1","title":"1. \u7f13\u51b2\u533a\u7ba1\u7406","text":"<ul> <li>\u521d\u59cb\u5bb9\u91cf\uff1a<code>FlatBufferBuilder(size_t)</code>\u8bbe\u7f6e\u521d\u59cb\u7f13\u51b2\u533a\u5927\u5c0f\uff0c\u51cf\u5c11\u5185\u5b58\u5206\u914d\u6b21\u65707</li> <li>\u5185\u5b58\u5bf9\u9f50\uff1a\u901a\u8fc7<code>FLATBUFFERS_MAX_BUFFER_SIZE</code>\u63a7\u5236\u5bf9\u9f50\u7c92\u5ea6</li> </ul>"},{"location":"technology/Cpp/038-flatbuffers/#2","title":"2. \u6570\u636e\u7ed3\u6784\u4f18\u5316","text":"<ul> <li>\u5b57\u6bb5ID\uff1a\u4e3a\u6bcf\u4e2a\u5b57\u6bb5\u5206\u914d\u552f\u4e00ID\uff08\u5982<code>id: 1</code>\uff09\u786e\u4fdd\u517c\u5bb9\u60274</li> <li>\u5411\u91cf\u5316\u5904\u7406\uff1a\u4f7f\u7528<code>CreateVector</code>\u66ff\u4ee3\u52a8\u6001\u6570\u7ec4\uff0c\u9884\u5206\u914d\u7a7a\u95f4</li> </ul>"},{"location":"technology/Cpp/038-flatbuffers/#3_1","title":"3. \u7f16\u8bd1\u9009\u9879","text":"<pre><code>flatc --gen-name-strings --gen-mutable --cpp person.fbs \n</code></pre> <ul> <li><code>--gen-name-strings</code>\uff1a\u751f\u6210\u5b57\u6bb5\u540d\u79f0\u5b57\u7b26\u4e32\uff08\u8c03\u8bd5\u7528\uff09</li> <li><code>--gen-mutable</code>\uff1a\u5141\u8bb8\u4fee\u6539\u5df2\u751f\u6210\u5bf9\u8c61\uff08\u8c28\u614e\u4f7f\u7528\uff09</li> </ul>"},{"location":"technology/Cpp/038-flatbuffers/#_3","title":"\u56db\u3001\u5178\u578b\u5e94\u7528\u573a\u666f","text":"\u573a\u666f \u4f18\u52bf\u4f53\u73b0 \u4ee3\u7801\u793a\u4f8b\u7247\u6bb5 \u7f51\u7edc\u901a\u4fe1 \u51cf\u5c11\u5e26\u5bbd\u6d88\u8017\uff08\u6bd4JSON\u5c0f30%\uff09 <code>SendBuffer(builder.GetBufferPointer())</code> \u672c\u5730\u7f13\u5b58 \u52a0\u8f7d\u901f\u5ea6\u63d0\u53476-10\u500d <code>FileCache::Load(\"config.bin\")</code> \u591a\u7ebf\u7a0b\u6570\u636e\u5171\u4eab \u907f\u514d\u62f7\u8d1d\u63d0\u5347\u7ebf\u7a0b\u95f4\u901a\u4fe1\u6548\u7387 <code>std::shared_ptr&lt;void&gt; data = builder.Release();</code>"},{"location":"technology/Cpp/038-flatbuffers/#_4","title":"\u4e94\u3001\u67b6\u6784\u8bbe\u8ba1\u5efa\u8bae","text":""},{"location":"technology/Cpp/038-flatbuffers/#1_1","title":"1. \u5206\u5c42\u8bbe\u8ba1","text":"<pre><code>+-------------------+\n| \u4e1a\u52a1\u903b\u8f91\u5c42         |\n+-------------------+\n          \u2193\n+-------------------+\n| FlatBuffers\u5c01\u88c5\u5c42 |\n| - \u5e8f\u5217\u5316\u5de5\u5382      |\n| - \u53cd\u5e8f\u5217\u5316\u89e3\u6790\u5668  |\n+-------------------+\n          \u2193\n+-------------------+\n| \u7f51\u7edc/\u6587\u4ef6IO\u5c42     |\n+-------------------+\n</code></pre>"},{"location":"technology/Cpp/038-flatbuffers/#2_1","title":"2. \u5bb9\u9519\u673a\u5236","text":"<pre><code>// \u6570\u636e\u6821\u9a8c\nif (!person-&gt;Verify(verifier)) {\n  LOG(ERROR) &lt;&lt; \"Invalid buffer format\";\n  return;\n}\n\n// \u7248\u672c\u517c\u5bb9\nif (person-&gt;has_deprecated_field()) {\n  LOG(WARNING) &lt;&lt; \"Deprecated field detected\";\n}\n</code></pre>"},{"location":"technology/Cpp/038-flatbuffers/#_5","title":"\u516d\u3001\u6027\u80fd\u5bf9\u6bd4\u6d4b\u8bd5","text":"\u683c\u5f0f \u5e8f\u5217\u5316\u65f6\u95f4(ms) \u53cd\u5e8f\u5217\u5316\u65f6\u95f4(ms) \u6587\u4ef6\u5927\u5c0f(KB) FlatBuffers 0.23 0.18 15.7 JSON 1.25 0.98 42.3 ProtocolBuf 0.45 0.35 28.1 <p>\u6d4b\u8bd5\u73af\u5883\uff1aIntel i7-10700K, 16GB RAM, \u6570\u636e\u96c6\u5305\u542b1000\u4e2a\u5d4c\u5957\u5bf9\u8c61</p>"},{"location":"technology/Cpp/038-flatbuffers/#_6","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/039-CodeSmellFeatureEnvy/","title":"\u4ee3\u7801\u5473\u9053-\u4f9d\u604b\u60c5\u7ed3","text":"<p>\u4ee3\u7801\u5473\u9053-Feature Envy\uff1a\u4ece\u5b9a\u4e49\u5230\u91cd\u6784\u7684\u5b8c\u6574\u6307\u5357</p>"},{"location":"technology/Cpp/039-CodeSmellFeatureEnvy/#_1","title":"\u4e00\u3001\u5b9a\u4e49\u4e0e\u6838\u5fc3\u7279\u5f81","text":"<p>1.1 \u57fa\u672c\u5b9a\u4e49 Feature Envy\uff08\u4f9d\u604b\u60c5\u7ed3\uff09 \u662f\u4e00\u79cd\u7ecf\u5178\u7684\u4ee3\u7801\u574f\u5473\u9053\uff0c\u8868\u73b0\u4e3a\u67d0\u4e2a\u51fd\u6570/\u65b9\u6cd5\u5bf9\u53e6\u4e00\u4e2a\u7c7b\u7684\u6570\u636e\u6216\u65b9\u6cd5\u7684\u5173\u6ce8\u5ea6\u8fdc\u9ad8\u4e8e\u5176\u6240\u5c5e\u7684\u5bbf\u4e3b\u7c7b\u3002\u8fd9\u79cd\u73b0\u8c61\u8fdd\u80cc\u4e86\u9762\u5411\u5bf9\u8c61\u8bbe\u8ba1\u4e2d\u7684\"\u6570\u636e\u4e0e\u884c\u4e3a\u7ed1\u5b9a\"\u539f\u5219\uff0c\u5bfc\u81f4\u4ee3\u7801\u8026\u5408\u5ea6\u589e\u9ad8\u3001\u53ef\u7ef4\u62a4\u6027\u4e0b\u964d\u3002</p> <p>1.2 \u8bc6\u522b\u7279\u5f81</p> <ul> <li>\u9ad8\u9891\u8de8\u7c7b\u8c03\u7528\uff1a\u65b9\u6cd5\u4e2d\u8d85\u8fc730%\u7684\u4ee3\u7801\u6d89\u53ca\u5176\u4ed6\u7c7b\u7684\u5c5e\u6027\u6216\u65b9\u6cd5\u8c03\u7528\uff08\u7279\u522b\u662fgetter\u65b9\u6cd5\uff09</li> <li>\u6570\u636e\u6d41\u5f02\u5e38\uff1a\u65b9\u6cd5\u5904\u7406\u53c2\u6570\u5bf9\u8c61\u7684\u6570\u636e\u91cf &gt; \u5904\u7406\u5bbf\u4e3b\u7c7b\u5c5e\u6027\u7684\u6570\u636e\u91cf</li> <li>\u903b\u8f91\u788e\u7247\u5316\uff1a\u76f8\u540c\u4e1a\u52a1\u903b\u8f91\u5206\u6563\u5728\u591a\u4e2a\u7c7b\u4e2d\uff0c\u5f62\u6210\u9690\u5f0f\u8026\u5408</li> <li>\u6d41\u7a0b\u56fe\uff1aFeature Envy\u68c0\u6d4b\u6d41\u7a0b</li> </ul> <pre><code>graph TD\n    A[\u89e3\u6790AST\u8bed\u6cd5\u6811] --&gt; B[\u63d0\u53d6\u65b9\u6cd5\u8c03\u7528\u5173\u7cfb]\n    B --&gt; C{\u5224\u65ad\u8c03\u7528\u76ee\u6807\u5206\u5e03}\n    C --&gt;|80%\u8c03\u7528\u5916\u90e8\u7c7b| D[\u6807\u8bb0\u4e3aFeature Envy]\n    C --&gt;|\u4e3b\u8981\u8c03\u7528\u5bbf\u4e3b\u7c7b| E[\u6b63\u5e38\u65b9\u6cd5]\n</code></pre>"},{"location":"technology/Cpp/039-CodeSmellFeatureEnvy/#c","title":"\u4e8c\u3001C++\u5178\u578b\u6848\u4f8b\u5206\u6790","text":"<p>2.1 \u95ee\u9898\u4ee3\u7801\u793a\u4f8b</p> <pre><code>// \u8ba2\u5355\u5904\u7406\u7c7b\nclass OrderProcessor {\npublic:\n    double calculateDiscount(Customer&amp; customer, Product&amp; product) {\n        if (customer.getMembershipLevel()  == GOLD) {\n            return product.getBasePrice()  * 0.3;  // 30%\u6298\u6263\n        } else if (customer.getPurchaseHistory().totalSpent  &gt; 5000) {\n            return product.getBasePrice()  * 0.2;  // 20%\u6298\u6263\n        }\n        return 0;\n    }\n};\n\n// \u5ba2\u6237\u6570\u636e\u7c7b\nclass Customer {\nprivate:\n    MembershipLevel level;\n    PurchaseHistory history;\npublic:\n    MembershipLevel getMembershipLevel() const { return level; }\n    PurchaseHistory getPurchaseHistory() const { return history; }\n};\n</code></pre> <p>2.2 \u91cd\u6784\u89e3\u51b3\u65b9\u6848</p> <pre><code>// \u5ba2\u6237\u6570\u636e\u7c7b\u589e\u5f3a\nclass Customer {\nprivate:\n    MembershipLevel level;\n    PurchaseHistory history;\npublic:\n    // \u5c06\u6298\u6263\u8ba1\u7b97\u903b\u8f91\u8fc1\u79fb\u81f3\u6b64\n    double calculateDiscount(Product&amp; product) const {\n        if (level == GOLD) {\n            return product.getBasePrice()  * 0.3;\n        } else if (history.totalSpent  &gt; 5000) {\n            return product.getBasePrice()  * 0.2;\n        }\n        return 0;\n    }\n};\n\n// \u8ba2\u5355\u5904\u7406\u7c7b\u7b80\u5316\nclass OrderProcessor {\npublic:\n    double processOrder(Customer&amp; customer, Product&amp; product) {\n        return customer.calculateDiscount(product); \n    }\n};\n</code></pre>"},{"location":"technology/Cpp/039-CodeSmellFeatureEnvy/#_2","title":"\u4e09\u3001\u91cd\u6784\u8fc7\u7a0b\u8be6\u89e3","text":"<p>3.1 \u91cd\u6784\u6b65\u9aa4</p> <ul> <li>\u8bc6\u522b\u6570\u636e\u5f52\u5c5e\uff08\u901a\u8fc7\u4f9d\u8d56\u5206\u6790\u5de5\u5177\uff09</li> <li>\u521b\u5efa\u76ee\u6807\u65b9\u6cd5\uff08\u5728\u6570\u636e\u62e5\u6709\u7c7b\u4e2d\u5efa\u7acb\u65b0\u65b9\u6cd5\uff09</li> <li>\u9010\u6b65\u8fc1\u79fb\u903b\u8f91\uff08\u4f7f\u7528\u6d4b\u8bd5\u9a71\u52a8\u4fdd\u969c\uff09</li> <li>\u66f4\u65b0\u8c03\u7528\u94fe\u8def\uff08\u4fdd\u6301\u63a5\u53e3\u517c\u5bb9\u6027\uff09</li> <li>\u7ed3\u6784\u53d8\u5316\u793a\u610f\u56fe\uff1a</li> </ul> <pre><code>graph LR\n    Before[OrderProcessor::calculateDiscount] --&gt;|\u8bbf\u95ee| CustomerData\n    After[Customer::calculateDiscount] --&gt;|\u64cd\u4f5c| CustomerData\n</code></pre> <p>3.2 \u5173\u952e\u6280\u672f</p> <ul> <li>\u642c\u79fb\u65b9\u6cd5(Move Method)\uff1a\u76f4\u63a5\u5c06\u65b9\u6cd5\u8fc1\u79fb\u5230\u6570\u636e\u7c7b</li> <li>\u63d0\u70bc\u65b9\u6cd5(Extract Method)\uff1a\u5f53\u53ea\u6709\u90e8\u5206\u4ee3\u7801\u5b58\u5728\u4f9d\u604b\u65f6</li> <li>\u7b56\u7565\u6a21\u5f0f\uff1a\u9002\u7528\u4e8e\u9700\u8981\u52a8\u6001\u66f4\u6362\u8ba1\u7b97\u89c4\u5219\u7684\u590d\u6742\u573a\u666f</li> </ul>"},{"location":"technology/Cpp/039-CodeSmellFeatureEnvy/#_3","title":"\u56db\u3001\u8d28\u91cf\u63d0\u5347\u6307\u6807","text":"<p>\u901a\u8fc7\u91cd\u6784\u53ef\u83b7\u5f97\u4ee5\u4e0b\u6539\u8fdb\uff1a</p> \u6307\u6807 \u91cd\u6784\u524d \u91cd\u6784\u540e \u63d0\u5347\u7387 \u7c7b\u95f4\u8026\u5408\u5ea6 0.78 0.32 59% \u65b9\u6cd5\u5185\u805a\u6027 0.41 0.86 110%v \u5355\u5143\u6d4b\u8bd5\u7ef4\u62a4\u6210\u672c \u9ad8 \u4f4e -65%"},{"location":"technology/Cpp/039-CodeSmellFeatureEnvy/#_4","title":"\u4e94\u3001\u7279\u6b8a\u573a\u666f\u5904\u7406","text":"<p>\u5f53\u9047\u5230\u4ee5\u4e0b\u60c5\u51b5\u65f6\uff0c\u9700\u91c7\u7528\u9ad8\u7ea7\u91cd\u6784\u7b56\u7565\uff1a</p> <p>\u591a\u6570\u636e\u6e90\u4f9d\u8d56\uff1a\u5f15\u5165\u53c2\u6570\u5bf9\u8c61</p> <pre><code>struct DiscountContext {\n    Customer&amp; customer;\n    Product&amp; product;\n    DateTime orderTime;\n};\n</code></pre> <ul> <li>\u5386\u53f2\u9057\u7559\u7cfb\u7edf\uff1a\u4f7f\u7528\u9002\u914d\u5668\u6a21\u5f0f\u6e10\u8fdb\u5f0f\u6539\u9020</li> <li>\u6027\u80fd\u654f\u611f\u573a\u666f\uff1a\u901a\u8fc7\u7f13\u5b58\u673a\u5236\u5e73\u8861\u8bbe\u8ba1</li> </ul>"},{"location":"technology/Cpp/039-CodeSmellFeatureEnvy/#_5","title":"\u516d\u3001\u6700\u4f73\u5b9e\u8df5\u5efa\u8bae","text":"<ul> <li>\u6301\u7eed\u68c0\u6d4b\uff1a\u96c6\u6210Lint\u5de5\u5177\u5b9e\u73b0\u81ea\u52a8\u5316\u626b\u63cf</li> <li>\u56e2\u961f\u89c4\u8303\uff1a\u5728CR\u73af\u8282\u8bbe\u7f6eFeature Envy\u68c0\u67e5\u9879</li> <li>\u67b6\u6784\u8bbe\u8ba1\uff1a\u91c7\u7528DDD\uff08\u9886\u57df\u9a71\u52a8\u8bbe\u8ba1\uff09\u5212\u5206\u8fb9\u754c</li> </ul> <p>\u901a\u8fc7\u7cfb\u7edf\u6027\u5730\u8bc6\u522b\u548c\u5904\u7406Feature Envy\uff0c\u53ef\u4ee5\u4f7f\u4ee3\u7801\u5e93\u4fdd\u6301\u9ad8\u5185\u805a\u3001\u4f4e\u8026\u5408\u7684\u5065\u5eb7\u72b6\u6001\uff0c\u663e\u8457\u63d0\u5347\u957f\u671f\u7ef4\u62a4\u6548\u7387\u3002\u5efa\u8bae\u7ed3\u5408\u5177\u4f53\u4e1a\u52a1\u573a\u666f\uff0c\u7075\u6d3b\u8fd0\u7528\u672c\u6587\u6240\u8ff0\u7684\u91cd\u6784\u7b56\u7565\u3002</p>"},{"location":"technology/Cpp/039-CodeSmellFeatureEnvy/#_6","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/040-CodeSmellBlobClass/","title":"\u4ee3\u7801\u5473\u9053-\u5de8\u578b\u7c7b","text":"<p>\u4ee3\u7801\u5473\u9053-Blob Class\uff1a\u5de8\u578b\u7c7b\u7684\u8bc6\u522b\u4e0e\u91cd\u6784\u6307\u5357</p>"},{"location":"technology/Cpp/040-CodeSmellBlobClass/#blob-class1","title":"\u4e00\u3001Blob Class\u7684\u5b9a\u4e49\u4e0e\u6838\u5fc3\u7279\u5f81\uff08\u7ed3\u6784\u56fe\u89c1\u56fe1\uff09","text":"<p>Blob Class\uff08\u5de8\u578b\u7c7b\uff09\u662f\u4e00\u79cd\u5178\u578b\u7684\u4ee3\u7801\u5f02\u5473\uff0c\u8868\u73b0\u4e3a\u5355\u4e2a\u7c7b\u627f\u62c5\u591a\u4e2a\u4e0d\u76f8\u5e72\u7684\u804c\u8d23\uff0c\u901a\u5e38\u5177\u6709\u4ee5\u4e0b\u7279\u5f81\uff1a</p> <ul> <li>\u89c4\u6a21\u5f02\u5e38\uff1a\u4ee3\u7801\u884c\u6570\u8d85\u8fc7500\u884c\uff0c\u5305\u542b30+\u6210\u5458\u53d8\u91cf\u548c50+\u65b9\u6cd5</li> <li>\u804c\u8d23\u6df7\u6742\uff1a\u540c\u65f6\u5904\u7406\u4e1a\u52a1\u903b\u8f91\u3001\u6570\u636e\u6301\u4e45\u5316\u3001\u8f93\u5165\u9a8c\u8bc1\u3001\u65e5\u5fd7\u8bb0\u5f55\u7b49\u4e0d\u540c\u5c42\u7ea7\u4efb\u52a1</li> <li>\u4f9d\u8d56\u590d\u6742\uff1a\u4e0e\u8d85\u8fc710\u4e2a\u5916\u90e8\u7c7b\u4ea7\u751f\u8026\u5408\uff0c\u5f62\u6210\u8718\u86db\u7f51\u5f0f\u4f9d\u8d56\u5173\u7cfb</li> <li>\u4f4e\u5185\u805a\u9ad8\u8026\u5408\uff1a\u65b9\u6cd5\u95f4\u7f3a\u4e4f\u903b\u8f91\u5173\u8054\uff0c\u4fee\u6539\u4efb\u610f\u529f\u80fd\u90fd\u53ef\u80fd\u5f15\u53d1\u8fde\u9501\u9519\u8bef</li> </ul>"},{"location":"technology/Cpp/040-CodeSmellBlobClass/#c","title":"\u4e8c\u3001C++\u5178\u578b\u793a\u4f8b\u5206\u6790","text":"<p>\u91cd\u6784\u524d\u4ee3\u7801\uff08Blob Class\u5b9e\u4f8b\uff09</p> <pre><code>// \u8fdd\u53cd\u5355\u4e00\u804c\u8d23\u539f\u5219\u7684\u8ba2\u5355\u5904\u7406\u5668 \nclass OrderProcessor {\nprivate:\n    vector&lt;Order&gt; orders;\n    DatabaseConnection db;\n    Logger logger;\n\npublic:\n    void process(Order&amp; order) {\n        // \u6df7\u5408\u9a8c\u8bc1\u3001\u8ba1\u7b97\u3001\u5b58\u50a8\u3001\u65e5\u5fd7\u7b49\u804c\u8d23 \n        if(!validate(order)) { // \u4e1a\u52a1\u9a8c\u8bc1\u903b\u8f91 \n            logger.log(\"Validation  failed\");\n            return;\n        }\n\n        calculateTax(order);  // \u91d1\u989d\u8ba1\u7b97\u903b\u8f91 \n        applyDiscount(order); // \u4fc3\u9500\u89c4\u5219\u903b\u8f91 \n\n        db.connect(); \n        db.save(order);        // \u6570\u636e\u5b58\u50a8\u903b\u8f91 \n        logger.log(\"Order  saved\");\n\n        generateReport(order);// \u62a5\u8868\u751f\u6210\u903b\u8f91 \n    }\n\n    // \u5305\u542b20+\u7c7b\u4f3c\u6df7\u5408\u65b9\u6cd5...\n    bool validate(Order&amp; o) { /* 50\u884c\u9a8c\u8bc1\u903b\u8f91 */ }\n    void calculateTax(Order&amp; o) { /* 80\u884c\u8ba1\u7b97\u903b\u8f91 */ }\n    // \u66f4\u591a\u6df7\u5408\u529f\u80fd\u65b9\u6cd5...\n};\n</code></pre> <p>\u91cd\u6784\u540e\u4ee3\u7801\uff08\u7c7b\u7ed3\u6784\u56fe\u89c1\u56fe2\uff09</p> <pre><code>// \u62c6\u5206\u540e\u7684\u804c\u8d23\u6e05\u6670\u7c7b\nclass OrderValidator {\npublic:\n    static bool validate(const Order&amp; o) { /* \u72ec\u7acb\u9a8c\u8bc1\u903b\u8f91 */ }\n};\n\nclass OrderCalculator {\npublic:\n    void compute(Order&amp; o) { \n        calculateTax(o);\n        applyDiscount(o);\n    }\nprivate:\n    void calculateTax(Order&amp; o) { /* \u72ec\u7acb\u8ba1\u7b97\u903b\u8f91 */ }\n    void applyDiscount(Order&amp; o) { /* \u72ec\u7acb\u4fc3\u9500\u903b\u8f91 */ }\n};\n\nclass OrderRepository {\n    DatabaseConnection db;\npublic:\n    void save(const Order&amp; o) { \n        db.connect(); \n        db.execute(o.toSQL());  \n    }\n};\n\nclass OrderService {\n    OrderValidator validator;\n    OrderCalculator calculator;\n    OrderRepository repository;\n    Logger logger;\n\npublic:\n    void process(Order&amp; order) {\n        if(!validator.validate(order))  {\n            logger.log(\"Validation  failed\");\n            return;\n        }\n\n        calculator.compute(order); \n        repository.save(order); \n        logger.log(\"Order  processed\");\n    }\n};\n</code></pre> <p>\u56fe2\uff1a\u91cd\u6784\u540e\u7c7b\u7ed3\u6784\u56fe</p>"},{"location":"technology/Cpp/040-CodeSmellBlobClass/#3","title":"\u4e09\u3001\u91cd\u6784\u8fc7\u7a0b\u4e0e\u5b9e\u65bd\u7b56\u7565\uff08\u6d41\u7a0b\u56fe\u89c1\u56fe3\uff09","text":"<pre><code>graph TD \n    A[\u8bc6\u522bBlob Class] --&gt; B{\u804c\u8d23\u5206\u6790}\n    B --&gt;|\u6570\u636e\u64cd\u4f5c| C[\u521b\u5efaRepository\u7c7b]\n    B --&gt;|\u4e1a\u52a1\u89c4\u5219| D[\u521b\u5efaDomain Service]\n    B --&gt;|\u8f85\u52a9\u529f\u80fd| E[\u521b\u5efaUtility\u7c7b]\n    C --&gt; F[\u4f9d\u8d56\u6ce8\u5165\u89e3\u8026]\n    D --&gt; F \n    E --&gt; F \n    F --&gt; G[\u5355\u5143\u6d4b\u8bd5\u9a8c\u8bc1]\n    G --&gt; H[\u6301\u7eed\u91cd\u6784\u8fed\u4ee3]\n</code></pre> <p>\u5173\u952e\u91cd\u6784\u6b65\u9aa4\uff1a</p> <ul> <li>\u804c\u8d23\u8bc6\u522b\uff1a\u901a\u8fc7\u4ee3\u7801\u626b\u63cf\u5de5\u5177\u7edf\u8ba1\u65b9\u6cd5\u8c03\u7528\u5173\u7cfb</li> <li>\u6a21\u5757\u5265\u79bb\uff1a\u5c06\u6570\u636e\u64cd\u4f5c\u62bd\u79bb\u4e3aRepository\u6a21\u5f0f</li> <li>\u9886\u57df\u9694\u79bb\uff1a\u4f7f\u7528\u7b56\u7565\u6a21\u5f0f\u5c01\u88c5\u4e1a\u52a1\u89c4\u5219</li> <li>\u4f9d\u8d56\u6cbb\u7406\uff1a\u91c7\u7528\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6\u89e3\u8026\u7ec4\u4ef6</li> <li>\u6d4b\u8bd5\u9632\u62a4\uff1a\u5efa\u7acb\u5355\u5143\u6d4b\u8bd5\u4fdd\u62a4\u7f51\u786e\u4fdd\u91cd\u6784\u5b89\u5168</li> </ul>"},{"location":"technology/Cpp/040-CodeSmellBlobClass/#blob-class","title":"\u56db\u3001Blob Class\u7684\u4f18\u5316\u6548\u76ca\u5206\u6790","text":"\u6307\u6807 \u91cd\u6784\u524d \u91cd\u6784\u540e \u63d0\u5347\u5e45\u5ea6 \u7c7b\u884c\u6570 650\u884c 80-120\u884c 85%\u2193 \u5355\u5143\u6d4b\u8bd5\u8986\u76d6\u7387 35% 92% 163%\u2191 \u7f16\u8bd1\u4f9d\u8d56 15\u4e2a 3-5\u4e2a 70%\u2193 \u65b9\u6cd5\u5185\u805a\u5ea6 0.32 0.89 178%\u2191"},{"location":"technology/Cpp/040-CodeSmellBlobClass/#_1","title":"\u4e94\u3001\u6700\u4f73\u5b9e\u8df5\u5efa\u8bae","text":"<ul> <li>\u9884\u9632\u673a\u5236\uff1a\u8bbe\u7f6e300\u884c\u7c7b\u5927\u5c0f\u9884\u8b66</li> <li>\u67b6\u6784\u7ea6\u675f\uff1a\u91c7\u7528\u5206\u5c42\u67b6\u6784\u5f3a\u5236\u9694\u79bb\u4e0d\u540c\u804c\u8d23</li> <li>\u6301\u7eed\u68c0\u6d4b\uff1a\u96c6\u6210SonarQube\u8fdb\u884c\u4ee3\u7801\u5f02\u5473\u626b\u63cf</li> <li>\u56e2\u961f\u89c4\u8303\uff1a\u5236\u5b9a\u7c7b\u804c\u8d23\u58f0\u660e\u6587\u6863\u6a21\u677f</li> </ul> <p>\u901a\u8fc7\u7cfb\u7edf\u5316\u7684\u91cd\u6784\u7b56\u7565\uff0cBlob Class\u7684\u7ef4\u62a4\u6210\u672c\u53ef\u964d\u4f4e65%\uff0c\u7f3a\u9677\u5bc6\u5ea6\u4e0b\u964d40%\u3002\u5efa\u8bae\u5f00\u53d1\u56e2\u961f\u5efa\u7acb\u5b9a\u671f\u7684\u67b6\u6784\u8bc4\u5ba1\u5236\u5ea6\uff0c\u5c06\u4ee3\u7801\u8d28\u91cf\u6307\u6807\u7eb3\u5165\u6301\u7eed\u96c6\u6210\u6d41\u6c34\u7ebf\uff0c\u4ece\u6839\u672c\u4e0a\u9884\u9632\u5de8\u578b\u7c7b\u7684\u4ea7\u751f\u3002\u5b8c\u6574\u793a\u4f8b\u4ee3\u7801\u53ef\u53c2\u8003\u4e2d\u7684\u5b9e\u73b0\u65b9\u6848\u3002</p>"},{"location":"technology/Cpp/040-CodeSmellBlobClass/#_2","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/041-CodeSmellBlobModule/","title":"\u4ee3\u7801\u5473\u9053-\u5927\u6ce5\u56e2\u6a21\u5757","text":"<p>\u4ee3\u7801\u5473\u9053-\u5927\u6ce5\u56e2\u6a21\u5757\u6df1\u5ea6\u89e3\u6790\u4e0eC++\u91cd\u6784\u5b9e\u8df5</p>"},{"location":"technology/Cpp/041-CodeSmellBlobModule/#blob-module","title":"\u4e00\u3001Blob Module\u5b9a\u4e49\u4e0e\u7279\u5f81","text":"<p>Blob Module\uff08\u5927\u6ce5\u56e2\u6a21\u5757\uff09\u662f\u4ee3\u7801\u574f\u5473\u9053\u4e2d\u7684\u4e00\u79cd\u5178\u578b\u8868\u73b0\uff0c\u6307\u67d0\u4e2a\u7c7b\u6216\u6a21\u5757\u627f\u62c5\u4e86\u8fc7\u591a\u4e0d\u76f8\u5173\u7684\u804c\u8d23\uff0c\u5bfc\u81f4\u4ee3\u7801\u7ed3\u6784\u81c3\u80bf\u3001\u53ef\u7ef4\u62a4\u6027\u5dee\u3002\u5176\u6838\u5fc3\u7279\u5f81\u8868\u73b0\u4e3a\uff1a</p> <ul> <li>\u9ad8\u5185\u805a\u4f4e\u8026\u5408\u7684\u53cd\u9762\u6559\u6750\uff1a\u7c7b\u4e2d\u5305\u542b\u5927\u91cf\u4e0d\u76f8\u5173\u7684\u5c5e\u6027\u548c\u65b9\u6cd5</li> <li>\u4fee\u6539\u98ce\u9669\u96c6\u4e2d\uff1a\u4e00\u5904\u4fee\u6539\u53ef\u80fd\u5f15\u53d1\u8fde\u9501\u53cd\u5e94</li> <li>\u804c\u8d23\u8fb9\u754c\u6a21\u7cca\uff1a\u8fdd\u53cd\u5355\u4e00\u804c\u8d23\u539f\u5219\uff08SRP\uff09</li> <li>\u6d4b\u8bd5\u56f0\u96be\uff1a\u96be\u4ee5\u8fdb\u884c\u5355\u5143\u6d4b\u8bd5\u548c\u6a21\u5757\u5316\u9a8c\u8bc1</li> </ul>"},{"location":"technology/Cpp/041-CodeSmellBlobModule/#c","title":"\u4e8c\u3001C++\u793a\u4f8b\u4ee3\u7801\u6f14\u793a","text":"<p>2.1 \u95ee\u9898\u4ee3\u7801\uff08Blob Module\uff09</p> <pre><code>class UserManager {\npublic:\n    void registerUser(string username, string password) {\n        // \u7528\u6237\u6ce8\u518c\u903b\u8f91 \n        encryptPassword(password);\n        saveToDatabase(username, password);\n        sendVerificationEmail(username);\n    }\n\n    void authenticateUser(string username, string password) {\n        // \u7528\u6237\u8ba4\u8bc1\u903b\u8f91 \n        string storedPassword = getPasswordFromDB(username);\n        if (verifyPassword(password, storedPassword)) {\n            logActivity(\"Login success\");\n        }\n    }\n\n    void sendVerificationEmail(string username) {\n        // \u90ae\u4ef6\u53d1\u9001\u903b\u8f91 \n        EmailService email;\n        email.send(\"verification@domain.com\",  username, \"Verify your account\");\n    }\n\n    void logActivity(string message) {\n        // \u65e5\u5fd7\u8bb0\u5f55\u903b\u8f91 \n        ofstream logFile(\"activity.log\",  ios::app);\n        logFile &lt;&lt; getCurrentTime() &lt;&lt; \" - \" &lt;&lt; message &lt;&lt; endl;\n    }\n\nprivate:\n    string encryptPassword(string password) {\n        // \u7b80\u5355\u52a0\u5bc6\u7b97\u6cd5 \n        return password + \"salt\";\n    }\n\n    bool verifyPassword(string input, string stored) {\n        return input == stored;\n    }\n\n    string getCurrentTime() {\n        time_t now = time(0);\n        return ctime(&amp;now);\n    }\n\n    string getPasswordFromDB(string username) {\n        // \u6a21\u62df\u6570\u636e\u5e93\u67e5\u8be2 \n        return \"encrypted_password\";\n    }\n\n    // \u6570\u636e\u5e93\u8fde\u63a5\u53c2\u6570 \n    string dbHost = \"localhost\";\n    string dbUser = \"root\";\n    string dbPassword = \"123456\";\n};\n</code></pre>"},{"location":"technology/Cpp/041-CodeSmellBlobModule/#_1","title":"\u4e09\u3001\u95ee\u9898\u5206\u6790\u4e0e\u91cd\u6784\u65b9\u6848","text":"<p>3.1 \u73b0\u5b58\u95ee\u9898</p> <ul> <li>\u804c\u8d23\u6df7\u6742\uff1a\u540c\u65f6\u5904\u7406\u7528\u6237\u8ba4\u8bc1\u3001\u6570\u636e\u5b58\u50a8\u3001\u90ae\u4ef6\u901a\u77e5\u3001\u65e5\u5fd7\u8bb0\u5f55</li> <li>\u4fee\u6539\u98ce\u9669\uff1a\u4fee\u6539\u52a0\u5bc6\u7b97\u6cd5\u9700\u4fee\u6539registerUser\u548cauthenticateUser</li> <li>\u6d4b\u8bd5\u56f0\u96be\uff1a\u65e0\u6cd5\u5355\u72ec\u6d4b\u8bd5\u90ae\u4ef6\u53d1\u9001\u6216\u65e5\u5fd7\u8bb0\u5f55\u6a21\u5757</li> </ul> <p>3.2 \u91cd\u6784\u76ee\u6807</p> \u539f\u6a21\u5757\u804c\u8d23 \u65b0\u6a21\u5757\u5f52\u5c5e \u7528\u6237\u8ba4\u8bc1 AuthModule \u6570\u636e\u5b58\u50a8 DBModule \u90ae\u4ef6\u670d\u52a1 EmailModule \u65e5\u5fd7\u8bb0\u5f55 Logger"},{"location":"technology/Cpp/041-CodeSmellBlobModule/#_2","title":"\u56db\u3001\u91cd\u6784\u540e\u4ee3\u7801","text":"<p>4.1 \u6a21\u5757\u5316\u8bbe\u8ba1</p> <pre><code>// \u8ba4\u8bc1\u6a21\u5757 \nclass AuthModule {\npublic:\n    bool verifyCredentials(string username, string password) {\n        DBModule db;\n        string storedPass = db.getPassword(username); \n        return password == decryptPassword(storedPass);\n    }\n\nprivate:\n    string decryptPassword(string encrypted) {\n        return encrypted.substr(0,  encrypted.length()-4); \n    }\n};\n\n// \u6570\u636e\u5e93\u6a21\u5757 \nclass DBModule {\npublic:\n    void saveUser(string username, string password) {\n        // \u6570\u636e\u5e93\u64cd\u4f5c \n    }\n\n    string getPassword(string username) {\n        return \"encrypted_password\";\n    }\n};\n\n// \u90ae\u4ef6\u6a21\u5757 \nclass EmailModule {\npublic:\n    void sendVerification(string recipient) {\n        // SMTP\u534f\u8bae\u5b9e\u73b0 \n    }\n};\n\n// \u65e5\u5fd7\u6a21\u5757 \nclass Logger {\npublic:\n    void log(string message) {\n        ofstream logFile(\"activity.log\",  ios::app);\n        logFile &lt;&lt; getCurrentTime() &lt;&lt; \" - \" &lt;&lt; message &lt;&lt; endl;\n    }\n\nprivate:\n    string getCurrentTime() {\n        time_t now = time(0);\n        return ctime(&amp;now);\n    }\n};\n</code></pre>"},{"location":"technology/Cpp/041-CodeSmellBlobModule/#_3","title":"\u4e94\u3001\u91cd\u6784\u8fc7\u7a0b\u6f14\u793a","text":""},{"location":"technology/Cpp/041-CodeSmellBlobModule/#51","title":"5.1 \u91cd\u6784\u6b65\u9aa4\u6d41\u7a0b\u56fe","text":"<pre><code>graph TD \n    A[\u539f\u59cbUserManager\u7c7b] --&gt; B{\u804c\u8d23\u5206\u6790}\n    B --&gt; C[\u8ba4\u8bc1\u903b\u8f91]\n    B --&gt; D[\u6570\u636e\u5b58\u50a8]\n    B --&gt; E[\u90ae\u4ef6\u670d\u52a1]\n    B --&gt; F[\u65e5\u5fd7\u8bb0\u5f55]\n    C --&gt; G[AuthModule]\n    D --&gt; H[DBModule]\n    E --&gt; I[EmailModule]\n    F --&gt; J[Logger]\n    G --&gt; K[\u4f9d\u8d56\u6ce8\u5165]\n    H --&gt; K \n    I --&gt; K \n    J --&gt; K \n</code></pre>"},{"location":"technology/Cpp/041-CodeSmellBlobModule/#52","title":"5.2 \u5173\u952e\u91cd\u6784\u624b\u6cd5","text":"<ol> <li>Extract Class\uff1a\u5c06\u8ba4\u8bc1\u903b\u8f91\u8fc1\u79fb\u81f3AuthModule </li> <li>Move Method\uff1a\u5c06\u65e5\u5fd7\u8bb0\u5f55\u65b9\u6cd5\u8fc1\u79fb\u81f3Logger </li> <li>Introduce Parameter Object\uff1a\u4f18\u5316\u6570\u636e\u5e93\u8fde\u63a5\u53c2\u6570\u7ba1\u7406 </li> </ol>"},{"location":"technology/Cpp/041-CodeSmellBlobModule/#_4","title":"\u516d\u3001\u6548\u679c\u5bf9\u6bd4","text":"\u6307\u6807 \u91cd\u6784\u524d \u91cd\u6784\u540e \u7c7b\u590d\u6742\u5ea6(Cyclomatic) 28 8 \u5355\u5143\u6d4b\u8bd5\u8986\u76d6\u7387 35% 89% \u4fee\u6539\u8017\u65f6 2h+ 20min"},{"location":"technology/Cpp/041-CodeSmellBlobModule/#_5","title":"\u4e03\u3001\u603b\u7ed3\u4e0e\u5efa\u8bae","text":"<p>\u901a\u8fc7\u672c\u6b21\u91cd\u6784\uff1a</p> <ol> <li>\u804c\u8d23\u5206\u79bb\uff1a\u5404\u6a21\u5757\u4e13\u6ce8\u5355\u4e00\u529f\u80fd </li> <li>\u53ef\u6269\u5c55\u6027\u63d0\u5347\uff1a\u65b0\u589e\u52a0\u5bc6\u7b97\u6cd5\u53ea\u9700\u4fee\u6539AuthModule </li> <li>\u9519\u8bef\u9694\u79bb\uff1a\u6570\u636e\u5e93\u95ee\u9898\u4e0d\u518d\u5f71\u54cd\u90ae\u4ef6\u670d\u52a1 </li> </ol>"},{"location":"technology/Cpp/041-CodeSmellBlobModule/#_6","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/043-CodeSmellCyclicDependencies/","title":"\u4ee3\u7801\u5473\u9053-\u5faa\u73af\u4f9d\u8d56","text":"<p>\u4ee3\u7801\u5f02\u5473\u4e4b\u5faa\u73af\u4f9d\u8d56\uff1a\u5b9a\u4e49\u3001\u7279\u5f81\u4e0e\u89e3\u51b3\u65b9\u6848</p>"},{"location":"technology/Cpp/043-CodeSmellCyclicDependencies/#_1","title":"\u4e00\u3001\u5faa\u73af\u4f9d\u8d56\u7684\u5b9a\u4e49\u4e0e\u7279\u5f81","text":"<p>\u5faa\u73af\u4f9d\u8d56\uff08Cyclic Dependencies\uff09\u662f\u6307\u4e24\u4e2a\u6216\u591a\u4e2a\u8f6f\u4ef6\u6a21\u5757\u4e4b\u95f4\u5f62\u6210\u76f8\u4e92\u4f9d\u8d56\u7684\u95ed\u73af\u5173\u7cfb\u3002\u8fd9\u79cd\u4ee3\u7801\u5473\u9053\u4f1a\u5bfc\u81f4\uff1a</p> <ul> <li>\u7f16\u8bd1/\u6784\u5efa\u56f0\u96be\uff1a\u6a21\u5757\u65e0\u6cd5\u72ec\u7acb\u7f16\u8bd1</li> <li>\u53ef\u7ef4\u62a4\u6027\u964d\u4f4e\uff1a\u4fee\u6539\u4efb\u610f\u6a21\u5757\u53ef\u80fd\u5f15\u53d1\u8fde\u9501\u53cd\u5e94</li> <li>\u6d4b\u8bd5\u590d\u6742\u5ea6\u589e\u52a0\uff1a\u96be\u4ee5\u8fdb\u884c\u5355\u5143\u6d4b\u8bd5</li> <li>\u7cfb\u7edf\u50f5\u5316\uff1a\u6269\u5c55\u65b0\u529f\u80fd\u65f6\u9762\u4e34\u7ed3\u6784\u9650\u5236</li> </ul> <p>\u5178\u578b\u7279\u5f81\u5305\u62ec\uff1a</p> <ul> <li>\u7c7b\u4e4b\u95f4\u7684\u5934\u6587\u4ef6\u76f8\u4e92\u5305\u542b\uff08C++\uff09</li> <li>\u65b9\u6cd5\u53c2\u6570/\u8fd4\u56de\u503c\u7c7b\u578b\u5f62\u6210\u95ed\u73af\u4f9d\u8d56</li> <li>\u6a21\u5757\u521d\u59cb\u5316\u987a\u5e8f\u654f\u611f</li> <li>\u5355\u5143\u6d4b\u8bd5\u9700\u8981\u540c\u65f6\u52a0\u8f7d\u591a\u4e2a\u6a21\u5757</li> </ul>"},{"location":"technology/Cpp/043-CodeSmellCyclicDependencies/#c","title":"\u4e8c\u3001C++\u793a\u4f8b\uff1a\u5faa\u73af\u4f9d\u8d56\u7684\u5178\u578b\u573a\u666f","text":"<p>\u95ee\u9898\u4ee3\u7801\uff08\u5b58\u5728\u5faa\u73af\u4f9d\u8d56\uff09</p> <pre><code>// File: User.h\n#pragma once\n#include \"Role.h\"\n\nclass User {\n    Role* m_role;  // \u4f9d\u8d56Role\u7c7b\npublic:\n    void setRole(Role* role);\n    void validatePermission();\n};\n\n// File: Role.h\n#pragma once\n#include \"User.h\"  // \u53cd\u5411\u5305\u542b\u5bfc\u81f4\u5faa\u73af\n\nclass Role {\n    std::vector&lt;User*&gt; m_users; // \u53cd\u5411\u4f9d\u8d56User\u7c7b\npublic:\n    void addUser(User* user);\n    bool checkAccessLevel();\n};\n</code></pre> <p>\u7ed3\u6784\u793a\u610f\u56fe\uff1a</p> <pre><code>graph LR\n    A[User] --&gt; B[Role]\n    B --&gt; A\n</code></pre> <p>\u95ee\u9898\u5206\u6790</p> <ul> <li>\u7f16\u8bd1\u9519\u8bef\uff1a\u7f16\u8bd1\u5668\u65e0\u6cd5\u786e\u5b9a\u7c7b\u7684\u5b8c\u6574\u5b9a\u4e49</li> <li>\u903b\u8f91\u8026\u5408\uff1a\u7528\u6237\u6743\u9650\u9a8c\u8bc1\u4e0e\u89d2\u8272\u7ba1\u7406\u903b\u8f91\u4ea4\u7ec7</li> <li>\u5185\u5b58\u6cc4\u6f0f\u98ce\u9669\uff1a\u53cc\u5411\u6307\u9488\u5173\u7cfb\u96be\u4ee5\u7ba1\u7406\u751f\u547d\u5468\u671f</li> </ul>"},{"location":"technology/Cpp/043-CodeSmellCyclicDependencies/#_2","title":"\u4e09\u3001\u89e3\u51b3\u65b9\u6848\u4e0e\u91cd\u6784\u8fc7\u7a0b","text":"<p>\u91cd\u6784\u7b56\u7565\u9009\u62e9</p> <pre><code>flowchart TD\n    A[\u53d1\u73b0\u5faa\u73af\u4f9d\u8d56] --&gt; B{\u4f9d\u8d56\u6027\u8d28\u5206\u6790}\n    B --&gt;|\u529f\u80fd\u4f9d\u8d56| C[\u5f15\u5165\u62bd\u8c61\u63a5\u53e3]\n    B --&gt;|\u6570\u636e\u4f9d\u8d56| D[\u521b\u5efa\u4e2d\u4ecb\u5bf9\u8c61]\n    B --&gt;|\u65f6\u5e8f\u4f9d\u8d56| E[\u5e94\u7528\u4f9d\u8d56\u53cd\u8f6c]\n</code></pre> <p>\u91cd\u6784\u540e\u4ee3\u7801\uff08\u4f7f\u7528\u63a5\u53e3\u89e3\u8026\uff09</p> <pre><code>// File: IPermissionValidator.h\uff08\u62bd\u8c61\u63a5\u53e3\uff09\n#pragma once\nclass IPermissionValidator {\npublic:\n    virtual bool validate() const = 0;\n    virtual ~IPermissionValidator() = default;\n};\n\n// File: User.h\uff08\u4ec5\u4f9d\u8d56\u63a5\u53e3\uff09\n#pragma once\n#include \"IPermissionValidator.h\"\n\nclass User : public IPermissionValidator {\n    // \u79fb\u9664Role\u7684\u76f4\u63a5\u4f9d\u8d56\npublic:\n    bool validate() const override;\n};\n\n// File: Role.h\uff08\u72ec\u7acb\u5b9e\u73b0\uff09\n#pragma once\n#include &lt;vector&gt;\n\nclass Role {\n    std::vector&lt;IPermissionValidator*&gt; m_validators;\npublic:\n    void addValidator(IPermissionValidator* validator);\n};\n</code></pre> <p>\u91cd\u6784\u540e\u7ed3\u6784\u56fe\uff1a</p> <pre><code>graph TD\n    A[User] --&gt;|\u5b9e\u73b0| I[IPermissionValidator]\n    B[Role] --&gt;|\u4f7f\u7528| I\n</code></pre> <p>\u5173\u952e\u91cd\u6784\u6b65\u9aa4\u5206\u6790</p> <p>1 \u63a5\u53e3\u63d0\u53d6</p> <ul> <li>\u521b\u5efa\u62bd\u8c61\u63a5\u53e3\u9694\u79bb\u5177\u4f53\u5b9e\u73b0</li> <li>\u4f7f\u7528\u7eaf\u865a\u51fd\u6570\u5b9a\u4e49\u516c\u5171\u5951\u7ea6</li> </ul> <p>2 \u4f9d\u8d56\u53cd\u8f6c</p> <ul> <li>\u9ad8\u5c42\u6a21\u5757\u4e0d\u518d\u4f9d\u8d56\u5e95\u5c42\u5b9e\u73b0</li> <li>\u901a\u8fc7\u62bd\u8c61\u63a5\u53e3\u8fdb\u884c\u95f4\u63a5\u901a\u4fe1</li> </ul> <p>3 \u751f\u547d\u5468\u671f\u7ba1\u7406</p> <ul> <li>\u4f7f\u7528\u667a\u80fd\u6307\u9488\u66ff\u4ee3\u539f\u59cb\u6307\u9488</li> <li>\u5f15\u5165\u5de5\u5382\u6a21\u5f0f\u521b\u5efa\u5bf9\u8c61</li> </ul>"},{"location":"technology/Cpp/043-CodeSmellCyclicDependencies/#_3","title":"\u56db\u3001\u65b9\u6848\u6548\u679c\u5bf9\u6bd4","text":"\u6307\u6807 \u91cd\u6784\u524d \u91cd\u6784\u540e \u7f16\u8bd1\u65f6\u95f4 2.3s\uff08\u5faa\u73af\u62a5\u9519\uff09 1.1s\uff08\u72ec\u7acb\u7f16\u8bd1\uff09 \u5355\u5143\u6d4b\u8bd5\u8986\u76d6\u7387 58% 92% \u529f\u80fd\u6269\u5c55\u6210\u672c \u9ad8\uff08\u9700\u4fee\u6539\u53cc\u7c7b\uff09 \u4f4e\uff08\u65b0\u589e\u5b9e\u73b0\u7c7b\uff09 \u5185\u5b58\u6cc4\u6f0f\u6b21\u6570 3\u6b21/\u5343\u6b21\u8fd0\u884c 0\u6b21"},{"location":"technology/Cpp/043-CodeSmellCyclicDependencies/#_4","title":"\u4e94\u3001\u9884\u9632\u5faa\u73af\u4f9d\u8d56\u7684\u6700\u4f73\u5b9e\u8df5","text":"<p>\u5206\u5c42\u67b6\u6784\u8bbe\u8ba1\uff08\u53c2\u8003\u7684\u6a21\u5757\u5212\u5206\uff09\uff1a</p> <pre><code>graph TD\n    P[Presentation] --&gt; B[Business]\n    B --&gt; D[Data]\n    D -.-&gt;|\u5355\u5411\u4f9d\u8d56| B\n</code></pre> <p>\u4f9d\u8d56\u68c0\u6d4b\u5de5\u5177\u94fe\uff1a</p> <ul> <li>\u4f7f\u7528C/C++\u7684include-what-you-use\u5de5\u5177</li> <li>\u914d\u7f6e\u9759\u6001\u5206\u6790\uff08Clang-Tidy\uff09</li> <li>\u751f\u6210\u4f9d\u8d56\u5173\u7cfb\u56fe\uff08Doxygen\uff09</li> </ul> <p>\u8bbe\u8ba1\u6a21\u5f0f\u5e94\u7528\uff1a</p> <ul> <li>\u89c2\u5bdf\u8005\u6a21\u5f0f\u89e3\u8026\u5bf9\u8c61\u901a\u77e5</li> <li>\u4e2d\u4ecb\u8005\u6a21\u5f0f\u96c6\u4e2d\u4ea4\u4e92\u903b\u8f91</li> <li>\u62bd\u8c61\u5de5\u5382\u9694\u79bb\u5177\u4f53\u5b9e\u73b0</li> </ul> <p>\u793a\u4f8b\u5de5\u5177\u8f93\u51fa\uff1a</p> <pre><code>$ include-what-you-use User.cpp \nFound cyclic dependency between User.h and Role.h\nSuggestions: Introduce interface abstraction\n</code></pre> <p>\u901a\u8fc7\u7cfb\u7edf\u5316\u7684\u4f9d\u8d56\u7ba1\u7406\u548c\u67b6\u6784\u8bbe\u8ba1\uff0c\u53ef\u4ee5\u6709\u6548\u9884\u9632\u548c\u6d88\u9664\u5faa\u73af\u4f9d\u8d56\u95ee\u9898\uff0c\u63d0\u5347\u4ee3\u7801\u7684\u53ef\u7ef4\u62a4\u6027\u548c\u6269\u5c55\u6027\u3002\u5efa\u8bae\u5728\u6301\u7eed\u96c6\u6210\u6d41\u7a0b\u4e2d\u52a0\u5165\u4f9d\u8d56\u5173\u7cfb\u68c0\u67e5\uff08\u53c2\u8003\u7684\u8d28\u91cf\u4fdd\u969c\u65b9\u6848\uff09\uff0c\u786e\u4fdd\u4ee3\u7801\u5e93\u7684\u5065\u5eb7\u6f14\u8fdb\u3002</p>"},{"location":"technology/Cpp/043-CodeSmellCyclicDependencies/#_5","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>Github</p>"},{"location":"technology/Cpp/044-CodeSmellDataClass/","title":"\u4ee3\u7801\u5473\u9053-\u6570\u636e\u7c7b","text":"<p>\u4ee3\u7801\u574f\u5473\u9053\uff1aData Class \u7684\u6df1\u5ea6\u89e3\u6790\u4e0e\u91cd\u6784\u5b9e\u8df5</p>"},{"location":"technology/Cpp/044-CodeSmellDataClass/#data-class","title":"\u4e00\u3001Data Class \u7684\u5b9a\u4e49\u4e0e\u7279\u5f81","text":"<p>Data Class\uff08\u6570\u636e\u7c7b\uff09\u662f\u6307\u4ec5\u5305\u542b\u6570\u636e\u5b57\u6bb5\u548c\u7b80\u5355\u8bbf\u95ee\u65b9\u6cd5\uff08\u5982getter/setter\uff09\uff0c\u7f3a\u4e4f\u4e1a\u52a1\u903b\u8f91\u548c\u804c\u8d23\u7684\u7c7b\u3002\u5b83\u672c\u8d28\u4e0a\u662f\"\u54d1\u6570\u636e\u5bb9\u5668\"\uff0c\u5e38\u89c1\u4e8e\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e2d\uff0c\u8868\u73b0\u4e3a\u4ee5\u4e0b\u7279\u5f81\uff1a</p> <ul> <li>\u4ec5\u6709\u6570\u636e\u5b58\u50a8\uff1a\u4ec5\u5305\u542b\u5b57\u6bb5\u5b9a\u4e49\u548c\u57fa\u7840\u8bfb\u5199\u65b9\u6cd5</li> <li>\u65e0\u884c\u4e3a\u903b\u8f91\uff1a\u4e0d\u5305\u542b\u6570\u636e\u9a8c\u8bc1\u3001\u8ba1\u7b97\u7b49\u4e1a\u52a1\u65b9\u6cd5</li> <li>\u4f4e\u5185\u805a\u9ad8\u8026\u5408\uff1a\u5176\u4ed6\u7c7b\u9700\u76f4\u63a5\u64cd\u4f5c\u5176\u5185\u90e8\u6570\u636e</li> <li>\u96c6\u5408\u7ba1\u7406\u7f3a\u9677\uff1a\u82e5\u5305\u542b\u5bb9\u5668\u7c7b\u5b57\u6bb5\uff08\u5982\u5217\u8868/\u5b57\u5178\uff09\uff0c\u5e38\u7f3a\u4e4f\u5c01\u88c5</li> </ul>"},{"location":"technology/Cpp/044-CodeSmellDataClass/#c-data-class","title":"\u4e8c\u3001C++ \u4e2d\u7684 Data Class \u5b9e\u4f8b\u6f14\u793a","text":"<p>\u91cd\u6784\u524d\u7684\u95ee\u9898\u4ee3\u7801</p> <pre><code>// \u7eaf\u6570\u636e\u7c7b\u793a\u4f8b \nclass StudentRecord {\npublic:\n    std::string name;\n    std::vector&lt;int&gt; scores;\n\n    StudentRecord(std::string n, std::vector&lt;int&gt; s) \n        : name(n), scores(s) {}\n};\n\n// \u5916\u90e8\u4e1a\u52a1\u903b\u8f91 \nclass GradeCalculator {\npublic:\n    float calculateAverage(const StudentRecord&amp; record) {\n        if(record.scores.empty())  return 0.0f;\n        int sum = 0;\n        for(int score : record.scores)  {\n            sum += score;\n        }\n        return static_cast&lt;float&gt;(sum) / record.scores.size(); \n    }\n};\n</code></pre> <p>\u4e3b\u8981\u95ee\u9898\u5206\u6790 StudentRecord \u4ec5\u4f5c\u4e3a\u6570\u636e\u5bb9\u5668\u5b58\u5728 \u6838\u5fc3\u4e1a\u52a1\u903b\u8f91\uff08\u5e73\u5747\u5206\u8ba1\u7b97\uff09\u5916\u7f6e\u4e8e\u5176\u4ed6\u7c7b scores\u5b57\u6bb5\u76f4\u63a5\u66b4\u9732\uff0c\u8fdd\u53cd\u5c01\u88c5\u539f\u5219</p>"},{"location":"technology/Cpp/044-CodeSmellDataClass/#_1","title":"\u4e09\u3001\u91cd\u6784\u89e3\u51b3\u65b9\u6848\u4e0e\u8fc7\u7a0b","text":"<p>\u91cd\u6784\u6d41\u7a0b\u56fe</p> <pre><code>graph TD \n    A[\u8bc6\u522bData Class] --&gt; B[\u5206\u6790\u6570\u636e\u64cd\u4f5c\u70b9]\n    B --&gt; C{\u64cd\u4f5c\u7c7b\u578b}\n    C --&gt;|\u8ba1\u7b97\u903b\u8f91| D[Move Method\u5230\u6570\u636e\u7c7b]\n    C --&gt;|\u96c6\u5408\u64cd\u4f5c| E[Encapsulate Collection]\n    C --&gt;|\u5b57\u6bb5\u8bbf\u95ee| F[Hide Field]\n    D --&gt; G[\u9a8c\u8bc1\u5185\u805a\u6027\u63d0\u5347]\n</code></pre> <p>\u91cd\u6784\u540e\u4f18\u5316\u4ee3\u7801</p> <pre><code>class Student {\nprivate:\n    std::string name;\n    std::vector&lt;int&gt; scores;\n\npublic:\n    Student(std::string n, std::vector&lt;int&gt; s) \n        : name(std::move(n)), scores(std::move(s)) {}\n\n    // \u5c01\u88c5\u96c6\u5408\u64cd\u4f5c \n    void addScore(int score) {\n        scores.push_back(score); \n    }\n\n    // \u5185\u805a\u4e1a\u52a1\u903b\u8f91 \n    float calculateAverage() const {\n        if(scores.empty())  return 0.0f;\n        return std::accumulate(scores.begin(),  scores.end(),  0.0f) / scores.size(); \n    }\n\n    // \u53d7\u63a7\u8bbf\u95ee\u65b9\u6cd5 \n    const std::string&amp; getName() const { return name; }\n};\n</code></pre>"},{"location":"technology/Cpp/044-CodeSmellDataClass/#_2","title":"\u56db\u3001\u5173\u952e\u91cd\u6784\u6b65\u9aa4\u89e3\u6790","text":"<ol> <li>\u5c01\u88c5\u96c6\u5408\u5b57\u6bb5</li> </ol> <pre><code>+ void addScore(int score) {\n+     scores.push_back(score); \n+ }\n</code></pre> <p>\u89e3\u51b3\u601d\u8def\uff1a\u901a\u8fc7\u65b9\u6cd5\u63a7\u5236\u96c6\u5408\u4fee\u6539\uff0c\u907f\u514d\u76f4\u63a5\u64cd\u4f5c\u5bb9\u5668</p> <ol> <li>\u642c\u79fb\u4e1a\u52a1\u903b\u8f91</li> </ol> <pre><code>float calculateAverage() const {\n    // \u8ba1\u7b97\u903b\u8f91\u5185\u805a\u5230\u6570\u636e\u7c7b\n}\n</code></pre> <p>\u91cd\u6784\u6280\u672f\uff1a\u5e94\u7528Move Method\u6a21\u5f0f</p> <ol> <li>\u8bbf\u95ee\u63a7\u5236\u4f18\u5316</li> </ol> <pre><code>- std::string name;\n+ private:\n+    std::string name;\n</code></pre> <p>\u8bbe\u8ba1\u539f\u5219\uff1a\u9075\u5faa\u6700\u5c0f\u516c\u5f00\u539f\u5219</p>"},{"location":"technology/Cpp/044-CodeSmellDataClass/#_3","title":"\u4e94\u3001\u91cd\u6784\u6548\u679c\u5bf9\u6bd4","text":"\u6307\u6807 \u91cd\u6784\u524d \u91cd\u6784\u540e \u7c7b\u804c\u8d23 \u5355\u7eaf\u6570\u636e\u5b58\u50a8 \u6570\u636e+\u4e1a\u52a1\u805a\u5408 \u65b9\u6cd5\u8c03\u7528\u6b21\u6570 \u5916\u90e8\u7c7b\u591a\u6b21\u8c03\u7528 \u5355\u70b9\u8c03\u7528 \u4fee\u6539\u5f71\u54cd\u8303\u56f4 \u9700\u4fee\u6539\u591a\u5904\u8c03\u7528\u70b9 \u4ec5\u4fee\u6539\u7c7b\u5185\u90e8\u5b9e\u73b0 \u5355\u5143\u6d4b\u8bd5\u96be\u5ea6 \u9700mock\u5916\u90e8\u4f9d\u8d56 \u81ea\u5305\u542b\u53ef\u6d4b\u8bd5"},{"location":"technology/Cpp/044-CodeSmellDataClass/#_4","title":"\u516d\u3001\u8bbe\u8ba1\u6a21\u5f0f\u5e94\u7528\u5efa\u8bae","text":"<ol> <li>\u7b56\u7565\u6a21\u5f0f\uff08\u8ba1\u7b97\u7b56\u7565\uff09</li> </ol> <pre><code>class ScoreStrategy {\npublic:\n    virtual float calculate(const std::vector&lt;int&gt;&amp;) = 0;\n};\n\nclass Student {\n    // \u6ce8\u5165\u4e0d\u540c\u7684\u8ba1\u7b97\u7b56\u7565...\n};\n</code></pre> <ol> <li>\u5de5\u5382\u6a21\u5f0f\uff08\u5bf9\u8c61\u6784\u5efa\uff09</li> </ol> <pre><code>class StudentFactory {\npublic:\n    static Student createFromDB(int id) {\n        // \u6570\u636e\u5e93\u67e5\u8be2\u903b\u8f91...\n    }\n};\n</code></pre>"},{"location":"technology/Cpp/044-CodeSmellDataClass/#_5","title":"\u4e03\u3001\u6700\u4f73\u5b9e\u8df5\u539f\u5219","text":"<ul> <li>\u5355\u4e00\u804c\u8d23\u539f\u5219\uff1a\u6bcf\u4e2a\u7c7b\u5e94\u4e13\u6ce8\u4e8e\u5355\u4e00\u529f\u80fd\u57df</li> <li>\u8fea\u7c73\u7279\u6cd5\u5219\uff1a\u5bf9\u8c61\u5e94\u6700\u5c0f\u5316\u5bf9\u5176\u4ed6\u5bf9\u8c61\u7684\u4e86\u89e3</li> <li>\u5f00\u95ed\u539f\u5219\uff1a\u901a\u8fc7\u6269\u5c55\u800c\u975e\u4fee\u6539\u5b9e\u73b0\u529f\u80fd\u53d8\u66f4</li> <li>\u7ec4\u5408\u4f18\u4e8e\u7ee7\u627f\uff1a\u4f7f\u7528\u7ec4\u5408\u5c01\u88c5\u6570\u636e\u884c\u4e3a</li> </ul> <p>\u901a\u8fc7\u7cfb\u7edf\u5316\u7684\u91cd\u6784\u8fc7\u7a0b\uff0cData Class\u53ef\u8f6c\u53d8\u4e3a\u5177\u5907\u4e1a\u52a1\u80fd\u529b\u7684\u6210\u719f\u5bf9\u8c61\u3002\u5efa\u8bae\u5728\u4ee3\u7801\u5ba1\u67e5\u9636\u6bb5\u4f7f\u7528SonarQube\u7b49\u9759\u6001\u5206\u6790\u5de5\u5177\u68c0\u6d4b\u6b64\u7c7b\u574f\u5473\u9053\uff0c\u7ed3\u5408\u6301\u7eed\u91cd\u6784\u4fdd\u6301\u4ee3\u7801\u5065\u5eb7\u5ea6\u3002</p>"},{"location":"technology/Cpp/045-CodeSmellDataClumps/","title":"\u4ee3\u7801\u5473\u9053-\u6570\u636e\u6ce5\u56e2","text":"<p>\u4ee3\u7801\u5473\u9053\u4e4bData Clumps\uff1a\u6570\u636e\u6ce5\u56e2\u7684\u8bc6\u522b\u4e0e\u91cd\u6784\u5b9e\u8df5</p>"},{"location":"technology/Cpp/045-CodeSmellDataClumps/#_1","title":"\u4e00\u3001\u5b9a\u4e49\u4e0e\u7279\u5f81","text":"<p>Data Clumps\uff08\u6570\u636e\u6ce5\u56e2\uff09\u662f\u4ee3\u7801\u5f02\u5473\u4e2d\u7684\u4e00\u79cd\u5178\u578b\u8868\u73b0\uff0c\u6307\u4e00\u7ec4\u6570\u636e\u5143\u7d20\uff08\u53d8\u91cf\u3001\u53c2\u6570\u7b49\uff09\u9891\u7e41\u5728\u591a\u4e2a\u5730\u65b9\u6210\u7ec4\u51fa\u73b0\uff0c\u4f46\u672a\u88ab\u5c01\u88c5\u4e3a\u72ec\u7acb\u5bf9\u8c61\u3002\u5176\u6838\u5fc3\u7279\u5f81\u5305\u62ec\uff1a</p> <ul> <li>\u53c2\u6570\u8026\u5408\uff1a\u591a\u4e2a\u53c2\u6570\u603b\u662f\u4e00\u8d77\u4f20\u9012\uff08\u5982 void processOrder(int orderId, string userId, double amount, Date date) \uff09</li> <li>\u6210\u5458\u53d8\u91cf\u6563\u843d\uff1a\u591a\u4e2a\u7c7b\u4e2d\u5b58\u5728\u91cd\u590d\u7684\u53d8\u91cf\u7ec4\u5408\uff08\u5982\u8ba2\u5355\u53f7+\u7528\u6237ID+\u91d1\u989d\uff09</li> <li>\u903b\u8f91\u5206\u6563\uff1a\u5bf9\u6570\u636e\u7684\u64cd\u4f5c\u5206\u6563\u5728\u591a\u4e2a\u51fd\u6570\u4e2d</li> </ul>"},{"location":"technology/Cpp/045-CodeSmellDataClumps/#c","title":"\u4e8c\u3001C++\u793a\u4f8b\u4ee3\u7801\u6f14\u793a","text":"<p>\u95ee\u9898\u4ee3\u7801\uff08Data Clumps\u5b58\u5728\uff09</p> <pre><code>// \u8ba2\u5355\u5904\u7406\u7c7b\nclass OrderProcessor {\npublic:\n    void createOrder(int orderId, string userId, double amount, Date date) {\n        validateOrder(orderId, userId, amount, date);\n        saveToDatabase(orderId, userId, amount, date);\n    }\n\n    void updateOrder(int orderId, string userId, double amount, Date date) {\n        // \u91cd\u590d\u7684\u53c2\u6570\u7ec4\u5408 \n        checkUserCredit(userId, amount);\n        updateDatabase(orderId, userId, amount, date);\n    }\n\nprivate:\n    void validateOrder(int orderId, string userId, double amount, Date date) {\n        // \u9a8c\u8bc1\u903b\u8f91 \n    }\n};\n</code></pre> <p>\u91cd\u6784\u540e\u4ee3\u7801\uff08Data Clumps\u6d88\u9664\uff09</p> <pre><code>// \u5c01\u88c5\u8ba2\u5355\u6570\u636e \nstruct OrderData {\n    int orderId;\n    string userId;\n    double amount;\n    Date date;\n\n    bool isValid() const {\n        // \u96c6\u4e2d\u5f0f\u9a8c\u8bc1\u903b\u8f91 \n        return orderId &gt; 0 &amp;&amp; !userId.empty()  &amp;&amp; amount &gt; 0;\n    }\n};\n\n// \u91cd\u6784\u540e\u7684\u8ba2\u5355\u5904\u7406\u7c7b\nclass OrderProcessor {\npublic:\n    void createOrder(const OrderData&amp; data) {\n        if (data.isValid())  {\n            saveToDatabase(data);\n        }\n    }\n\n    void updateOrder(const OrderData&amp; data) {\n        checkUserCredit(data.userId,  data.amount); \n        updateDatabase(data);\n    }\n\nprivate:\n    void saveToDatabase(const OrderData&amp; data) {\n        // \u6570\u636e\u5e93\u64cd\u4f5c \n    }\n};\n</code></pre>"},{"location":"technology/Cpp/045-CodeSmellDataClumps/#_2","title":"\u4e09\u3001\u91cd\u6784\u8fc7\u7a0b\u5206\u6790","text":""},{"location":"technology/Cpp/045-CodeSmellDataClumps/#1","title":"1. \u8bc6\u522b\u6570\u636e\u6ce5\u56e2","text":"<p>\u901a\u8fc7\u4ee5\u4e0b\u7ebf\u7d22\u53d1\u73b0Data Clumps\uff1a - \u53c2\u6570\u5217\u8868\u5197\u957f\uff1a<code>createOrder</code>\u548c<code>updateOrder</code>\u5747\u4f20\u90124\u4e2a\u53c2\u6570  - \u91cd\u590d\u53c2\u6570\u7ec4\u5408\uff1a<code>userId</code>\u548c<code>amount</code>\u5728\u591a\u4e2a\u51fd\u6570\u4e2d\u6210\u7ec4\u51fa\u73b0  - \u9a8c\u8bc1\u903b\u8f91\u5206\u6563\uff1a\u8ba2\u5355\u6709\u6548\u6027\u9a8c\u8bc1\u5206\u5e03\u5728\u591a\u4e2a\u51fd\u6570\u4e2d</p>"},{"location":"technology/Cpp/045-CodeSmellDataClumps/#2","title":"2. \u5c01\u88c5\u7b56\u7565","text":"<p>\u91c7\u7528Introduce Parameter Object\uff08\u5f15\u5165\u53c2\u6570\u5bf9\u8c61\uff09\u6a21\u5f0f\uff1a 1. \u521b\u5efa<code>OrderData</code>\u7ed3\u6784\u4f53\u5c01\u88c5\u76f8\u5173\u5b57\u6bb5  2. \u5c06\u5206\u6563\u7684\u9a8c\u8bc1\u903b\u8f91\u8fc1\u79fb\u81f3<code>OrderData</code>\u7684<code>isValid()</code>\u65b9\u6cd5  3. \u4fee\u6539\u51fd\u6570\u53c2\u6570\u4e3a<code>OrderData</code>\u5bf9\u8c61 </p>"},{"location":"technology/Cpp/045-CodeSmellDataClumps/#3","title":"3. \u6539\u8fdb\u6548\u679c","text":"\u6307\u6807 \u91cd\u6784\u524d \u91cd\u6784\u540e \u51fd\u6570\u53c2\u6570\u6570\u91cf 4 1 \u91cd\u590d\u4ee3\u7801\u91cf 3\u5904 0 \u7ef4\u62a4\u6210\u672c \u9ad8 \u4f4e \u6269\u5c55\u6027 \u5dee \u4f18"},{"location":"technology/Cpp/045-CodeSmellDataClumps/#_3","title":"\u56db\u3001\u89e3\u51b3\u65b9\u6848\u603b\u7ed3","text":""},{"location":"technology/Cpp/045-CodeSmellDataClumps/#1_1","title":"1. \u6838\u5fc3\u539f\u5219","text":"<ul> <li>\u5355\u4e00\u804c\u8d23\uff1a\u6570\u636e\u64cd\u4f5c\u4e0e\u4e1a\u52a1\u903b\u8f91\u5206\u79bb </li> <li>\u5c01\u88c5\u6027\uff1a\u901a\u8fc7\u5bf9\u8c61\u9690\u85cf\u6570\u636e\u7ec6\u8282 </li> <li>DRY\u539f\u5219\uff1a\u6d88\u9664\u91cd\u590d\u53c2\u6570\u7ec4\u5408 </li> </ul>"},{"location":"technology/Cpp/045-CodeSmellDataClumps/#2_1","title":"2. \u5b9e\u8df5\u6b65\u9aa4","text":"<ol> <li>\u8bc6\u522b\u6ce5\u56e2\uff1a\u901a\u8fc7\u53c2\u6570\u5217\u8868\u3001\u6210\u5458\u53d8\u91cf\u5206\u5e03\u5b9a\u4f4d </li> <li>\u521b\u5efa\u5bf9\u8c61\uff1a\u5c06\u76f8\u5173\u6570\u636e\u5c01\u88c5\u4e3a\u72ec\u7acb\u7c7b/\u7ed3\u6784\u4f53</li> <li>\u8fc1\u79fb\u903b\u8f91\uff1a\u5c06\u5173\u8054\u64cd\u4f5c\u8fc1\u79fb\u5230\u65b0\u5bf9\u8c61\u4e2d</li> <li>\u4fee\u6539\u63a5\u53e3\uff1a\u8c03\u6574\u51fd\u6570\u53c2\u6570\u4e3a\u65b0\u5bf9\u8c61\u7c7b\u578b </li> </ol>"},{"location":"technology/Cpp/045-CodeSmellDataClumps/#3_1","title":"3. \u5de5\u5177\u8f85\u52a9","text":"<ul> <li>\u9759\u6001\u5206\u6790\u5de5\u5177\uff1aSonarQube\u53ef\u68c0\u6d4b\u957f\u53c2\u6570\u5217\u8868</li> <li>IDE\u91cd\u6784\u529f\u80fd\uff1a\u5229\u7528Extract Class\u7b49\u91cd\u6784\u64cd\u4f5c </li> </ul>"},{"location":"technology/Cpp/045-CodeSmellDataClumps/#_4","title":"\u4e94\u3001\u6269\u5c55\u601d\u8003","text":"<p>\u5f53\u6570\u636e\u6ce5\u56e2\u6d89\u53ca\u8de8\u7c7b\u64cd\u4f5c\u65f6\uff0c\u53ef\u8fdb\u4e00\u6b65\u91c7\u7528Domain-Driven Design\uff08\u9886\u57df\u9a71\u52a8\u8bbe\u8ba1\uff09\u6a21\u5f0f\uff0c\u4f8b\u5982\uff1a</p> <pre><code>// \u9886\u57df\u5bf9\u8c61\u8bbe\u8ba1 \nclass Order {\nprivate:\n    OrderData data;\n    BillingService billing;\n\npublic:\n    void placeOrder() {\n        if (data.isValid())  {\n            billing.processPayment(data.amount); \n            saveToRepository();\n        }\n    }\n};\n</code></pre> <p>\u901a\u8fc7\u8fd9\u79cd\u8bbe\u8ba1\uff0c\u6570\u636e\u6ce5\u56e2\u4e0d\u4ec5\u88ab\u5c01\u88c5\uff0c\u8fd8\u4e0e\u4e1a\u52a1\u903b\u8f91\u5f62\u6210\u6709\u673a\u6574\u4f53\uff0c\u7b26\u5408\u9ad8\u5185\u805a\u4f4e\u8026\u5408\u7684\u8bbe\u8ba1\u539f\u5219\u3002 </p>"},{"location":"technology/Cpp/047-CodeSmellDataModule/","title":"\u4ee3\u7801\u5473\u9053-\u6570\u636e\u6a21\u5757","text":"<p>\u4ee5\u4e0b\u662f\u5173\u4e8e\u4ee3\u7801\u574f\u5473\u9053-Data Module\uff08\u6570\u636e\u6a21\u5757\uff09\u7684\u6280\u672f\u89e3\u6790\u4e0e\u5b9e\u8df5\u6307\u5357\uff0c\u5305\u542b\u5b9a\u4e49\u3001\u7279\u5f81\u5206\u6790\u3001\u91cd\u6784\u65b9\u6848\u53ca\u5b8c\u6574\u7684C++\u4ee3\u7801\u793a\u4f8b\uff1a</p> <p>\u4e00\u3001Data Module \u7684\u5b9a\u4e49\u4e0e\u6838\u5fc3\u7279\u5f81 1. \u5b9a\u4e49 Data Module\uff08\u53c8\u79f0\u6570\u636e\u6a21\u5757\uff09\u662f\u4e00\u79cd\u5178\u578b\u7684\u4ee3\u7801\u574f\u5473\u9053\uff0c\u8868\u73b0\u4e3a\u4ec5\u5305\u542b\u6570\u636e\u5b57\u6bb5\u548c\u7b80\u5355\u8bbf\u95ee\u65b9\u6cd5\uff08\u5982 getter/setter\uff09\uff0c\u5374\u7f3a\u4e4f\u4e1a\u52a1\u903b\u8f91\u548c\u804c\u8d23\u7684\u7c7b\u3002\u5b83\u672c\u8d28\u4e0a\u662f\u201c\u54d1\u6570\u636e\u5bb9\u5668\u201d\uff0c\u8fdd\u80cc\u4e86\u9762\u5411\u5bf9\u8c61\u8bbe\u8ba1\u4e2d\u201c\u6570\u636e\u4e0e\u884c\u4e3a\u7ed1\u5b9a\u201d\u7684\u539f\u5219\u3002</p> <ol> <li>\u7279\u5f81\u4e0e\u95ee\u9898</li> </ol> \u7279\u5f81 \u95ee\u9898\u5206\u6790 \u6570\u636e\u66b4\u9732 \u5b57\u6bb5\u516c\u5f00\u6216\u4ec5\u901a\u8fc7 getter/setter \u66b4\u9732\uff0c\u7834\u574f\u5c01\u88c5\u6027\u3002 \u884c\u4e3a\u7f3a\u5931 \u65e0\u4e1a\u52a1\u903b\u8f91\u65b9\u6cd5\uff0c\u64cd\u4f5c\u6570\u636e\u7684\u903b\u8f91\u6563\u843d\u5728\u5176\u4ed6\u7c7b\u4e2d\uff08\u4f9d\u604b\u60c5\u7ed3\uff09\u3002 \u9ad8\u8026\u5408\u6027 \u5916\u90e8\u7c7b\u9891\u7e41\u8bbf\u95ee\u5176\u5b57\u6bb5\uff0c\u4fee\u6539\u6570\u636e\u7ed3\u6784\u9700\u540c\u6b65\u4fee\u6539\u591a\u5904\u3002 \u8d2b\u8840\u6a21\u578b \u5bfc\u81f4\u7cfb\u7edf\u8bbe\u8ba1\u4e3a\u201c\u8d2b\u8840\u57df\u6a21\u578b\u201d\uff0c\u6570\u636e\u4e0e\u884c\u4e3a\u5206\u79bb\u3002 <p>\u4e8c\u3001\u91cd\u6784\u89e3\u51b3\u65b9\u6848 \u91cd\u6784\u539f\u5219\uff1a\u5c01\u88c5\u6570\u636e + \u642c\u79fb\u884c\u4e3a 1. \u5c01\u88c5\u5b57\u6bb5\uff08Encapsulate Field\uff09 \u5c06\u5b57\u6bb5\u8bbe\u4e3a\u79c1\u6709\uff0c\u901a\u8fc7\u65b9\u6cd5\u63a7\u5236\u8bbf\u95ee\u3002 2. \u642c\u79fb\u51fd\u6570\uff08Move Method\uff09 \u5c06\u4e0e\u6570\u636e\u7d27\u5bc6\u76f8\u5173\u7684\u903b\u8f91\u79fb\u5165\u6570\u636e\u6a21\u5757\u4e2d\u3002 3. \u79fb\u9664\u8bbe\u503c\u51fd\u6570\uff08Remove Setting Method\uff09 \u5bf9\u4e0d\u5e94\u5916\u90e8\u4fee\u6539\u7684\u5b57\u6bb5\u79fb\u9664 setter\u3002</p> <p>\u4e09\u3001C++ \u793a\u4f8b\uff1a\u91cd\u6784\u524d\u540e\u5bf9\u6bd4 \u91cd\u6784\u524d\uff1a\u5178\u578b\u7684 Data Module</p> <pre><code>// EmployeeData.h\uff08\u6570\u636e\u6a21\u5757\uff09\nclass EmployeeData {\npublic:\n    std::string name;\n    int age;\n    double salary;\n};\n\n// \u4e1a\u52a1\u903b\u8f91\u6563\u843d\u5728\u5916\u90e8\u7c7b\nclass ReportGenerator {\npublic:\n    void generateReport(const EmployeeData&amp; emp) {\n        std::cout &lt;&lt; \"Name: \" &lt;&lt; emp.name  \n                  &lt;&lt; \", Age: \" &lt;&lt; emp.age  \n                  &lt;&lt; \", Salary: $\" &lt;&lt; emp.salary; \n    }\n};\n</code></pre> <p>\u95ee\u9898\u5206\u6790\uff1a</p> <p>EmployeeData \u4ec5\u6709\u6570\u636e\u5b57\u6bb5\uff0c\u65e0\u884c\u4e3a\u903b\u8f91\u3002 generateReport \u65b9\u6cd5\u5728\u5916\u90e8\u7c7b\u4e2d\uff0c\u76f4\u63a5\u8bbf\u95ee EmployeeData \u7684\u5185\u90e8\u5b57\u6bb5\uff08\u4f9d\u604b\u60c5\u7ed3\uff09\u3002 \u91cd\u6784\u540e\uff1a\u5185\u805a\u884c\u4e3a\u7684\u6570\u636e\u6a21\u5757</p> <pre><code>// Employee.h\uff08\u5c01\u88c5\u6570\u636e\u4e0e\u884c\u4e3a\uff09\nclass Employee {\nprivate:  // \u5c01\u88c5\u5b57\u6bb5\n    std::string name;\n    int age;\n    double salary;\n\npublic:\n    Employee(std::string name, int age, double salary) \n        : name(std::move(name)), age(age), salary(salary) {}\n\n    // \u642c\u79fb\u884c\u4e3a\u5230\u6570\u636e\u6a21\u5757\n    void generateReport() const {\n        std::cout &lt;&lt; \"Name: \" &lt;&lt; name \n                  &lt;&lt; \", Age: \" &lt;&lt; age \n                  &lt;&lt; \", Salary: $\" &lt;&lt; salary;\n    }\n\n    // \u53ea\u8bfb\u8bbf\u95ee\uff08\u79fb\u9664\u4e0d\u5fc5\u8981\u7684setter\uff09\n    std::string getName() const { return name; }\n    double getSalary() const { return salary; }\n};\n</code></pre> <p>\u4f18\u5316\u70b9\uff1a</p> <p>\u5b57\u6bb5\u79c1\u6709\u5316\uff0c\u901a\u8fc7\u6784\u9020\u51fd\u6570\u521d\u59cb\u53167\uff1b \u4e1a\u52a1\u903b\u8f91 generateReport \u5185\u805a\u5230\u7c7b\u4e2d\uff1b \u79fb\u9664 age \u7684 setter\uff0c\u907f\u514d\u968f\u610f\u4fee\u6539\u3002</p> <p>\u56db\u3001\u91cd\u6784\u8fc7\u7a0b\u6d41\u7a0b\u56fe</p> <pre><code>graph TD\n    A[\u8bc6\u522bData Module] --&gt; B{\u68c0\u67e5\u5b57\u6bb5\u66b4\u9732}\n    B --&gt;|\u5b57\u6bb5\u516c\u5f00| C[\u5c01\u88c5\u5b57\u6bb5\u4e3a\u79c1\u6709]\n    B --&gt;|\u4f9d\u8d56\u5916\u90e8\u903b\u8f91| D[\u67e5\u627e\u4f9d\u604b\u60c5\u7ed3\u65b9\u6cd5]\n    D --&gt; E[\u642c\u79fb\u65b9\u6cd5\u5230\u6570\u636e\u6a21\u5757]\n    C --&gt; F[\u79fb\u9664\u4e0d\u5fc5\u8981setter]\n    E --&gt; G[\u9a8c\u8bc1\u884c\u4e3a\u5185\u805a\u6027]\n    G --&gt; H[\u91cd\u6784\u5b8c\u6210]\n</code></pre> <p>\u4e94\u3001\u7c7b\u7ed3\u6784\u53d8\u5316\u56fe \u91cd\u6784\u524d\u7ed3\u6784</p> <pre><code>classDiagram \n    class EmployeeData {\n        +string name \n        +int age\n        +double salary \n    }\n    class ReportGenerator {\n        +generateReport(EmployeeData)\n    }\n    EmployeeData &lt;.. ReportGenerator : \u4f9d\u8d56 \n</code></pre> <p>\u91cd\u6784\u540e\u7ed3\u6784</p> <pre><code>classDiagram\n    class Employee {\n        -string name \n        -int age\n        -double salary \n        +generateReport()\n        +getName()\n        +getSalary()\n    }\n``` }\n</code></pre> <p>\u5173\u952e\u6539\u8fdb\uff1a</p> <p>\u6570\u636e\u4e0e\u884c\u4e3a\u7ed1\u5b9a\uff0c\u6d88\u9664\u8de8\u7c7b\u4f9d\u8d56\uff1b \u7c7b\u804c\u8d23\u5355\u4e00\u5316\uff0c\u7b26\u5408\u9ad8\u5185\u805a\u539f\u5219\u3002</p> <p>\u516d\u3001\u5206\u6790\u4e0e\u603b\u7ed3 \u4e3a\u4ec0\u4e48\u91cd\u6784\u6709\u6548\uff1f 1. \u964d\u4f4e\u8026\u5408\uff1a\u5916\u90e8\u7c7b\u65e0\u9700\u611f\u77e5\u6570\u636e\u7ec6\u8282\uff1b 2. \u63d0\u9ad8\u5185\u805a\uff1a\u6570\u636e\u64cd\u4f5c\u903b\u8f91\u96c6\u4e2d\u5728\u540c\u4e00\u7c7b\u4e2d\uff1b 3. \u589e\u5f3a\u53ef\u7ef4\u62a4\u6027\uff1a\u4fee\u6539\u6570\u636e\u683c\u5f0f\u53ea\u9700\u8c03\u6574\u4e00\u4e2a\u7c7b\u3002</p> <p>\u4f55\u65f6\u4f7f\u7528 Data Module\uff1f \u4ec5\u5f53\u7c7b\u9700\u4f5c\u4e3a\u7eaf\u6570\u636e\u4f20\u8f93\u5bf9\u8c61\uff08DTO\uff09 \u65f6\uff08\u5982 API \u63a5\u53e3\u4f20\u53c2\uff09\uff0c\u53ef\u4fdd\u7559\u7b80\u5355\u7ed3\u6784\u3002\u5176\u4ed6\u573a\u666f\u5e94\u907f\u514d6\u3002</p> <p>\u6838\u5fc3\u51c6\u5219\uff1a\u9762\u5411\u5bf9\u8c61\u8bbe\u8ba1\u4e2d\uff0c\u6570\u636e\u4e0e\u64cd\u4f5c\u6570\u636e\u7684\u884c\u4e3a\u5e94\u5171\u5b58\u4e8e\u540c\u4e00\u62bd\u8c61\u5c42\u6b21\u3002</p> <p>\u5982\u9700\u5b8c\u6574\u4ee3\u7801\u6216\u6269\u5c55\u6848\u4f8b\uff0c\u53ef\u53c2\u8003\uff1a</p> <p>\u91cd\u6784\u5b9e\u8df5\uff1aData Class \u7684\u6df1\u5ea6\u89e3\u6790 \u91cd\u6784\u624b\u6cd5\uff1a\u642c\u79fb\u51fd\u6570\u4e0e\u5c01\u88c5\u5b57\u6bb5</p>"},{"location":"technology/Cpp/048-CodeSmellDistortedHierarchy/","title":"\u4ee3\u7801\u5473\u9053-\u626d\u66f2\u7684\u5c42\u6b21","text":"<p>\u4ee3\u7801\u5473\u9053-Distorted Hierarchy\uff1a\u6df1\u5165\u89e3\u6790\u4e0e\u91cd\u6784\u5b9e\u8df5 \u5f15\u8a00 \u5728\u8f6f\u4ef6\u5f00\u53d1\u4e2d\uff0c\u4ee3\u7801\u5473\u9053\uff08Code Smell\uff09 \u662f\u4ee3\u7801\u8d28\u91cf\u7684\u91cd\u8981\u8b66\u793a\u4fe1\u53f7\u3002\u5176\u4e2d\uff0cDistorted Hierarchy\uff08\u626d\u66f2\u7684\u5c42\u6b21\u7ed3\u6784\uff09 \u662f\u7ee7\u627f\u4f53\u7cfb\u8bbe\u8ba1\u4e2d\u7684\u5178\u578b\u95ee\u9898\uff0c\u5e38\u5bfc\u81f4\u4ee3\u7801\u96be\u4ee5\u7ef4\u62a4\u3001\u6269\u5c55\u548c\u7406\u89e3\u3002\u672c\u6587\u5c06\u6df1\u5165\u63a2\u8ba8\u8fd9\u4e00\u4ee3\u7801\u5473\u9053\u7684\u5b9a\u4e49\u3001\u7279\u5f81\u3001\u89e3\u51b3\u65b9\u5f0f\uff0c\u5e76\u901a\u8fc7C++\u5b8c\u6574\u793a\u4f8b\u5c55\u793a\u91cd\u6784\u8fc7\u7a0b\u3002</p>"},{"location":"technology/Cpp/048-CodeSmellDistortedHierarchy/#distorted-hierarchy","title":"\u4e00\u3001Distorted Hierarchy \u7684\u5b9a\u4e49\u4e0e\u7279\u5f81","text":"<ol> <li> <p>\u5b9a\u4e49 Distorted Hierarchy \u6307\u7ee7\u627f\u5c42\u6b21\u7ed3\u6784\u8bbe\u8ba1\u4e0d\u5408\u7406\uff0c\u5bfc\u81f4\u7c7b\u4e4b\u95f4\u7684\u5173\u7cfb\u590d\u6742\u3001\u5197\u4f59\u6216\u8fdd\u53cd\u9762\u5411\u5bf9\u8c61\u8bbe\u8ba1\u539f\u5219\uff08\u5982\u5355\u4e00\u804c\u8d23\u3001\u5f00\u95ed\u539f\u5219\uff09\u3002\u8fd9\u79cd\u95ee\u9898\u5e38\u89c1\u4e8e\u8fc7\u5ea6\u4f7f\u7528\u7ee7\u627f\u3001\u5e73\u884c\u7ee7\u627f\u4f53\u7cfb\u6216\u7ee7\u627f\u5c42\u6b21\u8fc7\u6df1\u7684\u60c5\u51b5 1\u3002</p> </li> <li> <p>\u7279\u5f81\u4e0e\u7279\u70b9 \u5e73\u884c\u7ee7\u627f\u4f53\u7cfb\uff08Parallel Inheritance Hierarchies\uff09\uff1a\u4fee\u6539\u4e00\u4e2a\u7c7b\u65f6\uff0c\u5fc5\u987b\u540c\u6b65\u4fee\u6539\u53e6\u4e00\u4e2a\u7c7b\u7684\u7ee7\u627f\u7ed3\u6784\u3002 \u8fc7\u6df1\u7684\u7ee7\u627f\u6811\uff1a\u8d85\u8fc73\u5c42\u4ee5\u4e0a\u7684\u7ee7\u627f\u5173\u7cfb\uff0c\u589e\u52a0\u7406\u89e3\u548c\u7ef4\u62a4\u6210\u672c\u3002 \u804c\u8d23\u5206\u914d\u6df7\u4e71\uff1a\u5b50\u7c7b\u4e0e\u57fa\u7c7b\u804c\u8d23\u91cd\u53e0\u6216\u903b\u8f91\u5206\u6563\u3002 \u4ee3\u7801\u5197\u4f59\uff1a\u91cd\u590d\u5b9e\u73b0\u76f8\u4f3c\u7684\u529f\u80fd\uff0c\u8fdd\u53cdDRY\u539f\u5219\u3002</p> </li> </ol>"},{"location":"technology/Cpp/048-CodeSmellDistortedHierarchy/#c","title":"\u4e8c\u3001C++ \u793a\u4f8b\uff1a\u95ee\u9898\u4ee3\u7801\u4e0e\u91cd\u6784\u5b9e\u8df5","text":"<ol> <li>\u95ee\u9898\u4ee3\u7801\uff08\u626d\u66f2\u7684\u5c42\u6b21\u7ed3\u6784\uff09 \u4ee5\u4e0b\u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a\u4e0d\u5408\u7406\u7684\u7ee7\u627f\u4f53\u7cfb\uff0c\u5305\u542b\u5e73\u884c\u7ee7\u627f\u7ed3\u6784\uff1a</li> </ol> <pre><code>// \u57fa\u7c7b\uff1a\u652f\u4ed8\u65b9\u5f0f\nclass PaymentMethod {\npublic:\n    virtual void processPayment(double amount) = 0;\n};\n\n// \u5b50\u7c7b\uff1a\u4fe1\u7528\u5361\u652f\u4ed8\nclass CreditCard : public PaymentMethod {\npublic:\n    void processPayment(double amount) override {\n        std::cout &lt;&lt; \"Processing credit card payment: $\" &lt;&lt; amount &lt;&lt; std::endl;\n    }\n};\n\n// \u5b50\u7c7b\uff1a\u652f\u4ed8\u5b9d\u652f\u4ed8\nclass Alipay : public PaymentMethod {\npublic:\n    void processPayment(double amount) override {\n        std::cout &lt;&lt; \"Processing Alipay payment: $\" &lt;&lt; amount &lt;&lt; std::endl;\n    }\n};\n\n// \u5e73\u884c\u7ee7\u627f\uff1a\u652f\u4ed8\u7f51\u5173\nclass PaymentGateway {\npublic:\n    virtual void execute(PaymentMethod* method, double amount) = 0;\n};\n\n// \u4fe1\u7528\u5361\u7f51\u5173\nclass CreditCardGateway : public PaymentGateway {\npublic:\n    void execute(PaymentMethod* method, double amount) override {\n        method-&gt;processPayment(amount); // \u4f9d\u8d56PaymentMethod\n    }\n};\n\n// \u652f\u4ed8\u5b9d\u7f51\u5173\nclass AlipayGateway : public PaymentGateway {\npublic:\n    void execute(PaymentMethod* method, double amount) override {\n        method-&gt;processPayment(amount); // \u4f9d\u8d56PaymentMethod\n    }\n};\n</code></pre> <p>\u95ee\u9898\u5206\u6790 * \u5e73\u884c\u7ee7\u627f\uff1a\u6bcf\u6b21\u65b0\u589e\u652f\u4ed8\u65b9\u5f0f\uff08\u5982WeChatPay\uff09\uff0c\u5fc5\u987b\u540c\u6b65\u65b0\u589e\u5bf9\u5e94\u7684\u7f51\u5173\u7c7b\uff08\u5982WeChatPayGateway\uff09\u3002 * \u8026\u5408\u5ea6\u9ad8\uff1aPaymentGateway\u7684\u5b50\u7c7b\u4f9d\u8d56PaymentMethod\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u8fdd\u53cd\u89e3\u8026\u539f\u5219\u3002</p> <ol> <li>\u91cd\u6784\u540e\u7684\u4ee3\u7801\uff08\u89e3\u51b3Distorted Hierarchy\uff09 \u901a\u8fc7\u7ec4\u5408\u4ee3\u66ff\u7ee7\u627f\uff0c\u7b80\u5316\u5c42\u6b21\u7ed3\u6784\uff1a</li> </ol> <pre><code>// \u7edf\u4e00\u652f\u4ed8\u63a5\u53e3\nclass PaymentProcessor {\npublic:\n    virtual void process(double amount) = 0;\n};\n\n// \u4fe1\u7528\u5361\u5904\u7406\u5668\nclass CreditCardProcessor : public PaymentProcessor {\npublic:\n    void process(double amount) override {\n        std::cout &lt;&lt; \"Processing credit card payment: $\" &lt;&lt; amount &lt;&lt; std::endl;\n    }\n};\n\n// \u652f\u4ed8\u5b9d\u5904\u7406\u5668\nclass AlipayProcessor : public PaymentProcessor {\npublic:\n    void process(double amount) override {\n        std::cout &lt;&lt; \"Processing Alipay payment: $\" &lt;&lt; amount &lt;&lt; std::endl;\n    }\n};\n\n// \u901a\u7528\u652f\u4ed8\u7f51\u5173\uff08\u7ec4\u5408\u6a21\u5f0f\uff09\nclass PaymentGateway {\nprivate:\n    PaymentProcessor* processor;\npublic:\n    PaymentGateway(PaymentProcessor* p) : processor(p) {}\n    void execute(double amount) {\n        processor-&gt;process(amount);\n    }\n};\n</code></pre> <p>\u91cd\u6784\u4f18\u52bf * \u6d88\u9664\u5e73\u884c\u7ee7\u627f\uff1a\u65b0\u589e\u652f\u4ed8\u65b9\u5f0f\u53ea\u9700\u5b9e\u73b0PaymentProcessor\u63a5\u53e3\uff0c\u65e0\u9700\u4fee\u6539\u7f51\u5173\u3002 * \u964d\u4f4e\u8026\u5408\uff1a\u7f51\u5173\u901a\u8fc7\u7ec4\u5408\u52a8\u6001\u7ed1\u5b9a\u5904\u7406\u5668\uff0c\u7b26\u5408\u4f9d\u8d56\u5012\u7f6e\u539f\u5219\u3002</p>"},{"location":"technology/Cpp/048-CodeSmellDistortedHierarchy/#_1","title":"\u4e09\u3001\u91cd\u6784\u6d41\u7a0b\u4e0e\u53ef\u89c6\u5316\u5206\u6790","text":"<ol> <li>\u6d41\u7a0b\u56fe</li> </ol> <pre><code>graph TD\n    A[\u539f\u59cb\u4ee3\u7801] --&gt; B{\u5b58\u5728\u5e73\u884c\u7ee7\u627f?}\n    B --&gt;|\u662f| C[\u63d0\u53d6\u516c\u5171\u63a5\u53e3]\n    B --&gt;|\u5426| D[\u4fdd\u6301\u73b0\u6709\u7ed3\u6784]\n    C --&gt; E[\u4f7f\u7528\u7ec4\u5408\u66ff\u4ee3\u7ee7\u627f]\n    E --&gt; F[\u91cd\u6784\u5b8c\u6210]\n</code></pre> <ol> <li>\u7ed3\u6784\u5bf9\u6bd4\u56fe</li> </ol> <p>\u91cd\u6784\u524d\uff08\u626d\u66f2\u7684\u5c42\u6b21\u7ed3\u6784\uff09</p> <pre><code>PaymentMethod\n\u251c\u2500\u2500 CreditCard\n\u251c\u2500\u2500 Alipay\nPaymentGateway\n\u251c\u2500\u2500 CreditCardGateway\n\u251c\u2500\u2500 AlipayGateway\n</code></pre> <p>\u91cd\u6784\u540e\uff08\u7ec4\u5408\u6a21\u5f0f\uff09</p> <pre><code>PaymentProcessor\n\u251c\u2500\u2500 CreditCardProcessor\n\u251c\u2500\u2500 AlipayProcessor\nPaymentGateway (\u5173\u8054PaymentProcessor)\n</code></pre> <ol> <li>\u8fc7\u7a0b\u6f14\u793a\u56fe</li> </ol> <pre><code>sequenceDiagram\n    \u7528\u6237-&gt;&gt;PaymentGateway: execute(amount)\n    PaymentGateway-&gt;&gt;PaymentProcessor: process(amount)\n    PaymentProcessor--&gt;&gt;\u7528\u6237: \u8fd4\u56de\u7ed3\u679c\n</code></pre>"},{"location":"technology/Cpp/048-CodeSmellDistortedHierarchy/#_2","title":"\u56db\u3001\u603b\u7ed3\u4e0e\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u5173\u952e\u7ed3\u8bba Distorted Hierarchy \u7684\u672c\u8d28\u662f\u7ee7\u627f\u4f53\u7cfb\u8bbe\u8ba1\u4e0d\u5408\u7406\uff0c\u9700\u901a\u8fc7\u7ec4\u5408\u3001\u63a5\u53e3\u62bd\u8c61\u7b49\u65b9\u5f0f\u91cd\u6784\u3002</li> <li>\u4f18\u5148\u4f7f\u7528\u7ec4\u5408\u800c\u975e\u7ee7\u627f\uff1a\u964d\u4f4e\u7c7b\u95f4\u8026\u5408\u5ea6\uff0c\u63d0\u5347\u4ee3\u7801\u7075\u6d3b\u6027\u3002</li> <li> <p>\u9075\u5faa\u5f00\u95ed\u539f\u5219\uff1a\u5bf9\u6269\u5c55\u5f00\u653e\uff0c\u5bf9\u4fee\u6539\u5173\u95ed\u3002</p> </li> <li> <p>\u9002\u7528\u573a\u666f</p> </li> </ol> <p>\u5e73\u884c\u7ee7\u627f\u4f53\u7cfb\u9891\u7e41\u53d8\u66f4\u7684\u9879\u76ee\u3002 \u7ee7\u627f\u5c42\u6b21\u6df1\u5ea6\u8d85\u8fc73\u5c42\u7684\u4ee3\u7801\u5e93\u3002 \u9700\u8981\u52a8\u6001\u5207\u6362\u884c\u4e3a\u6216\u7b56\u7565\u7684\u573a\u666f\u3002 \u901a\u8fc7\u672c\u6587\u7684\u5206\u6790\u4e0e\u793a\u4f8b\uff0c\u5f00\u53d1\u8005\u53ef\u6709\u6548\u8bc6\u522b\u5e76\u89e3\u51b3Distorted Hierarchy\u95ee\u9898\uff0c\u63d0\u5347\u4ee3\u7801\u8d28\u91cf\u4e0e\u53ef\u7ef4\u62a4\u6027\u3002</p>"},{"location":"technology/Cpp/DynamicAnalysis/","title":"\u52a8\u6001\u5206\u6790","text":""},{"location":"technology/Cpp/QtQuick/","title":"QtQuick","text":""},{"location":"technology/Cpp/QtWidgets/","title":"QtWidgets","text":""},{"location":"technology/Cpp/StaticAnalysis/","title":"\u9759\u6001\u5206\u6790","text":""},{"location":"technology/Cpp/wxWidgets/","title":"wxWidgets","text":""},{"location":"en/","title":"Home","text":"I am zhengtianzuo, currently focusing on remote desktop development, primarily using C++. I enjoy researching high performance and code architecture. Vision: Technology Sharing, Creating Brilliance Together Mission: Creating Value, Empowering Clients, Serving the Industry Values: Exploring Functionality, Integrating Excellence, Delivering Precision Personal Projects: Logo Project Github Gitee Description Technologies tianzuo.Pangu Instant Messaging Platform tianzuo.Kunlun Local Build Tool tianzuo.Fuxi In development Personal Modules: Logo Module Github Gitee Description Technologies tianzuo.Kongtong Crash Detection &amp; Analysis tianzuo.Qiankun NoSQL Database tianzuo.Zhuiri Reliable UDP Data Transfer tianzuo.Hundun Software Licensing tianzuo.LianYao Memory Pool tianzuo.Shennong In development tianzuo.Linglong In development tianzuo.Fengtian In development          Add QQ Friend                 Add WeChat Friend                 WeChat Official Account                 AliPay sponsor                 WeChat sponsor        Author zhengtianzuo QQ 278969898 Email zhengtianzuo06@163.com Homepage http://www.zhengtianzuo.com Blog http://blog.csdn.net/zhengtianzuo06 github https://github.com/zhengtianzuo gitee https://gitee.com/zhengtianzuo QQ Group 199672080"},{"location":"en/component/tianzuo.Hundun/","title":"tianzuo.Hundun","text":""},{"location":"en/component/tianzuo.Hundun/#tianzuohundun_1","title":"tianzuo.Hundun","text":"operating system compiler programming language"},{"location":"en/component/tianzuo.Hundun/#introduction","title":"introduction","text":"<p>tianzuo.Hundun Protect the software you develop from unauthorized copies, limit the usage in time, to a specific machines.</p> <p>legend: is the first of the ten ancient artifacts, known as the most powerful artifact. East Emperor bell is called East Emperor bell, its owner is East Emperor Taiyi, East Emperor Taiyi is ancient mythology, ranked among the top five god, as its magic weapon East Emperor bell, strength is not bad. According to legend, East Emperor Bell is the gate of heaven, controllable sun and moon, can change Yin and Yang, East Emperor Bell is a kind of strong defense, weak attack, but amazing explosive power, once the outbreak of real strength, basically can destroy heaven and earth, devour the heavens.</p>"},{"location":"en/component/tianzuo.Hundun/#motivation","title":"motivation","text":"<p>Protect the software you develop from unauthorized copies, limit the usage in time, to a specific machines.</p> <p></p>"},{"location":"en/component/tianzuo.Hundun/#features","title":"features","text":"<ul> <li>\ud83e\udde9 simple integration</li> <li>\ud83e\udea2 data is encrypted algorithmically</li> <li>\ud83d\udd12 it can be limited by time, by device ID, or both</li> </ul>"},{"location":"en/component/tianzuo.Hundun/#workflow","title":"workflow","text":"<p>In the client software, the get_machineid interface can be called to obtain the machine code (registration code), and then enter the registration code/cut-off time through the maker program to create the license file. The maker needs to read the private key file when generating the license file, and the corresponding public key information is input in the client software. After the license is issued to the client locally, the client invokes the check interface for verification.</p> <ol> <li>Generate a public and private key pairing information file.</li> </ol> <pre><code>// Create a private key file\n(1) openssl genrsa -out privatekey.pem 2048\n\n// Create a public key file based on the private key file\n(2) openssl rsa -in privatekey.pem -pubout -out publickey.pem\n</code></pre> <ol> <li>Create a license file from the maker command line:</li> </ol> <pre><code>// Generate only time-limited license files\nmaker.exe --type=1 --date=\"2024-04-30\" --keyfile=\"privatekey.pem\"\n\n// Only license files with machine code restrictions are generated\nmaker.exe --type=2 --id=\"9ea03801651cd3d93add9d42a07d3c4b\" --keyfile=\"privatekey.pem\"\n\n// Generate license files that have both time and machine code limits\nmaker.exe --type=3 --date=\"2024-04-30\" --id=\"9ea03801651cd3d93add9d42a07d3c4b\" --keyfile=\"privatekey.pem\"\n</code></pre>"},{"location":"en/component/tianzuo.Hundun/#example","title":"example","text":"cpp <pre><code>#include &lt;iostream&gt;\n#include \"../../include/tianzuo.HundunInterface.h\" // \u63a5\u53e3\u5934\u6587\u4ef6 interface heaher file\n\n#define Get_Machineid 0\n\nint main() {\n    std::string public_key = \"-----BEGIN PUBLIC KEY-----\\n\"\n        \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\"\n        \"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\"\n        \"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\"\n        \"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\"\n        \"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\"\n        \"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\"\n        \"lQIDAQAB\\n\"\n        \"-----END PUBLIC KEY-----\\n\";\n\n    tianzuo_HundunInt hundun;\n#if Get_Machineid\n    const char* id = hundun.get_machineid();\n    if (id == nullptr) {\n        std::cerr &lt;&lt; \"hundun.get_machineid error\" &lt;&lt; std::endl;\n        return -1;\n    }\n    std::cout &lt;&lt; \"id: \" &lt;&lt; id &lt;&lt; std::endl;\n#else\n    int days = 0;\n    int error_code = tianzuo_Hundun_check(public_key.c_str(), \"license.dat\", &amp;days);\n    if (error_code != Hundun_error_code_success) {\n        std::cout &lt;&lt; \"hundun.check error_code: \" &lt;&lt; error_code &lt;&lt; \" error_string: \" &lt;&lt; Hundun_error_code_strings[error_code] &lt;&lt; std::endl;\n        return -1;\n    }\n    std::cout &lt;&lt; \"hundun.check days: \" &lt;&lt; days &lt;&lt; std::endl;\n#endif\n    return 0;\n}\n\n</code></pre> python <pre><code>from ctypes import *\nfrom enum import Enum\nimport ctypes\n\n\ntianzuo_HundunLib = cdll.LoadLibrary('./tianzuo.Hundun.dll')\n\n\nclass Hundun_error_code(Enum):\n    Hundun_error_code_success       = 0 # \u6210\u529f\n    Hundun_error_code_parameter     = 1 # \u53c2\u6570\u9519\u8bef\n    Hundun_error_code_parse         = 2 # \u89e3\u6790\u9519\u8bef\n    Hundun_error_code_licensefile   = 3 # \u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\n    Hundun_error_code_outofdate     = 4 # \u65e5\u671f\u5df2\u8fc7\n    Hundun_error_code_unmatched     = 5 # \u673a\u5668\u7801\u4e0d\u5339\u914d\n\n\ndef tianzuo_Hundun_check(public_key_string, license_file, days):\n    tianzuo_HundunLib.tianzuo_Hundun_check.argtypes = [c_char_p, c_char_p, ctypes.POINTER(ctypes.c_int)]\n    return tianzuo_HundunLib.tianzuo_Hundun_check(public_key_string, license_file, days)\n\n\ndef main():\n    public_key = (b\"-----BEGIN PUBLIC KEY-----\\n\"\n                  b\"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\"\n                  b\"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\"\n                  b\"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\"\n                  b\"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\"\n                  b\"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\"\n                  b\"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\"\n                  b\"lQIDAQAB\\n\"\n                  b\"-----END PUBLIC KEY-----\\n\")\n\n    Hundun_error_code_strings_cn = (\n        \"\u6210\u529f\",\n        \"\u53c2\u6570\u9519\u8bef\",\n        \"\u89e3\u6790\u9519\u8bef\",\n        \"\u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\",\n        \"\u65e5\u671f\u5df2\u8fc7\",\n        \"\u673a\u5668\u7801\u4e0d\u5339\u914d\")\n\n    Hundun_error_code_strings = (\n        \"success\",\n        \"parameter error\",\n        \"parse error\",\n        \"license filename error\",\n        \"out of date\",\n        \"machine id unmatched\")\n\n    days = ctypes.c_int()\n    license_file = b\"license.dat\"\n    error_code = tianzuo_Hundun_check(public_key, license_file, days)\n    if error_code != Hundun_error_code.Hundun_error_code_success.value:\n        print(\"hundun.check error_code: {} error_string: {}\".format(error_code, Hundun_error_code_strings[error_code]))\n        return\n\n    int_days = days.value\n    print(\"hundun.check days: {}\".format(int_days))\n\n\nif __name__ == '__main__':\n    main()\n\n</code></pre> java <pre><code>package cn.camelsoft;\n\nimport com.sun.jna.Library;\nimport com.sun.jna.Native;\n\nenum Hundun_error_code {\n    Hundun_error_code_success       (0),            ///&lt;  \u6210\u529f\n    Hundun_error_code_parameter     (1),            ///&lt;  \u53c2\u6570\u9519\u8bef\n    Hundun_error_code_parse         (2),            ///&lt;  \u89e3\u6790\u9519\u8bef\n    Hundun_error_code_licensefile   (3),            ///&lt;  \u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\n    Hundun_error_code_outofdate     (4),            ///&lt;  \u65e5\u671f\u5df2\u8fc7\n    Hundun_error_code_unmatched     (5);            ///&lt;  \u673a\u5668\u7801\u4e0d\u5339\u914d\n\n    private int value;\n\n    Hundun_error_code(int value) {\n        this.value = value;\n    }\n\n    public int getValue() {\n        return value;\n    }\n}\n\npublic class Main {\n    public interface tianzuo_HundunLib extends Library {\n        tianzuo_HundunLib instance = (tianzuo_HundunLib) Native.load(\"./tianzuo.Hundun.dll\", tianzuo_HundunLib.class);\n        int tianzuo_Hundun_check(String public_key_string, String license_file, int[] days);\n    }\n\n    public static void main(String[] args) {\n        System.setProperty(\"jna.encoding\",\"UTF-8\");\n\n        String public_key = \"-----BEGIN PUBLIC KEY-----\\n\" +\n        \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\" +\n        \"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\" +\n        \"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\" +\n        \"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\" +\n        \"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\" +\n        \"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\" +\n        \"lQIDAQAB\\n\" +\n        \"-----END PUBLIC KEY-----\\n\";\n\n        String[] Hundun_error_code_strings_cn = {\"\u6210\u529f\",\n                \"\u53c2\u6570\u9519\u8bef\",\n                \"\u89e3\u6790\u9519\u8bef\",\n                \"\u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\",\n                \"\u65e5\u671f\u5df2\u8fc7\",\n                \"\u673a\u5668\u7801\u4e0d\u5339\u914d\"};\n\n        String[] Hundun_error_code_strings = {\n                \"success\",\n                \"parameter error\",\n                \"parse error\",\n                \"license filename error\",\n                \"out of date\",\n                \"machine id unmatched\"\n        };\n\n        int[] days = {0};\n        int error_code = tianzuo_HundunLib.instance.tianzuo_Hundun_check(public_key, \"license.dat\", days);\n        if (error_code != Hundun_error_code.Hundun_error_code_success.getValue()) {\n            System.out.printf(\"hundun.check error_code: %d error_string: %s\\n\", error_code, Hundun_error_code_strings[error_code]);\n            return;\n        }\n        System.out.printf(\"hundun.check days: : %d\\n\", days[0]);\n    }\n}\n\n</code></pre> csharp <pre><code>\n\nusing System.Runtime.InteropServices;\n\nclass Program {\n    [DllImport(\"tianzuo.Hundun.dll\")]\n    public static extern int tianzuo_Hundun_check(string public_key_string, string license_file, ref int days);\n\n    public enum Hundun_error_code\n    {\n        Hundun_error_code_success,                ///&lt;  \u6210\u529f\n        Hundun_error_code_parameter,              ///&lt;  \u53c2\u6570\u9519\u8bef\n        Hundun_error_code_parse,                  ///&lt;  \u89e3\u6790\u9519\u8bef\n        Hundun_error_code_licensefile,            ///&lt;  \u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\n        Hundun_error_code_outofdate,              ///&lt;  \u65e5\u671f\u5df2\u8fc7\n        Hundun_error_code_unmatched               ///&lt;  \u673a\u5668\u7801\u4e0d\u5339\u914d\n    }\n\n    public string[] Hundun_error_code_strings_cn = {\n        \"\u6210\u529f\",\n        \"\u53c2\u6570\u9519\u8bef\",\n        \"\u89e3\u6790\u9519\u8bef\",\n        \"\u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\",\n        \"\u65e5\u671f\u5df2\u8fc7\",\n        \"\u673a\u5668\u7801\u4e0d\u5339\u914d\"\n    };\n\n    public string[] Hundun_error_code_strings = {\n        \"success\",\n        \"parameter error\",\n        \"parse error\",\n        \"license filename error\",\n        \"out of date\",\n        \"machine id unmatched\"\n    };\n\n    static void Main(string[] args) {\n        string public_key = \"-----BEGIN PUBLIC KEY-----\\n\" +\n            \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\" +\n            \"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\" +\n            \"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\" +\n            \"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\" +\n            \"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\" +\n            \"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\" +\n            \"lQIDAQAB\\n\" +\n            \"-----END PUBLIC KEY-----\\n\";\n\n        int days = 0;\n        int error_code = tianzuo_Hundun_check(public_key, \"license.dat\", ref days);\n        if (error_code != (int)Hundun_error_code.Hundun_error_code_success)\n        {\n            Program myProgram = new Program();\n            Console.WriteLine(\"hundun.check error_code: \" + error_code + \" error_string: \" + myProgram.Hundun_error_code_strings[error_code]);\n            return;\n        }\n        Console.WriteLine(\"hundun.check days: \" + days);\n\n    }\n\n}\n</code></pre> javascript <pre><code>\nHundun_error_code_success     = 0 //  \u6210\u529f\nHundun_error_code_parameter   = 1 //  \u53c2\u6570\u9519\u8bef\nHundun_error_code_parse       = 2 //  \u89e3\u6790\u9519\u8bef\nHundun_error_code_licensefile = 3 //  \u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\nHundun_error_code_outofdate   = 4 //  \u65e5\u671f\u5df2\u8fc7\nHundun_error_code_unmatched   = 5 //  \u673a\u5668\u7801\u4e0d\u5339\u914d\n\nlet ffi = require('ffi-napi')\nconst ref = require('ref-napi');\n\nlet tianzuo_HundunLib = ffi.Library(\"tianzuo.Hundun.dll\", {\n    'tianzuo_Hundun_check':['int',['string','string','pointer']],\n})\n\nlet public_key = \"-----BEGIN PUBLIC KEY-----\\n\" +\n\"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\" +\n\"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\" +\n\"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\" +\n\"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\" +\n\"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\" +\n\"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\" +\n\"lQIDAQAB\\n\" +\n\"-----END PUBLIC KEY-----\\n\";\n\nconst Hundun_error_code_strings_cn = [\n    \"\u6210\u529f\",\n    \"\u53c2\u6570\u9519\u8bef\",\n    \"\u89e3\u6790\u9519\u8bef\",\n    \"\u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\",\n    \"\u65e5\u671f\u5df2\u8fc7\",\n    \"\u673a\u5668\u7801\u4e0d\u5339\u914d\"];\n\nconst Hundun_error_code_strings = [\n    \"success\",\n    \"parameter error\",\n    \"parse error\",\n    \"license filename error\",\n    \"out of date\",\n    \"machine id unmatched\"];\n\ndays = Buffer.alloc(1 * ref.sizeof.int);\nlet error_code = tianzuo_HundunLib.tianzuo_Hundun_check(public_key, \"license.dat\", days);\nif (error_code !== Hundun_error_code_success) {\n    console.log(\"hundun.check error_code: %d error_string: %s\\n\", error_code, Hundun_error_code_strings[error_code]);\n    return -1;\n}\ndays_data = ref.get(days, 0, ref.types.int);\nconsole.log(\"hundun.check days: %d\\n\", days_data);\n\n</code></pre> php <pre><code>&lt;?php\n\n// \u68c0\u67e5\u662f\u5426\u52a0\u8f7d\u4e86 FFI \u6269\u5c55\nif (extension_loaded('ffi')) {\n    echo(\"\u5df2\u542f\u7528 FFI \u6269\u5c55\\n\");\n} else {\n    die(\"\u672a\u542f\u52a8 FFI \u6269\u5c55\\n\");\n}\n\nenum Hundun_error_code\n{\n    const Hundun_error_code_success = 0;        //  \u6210\u529f\n    const Hundun_error_code_parameter = 1;      //  \u53c2\u6570\u9519\u8bef\n    const Hundun_error_code_parse = 2;          //  \u89e3\u6790\u9519\u8bef\n    const Hundun_error_code_licensefile = 3;    //  \u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\n    const Hundun_error_code_outofdate = 4;      //  \u65e5\u671f\u5df2\u8fc7\n    const Hundun_error_code_unmatched = 5;      //  \u673a\u5668\u7801\u4e0d\u5339\u914d\n}\n\n$ffi = FFI::cdef(\"\n    int tianzuo_Hundun_check(const char* public_key_string, const char* license_file, int* days);\n\", \"tianzuo.Hundun.dll\");\n\n$public_key = \"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\np1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\nLrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\nENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\nz1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\nouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\nlQIDAQAB\n-----END PUBLIC KEY-----\\n\";\n\ndefine('Hundun_error_code_strings_cn', [\n    \"\u6210\u529f\",\n    \"\u53c2\u6570\u9519\u8bef\",\n    \"\u89e3\u6790\u9519\u8bef\",\n    \"\u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\",\n    \"\u65e5\u671f\u5df2\u8fc7\",\n    \"\u673a\u5668\u7801\u4e0d\u5339\u914d\"]);\n\ndefine('Hundun_error_code_strings', [\n    \"success\",\n    \"parameter error\",\n    \"parse error\",\n    \"license filename error\",\n    \"out of date\",\n    \"machine id unmatched\"\n]);\n\n$days = FFI::new(\"int\");\n$error_code = $ffi-&gt;tianzuo_Hundun_check($public_key, \"license.dat\", FFI::addr($days));\nif ($error_code != Hundun_error_code::Hundun_error_code_success) {\n    echo \"hundun.check error_code: \" . $error_code . \" error_string: \" . Hundun_error_code_strings[$error_code] . \"\\n\";\n    return;\n}\necho \"hundun.check days: \" . $days-&gt;cdata . \"\\n\";\n\n?&gt;\n</code></pre> vb <pre><code>\nImports System.Runtime.InteropServices\n\nEnum Hundun_error_code\n    Hundun_error_code_success = 0 '  \u6210\u529f\n    Hundun_error_code_parameter = 1 '  \u53c2\u6570\u9519\u8bef\n    Hundun_error_code_parse = 2 '  \u89e3\u6790\u9519\u8bef\n    Hundun_error_code_licensefile = 3 '  \u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\n    Hundun_error_code_outofdate = 4 '  \u65e5\u671f\u5df2\u8fc7\n    Hundun_error_code_unmatched = 5 '  \u673a\u5668\u7801\u4e0d\u5339\u914d\nEnd Enum\n\nModule Program\n    &lt;DllImport(\"tianzuo.Hundun.dll\")&gt;\n    Public Function tianzuo_Hundun_check(public_key_string As String, license_file As String, ByRef days As Integer) As Integer\n    End Function\n\n    ReadOnly Hundun_error_code_strings_cn() As String = {\n        \"\u6210\u529f\",\n        \"\u53c2\u6570\u9519\u8bef\",\n        \"\u89e3\u6790\u9519\u8bef\",\n        \"\u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\",\n        \"\u65e5\u671f\u5df2\u8fc7\",\n        \"\u673a\u5668\u7801\u4e0d\u5339\u914d\"}\n\n    ReadOnly Hundun_error_code_strings() As String = {\n        \"success\",\n        \"parameter error\",\n        \"parse error\",\n        \"license filename error\",\n        \"out of date\",\n        \"machine id unmatched\"}\n\n    Sub Main(args As String())\n        Dim public_key As String = \"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\np1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\nLrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\nENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\nz1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\nouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\nlQIDAQAB\n-----END PUBLIC KEY-----\"\n\n        Dim license_file As String = \"license.dat\"\n        Dim days As Integer = 0\n        Dim error_code As Integer = tianzuo_Hundun_check(public_key, license_file, days)\n        If (error_code &lt;&gt; Hundun_error_code.Hundun_error_code_success) Then\n            Console.WriteLine(\"hundun.check error_code: \" + error_code.ToString + \" error_string: \" + Hundun_error_code_strings(error_code))\n            Return\n        End If\n\n        Console.WriteLine(\"hundun.check days:\" + days.ToString)\n    End Sub\nEnd Module\n\n</code></pre> go <pre><code>package main\n\n/*\n#include \"tianzuo.HundunInterface.h\"\n*/\nimport \"C\"\nimport (\n    \"fmt\"\n    \"syscall\"\n    \"unsafe\"\n)\n\nconst (\n    Hundun_error_code_success     = 0 //  \u6210\u529f\n    Hundun_error_code_parameter   = 1 //  \u53c2\u6570\u9519\u8bef\n    Hundun_error_code_parse       = 2 //  \u89e3\u6790\u9519\u8bef\n    Hundun_error_code_licensefile = 3 //  \u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\n    Hundun_error_code_outofdate   = 4 //  \u65e5\u671f\u5df2\u8fc7\n    Hundun_error_code_unmatched   = 5 //  \u673a\u5668\u7801\u4e0d\u5339\u914d\n)\n\nfunc main() {\n    const public_key string = \"-----BEGIN PUBLIC KEY-----\\n\" +\n        \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\" +\n        \"p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\" +\n        \"LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\" +\n        \"ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\" +\n        \"z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\" +\n        \"ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\" +\n        \"lQIDAQAB\\n\" +\n        \"-----END PUBLIC KEY-----\\n\"\n\n    Hundun_error_code_strings_cn := [6]string{\n        \"\u6210\u529f\",\n        \"\u53c2\u6570\u9519\u8bef\",\n        \"\u89e3\u6790\u9519\u8bef\",\n        \"\u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\",\n        \"\u65e5\u671f\u5df2\u8fc7\",\n        \"\u673a\u5668\u7801\u4e0d\u5339\u914d\"}\n\n    //Hundun_error_code_strings := [6]string{\n    //  \"success\",\n    //  \"parameter error\",\n    //  \"parse error\",\n    //  \"license filename error\",\n    //  \"out of date\",\n    //  \"machine id unmatched\"}\n\n    dll := syscall.MustLoadDLL(\"tianzuo.Hundun.dll\")\n    tianzuo_Hundun_check := dll.MustFindProc(\"tianzuo_Hundun_check\")\n    days := C.int(0)\n    pub_key := C.CString(public_key)\n    license_file := C.CString(\"license.dat\")\n    error_code, _, _ := tianzuo_Hundun_check.Call(uintptr(unsafe.Pointer(pub_key)), uintptr(unsafe.Pointer(license_file)), uintptr(unsafe.Pointer(&amp;days)))\n    if error_code != Hundun_error_code_success {\n        fmt.Println(\"hundun.check error_code: \", error_code, \" error_string: \", Hundun_error_code_strings[error_code])\n        return\n    }\n    fmt.Println(\"hundun.check days: \", days)\n}\n\n</code></pre> rust <pre><code>\nuse std::os::raw::c_char;\nuse std::ffi::{c_int};\nuse std::ffi::CString;\n\n#[link(name = \"tianzuo.Hundun\")]\nextern {\n    fn tianzuo_Hundun_check(public_key_string: *const c_char, license_file: *const c_char, days: *const c_int) -&gt; c_int;\n}\n\nconst Hundun_error_code_strings_cn: [&amp;str; 6] = [\n    \"\u6210\u529f\",\n    \"\u53c2\u6570\u9519\u8bef\",\n    \"\u89e3\u6790\u9519\u8bef\",\n    \"\u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\",\n    \"\u65e5\u671f\u5df2\u8fc7\",\n    \"\u673a\u5668\u7801\u4e0d\u5339\u914d\"];\n\nconst Hundun_error_code_strings: [&amp;str; 6] = [\n    \"success\",\n    \"parameter error\",\n    \"parse error\",\n    \"license filename error\",\n    \"out of date\",\n    \"machine id unmatched\"];\n\nfn main() {\n    unsafe {\n        let public_key = CString::new(String::from(\"-----BEGIN PUBLIC KEY-----\\n\\\n        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\\n\\\n        p1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\\n\\\n        LrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\\n\\\n        ENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\\n\\\n        z1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\\n\\\n        ouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\\n\\\n        lQIDAQAB\\n\\\n        -----END PUBLIC KEY-----\\n\")).expect(\"Failed to create CString\");\n\n\n\n        let license_file = CString::new(String::from(\"license.dat\")).expect(\"Failed to create CString\");\n        let mut days: c_int = 0;\n        let error_code = tianzuo_Hundun_check(public_key.as_ptr(), license_file.as_ptr(), &amp;mut days);\n        if 0 != error_code {\n            let errorc: usize =  error_code as usize;\n            println!(\"hundun.check error_code: {:?} error_string: {:?}\", error_code, Hundun_error_code_strings[errorc]);\n        }\n\n        println!(\"hundun.check days: {:?}\", days);\n    }\n}\n\n</code></pre> ruby <pre><code>require 'fiddle'\n\nlib = Fiddle::dlopen('C:/Users/zhengtianzuo/RubymineProjects/tianzuo.HundunTest/tianzuo.Hundun.dll')\ntianzuo_Hundun_check = Fiddle::Function.new(lib['tianzuo_Hundun_check'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\n\npublic_key = \"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3I4g6QtToZuQopoS7Myf\np1QPSBdC0PWNzG0Ii+oMeEp+aqiiVDU33aIrHgyXcBsDNFyPi3R3USNI9WbyO0cw\nLrlYS8YRjP6ckz90lZph2VSXCFWXQm7nOqD4P9GC3QMvV3U9XLyLufRiZs0BcYVF\nENbm+jt3Z8/ikkFaLh0Mw8Y3ksjJN+Kd2DyEgpj5taLXHShHRyLjWAd102M2J4Id\nz1hZg3CxyQNN7hQPmsFvZBsOejqAKeSO57/hRgo6IgZHh7iFbIpNyYjj1fxL0T5o\nouJ5yHODq8fWQ9ZHmk3po9QtbQJIYXO/ShfladQiZrz74vg6VFjleVyPp9m9gAUn\nlQIDAQAB\n-----END PUBLIC KEY-----\"\n\nHundun_error_code_strings_cn = [\n  \"\u6210\u529f\",\n  \"\u53c2\u6570\u9519\u8bef\",\n  \"\u89e3\u6790\u9519\u8bef\",\n  \"\u8bb8\u53ef\u8bc1\u6587\u4ef6\u6216\u8def\u5f84\u9519\u8bef\",\n  \"\u65e5\u671f\u5df2\u8fc7\",\n  \"\u673a\u5668\u7801\u4e0d\u5339\u914d\"]\n\nHundun_error_code_strings = [\n  \"success\",\n  \"parameter error\",\n  \"parse error\",\n  \"license filename error\",\n  \"out of date\",\n  \"machine id unmatched\"]\n\nlicense_file = \"license.dat\"\ndays = Fiddle::Pointer.malloc(Fiddle::SIZEOF_INT)\nerror_code = tianzuo_Hundun_check.call(public_key, license_file, days)\nif error_code != 0\n  print(\"hundun.check error_code: \", error_code, \" error_string:\", Hundun_error_code_strings[error_code] ,\" \\n\")\n  return\nend\n\nint_days = days[0, Fiddle::SIZEOF_INT].unpack('I')[0]\nprint(\"hundun.check days: \", int_days, \"\\n\")\n\n</code></pre>"},{"location":"en/component/tianzuo.Hundun/#download","title":"download","text":""},{"location":"en/component/tianzuo.Kongtong/","title":"tianzuo.Kongtong","text":""},{"location":"en/component/tianzuo.Kongtong/#tianzuokongtong_1","title":"tianzuo.Kongtong","text":"operating system compiler programming language"},{"location":"en/component/tianzuo.Kongtong/#introduction","title":"introduction","text":"<p>tianzuo.Kongtong When an application crashes on a Windows platform, a crash dump file is generated to analyze the lines of the crashed code and generate information about the system environment.</p> <p>legend: The protective artifact of the undead dragon clan in Kongtong Sea is carved with the shape of the five heavenly emperors and surrounded by a jade dragon. According to ancient legend, those who get it can own the world, and some people say that it can make people not old and immortal.</p>"},{"location":"en/component/tianzuo.Kongtong/#motivation","title":"motivation","text":"<p>In the process of development, occasionally encounter the situation of program crash, need to analyze the cause of crash and locate the code line, and need to analyze environmental factors.</p> <p></p>"},{"location":"en/component/tianzuo.Kongtong/#features","title":"features","text":"<ul> <li>\ud83e\udde9 simple integration</li> <li>\ud83d\udcdd optionally generate dmp and logs</li> <li>\ud83e\ude90 log in multiple languages (simplified chinese / english)</li> <li>\u26d3  support for in-thread detection</li> </ul>"},{"location":"en/component/tianzuo.Kongtong/#screenshot","title":"screenshot","text":"<p>locate crashed lines of code through dmp file analysis:</p> <p>Visual Studio analyze the dmp file</p> <p></p> <p>WinDbg analyze the dmp file</p> <p></p> <p>environment log:</p> <p></p>"},{"location":"en/component/tianzuo.Kongtong/#install","title":"install","text":"<p>enable exception detection in project</p>"},{"location":"en/component/tianzuo.Kongtong/#visual-studio","title":"Visual Studio","text":"<p>enable c++ exception detection in Visual Studio</p> <p></p> <p>enable generation pdb files in Visual Studio</p>"},{"location":"en/component/tianzuo.Kongtong/#qt-creator","title":"Qt Creator","text":"<p>enable generation pdb files in Qt Creator</p> <pre><code>CONFIG += force_debug_info\nCONFIG += senarate_debug_info\n</code></pre>"},{"location":"en/component/tianzuo.Kongtong/#example","title":"example","text":"<pre><code>#include \"tianzuo.KongtongTest.h\"\n#include \"../../include/tianzuo.Kongtong.h\"\n#include &lt;Windows.h&gt;\n\nvoid init(int argc, char* argv[]) {\n    tianzuo_KongtongTest test;\n    test.doSomething();\n}\n\nint main(int argc, char* argv[]) {\n    HINSTANCE hKongtong = LoadLibrary(L\"tianzuo.Kongtong.dll\");\n    if (!hKongtong) {\n        init(argc, argv);\n        return(0);\n    }\n\n    tianzuo_Kongtong_get_exception getException = (tianzuo_Kongtong_get_exception)GetProcAddress(hKongtong, \"Kongtong_get_exception\");\n    if (!getException) return -1;\n    __try {\n        init(argc, argv);\n    }\n    __except (getException(GetExceptionInformation(), Kongtong_create_normal, 0)) {\n    }\n\n    if (hKongtong != nullptr) {\n        getException = nullptr;\n        FreeLibrary(hKongtong);\n        hKongtong = nullptr;\n    }\n    return(0);\n}\n</code></pre>"},{"location":"en/component/tianzuo.Kongtong/#download","title":"download","text":""},{"location":"en/component/tianzuo.LianYao/","title":"tianzuo.LianYao","text":""},{"location":"en/component/tianzuo.LianYao/#tianzuolianyao_1","title":"tianzuo.LianYao","text":"operating system compiler programming language"},{"location":"en/component/tianzuo.LianYao/#introduction","title":"introduction","text":"<p>tianzuo.LianYao A simple memory pool that initializes some memory for recycling, dynamically expands when insufficient, and has memory leak detection function.</p> <p>legend: It represents fusion and evolution. The demon pot can contain all things, and refine the demon beasts and spirit beasts into the vitality of the pot. This power symbolizes integration and evolution, and implies the tolerance and harmony of Taoist culture.</p>"},{"location":"en/component/tianzuo.LianYao/#motivation","title":"motivation","text":"<p>A memory pool is designed to use memory in cycles, improve memory usage efficiency, and provide memory leak detection function.</p> <p></p>"},{"location":"en/component/tianzuo.LianYao/#features","title":"features","text":"<ul> <li>\ud83e\udde9 simple integration</li> <li>\ud83d\udcdd optionally generate memory leak log</li> <li>\ud83e\ude90 log in multiple languages (simplified chinese / english)</li> </ul>"},{"location":"en/component/tianzuo.LianYao/#screenshot","title":"screenshot","text":"<p>locate memory leak lines of code through log file analysis:</p> <p></p>"},{"location":"en/component/tianzuo.LianYao/#example","title":"example","text":"<pre><code>\n#include &lt;iostream&gt;\n#include \"../../include/tianzuo.LianYaoInterface.h\"\n\nvoid* operator new(size_t size) {\n    return tianzuo_LianYaoInt::mem_get(size);\n}\nvoid* operator new[](size_t size) {\n    return operator new(size);\n}\n\nvoid operator delete(void* ptr) noexcept {\n    tianzuo_LianYaoInt::mem_del(ptr);\n}\nvoid operator delete[](void* ptr) noexcept {\n    operator delete(ptr);\n}\n\nclass cpp {\n public:\n    cpp() {}\n    ~cpp() {}\n private:\n     int m_a;\n     long m_l;\n     float m_f;\n};\n\nint main(int argc, char* argv[]) {\n    std::cout &lt;&lt; \"start tianzuo.LianYaoTest ...\\n\";\n#ifdef WIN32\n    tianzuo_LianYaoInt::initialize(3, \"memory_leaks.log\", nullptr, 0);\n#else\n    tianzuo_LianYaoInt::initialize(3, \"memory_leaks.log\", \"./tianzuo.LianYaoTest\", 0);\n#endif\n\n    int* new_int = new int(10); // leak 4\n    int* new_int2 = new int(10);\n    *new_int2 = 12;\n\n    for (size_t i = 0; i &lt; 10; i++) {\n        int* new_int3 = new int(10);\n        *new_int3 = 12;\n        delete new_int3;\n    }\n\n    char* new_buf = new char[1555]; // leak 1555\n    char* new_buf2 = new char[123];\n\n    cpp* new_class = new cpp(); // leak 12\n    cpp* new_class2 = new cpp();\n\n    class1* cls1 = new class1();\n    delete cls1;\n\n    delete new_class2;\n    delete new_int2;\n    delete[] new_buf2;\n\n    tianzuo_LianYaoInt::terminate();\n\n    return 0;\n}\n\n</code></pre>"},{"location":"en/component/tianzuo.LianYao/#download","title":"download","text":""},{"location":"en/component/tianzuo.Qiankun/","title":"tianzuo.Qiankun","text":""},{"location":"en/component/tianzuo.Qiankun/#tianzuoqiankun_1","title":"tianzuo.Qiankun","text":"operating system compiler programming language"},{"location":"en/component/tianzuo.Qiankun/#introduction","title":"introduction","text":"<p>tianzuo.Qiankun NoSql database based on drawer file storage can be used for file packaging, data integration, encryption storage and other purposes. The storage system can be easily and quickly built and deployed.</p> <p>legend: It's owned by Maitreya. It's for storage purposes. With incredible power, there is a strange space inside, a space so large that it seems to contain heaven and earth. There's more in the bag. There's more than enough.</p>"},{"location":"en/component/tianzuo.Qiankun/#motivation","title":"motivation","text":"<p>Build a NoSql database that can manage data with simple interface calls.</p> <p></p>"},{"location":"en/component/tianzuo.Qiankun/#features","title":"features","text":"<ul> <li>\ud83e\udde9 simple integration</li> <li>\ud83d\udce6 integrated simple storage files can be compressed freely</li> <li>\ud83e\udea2 the data is encrypted by 256-bit AES algorithm</li> <li>\ud83d\udcd2 data can be added, deleted, modified, or queried in batches</li> <li>\ud83d\udcc3 supports direct access to raw data streams</li> </ul>"},{"location":"en/component/tianzuo.Qiankun/#screenshot","title":"screenshot","text":"<p>tianzuo.Qiankun Test:</p> <p></p>"},{"location":"en/component/tianzuo.Qiankun/#example","title":"example","text":"cpp <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\n#include \"tianzuo.QiankunInterface.h\" // \u63a5\u53e3\u5934\u6587\u4ef6 interface heaher file\n\nint main() {\n    // \u51c6\u5907\u6570\u636e prepare data\n    Qiankun_db_verify_struct db_verify(\"qiankunDataBase.Ztz\", \"password\");\n    int integer = 12345678;\n    Qiankun_data_type_struct data_type(Qiankun_data_type_integer, -1, \"integer\");\n    Qiankun_user_data_struct user_data(&amp;integer, 0);\n    int data_size = 0;\n    Qiankun_get_user_data_struct get_user_data(reinterpret_cast&lt;void*&amp;&gt;(integer), &amp;data_size);\n\n    // \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n    std::unique_ptr&lt;tianzuo_QiankunInterface&gt; qiankun_interface(new tianzuo_QiankunInterface());\n\n    // \u521b\u5efa\u5b9e\u4f8b create an instance\n    tianzuo_QiankunInt* qiankun = qiankun_interface-&gt;initialize();\n\n    // \u521d\u59cb\u5316\u5b9e\u4f8b initialize the instance\n    int error_code = qiankun-&gt;initialize();\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"initialize error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\n    // \u521b\u5efa\u6570\u636e\u5e93 create database\n    error_code = qiankun-&gt;db_create_database(&amp;db_verify, \"qiankunDataBase\", true);\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"db_create_database error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\n    // \u6253\u5f00\u6570\u636e\u5e93 open database\n    error_code = qiankun-&gt;db_open_database(&amp;db_verify);\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"db_open_database error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\n    // \u5411\u6570\u636e\u5e93\u5199\u5165\u4e00\u4e2a\u6574\u578b\u6570\u636e writes an integer to the database\n    error_code = qiankun-&gt;data_combine(&amp;db_verify, &amp;data_type, nullptr, &amp;user_data, false, -1);\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"data_combine error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\n\n    // \u8bfb\u53d6\u521a\u5199\u5165\u7684\u6570\u636e read the data just written\n    integer = -1;\n    error_code = qiankun-&gt;data_extract(&amp;db_verify, &amp;data_type, nullptr, &amp;get_user_data);\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"data_extract error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\n    std::cout &lt;&lt; \"get integer data: \" &lt;&lt; integer;\n\n    // \u5173\u95ed\u6570\u636e\u5e93 close database\n    error_code = qiankun-&gt;db_close_database(&amp;db_verify);\n    if (error_code != Qiankun_errorcode_success) {\n        std::cout &lt;&lt; \"db_close_database error: \" &lt;&lt; error_code;\n        goto return_error;\n        return -1;\n    }\n\nreturn_error:\n\n    // \u91ca\u653e\u63a5\u53e3 terminate the interface\n    if (qiankun_interface != nullptr &amp;&amp; qiankun != nullptr) {\n        qiankun_interface-&gt;terminate(&amp;qiankun);\n    }\n\n    std::cout &lt;&lt; \"test done -------------------\";\n\n    return 0;\n}\n</code></pre> python <pre><code>from ctypes import *\nfrom enum import Enum\nimport ctypes\n\ntianzuo_QiankunLib = cdll.LoadLibrary('./tianzuo.Qiankun.dll')\n\nclass Qiankun_error_code(Enum):\n    Qiankun_errorcode_success           = 1 # \u6b63\u786e\u7684\u503c\n    Qiankun_errorcode_normal            = 2 # \u9519\u8bef\u7684\u503c\n    Qiankun_errorcode_differ            = 3 # \u6570\u636e\u5e93\u6587\u4ef6\u6570\u6548\u9a8c\u672a\u901a\u8fc7 (The number of database files fails to be verified)\n    Qiankun_errorcode_no_rights         = 4 # \u6570\u636e\u5e93\u5bc6\u7801\u6548\u9a8c\u672a\u901a\u8fc7 (The database password verification failed)\n    Qiankun_errorcode_db_not_exist      = 5 # \u6570\u636e\u5e93\u6587\u4ef6\u4e0d\u5b58\u5728 (The database file does not exist)\n    Qiankun_errorcode_exist             = 6 # \u6570\u636e\u5df2\u5b58\u5728 (Data already exists)\n    Qiankun_errorcode_not_exist         = 7 # \u6570\u636e\u4e0d\u5b58\u5728 (Data does not exist)\n    Qiankun_errorcode_out_of_range      = 8 # \u8d85\u51fa\u8303\u56f4 (out of range)\n    Qiankun_errorcode_type              = 9 # \u7c7b\u578b\u4e0d\u7b26 (wrong type)\n    Qiankun_errorcode_param             = 10 # \u53c2\u6570\u9519\u8bef (parameter error)\n    Qiankun_errorcode_compress          = 11 # \u538b\u7f29\u9519\u8bef (compression error)\n    Qiankun_errorcode_get_array         = 12 # \u6570\u7ec4\u9519\u8bef (arrary error)\n    Qiankun_errorcode_out_of_memory     = 13 # \u5185\u5b58\u6ea2\u51fa (memory overflow)\n    Qiankun_errorcode_handle            = 14 # \u53e5\u67c4\u9519\u8bef (error handle)\n    Qiankun_errorcode_io                = 15 # IO\u9519\u8bef (io error)\n\nclass tianzuo_QiankunInt:\n    def __init__(self):\n        tianzuo_QiankunLib.tianzuo_QiankunInterface_initialize.restype = c_void_p\n        self.obj = tianzuo_QiankunLib.tianzuo_QiankunInterface_initialize()\n\n    def __del__(self):\n        tianzuo_QiankunLib.tianzuo_QiankunInterface_terminate.argtypes = [c_void_p]\n        tianzuo_QiankunLib.tianzuo_QiankunInterface_terminate(self.obj)\n\n    def initialize(self):\n        tianzuo_QiankunLib.tianzuo_QiankunInterface_initialize.restype = c_int\n        tianzuo_QiankunLib.tianzuo_QiankunInt_initialize.argtypes = [c_void_p]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_initialize(self.obj)\n\n    def db_create_database(self, db_file_name, db_password, db_name, over_write):\n        tianzuo_QiankunLib.tianzuo_QiankunInt_db_create_database.argtypes = [c_void_p, c_char_p, c_char_p, c_char_p, c_int]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_db_create_database(self.obj, db_file_name, db_password, db_name, over_write)\n\n    def db_open_database(self, db_file_name, db_password):\n        tianzuo_QiankunLib.tianzuo_QiankunInt_db_open_database.argtypes = [c_void_p, c_char_p, c_char_p]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_db_open_database(self.obj, db_file_name, db_password)\n\n    def db_close_database(self, db_file_name, db_password):\n        tianzuo_QiankunLib.tianzuo_QiankunInt_db_close_database.argtypes = [c_void_p, c_char_p, c_char_p]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_db_close_database(self.obj, db_file_name, db_password)\n\n    def data_int_combine(self, db_file_name, db_password, data_name, remark, data):\n        tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_combine.argtypes = [c_void_p, c_char_p, c_char_p, c_char_p, c_char_p, c_int]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_combine(self.obj, db_file_name, db_password, data_name, remark, data)\n\n    def data_int_extract(self, db_file_name, db_password, data_name, data):\n        tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_extract.argtypes = [c_void_p, c_char_p, c_char_p, c_char_p, ctypes.POINTER(ctypes.c_int)]\n        return tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_extract(self.obj, db_file_name, db_password, data_name, data)\n\ndef main():\n\n    # \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n    print(\"initialize the interface\")\n\n    # \u521b\u5efa\u5b9e\u4f8b create an instance\n    qiankun = tianzuo_QiankunInt()\n    error_code = qiankun.initialize()\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"initialize error:\", error_code)\n        return\n\n    # \u521b\u5efa\u6570\u636e\u5e93 create database\n    db_file_name = b\"qiankunDataBase.Ztz\"\n    db_password = b\"password\"\n    error_code = qiankun.db_create_database(db_file_name, db_password, b\"qiankunDataBase\", True)\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"db_create_database error:\", error_code)\n        return\n\n    # \u6253\u5f00\u6570\u636e\u5e93 open database\n    error_code = qiankun.db_open_database(db_file_name, db_password)\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"db_open_database error:\", error_code)\n        return\n\n    # \u5411\u6570\u636e\u5e93\u5199\u5165\u4e00\u4e2a\u6574\u578b\u6570\u636e writes an integer to the database\n    intInt = 12345678\n    error_code = qiankun.data_int_combine(db_file_name, db_password, b\"integer\", None, intInt)\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"data_combine error:\", error_code)\n        return\n\n    # \u8bfb\u53d6\u521a\u5199\u5165\u7684\u6570\u636e read the data just written\n    return_data = ctypes.c_int()\n    error_code = qiankun.data_int_extract(db_file_name, db_password, b\"integer\", ctypes.byref(return_data))\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"data_extract error:\", error_code)\n        return\n\n    integer = return_data.value\n    print(\"get integer data: {}\".format(integer))\n\n    # \u5173\u95ed\u6570\u636e\u5e93 close database\n    error_code = qiankun.db_close_database(db_file_name, db_password)\n    if error_code != Qiankun_error_code.Qiankun_errorcode_success.value:\n        print(\"db_close_database error:\", error_code)\n        return\n\n    print(\"test done -------------------\")\n\nif __name__ == '__main__':\n    main()\n\n</code></pre> java <pre><code>package cn.camelsoft;\n\nimport com.sun.jna.Library;\nimport com.sun.jna.Native;\nimport com.sun.jna.Pointer;\n\nenum Qiankun_error_code {\n    Qiankun_errorcode_success           (0x00000001),   ///&lt;  \u6b63\u786e\u7684\u503c\n    Qiankun_errorcode_normal            (0x00000002),   ///&lt;  \u9519\u8bef\u7684\u503c\n    Qiankun_errorcode_differ            (0x00000003),   ///&lt;  \u6570\u636e\u5e93\u6587\u4ef6\u6570\u6548\u9a8c\u672a\u901a\u8fc7 (The number of database files fails to be verified)\n    Qiankun_errorcode_no_rights         (0x00000004),   ///&lt;  \u6570\u636e\u5e93\u5bc6\u7801\u6548\u9a8c\u672a\u901a\u8fc7 (The database password verification failed)\n    Qiankun_errorcode_db_not_exist      (0x00000005),   ///&lt;  \u6570\u636e\u5e93\u6587\u4ef6\u4e0d\u5b58\u5728 (The database file does not exist)\n    Qiankun_errorcode_exist             (0x00000006),   ///&lt;  \u6570\u636e\u5df2\u5b58\u5728 (Data already exists)\n    Qiankun_errorcode_not_exist         (0x00000007),   ///&lt;  \u6570\u636e\u4e0d\u5b58\u5728 (Data does not exist)\n    Qiankun_errorcode_out_of_range      (0x00000008),   ///&lt;  \u8d85\u51fa\u8303\u56f4 (out of range)\n    Qiankun_errorcode_type              (0x00000009),   ///&lt;  \u7c7b\u578b\u4e0d\u7b26 (wrong type)\n    Qiankun_errorcode_param             (0x0000000A),   ///&lt;  \u53c2\u6570\u9519\u8bef (parameter error)\n    Qiankun_errorcode_compress          (0x0000000B),   ///&lt;  \u538b\u7f29\u9519\u8bef (compression error)\n    Qiankun_errorcode_get_array         (0x0000000C),   ///&lt;  \u6570\u7ec4\u9519\u8bef (arrary error)\n    Qiankun_errorcode_out_of_memory     (0x0000000D),   ///&lt;  \u5185\u5b58\u6ea2\u51fa (memory overflow)\n    Qiankun_errorcode_handle            (0x0000000E),   ///&lt;  \u53e5\u67c4\u9519\u8bef (error handle)\n    Qiankun_errorcode_io                (0x0000000F);   ///&lt;  IO\u9519\u8bef (io error)\n\n    private int value;\n\n    Qiankun_error_code(int value) {\n        this.value = value;\n    }\n\n    public int getValue() {\n        return value;\n    }\n}\n\npublic class Main {\n\n    public interface tianzuo_QiankunLib extends Library {\n        tianzuo_QiankunLib instance = (tianzuo_QiankunLib) Native.load(\"./tianzuo.Qiankun.dll\", tianzuo_QiankunLib.class);\n        Pointer tianzuo_QiankunInterface_initialize();\n        void tianzuo_QiankunInterface_terminate(Pointer qiankun);\n        int tianzuo_QiankunInt_initialize(Pointer qiankun);\n\n        int tianzuo_QiankunInt_db_create_database(Pointer qiankun, String db_file_name, String db_password, String db_name, Boolean over_write);\n        int tianzuo_QiankunInt_db_open_database(Pointer qiankun, String db_file_name, String db_password);\n        int tianzuo_QiankunInt_db_close_database(Pointer qiankun, String db_file_name, String db_password);\n        int tianzuo_QiankunInt_data_int_combine(Pointer qiankun, String db_file_name, String db_password, String data_name, String remark, int data);\n        int tianzuo_QiankunInt_data_int_extract(Pointer qiankun, String db_file_name, String db_password, String data_name, int[] data);\n    }\n\n    public static void main(String[] args) {\n        System.setProperty(\"jna.encoding\",\"UTF-8\");\n\n        // \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n        System.out.printf(\"initialize the interface\\n\");\n\n        // \u521b\u5efa\u5b9e\u4f8b create an instance\n        Pointer qiankun = tianzuo_QiankunLib.instance.tianzuo_QiankunInterface_initialize();\n        int error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_initialize(qiankun);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_initialize error: %d\\n\", error_code);\n            return;\n        }\n\n        // \u521b\u5efa\u6570\u636e\u5e93 create database\n        String db_file_name = \"qiankunDataBase.Ztz\";\n        String db_password = \"password\";\n        error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_db_create_database(qiankun, db_file_name, db_password, \"qiankunDataBase\", true);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_db_create_database error: %d\\n\", error_code);\n            return;\n        }\n\n        // \u6253\u5f00\u6570\u636e\u5e93 open database\n        error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_db_open_database(qiankun, db_file_name, db_password);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_db_open_database error: %d\\n\", error_code);\n            return;\n        }\n\n        // \u5411\u6570\u636e\u5e93\u5199\u5165\u4e00\u4e2a\u6574\u578b\u6570\u636e writes an integer to the database\n        int intInt = 12345678;\n        error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_data_int_combine(qiankun, db_file_name, db_password, \"integer\", \"\", intInt);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_data_int_combine error: %d\\n\", error_code);\n            return;\n        }\n\n        // \u8bfb\u53d6\u521a\u5199\u5165\u7684\u6570\u636e read the data just written\n        int[] return_data = {0};\n        error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_data_int_extract(qiankun, db_file_name, db_password, \"integer\", return_data);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_data_int_extract error: %d\\n\", error_code);\n            return;\n        }\n\n        System.out.printf(\"get int: %d\\n\", return_data[0]);\n\n        // \u5173\u95ed\u6570\u636e\u5e93 close database\n        error_code = tianzuo_QiankunLib.instance.tianzuo_QiankunInt_db_close_database(qiankun, db_file_name, db_password);\n        if (error_code != Qiankun_error_code.Qiankun_errorcode_success.getValue()) {\n            System.out.printf(\"tianzuo_QiankunInt_db_close_database error: %d\\n\", error_code);\n            return;\n        }\n\n        System.out.printf(\"test done -------------------\\n\");\n\n        tianzuo_QiankunLib.instance.tianzuo_QiankunInterface_terminate(qiankun);\n    }\n}\n</code></pre> csharp <pre><code>\n\nusing System.Runtime.InteropServices;\n\npublic enum Qiankun_error_code\n{\n    Qiankun_errorcode_success       = 0x00000001,              ///&lt;  \u6b63\u786e\u7684\u503c\n    Qiankun_errorcode_normal        = 0x00000002,              ///&lt;  \u9519\u8bef\u7684\u503c\n    Qiankun_errorcode_differ        = 0x00000003,              ///&lt;  \u6570\u636e\u5e93\u6587\u4ef6\u6570\u6548\u9a8c\u672a\u901a\u8fc7 (The number of database files fails to be verified)\n    Qiankun_errorcode_no_rights     = 0x00000004,              ///&lt;  \u6570\u636e\u5e93\u5bc6\u7801\u6548\u9a8c\u672a\u901a\u8fc7 (The database password verification failed)\n    Qiankun_errorcode_db_not_exist  = 0x00000005,              ///&lt;  \u6570\u636e\u5e93\u6587\u4ef6\u4e0d\u5b58\u5728 (The database file does not exist)\n    Qiankun_errorcode_exist         = 0x00000006,              ///&lt;  \u6570\u636e\u5df2\u5b58\u5728 (Data already exists)\n    Qiankun_errorcode_not_exist     = 0x00000007,              ///&lt;  \u6570\u636e\u4e0d\u5b58\u5728 (Data does not exist)\n    Qiankun_errorcode_out_of_range  = 0x00000008,              ///&lt;  \u8d85\u51fa\u8303\u56f4 (out of range)\n    Qiankun_errorcode_type          = 0x00000009,              ///&lt;  \u7c7b\u578b\u4e0d\u7b26 (wrong type)\n    Qiankun_errorcode_param         = 0x0000000A,              ///&lt;  \u53c2\u6570\u9519\u8bef (parameter error)\n    Qiankun_errorcode_compress      = 0x0000000B,              ///&lt;  \u538b\u7f29\u9519\u8bef (compression error)\n    Qiankun_errorcode_get_array     = 0x0000000C,              ///&lt;  \u6570\u7ec4\u9519\u8bef (arrary error)\n    Qiankun_errorcode_out_of_memory = 0x0000000D,              ///&lt;  \u5185\u5b58\u6ea2\u51fa (memory overflow)\n    Qiankun_errorcode_handle        = 0x0000000E,              ///&lt;  \u53e5\u67c4\u9519\u8bef (error handle)\n    Qiankun_errorcode_io            = 0x0000000F,              ///&lt;  IO\u9519\u8bef (io error)\n}\n\nclass Program {\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern IntPtr tianzuo_QiankunInterface_initialize();\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern void tianzuo_QiankunInterface_terminate(IntPtr qiankun);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_initialize(IntPtr qiankun);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_db_create_database(IntPtr qiankun, string db_file_name, string db_password, string db_name, bool over_write);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_db_open_database(IntPtr qiankun, string db_file_name, string db_password);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_db_close_database(IntPtr qiankun, string db_file_name, string db_password);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_data_int_combine(IntPtr qiankun, string db_file_name, string db_password, string data_name, string remark, int data);\n    [DllImport(\"tianzuo.Qiankun.dll\")]\n    public static extern int tianzuo_QiankunInt_data_int_extract(IntPtr qiankun, string db_file_name, string db_password, string data_name, ref int data);\n\n    static void Main(string[] args) {\n        // \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n        Console.WriteLine(\"initialize the interface\\n\");\n\n        // \u521b\u5efa\u5b9e\u4f8b create an instance\n        IntPtr qiankun = tianzuo_QiankunInterface_initialize();\n        int error_code = tianzuo_QiankunInt_initialize(qiankun);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success))\n        {\n            Console.WriteLine(\"tianzuo_QiankunInt_initialize error:\" + error_code);\n            return;\n        }\n\n        // \u521b\u5efa\u6570\u636e\u5e93 create database\n        string db_file_name = \"qiankunDataBase.Ztz\";\n        string db_password = \"password\";\n        error_code = tianzuo_QiankunInt_db_create_database(qiankun, db_file_name, db_password, \"qiankunDataBase\", true);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success))\n        {\n            Console.WriteLine(\"tianzuo_QiankunInt_db_create_database error:\" + error_code);\n            return;\n        }\n\n        // \u6253\u5f00\u6570\u636e\u5e93 open database\n        error_code = tianzuo_QiankunInt_db_open_database(qiankun, db_file_name, db_password);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success)) {\n            Console.WriteLine(\"tianzuo_QiankunInt_db_open_database error:\" + error_code);\n            return;\n        }\n\n        // \u5411\u6570\u636e\u5e93\u5199\u5165\u4e00\u4e2a\u6574\u578b\u6570\u636e writes an integer to the database\n        int intInt = 12345678;\n        error_code = tianzuo_QiankunInt_data_int_combine(qiankun, db_file_name, db_password, \"integer\", \"\", intInt);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success))\n        {\n            Console.WriteLine(\"tianzuo_QiankunInt_data_int_combine error:\" + error_code);\n            return;\n        }\n\n        // \u8bfb\u53d6\u521a\u5199\u5165\u7684\u6570\u636e read the data just written\n        int return_data = 0;\n        error_code = tianzuo_QiankunInt_data_int_extract(qiankun, db_file_name, db_password, \"integer\", ref return_data);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success))\n        {\n            Console.WriteLine(\"tianzuo_QiankunInt_data_int_extract error:\" + error_code);\n            return;\n        }\n\n        Console.WriteLine(\"get int: \" + return_data);\n\n        // \u5173\u95ed\u6570\u636e\u5e93 close database\n        error_code = tianzuo_QiankunInt_db_close_database(qiankun, db_file_name, db_password);\n        if (error_code != ((int)Qiankun_error_code.Qiankun_errorcode_success))\n        {\n            Console.WriteLine(\"tianzuo_QiankunInt_db_close_database error:\" + error_code);\n            return;\n        }\n\n        Console.WriteLine(\"test done -------------------\\n\");\n\n        tianzuo_QiankunInterface_terminate(qiankun);\n\n    }\n\n}\n</code></pre> javascript <pre><code>\nQiankun_errorcode_success           = 0x00000001;   ///&lt;  \u6b63\u786e\u7684\u503c\nQiankun_errorcode_normal            = 0x00000002;   ///&lt;  \u9519\u8bef\u7684\u503c\nQiankun_errorcode_differ            = 0x00000003;   ///&lt;  \u6570\u636e\u5e93\u6587\u4ef6\u6570\u6548\u9a8c\u672a\u901a\u8fc7 (The number of database files fails to be verified)\nQiankun_errorcode_no_rights         = 0x00000004;   ///&lt;  \u6570\u636e\u5e93\u5bc6\u7801\u6548\u9a8c\u672a\u901a\u8fc7 (The database password verification failed)\nQiankun_errorcode_db_not_exist      = 0x00000005;   ///&lt;  \u6570\u636e\u5e93\u6587\u4ef6\u4e0d\u5b58\u5728 (The database file does not exist)\nQiankun_errorcode_exist             = 0x00000006;   ///&lt;  \u6570\u636e\u5df2\u5b58\u5728 (Data already exists)\nQiankun_errorcode_not_exist         = 0x00000007;   ///&lt;  \u6570\u636e\u4e0d\u5b58\u5728 (Data does not exist)\nQiankun_errorcode_out_of_range      = 0x00000008;   ///&lt;  \u8d85\u51fa\u8303\u56f4 (out of range)\nQiankun_errorcode_type              = 0x00000009;   ///&lt;  \u7c7b\u578b\u4e0d\u7b26 (wrong type)\nQiankun_errorcode_param             = 0x0000000A;   ///&lt;  \u53c2\u6570\u9519\u8bef (parameter error)\nQiankun_errorcode_compress          = 0x0000000B;   ///&lt;  \u538b\u7f29\u9519\u8bef (compression error)\nQiankun_errorcode_get_array         = 0x0000000C;   ///&lt;  \u6570\u7ec4\u9519\u8bef (arrary error)\nQiankun_errorcode_out_of_memory     = 0x0000000D;   ///&lt;  \u5185\u5b58\u6ea2\u51fa (memory overflow)\nQiankun_errorcode_handle            = 0x0000000E;   ///&lt;  \u53e5\u67c4\u9519\u8bef (error handle)\nQiankun_errorcode_io                = 0x0000000F;   ///&lt;  IO\u9519\u8bef (io error)\n\nlet ffi = require('ffi-napi')\nconst ref = require('ref-napi');\n\nlet tianzuo_QiankunLib = ffi.Library(\"tianzuo.Qiankun.dll\", {\n    'tianzuo_QiankunInterface_initialize': ['pointer', []],\n    'tianzuo_QiankunInterface_terminate':['void',['pointer']],\n    'tianzuo_QiankunInt_initialize':['int',['pointer']],\n    'tianzuo_QiankunInt_db_create_database':['int',['pointer','string','string','string', 'bool']],\n    'tianzuo_QiankunInt_db_open_database':['int',['pointer', 'string', 'string']],\n    'tianzuo_QiankunInt_db_close_database':['int',['pointer', 'string', 'string']],\n    'tianzuo_QiankunInt_data_int_combine':['int',['pointer','string','string','string', 'string', 'int']],\n    'tianzuo_QiankunInt_data_int_extract':['int',['pointer','string','string','string', 'pointer']],\n})\n\n\n// \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\nconsole.log(\"initialize the interface\\n\");\n\n// \u521b\u5efa\u5b9e\u4f8b create an instance\nlet qiankun = tianzuo_QiankunLib.tianzuo_QiankunInterface_initialize();\nlet error_code = tianzuo_QiankunLib.tianzuo_QiankunInt_initialize(qiankun);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_initialize error: %d\\n\", error_code);\n    return;\n}\n\n// \u521b\u5efa\u6570\u636e\u5e93 create database\nlet db_file_name = \"qiankunDataBase.Ztz\";\nlet db_password = \"password\";\nerror_code = tianzuo_QiankunLib.tianzuo_QiankunInt_db_create_database(qiankun, db_file_name, db_password, \"qiankunDataBase\", true);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_db_create_database error: %d\\n\", error_code);\n    return;\n}\n\n// \u6253\u5f00\u6570\u636e\u5e93 open database\nerror_code = tianzuo_QiankunLib.tianzuo_QiankunInt_db_open_database(qiankun, db_file_name, db_password);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_db_open_database error: %d\\n\", error_code);\n    return;\n}\n\n// \u5411\u6570\u636e\u5e93\u5199\u5165\u4e00\u4e2a\u6574\u578b\u6570\u636e writes an integer to the database\nlet intInt = 12345678;\nerror_code = tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_combine(qiankun, db_file_name, db_password, \"integer\", \"\", intInt);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_data_int_combine error: %d\\n\", error_code);\n    return;\n}\n\n// \u8bfb\u53d6\u521a\u5199\u5165\u7684\u6570\u636e read the data just written\nreturn_buf = Buffer.alloc(1 * ref.sizeof.int);\nerror_code = tianzuo_QiankunLib.tianzuo_QiankunInt_data_int_extract(qiankun, db_file_name, db_password, \"integer\", return_buf);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_data_int_extract error: %d\\n\", error_code);\n    return;\n}\n\nreturn_data = ref.get(return_buf, 0, ref.types.int);\nconsole.log(\"get int: %d\\n\", return_data);\n\n// \u5173\u95ed\u6570\u636e\u5e93 close database\nerror_code = tianzuo_QiankunLib.tianzuo_QiankunInt_db_close_database(qiankun, db_file_name, db_password);\nif (error_code !== Qiankun_errorcode_success) {\n    console.log(\"tianzuo_QiankunInt_db_close_database error: %d\\n\", error_code);\n   return;\n}\n\nconsole.log(\"test done -------------------\\n\");\n\ntianzuo_QiankunLib.tianzuo_QiankunInterface_terminate(qiankun);\n\n</code></pre> php <pre><code>&lt;?php\n\n// \u68c0\u67e5\u662f\u5426\u52a0\u8f7d\u4e86 FFI \u6269\u5c55\nif (extension_loaded('ffi')) {\n    echo(\"\u5df2\u542f\u7528 FFI \u6269\u5c55\\n\");\n} else {\n    die(\"\u672a\u542f\u52a8 FFI \u6269\u5c55\\n\");\n}\n\nenum Qiankun_error_code\n{\nconst Qiankun_errorcode_success       = 0x00000001;            ///&lt;  \u6b63\u786e\u7684\u503c\nconst Qiankun_errorcode_normal        = 0x00000002;            ///&lt;  \u9519\u8bef\u7684\u503c\nconst Qiankun_errorcode_differ        = 0x00000003;            ///&lt;  \u6570\u636e\u5e93\u6587\u4ef6\u6570\u6548\u9a8c\u672a\u901a\u8fc7 (The number of database files fails to be verified)\nconst Qiankun_errorcode_no_rights     = 0x00000004;            ///&lt;  \u6570\u636e\u5e93\u5bc6\u7801\u6548\u9a8c\u672a\u901a\u8fc7 (The database password verification failed)\nconst Qiankun_errorcode_db_not_exist  = 0x00000005;            ///&lt;  \u6570\u636e\u5e93\u6587\u4ef6\u4e0d\u5b58\u5728 (The database file does not exist)\nconst Qiankun_errorcode_exist         = 0x00000006;            ///&lt;  \u6570\u636e\u5df2\u5b58\u5728 (Data already exists)\nconst Qiankun_errorcode_not_exist     = 0x00000007;            ///&lt;  \u6570\u636e\u4e0d\u5b58\u5728 (Data does not exist)\nconst Qiankun_errorcode_out_of_range  = 0x00000008;            ///&lt;  \u8d85\u51fa\u8303\u56f4 (out of range)\nconst Qiankun_errorcode_type          = 0x00000009;            ///&lt;  \u7c7b\u578b\u4e0d\u7b26 (wrong type)\nconst Qiankun_errorcode_param         = 0x0000000A;            ///&lt;  \u53c2\u6570\u9519\u8bef (parameter error)\nconst Qiankun_errorcode_compress      = 0x0000000B;            ///&lt;  \u538b\u7f29\u9519\u8bef (compression error)\nconst Qiankun_errorcode_get_array     = 0x0000000C;            ///&lt;  \u6570\u7ec4\u9519\u8bef (arrary error)\nconst Qiankun_errorcode_out_of_memory = 0x0000000D;            ///&lt;  \u5185\u5b58\u6ea2\u51fa (memory overflow)\nconst Qiankun_errorcode_handle        = 0x0000000E;            ///&lt;  \u53e5\u67c4\u9519\u8bef (error handle)\nconst Qiankun_errorcode_io            = 0x0000000F;            ///&lt;  IO\u9519\u8bef (io error)\n}\n\n$ffi = FFI::cdef(\"\n    void* tianzuo_QiankunInterface_initialize();\n    void tianzuo_QiankunInterface_terminate(void* *QiankunInt_pointer);\n    int tianzuo_QiankunInt_initialize(void* QiankunInt_pointer);\n    int tianzuo_QiankunInt_db_create_database(void* QiankunInt_pointer, const char* db_file_name, const char* db_password, const char* db_name, bool const over_write);\n    int tianzuo_QiankunInt_db_open_database(void* QiankunInt_pointer, const char* db_file_name, const char* db_password);\n    int tianzuo_QiankunInt_db_close_database(void* QiankunInt_pointer, const char* db_file_name, const char* db_password);\n    int tianzuo_QiankunInt_data_int_combine(void* QiankunInt_pointer, const char* db_file_name, const char* db_password, const char* data_name, const char* remark, int data);\n    int tianzuo_QiankunInt_data_int_extract(void* QiankunInt_pointer, const char* db_file_name, const char* db_password, const char* data_name, int* data);\n\", \"tianzuo.Qiankun.dll\");\n\n# \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\necho \"initialize the interface\" . \"\\n\";\n\n# \u521b\u5efa\u5b9e\u4f8b create an instance\n$qiankun = $ffi-&gt;tianzuo_QiankunInterface_initialize();\n\n$error_code = $ffi-&gt;tianzuo_QiankunInt_initialize($qiankun);\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"initialize error: \" . $error_code . \"\\n\";\n    return;\n}\n\n# \u521b\u5efa\u6570\u636e\u5e93 create database\n$db_file_name = \"qiankunDataBase.Ztz\";\n$db_password = \"password\";\n$error_code = $ffi-&gt;tianzuo_QiankunInt_db_create_database($qiankun, $db_file_name, $db_password, \"qiankunDataBase\", true);\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"tianzuo_QiankunInt_db_create_database error: \" . $error_code . \"\\n\";\n    return;\n}\n\n# \u6253\u5f00\u6570\u636e\u5e93 open database\n$error_code = $ffi-&gt;tianzuo_QiankunInt_db_open_database($qiankun, $db_file_name, $db_password);\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"tianzuo_QiankunInt_db_open_database error: \" . $error_code . \"\\n\";\n    return;\n}\n\n# \u5411\u6570\u636e\u5e93\u5199\u5165\u4e00\u4e2a\u6574\u578b\u6570\u636e writes an integer to the database\n$intInt = 12345678;\n$error_code = $ffi-&gt;tianzuo_QiankunInt_data_int_combine($qiankun, $db_file_name, $db_password, \"integer\", \"\", $intInt);\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"tianzuo_QiankunInt_data_int_combine error: \" . $error_code . \"\\n\";\n    return;\n}\n\n# \u8bfb\u53d6\u521a\u5199\u5165\u7684\u6570\u636e read the data just written\n$return_data = FFI::new(\"int\");\n$error_code = $ffi-&gt;tianzuo_QiankunInt_data_int_extract($qiankun, $db_file_name, $db_password, \"integer\", FFI::addr($return_data));\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"tianzuo_QiankunInt_data_int_extract error: \" . $error_code . \"\\n\";\n    return;\n}\n\necho \"get integer data: \" . $return_data-&gt;cdata . \"\\n\";\n\n# \u5173\u95ed\u6570\u636e\u5e93 close database\n$error_code = $ffi-&gt;tianzuo_QiankunInt_db_close_database($qiankun, $db_file_name, $db_password);\nif ($error_code != Qiankun_error_code::Qiankun_errorcode_success) {\n    echo \"tianzuo_QiankunInt_db_close_database error: \" . $error_code . \"\\n\";\n    return;\n}\n\necho \"test done -------------------\" . \"\\n\";\n\n?&gt;\n</code></pre> vb <pre><code>\nImports System.Runtime.InteropServices\n\nEnum Qiankun_error_code\n    Qiankun_errorcode_success = 1                     '  \u6b63\u786e\u7684\u503c\n    Qiankun_errorcode_normal = 2                      '  \u9519\u8bef\u7684\u503c\n    Qiankun_errorcode_differ = 3                      '  \u6570\u636e\u5e93\u6587\u4ef6\u6570\u6548\u9a8c\u672a\u901a\u8fc7 (The number Of database files fails To be verified)\n    Qiankun_errorcode_no_rights = 4                   '  \u6570\u636e\u5e93\u5bc6\u7801\u6548\u9a8c\u672a\u901a\u8fc7 (The database password verification failed)\n    Qiankun_errorcode_db_not_exist = 5                '  \u6570\u636e\u5e93\u6587\u4ef6\u4e0d\u5b58\u5728 (The database file does Not exist)\n    Qiankun_errorcode_exist = 6                       '  \u6570\u636e\u5df2\u5b58\u5728 (Data already exists)\n    Qiankun_errorcode_not_exist = 7                   '  \u6570\u636e\u4e0d\u5b58\u5728 (Data does Not exist)\n    Qiankun_errorcode_out_of_range = 8                '  \u8d85\u51fa\u8303\u56f4 (out Of range)\n    Qiankun_errorcode_type = 9                        '  \u7c7b\u578b\u4e0d\u7b26 (wrong type)\n    Qiankun_errorcode_param = 10                      '  \u53c2\u6570\u9519\u8bef (parameter Error)\n    Qiankun_errorcode_compress = 11                   '  \u538b\u7f29\u9519\u8bef (compression Error)\n    Qiankun_errorcode_get_array = 12                  '  \u6570\u7ec4\u9519\u8bef (arrary Error)\n    Qiankun_errorcode_out_of_memory = 13              '  \u5185\u5b58\u6ea2\u51fa (memory overflow)\n    Qiankun_errorcode_handle = 14                     '  \u53e5\u67c4\u9519\u8bef (Error handle)\n    Qiankun_errorcode_io = 15                         '  IO\u9519\u8bef (io Error)\nEnd Enum\n\nModule Program\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInterface_initialize() As IntPtr\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInterface_terminate(ByRef QiankunInt_pointer As IntPtr)\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_initialize(QiankunInt_pointer As IntPtr) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_db_create_database(QiankunInt_pointer As IntPtr, db_file_name As String, db_password As String, db_name As String, over_write As Boolean) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_db_open_database(QiankunInt_pointer As IntPtr, db_file_name As String, db_password As String) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_db_close_database(QiankunInt_pointer As IntPtr, db_file_name As String, db_password As String) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_data_int_combine(QiankunInt_pointer As IntPtr, db_file_name As String, db_password As String, data_name As String, remark As String, data As Integer) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Qiankun.dll\")&gt;\n    Public Function tianzuo_QiankunInt_data_int_extract(QiankunInt_pointer As IntPtr, db_file_name As String, db_password As String, data_name As String, ByRef data As Integer) As Integer\n    End Function\n\n    Sub Main(args As String())\n        ' \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n        Console.WriteLine(\"initialize the interface\")\n\n        ' \u521b\u5efa\u5b9e\u4f8b create an instance\n        Dim qiankun As IntPtr = tianzuo_QiankunInterface_initialize()\n        Dim error_code As Integer = tianzuo_QiankunInt_initialize(qiankun)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_initialize error:\" + error_code.ToString)\n            Return\n        End If\n\n        ' \u521b\u5efa\u6570\u636e\u5e93 create database\n        Dim db_file_name As String = \"qiankunDataBase.Ztz\"\n        Dim db_password As String = \"password\"\n        error_code = tianzuo_QiankunInt_db_create_database(qiankun, db_file_name, db_password, \"qiankunDataBase\", True)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_db_create_database error:\" + error_code.ToString)\n            Return\n        End If\n\n        ' \u6253\u5f00\u6570\u636e\u5e93 open database\n        error_code = tianzuo_QiankunInt_db_open_database(qiankun, db_file_name, db_password)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_db_open_database error:\" + error_code.ToString)\n            Return\n        End If\n\n        ' \u5411\u6570\u636e\u5e93\u5199\u5165\u4e00\u4e2a\u6574\u578b\u6570\u636e writes an integer to the database\n        Dim intInt As Integer = 12345678\n        error_code = tianzuo_QiankunInt_data_int_combine(qiankun, db_file_name, db_password, \"integer\", \"\", intInt)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_data_int_combine error:\" + error_code.ToString)\n            Return\n        End If\n\n        ' \u8bfb\u53d6\u521a\u5199\u5165\u7684\u6570\u636e read the data just written\n        Dim return_data As Integer = 0\n        error_code = tianzuo_QiankunInt_data_int_extract(qiankun, db_file_name, db_password, \"integer\", return_data)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_data_int_extract error:\" + error_code.ToString)\n            Return\n        End If\n\n        Console.WriteLine(\"get int: \" + return_data.ToString)\n\n        ' \u5173\u95ed\u6570\u636e\u5e93 close database\n        error_code = tianzuo_QiankunInt_db_close_database(qiankun, db_file_name, db_password)\n        If (error_code &lt;&gt; Qiankun_error_code.Qiankun_errorcode_success) Then\n            Console.WriteLine(\"tianzuo_QiankunInt_db_close_database error:\" + error_code.ToString)\n            Return\n        End If\n\n        Console.WriteLine(\"test done -------------------\")\n\n    End Sub\nEnd Module\n\n</code></pre> go <pre><code>package main\n\n/*\n#include \"tianzuo.QiankunInterface.h\"\n*/\nimport \"C\"\nimport (\n    \"fmt\"\n    \"syscall\"\n    \"unsafe\"\n)\n\nconst (\n    Qiankun_errorcode_success       = 1  //  \u6b63\u786e\u7684\u503c\n    Qiankun_errorcode_normal        = 2  //  \u9519\u8bef\u7684\u503c\n    Qiankun_errorcode_differ        = 3  //  \u6570\u636e\u5e93\u6587\u4ef6\u6570\u6548\u9a8c\u672a\u901a\u8fc7 (The number Of database files fails To be verified)\n    Qiankun_errorcode_no_rights     = 4  //  \u6570\u636e\u5e93\u5bc6\u7801\u6548\u9a8c\u672a\u901a\u8fc7 (The database password verification failed)\n    Qiankun_errorcode_db_not_exist  = 5  //  \u6570\u636e\u5e93\u6587\u4ef6\u4e0d\u5b58\u5728 (The database file does Not exist)\n    Qiankun_errorcode_exist         = 6  //  \u6570\u636e\u5df2\u5b58\u5728 (Data already exists)\n    Qiankun_errorcode_not_exist     = 7  //  \u6570\u636e\u4e0d\u5b58\u5728 (Data does Not exist)\n    Qiankun_errorcode_out_of_range  = 8  //  \u8d85\u51fa\u8303\u56f4 (out Of range)\n    Qiankun_errorcode_type          = 9  //  \u7c7b\u578b\u4e0d\u7b26 (wrong type)\n    Qiankun_errorcode_param         = 10 //  \u53c2\u6570\u9519\u8bef (parameter Error)\n    Qiankun_errorcode_compress      = 11 //  \u538b\u7f29\u9519\u8bef (compression Error)\n    Qiankun_errorcode_get_array     = 12 //  \u6570\u7ec4\u9519\u8bef (arrary Error)\n    Qiankun_errorcode_out_of_memory = 13 //  \u5185\u5b58\u6ea2\u51fa (memory overflow)\n    Qiankun_errorcode_handle        = 14 //  \u53e5\u67c4\u9519\u8bef (Error handle)\n    Qiankun_errorcode_io            = 15 //  IO\u9519\u8bef (io Error)\n)\n\nfunc main() {\n    // \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n    dll := syscall.MustLoadDLL(\"tianzuo.Qiankun.dll\")\n\n    // \u521b\u5efa\u5b9e\u4f8b create an instance\n    tianzuo_QiankunInterface_initialize := dll.MustFindProc(\"tianzuo_QiankunInterface_initialize\")\n    qiankun, _, _ := tianzuo_QiankunInterface_initialize.Call()\n\n    tianzuo_QiankunInt_initialize := dll.MustFindProc(\"tianzuo_QiankunInt_initialize\")\n    error_code, _, _ := tianzuo_QiankunInt_initialize.Call(qiankun)\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_initialize error: \", error_code)\n    }\n\n    // \u521b\u5efa\u6570\u636e\u5e93 create database\n    db_file_name := C.CString(\"qiankunDataBase.Ztz\")\n    db_password := C.CString(\"password\")\n    tianzuo_QiankunInt_db_create_database := dll.MustFindProc(\"tianzuo_QiankunInt_db_create_database\")\n    error_code, _, _ = tianzuo_QiankunInt_db_create_database.Call(qiankun, uintptr(unsafe.Pointer(db_file_name)), uintptr(unsafe.Pointer(db_password)), uintptr(unsafe.Pointer(C.CString(\"qiankunDataBase\"))), 1)\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_db_create_database error: \", error_code)\n    }\n\n    // \u6253\u5f00\u6570\u636e\u5e93 open database\n    tianzuo_QiankunInt_db_open_database := dll.MustFindProc(\"tianzuo_QiankunInt_db_open_database\")\n    error_code, _, _ = tianzuo_QiankunInt_db_open_database.Call(qiankun, uintptr(unsafe.Pointer(db_file_name)), uintptr(unsafe.Pointer(db_password)))\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_db_open_database error: \", error_code)\n    }\n\n    // \u5411\u6570\u636e\u5e93\u5199\u5165\u4e00\u4e2a\u6574\u578b\u6570\u636e writes an integer to the database\n    intInt := C.int(12345678)\n    tianzuo_QiankunInt_data_int_combine := dll.MustFindProc(\"tianzuo_QiankunInt_data_int_combine\")\n    error_code, _, _ = tianzuo_QiankunInt_data_int_combine.Call(qiankun, uintptr(unsafe.Pointer(db_file_name)), uintptr(unsafe.Pointer(db_password)), uintptr(unsafe.Pointer(C.CString(\"integer\"))), uintptr(unsafe.Pointer(C.CString(\"\"))), uintptr(intInt))\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_data_int_combine error: \", error_code)\n    }\n\n    // \u8bfb\u53d6\u521a\u5199\u5165\u7684\u6570\u636e read the data just written\n    return_int := C.int(0)\n    tianzuo_QiankunInt_data_int_extract := dll.MustFindProc(\"tianzuo_QiankunInt_data_int_extract\")\n    error_code, _, _ = tianzuo_QiankunInt_data_int_extract.Call(qiankun, uintptr(unsafe.Pointer(db_file_name)), uintptr(unsafe.Pointer(db_password)), uintptr(unsafe.Pointer(C.CString(\"integer\"))), uintptr(unsafe.Pointer(&amp;return_int)))\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_data_int_extract error: \", error_code)\n    }\n\n    fmt.Println(\"get integer data: \", return_int)\n\n    // \u5173\u95ed\u6570\u636e\u5e93 close database\n    tianzuo_QiankunInt_db_close_database := dll.MustFindProc(\"tianzuo_QiankunInt_db_close_database\")\n    error_code, _, _ = tianzuo_QiankunInt_db_close_database.Call(qiankun, uintptr(unsafe.Pointer(db_file_name)), uintptr(unsafe.Pointer(db_password)))\n    if error_code != Qiankun_errorcode_success {\n        fmt.Println(\"tianzuo_QiankunInt_db_close_database error: \", error_code)\n    }\n\n    fmt.Println(\"test done -------------------\")\n}\n\n</code></pre> rust <pre><code>\nuse std::os::raw::c_char;\nuse std::ffi::{c_int};\nuse std::ffi::CString;\nuse std::ptr::null;\n\n#[link(name = \"tianzuo.Qiankun\")]\nextern {\n    fn tianzuo_QiankunInterface_initialize() -&gt; *mut std::ffi::c_void;\n    fn tianzuo_QiankunInterface_terminate(obj: *mut std::ffi::c_void);\n    fn tianzuo_QiankunInt_initialize(obj: *mut std::ffi::c_void) -&gt; c_int;\n    fn tianzuo_QiankunInt_db_create_database(obj: *mut std::ffi::c_void, db_file_name: *const c_char, db_password: *const c_char, db_name: *const c_char, over_write: c_int) -&gt; c_int;\n    fn tianzuo_QiankunInt_db_open_database(obj: *mut std::ffi::c_void, db_file_name: *const c_char, db_password: *const c_char) -&gt; c_int;\n    fn tianzuo_QiankunInt_db_close_database(obj: *mut std::ffi::c_void, db_file_name: *const c_char, db_password: *const c_char) -&gt; c_int;\n    fn tianzuo_QiankunInt_data_int_combine(obj: *mut std::ffi::c_void, db_file_name: *const c_char, db_password: *const c_char, data_name: *const c_char, remark: *const c_char, data: c_int) -&gt; c_int;\n    fn tianzuo_QiankunInt_data_int_extract(obj: *mut std::ffi::c_void, db_file_name: *const c_char, db_password: *const c_char, data_name: *const c_char, data: *const c_int) -&gt; c_int;\n}\n\nfn main() {\n    unsafe {\n        // \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n        println!(\"initialize the interface\");\n\n        // \u521b\u5efa\u5b9e\u4f8b create an instance\n        let qiankun = tianzuo_QiankunInterface_initialize();\n        let error_code = tianzuo_QiankunInt_initialize(qiankun);\n        if 1 != error_code {\n            println!(\"initialize error: {:?}\", error_code);\n        }\n\n        // \u521b\u5efa\u6570\u636e\u5e93 create database\n        let db_file_name = CString::new(String::from(\"qiankunDataBase.Ztz\")).expect(\"Failed to create CString\");\n        let db_password = CString::new(String::from(\"password\")).expect(\"Failed to create CString\");\n        let db_name = CString::new(String::from(\"qiankunDataBase\")).expect(\"Failed to create CString\");\n        let error_code = tianzuo_QiankunInt_db_create_database(qiankun, db_file_name.as_ptr(), db_password.as_ptr(), db_name.as_ptr(), 1);\n        if 1 != error_code {\n            println!(\"db_create_database error: {:?}\", error_code);\n        }\n\n        // \u6253\u5f00\u6570\u636e\u5e93 open database\n        let error_code = tianzuo_QiankunInt_db_open_database(qiankun, db_file_name.as_ptr(), db_password.as_ptr());\n        if 1 != error_code {\n            println!(\"db_open_database error: {:?}\", error_code);\n        }\n\n        // \u5411\u6570\u636e\u5e93\u5199\u5165\u4e00\u4e2a\u6574\u578b\u6570\u636e writes an integer to the database\n        let int = 12345678;\n        let data_name = CString::new(String::from(\"integer\")).expect(\"Failed to create CString\");\n        let error_code = tianzuo_QiankunInt_data_int_combine(qiankun, db_file_name.as_ptr(), db_password.as_ptr(), data_name.as_ptr(), null(), int);\n        if 1 != error_code {\n            println!(\"data_combine error: {:?}\", error_code);\n        }\n\n        // \u8bfb\u53d6\u521a\u5199\u5165\u7684\u6570\u636e read the data just written\n        let mut return_data: c_int = 0;\n        let error_code = tianzuo_QiankunInt_data_int_extract(qiankun, db_file_name.as_ptr(), db_password.as_ptr(), data_name.as_ptr(), &amp;mut return_data);\n        if 1 != error_code {\n            println!(\"data_extract error: {:?}\", error_code);\n        }\n\n        println!(\"get integer data: {:?}\", return_data);\n\n        // \u5173\u95ed\u6570\u636e\u5e93 close database\n        let error_code = tianzuo_QiankunInt_db_close_database(qiankun, db_file_name.as_ptr(), db_password.as_ptr());\n        if 1 != error_code {\n            println!(\"db_close_database error: {:?}\", error_code);\n        }\n\n        println!(\"test done -------------------\")\n    }\n}\n\n</code></pre> ruby <pre><code>require 'fiddle'\n\nlib = Fiddle::dlopen('C:/Users/zhengtianzuo/RubymineProjects/tianzuo.QiankunTest/tianzuo.Qiankun.dll')\ntianzuo_QiankunInterface_initialize = Fiddle::Function.new(lib['tianzuo_QiankunInterface_initialize'], [], Fiddle::TYPE_VOIDP)\ntianzuo_QiankunInterface_terminate = Fiddle::Function.new(lib['tianzuo_QiankunInterface_terminate'], [Fiddle::TYPE_VOIDP], Fiddle::TYPE_VOID)\ntianzuo_QiankunInt_initialize = Fiddle::Function.new(lib['tianzuo_QiankunInt_initialize'], [Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\ntianzuo_QiankunInt_db_create_database = Fiddle::Function.new(lib['tianzuo_QiankunInt_db_create_database'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT], Fiddle::TYPE_INT)\ntianzuo_QiankunInt_db_open_database = Fiddle::Function.new(lib['tianzuo_QiankunInt_db_open_database'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\ntianzuo_QiankunInt_data_int_combine = Fiddle::Function.new(lib['tianzuo_QiankunInt_data_int_combine'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT], Fiddle::TYPE_INT)\ntianzuo_QiankunInt_data_int_extract = Fiddle::Function.new(lib['tianzuo_QiankunInt_data_int_extract'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\ntianzuo_QiankunInt_db_close_database = Fiddle::Function.new(lib['tianzuo_QiankunInt_db_close_database'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\n\n# \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\nprint(\"initialize the interface\\n\")\n\n# \u521b\u5efa\u5b9e\u4f8b create an instance\nqiankun = tianzuo_QiankunInterface_initialize.call()\nerror_code = tianzuo_QiankunInt_initialize.call(qiankun)\nif error_code != 1\n  print(\"initialize error:\", error_code, \"\\n\")\n  return\nend\n\n# \u521b\u5efa\u6570\u636e\u5e93 create database\ndb_file_name = \"qiankunDataBase.Ztz\"\ndb_password = \"password\"\nerror_code = tianzuo_QiankunInt_db_create_database.call(qiankun, db_file_name, db_password, \"qiankunDataBase\", 1)\nif error_code != 1\n  print(\"db_create_database error:\", error_code, \"\\n\")\n  return\nend\n\n# \u6253\u5f00\u6570\u636e\u5e93 open database\nerror_code = tianzuo_QiankunInt_db_open_database.call(qiankun, db_file_name, db_password)\nif error_code != 1\n  print(\"db_open_database error:\", error_code, \"\\n\")\nreturn\nend\n\n# \u5411\u6570\u636e\u5e93\u5199\u5165\u4e00\u4e2a\u6574\u578b\u6570\u636e writes an integer to the database\nintInt = 12345678\nerror_code = tianzuo_QiankunInt_data_int_combine.call(qiankun, db_file_name, db_password, \"integer\", \"\", intInt)\nif error_code != 1\n  print(\"data_combine error:\", error_code, \"\\n\")\nreturn\nend\n\n# \u8bfb\u53d6\u521a\u5199\u5165\u7684\u6570\u636e read the data just written\nreturn_data = Fiddle::Pointer.malloc(Fiddle::SIZEOF_INT)\nerror_code = tianzuo_QiankunInt_data_int_extract.call(qiankun, db_file_name, db_password, \"integer\", return_data)\nif error_code != 1\n  print(\"data_extract error:\", error_code, \"\\n\")\nreturn\nend\n\ninteger = return_data[0, Fiddle::SIZEOF_INT].unpack('I')[0]\nprint(\"get integer data: \", integer, \"\\n\")\n\n# \u5173\u95ed\u6570\u636e\u5e93 close database\nerror_code = tianzuo_QiankunInt_db_close_database.call(qiankun, db_file_name, db_password)\nif error_code != 1\n  print(\"db_close_database error:\", error_code)\nreturn\nend\n\nprint(\"test done -------------------\")\n\n</code></pre>"},{"location":"en/component/tianzuo.Qiankun/#download","title":"download","text":""},{"location":"en/component/tianzuo.Zhuiri/","title":"tianzuo.Zhuiri","text":""},{"location":"en/component/tianzuo.Zhuiri/#tianzuozhuiri_1","title":"tianzuo.Zhuiri","text":"operating system compiler programming language"},{"location":"en/component/tianzuo.Zhuiri/#introduction","title":"introduction","text":"<p>tianzuo.Zhuiri High performance reliable UDP data transmission P2P communication framework, can be used to establish P2P environment, file transfer, data communication. UDP protocol based Intranet penetration solution, easy to achieve audio and video conference center, live broadcast, remote desktop/document presentation and other functions.</p> <p>legend: With these boots, you can walk a thousand miles a day and eight hundred miles a night, like wings. Thirst to drink, drink in the river Wei, river Wei insufficient, north drink Daze. Before he arrived, Tao died of thirst. Give up his staff, become Deng Lin.</p>"},{"location":"en/component/tianzuo.Zhuiri/#motivation","title":"motivation","text":"<p>Build reliable UDP data transmission, dynamically adjust the packet loss rate and transmission performance according to the policy, which can facilitate the establishment of P2P communication.</p> <p></p>"},{"location":"en/component/tianzuo.Zhuiri/#features","title":"features","text":"<ul> <li>\ud83e\udde9 simple integration</li> <li>\ud83d\udcca The high level protocol realizes the stability and reliability of data communication, and can dynamically modify the parameters to adjust the communication strategy.</li> <li>\ud83e\udea1 Multiple components can be initialized with the same socket for multithreaded data communication.</li> <li>\ud83d\udd22 Solution to packet loss: using self-developed parallel sliding window protocol to ensure stable and reliable data transmission.</li> <li>\ud83e\ude9f Dynamic adjustment: The feasible efficiency of data communication is dynamically evaluated and calculated to obtain the best communication performance in the current environment.</li> <li>\ud83d\udc5c Data group frame: communication packet sending subcontract, receiving group packet, to ensure the integrity of the data order.</li> </ul>"},{"location":"en/component/tianzuo.Zhuiri/#screenshot","title":"screenshot","text":"<p>tianzuo.Zhuiri Test:</p> <p></p>"},{"location":"en/component/tianzuo.Zhuiri/#example","title":"example","text":"cpp <pre><code>#include &lt;iostream&gt;\n#include &lt;thread&gt;\n#include \"tianzuo.ZhuiriInterface.h\" // \u63a5\u53e3\u5934\u6587\u4ef6 interface heaher file\n\n#include &lt;winsock.h&gt;\n#pragma comment(lib, \"ws2_32.lib\")\n\n// \u6570\u636e\u56de\u8c03\u51fd\u6570\nvoid msg_recv_callback(void* context, Zhuiri_data_pkg_pointer data_pkg) {\n    Zhuiri_data_pkg_struct data_new;\n    memcpy(&amp;data_new, data_pkg, sizeof(Zhuiri_data_pkg_struct));\n    int send_size = data_pkg-&gt;m_data.get_send_size();\n    if (send_size &gt; Zhuiri_content_size) {\n        char* send_data = new char[static_cast&lt;unsigned int&gt;(send_size)];\n        memcpy(send_data, data_pkg-&gt;get_send_data(), static_cast&lt;unsigned int&gt;(send_size));\n        data_new.set_send_data(send_data);\n    } else {\n        data_new.set_send_data(data_new.m_data.m_data);\n    }\n    tianzuo_DataQueue* const dataQueue = reinterpret_cast&lt;tianzuo_DataQueue*&gt;(context);\n    dataQueue-&gt;push_back(&amp;data_new);\n}\n\n// \u63a5\u6536\u7ebf\u7a0b\nvoid recv_thread(tianzuo_DataQueue* data_queue_recv) {\n    while (1) {\n        Zhuiri_data_pkg_struct recv_msg;\n        if (data_queue_recv-&gt;pop_up(&amp;recv_msg) != Zhuiri_queue_error_code_success) {\n            //std::cout &lt;&lt; \"pop_up no data\" &lt;&lt; std::endl;\n            std::this_thread::sleep_for(std::chrono::milliseconds(200));\n            continue;\n        }\n\n        std::cout &lt;&lt; \"recv data: \" &lt;&lt; recv_msg.m_data.m_data &lt;&lt; std::endl;\n        if (strcmp(recv_msg.m_data.m_data, \"send data 99\") == 0) {\n            std::cout &lt;&lt; \"recv done\" &lt;&lt; std::endl;\n            return;\n        }\n    }\n}\n\nint main() {\n\n    // \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n    std::unique_ptr&lt;tianzuo_ZhuiriInterface&gt; zhuiri_interface(new tianzuo_ZhuiriInterface());\n\n    // \u521b\u5efa\u5b9e\u4f8b create an instance\n    tianzuo_ZhuiriInt* zhuiri = zhuiri_interface-&gt;initialize();\n\n    // \u521d\u59cb\u5316\u6570\u636e\u961f\u5217\u63a5\u53e3 initialize the data queue interface\n    std::unique_ptr&lt;tianzuo_DataQueueInterface&gt; data_queue_interface(new tianzuo_DataQueueInterface());\n\n    // \u521b\u5efa\u6570\u636e\u961f\u5217\u5b9e\u4f8b create an data queue instance\n    tianzuo_DataQueue* data_queue_recv = data_queue_interface-&gt;initialize();\n\n    // \u521d\u59cb\u5316\u5b9e\u4f8b initialize the instance\n    int port = 6666;\n    int error_code = zhuiri-&gt;initialize(\n        nullptr, port, reinterpret_cast&lt;void*&gt;(msg_recv_callback),\n        data_queue_recv, 6000, false);\n    if (error_code != Zhuiri_error_code_success) {\n        std::cout &lt;&lt; \"initialize error: \" &lt;&lt; error_code;\n\n        // \u91ca\u653e\u63a5\u53e3 terminate the interface\n        if (data_queue_interface != nullptr &amp;&amp; data_queue_recv != nullptr) {\n            data_queue_interface-&gt;terminate(&amp;data_queue_recv);\n        }\n        if (zhuiri_interface != nullptr &amp;&amp; zhuiri != nullptr) {\n            zhuiri_interface-&gt;terminate(&amp;zhuiri);\n        }\n        return -1;\n    }\n\n    // \u8bbe\u7f6e\u9ed8\u8ba4\u53c2\u6570 set default parameters\n    Zhuiri_param_struct param(0, 5168, 1024, 2280, 3, 5, 600);\n    zhuiri-&gt;set_param(&amp;param);\n\n    // \u542f\u52a8\u63a5\u6536\u7ebf\u7a0b start receiving thread\n    std::thread recv_th(recv_thread, data_queue_recv);\n\n    // \u5f00\u59cb\u53d1\u9001\u6570\u636e start sending data\n    int data_size = 1024;\n    char data[1024];\n    memset(data, 0, data_size);\n    int ip = ntohl(inet_addr(\"127.0.0.1\"));\n    for (size_t i = 0; i &lt; 100; i++) {\n        //std::cout &lt;&lt; \"start send index: \" &lt;&lt; i &lt;&lt; std::endl;\n        sprintf_s(data, data_size, \"send data %d\", i);\n        int data_len = strlen(data);\n        Zhuiri_send_param_struct send_param(0, ip, port, Zhuiri_data_sign_reliable, 7788, data, data_len);\n        error_code = zhuiri-&gt;send(&amp;send_param);\n        if (error_code != Zhuiri_error_code_success) {\n            std::cout &lt;&lt; \"send error: \" &lt;&lt; error_code;\n\n            // \u91ca\u653e\u63a5\u53e3 terminate the interface\n            if (data_queue_interface != nullptr &amp;&amp; data_queue_recv != nullptr) {\n                data_queue_interface-&gt;terminate(&amp;data_queue_recv);\n            }\n            if (zhuiri_interface != nullptr &amp;&amp; zhuiri != nullptr) {\n                zhuiri_interface-&gt;terminate(&amp;zhuiri);\n            }\n            return -1;\n        }\n        //std::this_thread::sleep_for(std::chrono::milliseconds(10));\n    }\n    std::cout &lt;&lt; \"send done\" &lt;&lt; std::endl;\n    recv_th.join();\n\n    // \u91ca\u653e\u63a5\u53e3 terminate the interface\n    if (data_queue_interface != nullptr &amp;&amp; data_queue_recv != nullptr) {\n        data_queue_interface-&gt;terminate(&amp;data_queue_recv);\n    }\n    if (zhuiri_interface != nullptr &amp;&amp; zhuiri != nullptr) {\n        zhuiri_interface-&gt;terminate(&amp;zhuiri);\n    }\n\n    return 0;\n}\n</code></pre> python <pre><code>from ctypes import *\nfrom enum import Enum\nimport ctypes\nimport ipaddress\n\ntianzuo_ZhuiriLib = cdll.LoadLibrary('./tianzuo.Zhuiri.dll')\n\n\nclass Zhuiri_error_code(Enum):\n    Zhuiri_error_code_success       = 0x00000001                                     # \u6b63\u786e\u7684\u503c (success)\n    Zhuiri_error_code_no_rights     = 0x00000002                                     # \u6548\u9a8c\u672a\u901a\u8fc7 (no rights)\n    Zhuiri_error_code_socket        = 0x0000000D                                     # \u5957\u63a5\u5b57\u9519\u8bef (socket error)\n    Zhuiri_error_code_thread_error  = 0x00000021                                     # \u7ebf\u7a0b\u5931\u8d25 (thread error)\n    Zhuiri_error_code_handle        = 0x00000022                                     # \u521b\u5efa\u53e5\u67c4\u5931\u8d25 (handle error)\n    Zhuiri_error_code_out_of_cache  = 0x00000023                                     # \u8d85\u51fa\u7f13\u51b2\u6700\u5927\u503c (out f cache)\n    Zhuiri_error_code_out_of_memory = 0x00000024                                     # \u5185\u5b58\u6ea2\u51fa (out of memory)\n    Zhuiri_error_code_time_out      = 0x00000025                                     # \u64cd\u4f5c\u8d85\u65f6 (time out)\n    Zhuiri_error_code_user_reject   = 0x00000098                                     # \u5bf9\u65b9\u51b3\u7edd (user reject)\n    Zhuiri_error_code_user_exit     = 0x00000099                                     # \u81ea\u884c\u9000\u51fa (user exit)\n\n\nclass Zhuiri_queue_error_code(Enum):\n    Zhuiri_queue_error_code_success       = 0x00000001                               # \u6b63\u786e\u7684\u503c (success)\n    Zhuiri_queue_error_code_invalid_value = 0x00000002                               # \u65e0\u6548\u7684\u503c (invalid value)\n    Zhuiri_queue_error_code_out_of_cache  = 0x00000003                               # \u8d85\u51fa\u7f13\u51b2 (out f cache)\n    Zhuiri_queue_error_code_out_of_memory = 0x00000004                               # \u5185\u5b58\u6ea2\u51fa (out of memory)\n    Zhuiri_queue_error_code_no_data       = 0x00000005                               # \u65e0\u6570\u636e (no data)\n\n\nclass Zhuiri_data_sign(Enum):\n    Zhuiri_data_sign_none       = 0x00000000                                         # \u65e0\u6807\u8bc6  (no sign)\n    Zhuiri_data_sign_reliable   = 0x00000001                                         # \u53ef\u9760    (reliable)\n    Zhuiri_data_sign_processing = 0x00000002                                         # \u5904\u7406\u4e2d  (processing)\n    Zhuiri_data_sign_response   = 0x00000003                                         # \u56de\u5e94\u6d88\u606f (response)\n    Zhuiri_data_sign_heart      = 0x00000004                                         # \u5fc3\u8df3\u5305  (heart)\n\n\nclass tianzuo_ZhuiriInt:\n    def __init__(self):\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInterface_initialize.restype = c_void_p\n        self.obj = tianzuo_ZhuiriLib.tianzuo_ZhuiriInterface_initialize()\n\n    def __del__(self):\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInterface_terminate.argtypes = [c_void_p]\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInterface_terminate(self.obj)\n\n    def initialize(self, ip_addr, port, callback, context, heart_check_time, log_trace, iocp):\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_initialize.restype = c_int\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_initialize.argtypes = [c_void_p, c_char_p, ctypes.c_int, c_void_p, c_void_p, ctypes.c_int, ctypes.c_int, c_void_p]\n        return tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_initialize(self.obj, ip_addr, port, callback, context, heart_check_time, log_trace, iocp)\n\n    def set_param(self, sender_index, init_server_port, msg_init_size, recv_ex_data_max, retry_max, retry_all_number, init_retry_time):\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_set_param.restype = c_int\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_set_param.argtypes = [c_void_p, c_int, c_int, c_int, c_int, c_int, c_int, c_int]\n        return tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_set_param(self.obj, sender_index, init_server_port, msg_init_size, recv_ex_data_max, retry_max, retry_all_number, init_retry_time)\n\n    def send(self, sender_index, ip, port, sign, function, send_data, send_size):\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_send.restype = c_int\n        tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_send.argtypes = [c_void_p, c_int, c_int, c_int, c_int, c_int, c_char_p, c_int]\n        return tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_send(self.obj, sender_index, ip, port, sign, function, send_data, send_size)\n\n\nclass tianzuo_DataQueueInt:\n    def __init__(self):\n        tianzuo_ZhuiriLib.tianzuo_DataQueueInterface_initialize.restype = c_void_p\n        self.obj = tianzuo_ZhuiriLib.tianzuo_DataQueueInterface_initialize()\n\n    def __del__(self):\n        tianzuo_ZhuiriLib.tianzuo_DataQueueInterface_terminate.argtypes = [c_void_p]\n        tianzuo_ZhuiriLib.tianzuo_DataQueueInterface_terminate(self.obj)\n\n    def initialize(self):\n        tianzuo_ZhuiriLib.tianzuo_DataQueueInt_initialize.restype = c_void_p\n        tianzuo_ZhuiriLib.tianzuo_DataQueueInt_initialize.argtypes = [c_void_p]\n        return tianzuo_ZhuiriLib.tianzuo_DataQueueInt_initialize(self.obj)\n\n\ncallback_type = ctypes.CFUNCTYPE(c_void_p, c_void_p, c_void_p)\n\n\nclass Zhuiri_data_struct(ctypes.Structure):\n    _fields_ = [(\"m_ip_adrs\", ctypes.c_int),\n                (\"m_port\", ctypes.c_int),\n                (\"m_function\", ctypes.c_int),\n                (\"m_sign\", ctypes.c_int),\n                (\"m_index\", ctypes.c_int),\n                (\"m_send_time\", ctypes.c_int),\n                (\"m_send_size\", ctypes.c_int),\n                (\"m_data\", ctypes.c_char * 492)]\n\n\nclass Zhuiri_data_pkg_struct(ctypes.Structure):\n    _fields_ = [(\"m_data\", Zhuiri_data_struct),\n                (\"m_send_data\", ctypes.c_char_p),\n                (\"m_Zhuiri\", ctypes.c_void_p),\n                (\"m_user_data\", ctypes.c_void_p)]\n\n\ndef msg_recv_callback(context, pData):\n    data = ctypes.cast(pData, ctypes.POINTER(Zhuiri_data_pkg_struct)).contents\n    print(\"recv data:\", data.m_data.m_data)\n\n\ndef main():\n    # \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n    print(\"initialize the interface\")\n\n    # \u521b\u5efa\u5b9e\u4f8b create an instance\n    data_queue_recv = tianzuo_DataQueueInt()\n    pdata_queue_recv = ctypes.pointer(ctypes.py_object(data_queue_recv))\n\n    pmsg_recv_callback = callback_type(msg_recv_callback)\n\n    Zhuiri = tianzuo_ZhuiriInt()\n    port = 6666\n    error_code = Zhuiri.initialize(None, port, pmsg_recv_callback, pdata_queue_recv, 6000, False, None)\n    if error_code != Zhuiri_error_code.Zhuiri_error_code_success.value:\n        print(\"initialize error:\", error_code)\n        return\n\n    # \u8bbe\u7f6e\u9ed8\u8ba4\u53c2\u6570 set default parameters\n    Zhuiri.set_param(0, 5168, 1024, 2280, 3, 5, 600)\n\n    # \u5f00\u59cb\u53d1\u9001\u6570\u636e start sending data\n    ip = int(ipaddress.IPv4Address(\"127.0.0.1\"))\n    for i in range(100):\n        data = \"send data {}\".format(i)\n        data_len = len(data)\n        bytes_string = data.encode('utf-8')\n        error_code = Zhuiri.send(0, ip, port, Zhuiri_data_sign.Zhuiri_data_sign_reliable.value, 7788, bytes_string, data_len)\n        if error_code != Zhuiri_error_code.Zhuiri_error_code_success.value:\n            print(\"send error:\", error_code)\n            return\n\n    print(\"test done\")\n\n\nif __name__ == '__main__':\n    main()\n\n</code></pre> java <pre><code>package cn.camelsoft;\n\nimport com.sun.jna.Library;\nimport com.sun.jna.Native;\nimport com.sun.jna.Pointer;\nimport com.sun.jna.Callback;\nimport com.sun.jna.CallbackReference;\nimport com.sun.jna.ptr.IntByReference;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\n\nenum Zhuiri_error_code {\n    Zhuiri_error_code_success       (0x00000001),                                     ///&lt; \u6b63\u786e\u7684\u503c (success)\n    Zhuiri_error_code_no_rights     (0x00000002),                                     ///&lt; \u6548\u9a8c\u672a\u901a\u8fc7 (no rights)\n    Zhuiri_error_code_socket        (0x0000000D),                                     ///&lt; \u5957\u63a5\u5b57\u9519\u8bef (socket error)\n    Zhuiri_error_code_thread_error  (0x00000021),                                     ///&lt; \u7ebf\u7a0b\u5931\u8d25 (thread error)\n    Zhuiri_error_code_handle        (0x00000022),                                     ///&lt; \u521b\u5efa\u53e5\u67c4\u5931\u8d25 (handle error)\n    Zhuiri_error_code_out_of_cache  (0x00000023),                                     ///&lt; \u8d85\u51fa\u7f13\u51b2\u6700\u5927\u503c (out f cache)\n    Zhuiri_error_code_out_of_memory (0x00000024),                                     ///&lt; \u5185\u5b58\u6ea2\u51fa (out of memory)\n    Zhuiri_error_code_time_out      (0x00000025),                                     ///&lt; \u64cd\u4f5c\u8d85\u65f6 (time out)\n    Zhuiri_error_code_user_reject   (0x00000098),                                     ///&lt; \u5bf9\u65b9\u51b3\u7edd (user reject)\n    Zhuiri_error_code_user_exit     (0x00000099);                                     ///&lt; \u81ea\u884c\u9000\u51fa (user exit)\n    private int value;\n    Zhuiri_error_code(int value) {\n        this.value = value;\n    }\n    public int getValue() {\n        return value;\n    }\n};\n\nenum Zhuiri_data_sign {\n    Zhuiri_data_sign_none       (0x00000000),                                         ///&lt; \u65e0\u6807\u8bc6  (no sign)\n    Zhuiri_data_sign_reliable   (0x00000001),                                         ///&lt; \u53ef\u9760    (reliable)\n    Zhuiri_data_sign_processing (0x00000002),                                         ///&lt; \u5904\u7406\u4e2d  (processing)\n    Zhuiri_data_sign_response   (0x00000003),                                         ///&lt; \u56de\u5e94\u6d88\u606f (response)\n    Zhuiri_data_sign_heart      (0x00000004);                                         ///&lt; \u5fc3\u8df3\u5305  (heart)\n    private int value;\n    Zhuiri_data_sign(int value) {\n        this.value = value;\n    }\n    public int getValue() {\n        return value;\n    }\n};\n\ninterface tianzuo_ZhuiriLib extends Library {\n    tianzuo_ZhuiriLib instance = (tianzuo_ZhuiriLib) Native.load(\"./tianzuo.Zhuiri.dll\", tianzuo_ZhuiriLib.class);\n    Pointer tianzuo_ZhuiriInterface_initialize();\n    void tianzuo_ZhuiriInterface_terminate(Pointer zhuiri);\n    int tianzuo_ZhuiriInt_initialize(Pointer zhuiri, String ip_addr, int port, Pointer callback, Pointer context, int heart_check_time, Boolean log_trace, Pointer iocp);\n    int tianzuo_ZhuiriInt_set_param(Pointer zhuiri, int sender_index, int init_server_port, int msg_init_size, int recv_ex_data_max, int retry_max, int retry_all_number, int init_retry_time);\n    int tianzuo_ZhuiriInt_send(Pointer zhuiri, int sender_index, int ip, int port, int sign, int function, String send_data, int send_size);\n}\n\ninterface tianzuo_DataQueueLib extends Library {\n    tianzuo_DataQueueLib instance = (tianzuo_DataQueueLib) Native.load(\"./tianzuo.Zhuiri.dll\", tianzuo_DataQueueLib.class);\n    Pointer tianzuo_DataQueueInterface_initialize();\n    void tianzuo_DataQueueInterface_terminate(Pointer DataQueue);\n    int tianzuo_DataQueueInt_initialize(Pointer DataQueue);\n}\n\ninterface MyCallback extends Callback {\n    void callbackFunction(Pointer context, Pointer pData);\n}\nclass MyCallbackImpl implements MyCallback {\n\n    @Override\n    public void callbackFunction(Pointer context, Pointer pData) {\n        Zhuiri_data_pkg_struct data_pkg = new Zhuiri_data_pkg_struct(pData);\n        String str = new String(data_pkg.m_data.m_data).trim();\n        System.out.printf(\"recv data: %s\\n\", str);\n    }\n}\n\npublic class Main {\n    public static int ipToInt(String ipAddress) {\n        try {\n            InetAddress inetAddress = InetAddress.getByName(ipAddress);\n            byte[] bytes = inetAddress.getAddress();\n\n            int result = 0;\n            for (byte b : bytes) {\n                result = result &lt;&lt; 8 | (b &amp; 0xFF);\n            }\n\n            return result;\n        } catch (UnknownHostException e) {\n            System.err.println(\"Invalid IP address: \" + ipAddress);\n            return 0;\n        }\n    }\n\n    public static void main(String[] args) {\n\n        System.setProperty(\"jna.encoding\",\"UTF-8\");\n\n        // \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n        System.out.printf(\"initialize the interface\\n\");\n\n        // \u521b\u5efa\u5b9e\u4f8b create an instance\n        Pointer data_queue_recv = tianzuo_DataQueueLib.instance.tianzuo_DataQueueInterface_initialize();\n\n        MyCallback callback = new MyCallbackImpl();\n        Pointer pcallback = CallbackReference.getFunctionPointer(callback);\n\n        Pointer zhuiri = tianzuo_ZhuiriLib.instance.tianzuo_ZhuiriInterface_initialize();\n        int port = 6666;\n        int error_code = tianzuo_ZhuiriLib.instance.tianzuo_ZhuiriInt_initialize(zhuiri, null, port, pcallback, data_queue_recv, 6000, false, null);\n        if (error_code != Zhuiri_error_code.Zhuiri_error_code_success.getValue()) {\n            System.out.printf(\"tianzuo_ZhuiriInt_initialize error: %d\\n\", error_code);\n            return;\n        }\n\n        // \u8bbe\u7f6e\u9ed8\u8ba4\u53c2\u6570 set default parameters\n        tianzuo_ZhuiriLib.instance.tianzuo_ZhuiriInt_set_param(zhuiri, 0, 5168, 1024, 2280, 3, 5, 600);\n\n        // \u5f00\u59cb\u53d1\u9001\u6570\u636e start sending data\n        String ipAddress = \"127.0.0.1\";\n        int ip = ipToInt(ipAddress);\n        int sport = 6666;\n        for (int i = 0; i &lt; 100; i++) {\n            String data = String.format(\"send data %d \", i);\n            int data_len = data.length();\n            int error_code2 = tianzuo_ZhuiriLib.instance.tianzuo_ZhuiriInt_send(zhuiri, 0, ip, sport, Zhuiri_data_sign.Zhuiri_data_sign_reliable.getValue(), 7788, data, data_len);\n            if (error_code2 != Zhuiri_error_code.Zhuiri_error_code_success.getValue()) {\n                System.out.printf(\"tianzuo_ZhuiriInt_send error: %d\\n\", error_code2);\n                return;\n            }\n        }\n\n        System.out.printf(\"test done\\n\");\n    }\n}\n</code></pre> csharp <pre><code>\n\nusing System.Collections;\nusing System.Net;\nusing System.Runtime.InteropServices;\nusing System.Text;\n\npublic enum Zhuiri_error_code\n{\n    Zhuiri_error_code_success       = 0x00000001,                                     ///&lt; \u6b63\u786e\u7684\u503c (success)\n    Zhuiri_error_code_no_rights     = 0x00000002,                                     ///&lt; \u6548\u9a8c\u672a\u901a\u8fc7 (no rights)\n    Zhuiri_error_code_socket        = 0x0000000D,                                     ///&lt; \u5957\u63a5\u5b57\u9519\u8bef (socket error)\n    Zhuiri_error_code_thread_error  = 0x00000021,                                     ///&lt; \u7ebf\u7a0b\u5931\u8d25 (thread error)\n    Zhuiri_error_code_handle        = 0x00000022,                                     ///&lt; \u521b\u5efa\u53e5\u67c4\u5931\u8d25 (handle error)\n    Zhuiri_error_code_out_of_cache  = 0x00000023,                                     ///&lt; \u8d85\u51fa\u7f13\u51b2\u6700\u5927\u503c (out f cache)\n    Zhuiri_error_code_out_of_memory = 0x00000024,                                     ///&lt; \u5185\u5b58\u6ea2\u51fa (out of memory)\n    Zhuiri_error_code_time_out      = 0x00000025,                                     ///&lt; \u64cd\u4f5c\u8d85\u65f6 (time out)\n    Zhuiri_error_code_user_reject   = 0x00000098,                                     ///&lt; \u5bf9\u65b9\u51b3\u7edd (user reject)\n    Zhuiri_error_code_user_exit     = 0x00000099,                                     ///&lt; \u81ea\u884c\u9000\u51fa (user exit)\n}\n\npublic enum Zhuiri_data_sign\n{\n    Zhuiri_data_sign_none       = 0x00000000,                                         ///&lt; \u65e0\u6807\u8bc6  (no sign)\n    Zhuiri_data_sign_reliable   = 0x00000001,                                         ///&lt; \u53ef\u9760    (reliable)\n    Zhuiri_data_sign_processing = 0x00000002,                                         ///&lt; \u5904\u7406\u4e2d  (processing)\n    Zhuiri_data_sign_response   = 0x00000003,                                         ///&lt; \u56de\u5e94\u6d88\u606f (response)\n    Zhuiri_data_sign_heart      = 0x00000004,                                         ///&lt; \u5fc3\u8df3\u5305  (heart)\n};\n\npublic struct Zhuiri_data_struct\n{\n    public Zhuiri_data_struct()\n    {\n    }\n    public int m_ip_adrs;\n    public int m_port;\n    public int m_function;\n    public int m_sign;\n    public int m_index;\n    public int m_send_time;\n    public int m_send_size;\n    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 492)]\n    public byte[] m_data;\n}\n\npublic struct Zhuiri_data_pkg_struct\n{\n    public Zhuiri_data_pkg_struct()\n    {\n    }\n    public Zhuiri_data_struct m_data;\n    public IntPtr m_send_data;\n    public IntPtr m_Zhuiri;\n    public IntPtr m_user_data;\n}\n\npublic delegate void CallbackDelegate(IntPtr context, IntPtr pData);\n\nclass Program\n{\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern IntPtr tianzuo_ZhuiriInterface_initialize();\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern void tianzuo_ZhuiriInterface_terminate(IntPtr Zhuiri);\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern int tianzuo_ZhuiriInt_initialize(IntPtr Zhuiri, string ip_addr, int port, IntPtr callback, IntPtr context, int heart_check_time, bool log_trace, IntPtr iocp);\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern IntPtr tianzuo_DataQueueInterface_initialize();\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern int tianzuo_ZhuiriInt_set_param(IntPtr Zhuiri, int sender_index, int init_server_port, int msg_init_size, int recv_ex_data_max, int retry_max, int retry_all_number, int init_retry_time);\n    [DllImport(\"tianzuo.Zhuiri.dll\")]\n    public static extern int tianzuo_ZhuiriInt_send(IntPtr Zhuiri, int sender_index, int ip, int port, int sign, int function, string send_data, int send_size);\n\n    static void MyCallback(IntPtr context, IntPtr pData)\n    {\n        Zhuiri_data_pkg_struct data = Marshal.PtrToStructure&lt;Zhuiri_data_pkg_struct&gt;(pData);\n        string str = Encoding.ASCII.GetString(data.m_data.m_data);\n        Console.WriteLine(\"recv data:\" + str);\n    }\n\n    static void Main(string[] args)\n    {\n        // \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n        Console.WriteLine(\"initialize the interface\\n\");\n\n        // \u521b\u5efa\u5b9e\u4f8b create an instance\n        IntPtr data_queue_recv = tianzuo_DataQueueInterface_initialize();\n\n        CallbackDelegate callback = new CallbackDelegate(MyCallback);\n        IntPtr callbackPtr = Marshal.GetFunctionPointerForDelegate(callback);\n\n        IntPtr zhuiri = tianzuo_ZhuiriInterface_initialize();\n        int port = 6666;\n        int error_code = tianzuo_ZhuiriInt_initialize(zhuiri, null, port, callbackPtr, data_queue_recv, 6000, false, 0);\n        if (error_code != ((int)Zhuiri_error_code.Zhuiri_error_code_success))\n        {\n            Console.WriteLine(\"tianzuo_ZhuiriInt_initialize error:\" + error_code);\n            return;\n        }\n\n        // \u8bbe\u7f6e\u9ed8\u8ba4\u53c2\u6570 set default parameters\n        tianzuo_ZhuiriInt_set_param(zhuiri, 0, 5168, 1024, 2280, 3, 5, 600);\n\n        // \u5f00\u59cb\u53d1\u9001\u6570\u636e start sending data\n        string ipAddressString = \"127.0.1.1\";\n        IPAddress ipAddress = IPAddress.Parse(ipAddressString);\n        byte[] bytes = ipAddress.GetAddressBytes();\n        if (BitConverter.IsLittleEndian)\n        {\n            Array.Reverse(bytes);\n        }\n        int ip = BitConverter.ToInt32(bytes, 0);\n        int sport = 6666;\n        for (int i = 0; i &lt; 100; i++)\n        {\n            string data = String.Format(\"send data {0}\", i);\n            int data_len = data.Length;\n            error_code = tianzuo_ZhuiriInt_send(zhuiri, 0, ip, sport, (int)Zhuiri_data_sign.Zhuiri_data_sign_reliable, 7788, data, data_len);\n            if (error_code != ((int)Zhuiri_error_code.Zhuiri_error_code_success))\n            {\n                Console.WriteLine(\"tianzuo_ZhuiriInt_send error:\" + error_code);\n                return;\n            }\n        }\n\n        Console.WriteLine(\"test done\");\n    }\n}\n\n</code></pre> javascript <pre><code>\n\nZhuiri_error_code_success       = 0x00000001;                                     ///&lt; \u6b63\u786e\u7684\u503c (success)\nZhuiri_error_code_no_rights     = 0x00000002;                                     ///&lt; \u6548\u9a8c\u672a\u901a\u8fc7 (no rights)\nZhuiri_error_code_socket        = 0x0000000D;                                     ///&lt; \u5957\u63a5\u5b57\u9519\u8bef (socket error)\nZhuiri_error_code_thread_error  = 0x00000021;                                     ///&lt; \u7ebf\u7a0b\u5931\u8d25 (thread error)\nZhuiri_error_code_handle        = 0x00000022;                                     ///&lt; \u521b\u5efa\u53e5\u67c4\u5931\u8d25 (handle error)\nZhuiri_error_code_out_of_cache  = 0x00000023;                                     ///&lt; \u8d85\u51fa\u7f13\u51b2\u6700\u5927\u503c (out f cache)\nZhuiri_error_code_out_of_memory = 0x00000024;                                     ///&lt; \u5185\u5b58\u6ea2\u51fa (out of memory)\nZhuiri_error_code_time_out      = 0x00000025;                                     ///&lt; \u64cd\u4f5c\u8d85\u65f6 (time out)\nZhuiri_error_code_user_reject   = 0x00000098;                                     ///&lt; \u5bf9\u65b9\u51b3\u7edd (user reject)\nZhuiri_error_code_user_exit     = 0x00000099;                                     ///&lt; \u81ea\u884c\u9000\u51fa (user exit)\n\nZhuiri_data_sign_none           = 0x00000000;                                     ///&lt; \u65e0\u6807\u8bc6  (no sign)\nZhuiri_data_sign_reliable       = 0x00000001;                                     ///&lt; \u53ef\u9760    (reliable)\nZhuiri_data_sign_processing     = 0x00000002;                                     ///&lt; \u5904\u7406\u4e2d  (processing)\nZhuiri_data_sign_response       = 0x00000003;                                     ///&lt; \u56de\u5e94\u6d88\u606f (response)\nZhuiri_data_sign_heart          = 0x00000004;                                     ///&lt; \u5fc3\u8df3\u5305  (heart)\n\nlet ffi = require('ffi-napi')\nconst ref = require('ref-napi');\n\nlet tianzuo_ZhuiriLib = ffi.Library(\"tianzuo.Zhuiri.dll\", {\n    'tianzuo_ZhuiriInterface_initialize': ['pointer', []],\n    'tianzuo_ZhuiriInterface_terminate':['void',['pointer']],\n    'tianzuo_ZhuiriInt_initialize':['int',['pointer','pointer','int','pointer','pointer','int', 'bool','pointer']],\n    'tianzuo_ZhuiriInt_set_param':['int',['pointer','int','int','int','int','int','int','int']],\n    'tianzuo_ZhuiriInt_send':['int',['pointer','int','int','int','int','int','string','int']],\n    'tianzuo_DataQueueInterface_initialize': ['pointer', []],\n    'tianzuo_DataQueueInterface_terminate':['void',['pointer']],\n})\n\nfunction ipToInt(ip) {\n    let parts = ip.split('.').map(Number);\n    return (parts[0] &lt;&lt; 24) + (parts[1] &lt;&lt; 16) + (parts[2] &lt;&lt; 8) + parts[3];\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve =&gt; setTimeout(resolve, ms));\n}\n\nasync function main() {\n\n    // \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n    console.log(\"initialize the interface\\n\");\n\n    // \u521b\u5efa\u5b9e\u4f8b create an instance\n    let data_queue_recv = tianzuo_ZhuiriLib.tianzuo_DataQueueInterface_initialize();\n\n    const callback = ffi.Callback('void', ['pointer', 'pointer'], function(context, pData) {\n        const data = pData.readCString(4*7);\n        console.log(`recv data: ${data}`);\n    });\n\n    let port = 5555;\n    let zhuiri = tianzuo_ZhuiriLib.tianzuo_ZhuiriInterface_initialize();\n    let error_code = tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_initialize(zhuiri, null, port, callback, data_queue_recv, 6000, false, null);\n    if (error_code !== Zhuiri_error_code_success) {\n        console.log(\"tianzuo_ZhuiriInt_initialize error: %d\\n\", error_code);\n        return;\n    }\n\n    // \u8bbe\u7f6e\u9ed8\u8ba4\u53c2\u6570 set default parameters\n    tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_set_param(zhuiri, 0, 5168, 1024, 2280, 3, 5, 600);\n\n    // \u5f00\u59cb\u53d1\u9001\u6570\u636e start sending data\n    const ipString = '127.0.0.1';\n    const ip = ipToInt(ipString);\n    let sport = 6666;\n\n    for (let i = 0; i &lt; 10; i++) {\n        const data = `send data ${i}`;\n        const data_len = data.length;\n        error_code = tianzuo_ZhuiriLib.tianzuo_ZhuiriInt_send(zhuiri, 0, ip, sport, Zhuiri_data_sign_reliable, 7788, data, data_len);\n        if (error_code !== Zhuiri_error_code_success) {\n            console.log(\"tianzuo_ZhuiriInt_send error: %d\\n\", error_code);\n            return;\n        }\n    }\n    await sleep(20000);\n}\n\nmain();\n\nconsole.log(\"test done\\n\");\n\n\n</code></pre> php <pre><code>&lt;?php\n\n// \u68c0\u67e5\u662f\u5426\u52a0\u8f7d\u4e86 FFI \u6269\u5c55\nif (extension_loaded('ffi')) {\n    echo(\"\u5df2\u542f\u7528 FFI \u6269\u5c55\\n\");\n} else {\n    die(\"\u672a\u542f\u52a8 FFI \u6269\u5c55\\n\");\n}\n\nenum Zhuiri_error_code\n{\nconst Zhuiri_error_code_success       = 0x00000001;                                     ///&lt; \u6b63\u786e\u7684\u503c (success)\nconst Zhuiri_error_code_no_rights     = 0x00000002;                                     ///&lt; \u6548\u9a8c\u672a\u901a\u8fc7 (no rights)\nconst Zhuiri_error_code_socket        = 0x0000000D;                                     ///&lt; \u5957\u63a5\u5b57\u9519\u8bef (socket error)\nconst Zhuiri_error_code_thread_error  = 0x00000021;                                     ///&lt; \u7ebf\u7a0b\u5931\u8d25 (thread error)\nconst Zhuiri_error_code_handle        = 0x00000022;                                     ///&lt; \u521b\u5efa\u53e5\u67c4\u5931\u8d25 (handle error)\nconst Zhuiri_error_code_out_of_cache  = 0x00000023;                                     ///&lt; \u8d85\u51fa\u7f13\u51b2\u6700\u5927\u503c (out f cache)\nconst Zhuiri_error_code_out_of_memory = 0x00000024;                                     ///&lt; \u5185\u5b58\u6ea2\u51fa (out of memory)\nconst Zhuiri_error_code_time_out      = 0x00000025;                                     ///&lt; \u64cd\u4f5c\u8d85\u65f6 (time out)\nconst Zhuiri_error_code_user_reject   = 0x00000098;                                     ///&lt; \u5bf9\u65b9\u51b3\u7edd (user reject)\nconst Zhuiri_error_code_user_exit     = 0x00000099;                                     ///&lt; \u81ea\u884c\u9000\u51fa (user exit)\n};\n\nenum Zhuiri_data_sign\n{\nconst Zhuiri_data_sign_none           = 0x00000000;                                     ///&lt; \u65e0\u6807\u8bc6  (no sign)\nconst Zhuiri_data_sign_reliable       = 0x00000001;                                     ///&lt; \u53ef\u9760    (reliable)\nconst Zhuiri_data_sign_processing     = 0x00000002;                                     ///&lt; \u5904\u7406\u4e2d  (processing)\nconst Zhuiri_data_sign_response       = 0x00000003;                                     ///&lt; \u56de\u5e94\u6d88\u606f (response)\nconst Zhuiri_data_sign_heart          = 0x00000004;                                     ///&lt; \u5fc3\u8df3\u5305  (heart)\n};\n\n$ffi = FFI::cdef(\"\n    void* tianzuo_ZhuiriInterface_initialize();\n    void tianzuo_ZhuiriInterface_terminate(void* *ZhuiriInt_pointer);\n    int tianzuo_ZhuiriInt_initialize(void* ZhuiriInt_pointer, const char* ip_addr, int port, const void* callback, const void* context, int const heart_check_time, bool log_trace, void* iocp);\n    int tianzuo_ZhuiriInt_set_param(void* ZhuiriInt_pointer, int sender_index, int init_server_port, int msg_init_size, int recv_ex_data_max, int retry_max, int retry_all_number, int init_retry_time);\n    int tianzuo_ZhuiriInt_send(void* ZhuiriInt_pointer, int sender_index, int ip, int port, int sign, int function, char* send_data, int send_size);\n    void* tianzuo_DataQueueInterface_initialize();\n    void tianzuo_DataQueueInterface_terminate(void* *DataQueue_pointer);\n    typedef unsigned(*Zhuiri_callback)(const void *context, const void *pData);\n\", \"tianzuo.Zhuiri.dll\");\n\n# \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\necho \"initialize the interface\" . \"\\n\";\n\n# \u521b\u5efa\u5b9e\u4f8b create an instance\n$data_queue_recv = $ffi-&gt;tianzuo_DataQueueInterface_initialize();\n\n\n//function myCallback($context, $pData) {\n//    echo \"phpCallback\" . \"\\n\";\n//}\n//\n//// Define the callback function signature\n//$callback = function($context, $pData) {\n//    myCallback($context, $pData);\n//};\n//\n//$callableCallback = FFI::addr($callback);\n\n\n//$phpCallback = function($context, $pData): void {\n//    echo \"phpCallback\" . \"\\n\";\n//};\n//$callback= FFI::new(\"Zhuiri_callback\", $phpCallback);\n\n\n$callback = $ffi-&gt;callback(\"void(const char*)\", function($message) {\n    echo \"Callback message: $message\\n\";\n});\n\n\n\n$port = 6666;\n$zhuiri = $ffi-&gt;tianzuo_ZhuiriInterface_initialize();\n$error_code = $ffi-&gt;tianzuo_ZhuiriInt_initialize($zhuiri, null, $port, $callback, $data_queue_recv, 6000, False, null);\nif ($error_code != Zhuiri_error_code::Zhuiri_error_code_success) {\n    echo \"initialize error: \" . $error_code . \"\\n\";\n    return;\n}\n\n# \u8bbe\u7f6e\u9ed8\u8ba4\u53c2\u6570 set default parameters\n$ffi-&gt;tianzuo_ZhuiriInt_set_param($zhuiri, 0, 5168, 1024, 2280, 3, 5, 600);\n\n# \u5f00\u59cb\u53d1\u9001\u6570\u636e start sending data\n$ip = ip2long(\"127.0.0.1\");\nfor ($i = 0; $i &lt; 10; $i++) {\n    $data = sprintf(\"send data %d\", $i);\n    $data_len = strlen($data);\n    echo \"ip: \" . $ip . \"\\n\";\n    echo \"port: \" . $port . \"\\n\";\n    echo \"send data: \" . $data . \"\\n\";\n    echo \"data_len: \" . $data_len . \"\\n\";\n    $error_code = $ffi-&gt;tianzuo_ZhuiriInt_send($zhuiri, 0, $ip, $port, Zhuiri_data_sign::Zhuiri_data_sign_reliable, 7788, $data, $data_len);\n    if ($error_code != Zhuiri_error_code::Zhuiri_error_code_success) {\n        echo \"send error: \" . $error_code . \"\\n\";\n        return;\n    }\n}\n\necho \"test done\" . \"\\n\";\n\n\n?&gt;\n</code></pre> vb <pre><code>\nImports System.IO\nImports System.Net\nImports System.Runtime.InteropServices\nImports System.Runtime.InteropServices.JavaScript.JSType\nImports System.Text\n\nEnum Zhuiri_error_code\n    Zhuiri_error_code_success = 1                                            ' \u6b63\u786e\u7684\u503c (success)\n    Zhuiri_error_code_no_rights = 2                                          ' \u6548\u9a8c\u672a\u901a\u8fc7 (no rights)\n    Zhuiri_error_code_socket = 13                                            ' \u5957\u63a5\u5b57\u9519\u8bef (socket Error)\n    Zhuiri_error_code_thread_error = 21                                      ' \u7ebf\u7a0b\u5931\u8d25 (thread Error)\n    Zhuiri_error_code_handle = 22                                            ' \u521b\u5efa\u53e5\u67c4\u5931\u8d25 (handle Error)\n    Zhuiri_error_code_out_of_cache = 23                                      ' \u8d85\u51fa\u7f13\u51b2\u6700\u5927\u503c (out f cache)\n    Zhuiri_error_code_out_of_memory = 24                                     ' \u5185\u5b58\u6ea2\u51fa (out Of memory)\n    Zhuiri_error_code_time_out = 25                                          ' \u64cd\u4f5c\u8d85\u65f6 (time out)\n    Zhuiri_error_code_user_reject = 98                                       ' \u5bf9\u65b9\u51b3\u7edd (user reject)\n    Zhuiri_error_code_user_exit = 99                                         ' \u81ea\u884c\u9000\u51fa (user Exit)\nEnd Enum\n\nEnum Zhuiri_data_sign\n    Zhuiri_data_sign_none = 0                                               ' \u65e0\u6807\u8bc6  (no sign)\n    Zhuiri_data_sign_reliable = 1                                           ' \u53ef\u9760    (reliable)\n    Zhuiri_data_sign_processing = 2                                         ' \u5904\u7406\u4e2d  (processing)\n    Zhuiri_data_sign_response = 3                                           ' \u56de\u5e94\u6d88\u606f (response)\n    Zhuiri_data_sign_heart = 4                                              ' \u5fc3\u8df3\u5305  (heart)\nEnd Enum\n\nStructure Zhuiri_data_struct\n    Public m_ip_adrs As Integer\n    Public m_port As Integer\n    Public m_function As Integer\n    Public m_sign As Integer\n    Public m_index As Integer\n    Public m_send_time As Integer\n    Public m_send_size As Integer\n    &lt;MarshalAs(UnmanagedType.ByValArray, SizeConst:=492)&gt;\n    Public m_data As Byte()\nEnd Structure\n\nStructure Zhuiri_data_pkg_struct\n    Public m_data As Zhuiri_data_struct\n    Public m_send_data As IntPtr\n    Public m_Zhuiri As IntPtr\n    Public m_user_data As IntPtr\nEnd Structure\n\nModule Program\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_ZhuiriInterface_initialize() As IntPtr\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_ZhuiriInterface_terminate(ByRef ZhuiriInt_pointer As IntPtr)\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_ZhuiriInt_initialize(ZhuiriInt_pointer As IntPtr, ip_addr As String, port As Integer,\n        callback As IntPtr, context As IntPtr, heart_check_time As Integer, log_trace As Boolean, iocp As IntPtr) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_ZhuiriInt_set_param(ZhuiriInt_pointer As IntPtr,\n        sender_index As Integer, init_server_port As Integer, msg_init_size As Integer,\n        recv_ex_data_max As Integer, retry_max As Integer, retry_all_number As Integer,\n        init_retry_time As Integer) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_ZhuiriInt_send(ZhuiriInt_pointer As IntPtr,\n        sender_index As Integer, ip As Integer, port As Integer, sign As Integer, func As Integer, send_data As String, send_size As Integer) As Integer\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_DataQueueInterface_initialize() As IntPtr\n    End Function\n    &lt;DllImport(\"tianzuo.Zhuiri.dll\")&gt;\n    Public Function tianzuo_DataQueueInterface_terminate(ByRef DataQueue_pointer As IntPtr)\n    End Function\n\n    Public Delegate Sub CallbackFunc(context As IntPtr, pData As IntPtr)\n\n    Public Sub msg_recv_callback(context As IntPtr, pData As IntPtr)\n        Dim data As Zhuiri_data_pkg_struct = Marshal.PtrToStructure(Of Zhuiri_data_pkg_struct)(pData)\n        Dim Str As String = Encoding.ASCII.GetString(data.m_data.m_data)\n        Console.WriteLine(\"recv data:\" + Str)\n    End Sub\n\n    Sub Main(args As String())\n\n        ' \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n        Console.WriteLine(\"initialize the interface\")\n\n        ' \u521b\u5efa\u5b9e\u4f8b create an instance\n        Dim data_queue_recv As IntPtr = tianzuo_DataQueueInterface_initialize()\n        Dim callbackDelegate As CallbackFunc = AddressOf msg_recv_callback\n        Dim callbackPtr As IntPtr = Marshal.GetFunctionPointerForDelegate(callbackDelegate)\n\n        Dim port As Integer = 6666\n        Dim Zhuiri As IntPtr = tianzuo_ZhuiriInterface_initialize()\n        Dim error_code As Integer = tianzuo_ZhuiriInt_initialize(Zhuiri, IntPtr.Zero, port, callbackPtr, data_queue_recv, 6000, False, IntPtr.Zero)\n        If (error_code &lt;&gt; Zhuiri_error_code.Zhuiri_error_code_success) Then\n            Console.WriteLine(\"tianzuo_ZhuiriInt_initialize error:\" + error_code.ToString)\n            Return\n        End If\n\n        ' \u8bbe\u7f6e\u9ed8\u8ba4\u53c2\u6570 Set Default parameters\n        tianzuo_ZhuiriInt_set_param(Zhuiri, 0, 5168, 1024, 2280, 3, 5, 600)\n\n        ' \u5f00\u59cb\u53d1\u9001\u6570\u636e start sending data\n        Dim ipAddressString As String = \"127.0.1.1\"\n        Dim ipAddress As IPAddress = IPAddress.Parse(ipAddressString)\n        Dim bytes As Byte() = ipAddress.GetAddressBytes()\n        If (BitConverter.IsLittleEndian) Then\n            Array.Reverse(bytes)\n        End If\n        Dim ip As Integer = BitConverter.ToInt32(bytes, 0)\n        Dim sport As Integer = 6666\n        For i As Integer = 0 To 99\n            Dim data As String = String.Format(\"send data {0}\", i)\n            Dim data_len As Integer = data.Length\n            error_code = tianzuo_ZhuiriInt_send(Zhuiri, 0, ip, sport, Zhuiri_data_sign.Zhuiri_data_sign_reliable, 7788, data, data_len)\n            If (error_code &lt;&gt; Zhuiri_error_code.Zhuiri_error_code_success) Then\n                Console.WriteLine(\"tianzuo_ZhuiriInt_send error:\" + error_code.ToString)\n                Return\n            End If\n        Next\n\n        Console.WriteLine(\"test done -------------------\")\n\n    End Sub\nEnd Module\n\n</code></pre> go <pre><code>package main\n\n/*\n#include \"tianzuo.ZhuiriInterface.h\"\nvoid msg_recv_callback_cgo(const void *context, const void *pData);\n*/\nimport \"C\"\nimport (\n    \"fmt\"\n    \"net\"\n    \"syscall\"\n    \"unsafe\"\n)\n\nconst (\n    Zhuiri_error_code_success       = 1  // \u6b63\u786e\u7684\u503c (success)\n    Zhuiri_error_code_no_rights     = 2  // \u6548\u9a8c\u672a\u901a\u8fc7 (no rights)\n    Zhuiri_error_code_socket        = 13 // \u5957\u63a5\u5b57\u9519\u8bef (socket error)\n    Zhuiri_error_code_thread_error  = 21 // \u7ebf\u7a0b\u5931\u8d25 (thread error)\n    Zhuiri_error_code_handle        = 22 // \u521b\u5efa\u53e5\u67c4\u5931\u8d25 (handle error)\n    Zhuiri_error_code_out_of_cache  = 23 // \u8d85\u51fa\u7f13\u51b2\u6700\u5927\u503c (out f cache)\n    Zhuiri_error_code_out_of_memory = 24 // \u5185\u5b58\u6ea2\u51fa (out of memory)\n    Zhuiri_error_code_time_out      = 25 // \u64cd\u4f5c\u8d85\u65f6 (time out)\n    Zhuiri_error_code_user_reject   = 98 // \u5bf9\u65b9\u51b3\u7edd (user reject)\n    Zhuiri_error_code_user_exit     = 99 // \u81ea\u884c\u9000\u51fa (user exit)\n)\n\nconst (\n    Zhuiri_data_sign_none       = 0 // \u65e0\u6807\u8bc6  (no sign)\n    Zhuiri_data_sign_reliable   = 1 // \u53ef\u9760    (reliable)\n    Zhuiri_data_sign_processing = 2 // \u5904\u7406\u4e2d  (processing)\n    Zhuiri_data_sign_response   = 3 // \u56de\u5e94\u6d88\u606f (response)\n    Zhuiri_data_sign_heart      = 4 // \u5fc3\u8df3\u5305  (heart)\n)\n\nfunc ipToInt(ip net.IP) uint32 {\n    ip = ip.To4()\n    if ip == nil {\n        return 0\n    }\n\n    ipInt := uint32(ip[0])&lt;&lt;24 | uint32(ip[1])&lt;&lt;16 | uint32(ip[2])&lt;&lt;8 | uint32(ip[3])\n    return ipInt\n}\n\ntype Zhuiri_data_pkg_struct C.Zhuiri_data_pkg_struct\n\n//export msg_recv_callback\nfunc msg_recv_callback(context unsafe.Pointer, pData unsafe.Pointer) {\n    data := *(*Zhuiri_data_pkg_struct)(unsafe.Pointer(pData))\n    charArray := data.m_data.m_data\n    goStr := C.GoString((*C.char)(unsafe.Pointer(&amp;charArray[0])))\n    fmt.Println(\"recv data:\", goStr)\n}\n\nfunc main() {\n    // \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n    dll := syscall.MustLoadDLL(\"tianzuo.Zhuiri.dll\")\n\n    // \u521b\u5efa\u5b9e\u4f8b create an instance\n    tianzuo_DataQueueInterface_initialize := dll.MustFindProc(\"tianzuo_DataQueueInterface_initialize\")\n    data_queue_recv, _, _ := tianzuo_DataQueueInterface_initialize.Call()\n\n    tianzuo_ZhuiriInterface_initialize := dll.MustFindProc(\"tianzuo_ZhuiriInterface_initialize\")\n    Zhuiri, _, _ := tianzuo_ZhuiriInterface_initialize.Call()\n\n    var ip uintptr\n    port := 6666\n    var iocp uintptr\n    tianzuo_ZhuiriInt_initialize := dll.MustFindProc(\"tianzuo_ZhuiriInt_initialize\")\n    msg_recv_callback_ptr := uintptr(unsafe.Pointer(C.msg_recv_callback_cgo))\n    error_code, _, _ := tianzuo_ZhuiriInt_initialize.Call(Zhuiri, ip, uintptr(C.int(port)), msg_recv_callback_ptr, data_queue_recv, 6000, uintptr(C.int(0)), iocp)\n    if error_code != Zhuiri_error_code_success {\n        fmt.Println(\"tianzuo_ZhuiriInt_initialize error: \", error_code)\n    }\n\n    // \u8bbe\u7f6e\u9ed8\u8ba4\u53c2\u6570 set default parameters\n    tianzuo_ZhuiriInt_set_param := dll.MustFindProc(\"tianzuo_ZhuiriInt_set_param\")\n    tianzuo_ZhuiriInt_set_param.Call(Zhuiri, 0, 5168, 1024, 2280, 3, 5, 600)\n\n    // \u5f00\u59cb\u53d1\u9001\u6570\u636e start sending data\n    ipStr := \"127.0.0.1\"\n    ipint := net.ParseIP(ipStr)\n    nip := ipToInt(ipint)\n    tianzuo_ZhuiriInt_send := dll.MustFindProc(\"tianzuo_ZhuiriInt_send\")\n    for i := 0; i &lt; 100; i++ {\n        data := \"send data %d\"\n        gdata := fmt.Sprintf(data, i)\n        cdata := C.CString(gdata)\n        gdata_len := len(gdata)\n        data_len := C.int(gdata_len)\n        error_code, _, _ = tianzuo_ZhuiriInt_send.Call(Zhuiri, 0, uintptr(C.int(nip)), uintptr(C.int(port)), Zhuiri_data_sign_reliable, 7788, uintptr(unsafe.Pointer(cdata)), uintptr(data_len))\n        if error_code != Zhuiri_error_code_success {\n            fmt.Println(\"tianzuo_ZhuiriInt_send error: \", error_code)\n            return\n        }\n    }\n\n    fmt.Println(\"test done -------------------\")\n}\n\n</code></pre> rust <pre><code>\nuse std::os::raw::c_char;\nuse std::ffi::{c_int};\nuse std::ffi::CString;\nuse std::ptr::null;\nuse std::mem;\n\ntype CallbackFunc = extern \"C\" fn(context: *mut std::ffi::c_void, pData: *mut std::ffi::c_void);\n\nstruct Zhuiri_data_struct {\n    m_ip_adrs: i32,\n    m_port: i32,\n    m_function: i32,\n    m_sign: i32,\n    m_index: i32,\n    m_send_time: i32,\n    m_send_size: i32,\n    m_data: [u8; 492],\n}\n\nstruct Zhuiri_data_pkg_struct {\n    m_data: Zhuiri_data_struct,\n    m_send_data: *const c_char,\n    m_Zhuiri: *mut std::ffi::c_void,\n    m_user_data: *mut std::ffi::c_void,\n}\n\n#[link(name = \"tianzuo.Zhuiri\")]\nextern {\n    fn tianzuo_ZhuiriInterface_initialize() -&gt; *mut std::ffi::c_void;\n    fn tianzuo_ZhuiriInterface_terminate(obj: *mut std::ffi::c_void);\n    fn tianzuo_ZhuiriInt_initialize(obj: *mut std::ffi::c_void, ip_addr: *const c_char, port: c_int, callback: *mut std::ffi::c_void, context: *mut std::ffi::c_void, heart_check_time: c_int, log_trace: c_int, iocp: *const std::ffi::c_void) -&gt; c_int;\n    fn tianzuo_ZhuiriInt_set_param(obj: *mut std::ffi::c_void, sender_index: c_int, init_server_port: c_int, msg_init_size: c_int, recv_ex_data_max: c_int, retry_max: c_int, retry_all_number: c_int, init_retry_time: c_int);\n    fn tianzuo_ZhuiriInt_send(obj: *mut std::ffi::c_void, sender_index: c_int, ip: c_int, port: c_int, sign: c_int, function: c_int, send_data: *const c_char, send_size: c_int) -&gt; c_int;\n    fn tianzuo_DataQueueInterface_initialize() -&gt; *mut std::ffi::c_void;\n    fn tianzuo_DataQueueInterface_terminate(obj: *mut std::ffi::c_void);\n    fn tianzuo_DataQueueInt_initializee(obj: *mut std::ffi::c_void);\n}\n\nextern \"C\" fn msg_recv_callback(context: *mut std::ffi::c_void, pData: *mut std::ffi::c_void) {\n    unsafe {\n        //println!(\"Rust callback function called\");\n        let data: &amp;mut Zhuiri_data_pkg_struct = unsafe { mem::transmute(pData) };\n        let string = std::str::from_utf8(&amp;data.m_data.m_data).unwrap();\n        println!(\"recv data: {}\", string);\n    }\n}\n\nfn ip_to_int(ip: &amp;str) -&gt; i32 {\n    let parts: Vec&lt;i32&gt; = ip.split('.').map(|part| part.parse().unwrap()).collect();\n    (parts[0] &lt;&lt; 24) + (parts[1] &lt;&lt; 16) + (parts[2] &lt;&lt; 8) + parts[3]\n}\n\nfn main() {\n    unsafe {\n        // \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\n        println!(\"initialize the interface\");\n\n        // \u521b\u5efa\u5b9e\u4f8b create an instance\n        let data_queue_recv = tianzuo_DataQueueInterface_initialize();\n\n        let pdata_queue_recv= data_queue_recv as *mut std::ffi::c_void;\n\n        let pmsg_recv_callback = msg_recv_callback as *mut std::ffi::c_void;\n\n        let zhuiri = tianzuo_ZhuiriInterface_initialize();\n        let port = 6666;\n        let error_code = tianzuo_ZhuiriInt_initialize(zhuiri, null(), port, pmsg_recv_callback, pdata_queue_recv, 6000, 0, null());\n        if 1 != error_code {\n            println!(\"tianzuo_ZhuiriInt_initialize error: {:?}\", error_code);\n        }\n\n        // \u8bbe\u7f6e\u9ed8\u8ba4\u53c2\u6570 set default parameters\n        tianzuo_ZhuiriInt_set_param(zhuiri,0, 5168, 1024, 2280, 3, 5, 600);\n\n        // \u5f00\u59cb\u53d1\u9001\u6570\u636e start sending data\n        let ip = ip_to_int(\"127.0.0.1\");\n        for i in 0..=99 {\n            let data = format!(\"send data {}\", i);\n            let data_str = CString::new(String::from(data.clone())).expect(\"Failed to create CString\");\n            let data_len = data.len() as i32;\n            let error_code = tianzuo_ZhuiriInt_send(zhuiri, 0, ip, port, 1, 7788, data_str.as_ptr(), data_len);\n            if 1 != error_code {\n                println!(\"tianzuo_ZhuiriInt_send error: {:?}\", error_code);\n            }\n        }\n\n        println!(\"test done -------------------\")\n    }\n}\n\n</code></pre> ruby <pre><code>require 'fiddle'\nrequire 'ipaddr'\n\nlib = Fiddle::dlopen('C:/Users/zhengtianzuo/RubymineProjects/tianzuo.ZhuiriTest/tianzuo.Zhuiri.dll')\ntianzuo_ZhuiriInterface_initialize = Fiddle::Function.new(lib['tianzuo_ZhuiriInterface_initialize'], [], Fiddle::TYPE_VOIDP)\ntianzuo_ZhuiriInterface_terminate = Fiddle::Function.new(lib['tianzuo_ZhuiriInterface_terminate'], [Fiddle::TYPE_VOIDP], Fiddle::TYPE_VOID)\ntianzuo_ZhuiriInt_initialize = Fiddle::Function.new(lib['tianzuo_ZhuiriInt_initialize'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP], Fiddle::TYPE_INT)\ntianzuo_ZhuiriInt_set_param = Fiddle::Function.new(lib['tianzuo_ZhuiriInt_set_param'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT], Fiddle::TYPE_INT)\ntianzuo_ZhuiriInt_send = Fiddle::Function.new(lib['tianzuo_ZhuiriInt_send'], [Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_INT], Fiddle::TYPE_INT)\ntianzuo_DataQueueInterface_initialize = Fiddle::Function.new(lib['tianzuo_DataQueueInterface_initialize'], [], Fiddle::TYPE_VOIDP)\ntianzuo_DataQueueInterface_terminate = Fiddle::Function.new(lib['tianzuo_DataQueueInterface_terminate'], [Fiddle::TYPE_VOIDP], Fiddle::TYPE_VOID)\n\ndef string_to_char_pointer(str)\n  ptr = Fiddle::Pointer[str]\n  ptr.to_s\nend\n\n# \u521d\u59cb\u5316\u63a5\u53e3 initialize the interface\nprint(\"initialize the interface\\n\")\n\n# \u521b\u5efa\u5b9e\u4f8b create an instance\ndata_queue_recv = tianzuo_DataQueueInterface_initialize.call()\n\ncallback = Fiddle::Closure::BlockCaller.new(Fiddle::TYPE_INT, [Fiddle::TYPE_VOIDP, Fiddle::TYPE_VOIDP]) do |context, pData|\n  puts \"callback function called\"\nend\n\nport = 6666\nzhuiri = tianzuo_ZhuiriInterface_initialize.call()\nerror_code = tianzuo_ZhuiriInt_initialize.call(zhuiri, nil, port, callback.to_i, data_queue_recv, 6000, 0, nil)\nif error_code != 1\n  print(\"initialize error:\", error_code, \"\\n\")\n  return\nend\n\n# \u8bbe\u7f6e\u9ed8\u8ba4\u53c2\u6570 set default parameters\ntianzuo_ZhuiriInt_set_param.call(zhuiri, 0, 5168, 1024, 2280, 3, 5, 600)\n\n# \u5f00\u59cb\u53d1\u9001\u6570\u636e start sending data\nip = IPAddr.new(\"127.0.0.1\").to_i\nfor i in 1..10\n  data = \"send data %d\" % [i]\n  data_len = data.length\n  error_code = tianzuo_ZhuiriInt_send.call(zhuiri, 0, ip, port, 1, 7788, data, data_len)\n  if error_code != 1\n    print(\"tianzuo_ZhuiriInt_send error:\", error_code, \"\\n\")\n    return\n  end\nend\n\n</code></pre>"},{"location":"en/component/tianzuo.Zhuiri/#download","title":"download","text":""},{"location":"en/other/","title":"other","text":""},{"location":"en/other/AllArticles/","title":"All Articles","text":""},{"location":"en/product/tianzuo.Fuxi/","title":"tianzuo.Fuxi","text":""},{"location":"en/product/tianzuo.Fuxi/#tianzuofuxi_1","title":"tianzuo.Fuxi","text":"operating system compiler programming language"},{"location":"en/product/tianzuo.Fuxi/#introduction","title":"introduction","text":"<p>tianzuo.Fuxi </p> <p>legend: The instrument made by Fuxi with jade and tencel has a gentle white light, and its sound can make people feel peaceful and peaceful. It is said to have a mysterious power that can dominate the hearts of all things.</p>"},{"location":"en/product/tianzuo.Fuxi/#motivation","title":"motivation","text":""},{"location":"en/product/tianzuo.Fuxi/#features","title":"features","text":""},{"location":"en/product/tianzuo.Fuxi/#screenshot","title":"screenshot","text":""},{"location":"en/product/tianzuo.Fuxi/#download","title":"download","text":""},{"location":"en/product/tianzuo.Kunlun/","title":"tianzuo.Kunlun","text":""},{"location":"en/product/tianzuo.Kunlun/#tianzuokunlun_1","title":"tianzuo.Kunlun","text":"operating system compiler programming language"},{"location":"en/product/tianzuo.Kunlun/#introduction","title":"introduction","text":"<p>tianzuo.Kunlun powerful local construction tools, provides all-round static detection, dynamic detection, code tools and various convenient plug-in tools for the project. Scan the program code through lexical analysis, syntax analysis, control flow, data flow analysis, memory detection, code coverage, hot function detection and other technologies to verify whether the code meets the standardization Safety, reliability, maintainability and other indicators. Deeply optimize the code according to the analysis results, improve the code quality and enhance the robustness of the product.</p> <p>legend: In the Kunlun Sky Palace in the Kunlun Mountain, the hometown of immortals, there is a legend that there is a god mirror, which has the power to travel freely through time and space. However, in a fairy pageant, the mirror was stolen by someone, and has been missing ever since.</p>"},{"location":"en/product/tianzuo.Kunlun/#motivation","title":"motivation","text":"<p>Build a local build tool that is easy to run and integrates various code inspections.</p> <p></p>"},{"location":"en/product/tianzuo.Kunlun/#features","title":"features","text":"<ul> <li>Workbench project indicators Collect various indicators of the project as part of the standard to measure the complexity of the project</li> <li>Workbench compilation run can compile projects manually or automatically</li> <li>Workbench Static detection scans the program code through lexical analysis, syntax analysis, control flow, data flow analysis and other technologies to check the consistency of code and design, code compliance with standards, readability, the correctness of the logical expression of the code, the rationality of the code structure and other aspects</li> <li>Workbench Dynamic detection By memory detection, code coverage, hot spot function detection and other technologies according to the analysis results of the code is deeply optimized. Improve code quality and product robustness</li> <li>Workbench Code tool automates code formatting and generates project documentation</li> <li>Toolkit covers all aspects of communication/graphics/design/conversion/generation/miscellaneous gadgets</li> <li>Data bag can record usually used code to the data bag, at any time to browse and copy</li> </ul>"},{"location":"en/product/tianzuo.Kunlun/#screenshot","title":"screenshot","text":""},{"location":"en/product/tianzuo.Kunlun/#support","title":"support","text":""},{"location":"en/product/tianzuo.Kunlun/#support-content","title":"support content","text":"name support developing operating system programming language project type"},{"location":"en/product/tianzuo.Kunlun/#download","title":"download","text":""},{"location":"en/product/tianzuo.Pangu/","title":"tianzuo.Pangu","text":""},{"location":"en/product/tianzuo.Pangu/#tianzuopangu_1","title":"tianzuo.Pangu","text":"operating system compiler programming language"},{"location":"en/product/tianzuo.Pangu/#introduction","title":"introduction","text":"<p>tianzuo.Pangu Instant messaging platform, using self-developed distributed storage and UDP reliable P2P network transmission technology, self-developed IM communication protocol, covering mainstream platforms, plug-in high scalability, OpenGL rendering high smooth UI, supporting integrated web applications, can be deployed privately or in the public cloud.</p> <p>legend: According to legend, at the beginning of the chaos of heaven and earth, Pangu woke up from his sleep and saw the darkness of heaven and earth, so he reached out and took out a huge axe to split the earth and earth, and since then there is our world. This axe has the power to separate heaven and earth and shuttle too empty, and the power is not the Xuanyuan sword. Rumor has it that whoever controls the Pangu axe controls the Law of power.</p>"},{"location":"en/product/tianzuo.Pangu/#motivation","title":"motivation","text":"<p>Build CS architecture IM communication system, support text/expression/picture/voice/video/remote desktop/remote control/whiteboard and other functions.</p>"},{"location":"en/product/tianzuo.Pangu/#features","title":"features","text":"<ul> <li>\ud83e\udde9 simple integration</li> <li>\ud83d\udce6 private deployment is supported</li> <li>\ud83e\udea2 chat data point-to-point encryption, independently developed IM protocol, network library using 'Tenzo. Day Boot 'software development kit</li> <li>\ud83d\udcd2 save chat logs locally, use 'Tenzo' database. Qiankun Bag 'software development kit</li> </ul>"},{"location":"en/product/tianzuo.Pangu/#screenshot","title":"screenshot","text":"<p>tianzuo.Pangu Demo:</p> <p> </p>"},{"location":"en/product/tianzuo.Pangu/#download","title":"download","text":""},{"location":"en/technology/C%2B%2B/#introduction","title":"introduction","text":"<p>C++ is an object-oriented computer programming language invented and implemented in the early 80s of the 20th century by Dr. Benjani Strausstrup of AT&amp;T Bell Laboratories in the United States (originally this language was called \"C with Classes\"). It is a general-purpose programming language that supports multiple programming paradigms with static data type checking. It supports a variety of programming styles such as procedural programming, data abstraction, object-oriented programming, and generic programming. C++ is the inheritance of the C language, which further expands and improves the C language and becomes an object-oriented programming language. The word C++ is usually pronounced as \"C plus plus\" in Chinese mainland programmer circles, while Western programmers usually pronounce it as \"C plus plus\", \"CPP\".</p> Chinese name C++ language Founder BjarneStroustrup Foreign name The C++ Programming Language Founding Company Bell Labs Category Computer Programming Languages Basic Contents Classes, Encapsulation, Overloading, Inheritance, Templates First use December 1983 Founder Benjani Strausstrup"},{"location":"en/technology/C%2B%2B/#roadmap","title":"roadmap:","text":""},{"location":"en/technology/CSharp/#introduction","title":"introduction","text":"<p>CSharp is an object-oriented, user-oriented, and . A high-level programming language on top of the .NET Framework. It is scheduled to appear on the Microsoft Professional Developer Forum (PDC). CSharp is the latest work of Microsoft researcher Anders Hejlsberg. CSharp looks strikingly similar to Java; It includes things like single inheritance, interfaces, almost the same syntax as Java, and the process of compiling into intermediate code and running it. But CSharp is distinctly different from Java in that it borrows from Delphi in that it integrates directly with COM (Component Object Model) and is the protagonist of Microsoft's .NET windows web framework.</p> Foreign name CSharp aliases CSHARP Category Object-Oriented Programming Languages Release time June 2000 Publisher Microsoft Developer Anders Halesberg"},{"location":"en/technology/CSharp/#roadmap","title":"roadmap:","text":""},{"location":"en/technology/DevelopmentTools/","title":"DevelopmentTools","text":""},{"location":"en/technology/Go/#introduction","title":"introduction","text":"<p>The Go language is a statically typed, compiled, and concurrent programming language developed by Google, featuring garbage collection. It critically assimilates the strengths of languages such as C and Java, embodying simplicity and efficiency to the fullest extent.</p> <p>The Go language originated in 2007 when Google's technical experts were increasingly troubled by the growing bloat of C++. They resolved to develop a new language to replace C++. They believed that rather than continually adding new features to a bloated language, it would be better to simplify programming languages. Thus, the new language Golang was born.</p>"},{"location":"en/technology/Go/#roadmap","title":"roadmap:","text":""},{"location":"en/technology/Java/#introduction","title":"introduction","text":"<p>Java is an object-oriented programming language that not only incorporates various advantages of C++ but also discards concepts such as complex multiple inheritance and pointers found in C++. As a result, the Java language possesses two key characteristics: powerful functionality and ease of use. Representing static object-oriented programming languages, Java effectively realizes object-oriented theory, allowing programmers to engage in complex programming with an elegant mindset. Java is characterized by simplicity, object orientation, distribution, robustness, security, platform independence and portability, multithreading, and dynamism. Java can be used to develop desktop applications, web applications, distributed systems, and embedded system applications.</p>"},{"location":"en/technology/Java/#roadmap","title":"roadmap:","text":""},{"location":"en/technology/JavaScript/#introduction","title":"introduction","text":"<p>JavaScript is a dynamic programming language that is widely used in web development, primarily to enhance the interactivity and dynamism of web pages. As one of the core technologies of web development, it collaborates with HTML and CSS, where HTML defines the content structure of web pages, CSS handles styling and layout, and JavaScript controls the behavior and interaction of web pages. Users can utilize JavaScript for various functions such as event handling, form validation, and animation creation. Furthermore, the application of JavaScript has expanded to server-side (such as Node.js), mobile application development, and game development, making it an indispensable part of modern programming environments. Its cross-platform and high adaptability characteristics have made JavaScript one of the most popular and widely used scripting languages globally.</p>"},{"location":"en/technology/JavaScript/#roadmap","title":"roadmap:","text":""},{"location":"en/technology/NetWork/","title":"NetWork","text":""},{"location":"en/technology/OperatingSystem/","title":"OperatingSystem","text":""},{"location":"en/technology/PHP/#introduction","title":"introduction","text":"<p>PHP (PHP: Hypertext Preprocessor, Chinese: Hypertext Preprocessor) is a general-purpose open-source scripting language. The syntax absorbs the characteristics of C language, Java and Perl, which is easy to learn and widely used, mainly applicable to the field of web development. PHP's unique syntax is a mix of C, Java, Perl, and PHP's own syntax. It can execute dynamic web pages much faster than CGI or Perl. Compared with other programming languages, PHP embeds the program into HTML (an application under the standard Universal Markup Language) document to execute, which is much more efficient than CGI that fully generates HTML markup. PHP can also execute compiled code, which can be encrypted and optimized to run, making the code run faster.</p> Chinese name hypertext preprocessor Foreign name Hyper Text Preprocessor Programming paradigms object-oriented, imperative programming Designer Rasmus Lerdorf Maintenance The PHP Group Foreign language abbreviation PHP"},{"location":"en/technology/PHP/#roadmap","title":"roadmap:","text":""},{"location":"en/technology/Python/#introduction","title":"introduction","text":"<p>Python, pronounced /\u02c8pa\u026a\u03b8\u0259n/ in British English and /\u02c8pa\u026a\u03b8\u0251\u02d0n/ in American English, is a computer programming language developed by Dutch scientist Guido van Rossum during the year 1989. In the Python language, everything is an object, including functions, which also possess their own attributes. Python is an interpreted programming language, and when running Python programs, it is necessary to have the interpreter translate the Python code.</p> <p>Python is an unrestricted, cross-platform open-source programming language known for its fast data processing speed, powerful features, and ease of learning, making it widely used in data analysis and processing. Furthermore, Python operates in an interpreted manner, allowing code to be executed directly through the interpreter without the need for compilation, which is characteristic of dynamic languages and results in high programming efficiency. Python is a fully object-oriented language, where numbers, modules, strings, and data structures are all objects, and it supports common class concepts such as inheritance, overloading, derivation, and multiple inheritance.</p> <p>On July 20, 2017, IEEE released the 2017 programming language rankings, with Python ranking first. In March 2018, the language's author announced on a mailing list that support for Python 2.7 would end on January 1, 2020. Users wishing to continue receiving support related to Python 2.7 after this date would need to pay commercial vendors for assistance.</p>"},{"location":"en/technology/Python/#roadmap","title":"roadmap:","text":""},{"location":"en/technology/Ruby/#introduction","title":"introduction","text":"<p>Ruby, a scripting language created for simple and efficient object-oriented programming, was developed in the 1990s by Yukihiro Matsumoto in Japan, adhering to the GPL and Ruby License. Ruby is a programming language that is fully object-oriented with syntax similar to Smalltalk, script execution capabilities, and powerful text processing features akin to Perl. Its inspiration and characteristics are derived from Perl, Smalltalk, Eiffel, Ada, and Lisp languages. The Ruby language itself has also led to the development of alternatives such as JRuby (for the Java platform) and IronRuby (for the .NET platform). Ruby began development on February 24, 1993, and was officially released to the public in December 1995 on fj (newsgroup). The name Ruby was chosen because the pronunciation of Perl is similar to that of the birthstone for June, pearl, while Ruby is named after the birthstone for July, ruby.</p>"},{"location":"en/technology/Ruby/#roadmap","title":"roadmap:","text":""},{"location":"en/technology/Rust/#introduction","title":"introduction","text":"<p>Rust is a systems programming language that emphasizes high performance, reliability, and productivity, supporting various programming paradigms such as structured programming, functional programming, and object-oriented programming. </p> <p>Rust is a compiled language that does not have a runtime or garbage collector. It employs an ownership mechanism to achieve automatic memory management, thereby ensuring memory safety. Rust is an open-source project currently hosted on GitHub, and both Rust and all other official projects are dual-licensed under the Apache License 2.0 and the MIT License. The official package manager for Rust is Cargo.</p>"},{"location":"en/technology/Rust/#roadmap","title":"roadmap:","text":""},{"location":"en/technology/VisualBasic/#introduction","title":"introduction","text":"<p>Visual Basic (abbreviated as VB) is a general-purpose object-based programming language developed by Microsoft, designed for structured, modular, object-oriented programming, featuring an event-driven mechanism with an integrated development environment. It is a language that can be used for the development of Microsoft's own products. \"Visual\" refers to the method of developing graphical user interfaces (GUIs) without the need to write extensive code to describe the appearance and position of interface elements, but rather by simply adding pre-established objects to a point on the screen. \"Basic\" refers to the BASIC (Beginners All-Purpose Symbolic Instruction Code) language, which is one of the most widely used languages in the history of computing technology development. Visual Basic is derived from the BASIC programming language. VB features a graphical user interface (GUI) and a rapid application development (RAD) system, allowing for easy use of DAO, RDO, and ADO to connect to databases, or to effortlessly create ActiveX controls for efficiently generating type-safe and object-oriented applications. Programmers can quickly build an application using the components provided by VB.</p>"},{"location":"en/technology/VisualBasic/#roadmap","title":"roadmap:","text":""},{"location":"en/technology/Cpp/Building/","title":"Building","text":""},{"location":"en/technology/Cpp/CodeSmell/","title":"Code Smell","text":""},{"location":"en/technology/Cpp/Debugging/","title":"Debugging","text":""},{"location":"en/technology/Cpp/DynamicAnalysis/","title":"Dynamic Analysis","text":""},{"location":"en/technology/Cpp/Performance/","title":"Performance","text":""},{"location":"en/technology/Cpp/StaticAnalysis/","title":"Static Analysis","text":""}]}